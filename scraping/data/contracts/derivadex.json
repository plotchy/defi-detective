[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DerivaDEX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { LibDiamondCut } from \\\"./diamond/LibDiamondCut.sol\\\";\\nimport { DiamondFacet } from \\\"./diamond/DiamondFacet.sol\\\";\\nimport { OwnershipFacet } from \\\"./diamond/OwnershipFacet.sol\\\";\\nimport { LibDiamondStorage } from \\\"./diamond/LibDiamondStorage.sol\\\";\\nimport { IDiamondCut } from \\\"./diamond/IDiamondCut.sol\\\";\\nimport { IDiamondLoupe } from \\\"./diamond/IDiamondLoupe.sol\\\";\\nimport { IERC165 } from \\\"./diamond/IERC165.sol\\\";\\nimport { LibDiamondStorageDerivaDEX } from \\\"./storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { IDDX } from \\\"./tokens/interfaces/IDDX.sol\\\";\\n\\n/**\\n * @title DerivaDEX\\n * @author DerivaDEX\\n * @notice This is the diamond for DerivaDEX. All current\\n *         and future logic runs by way of this contract.\\n * @dev This diamond implements the Diamond Standard (EIP #2535).\\n */\\ncontract DerivaDEX {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice This constructor initializes the upgrade machinery (as\\n     *         per the Diamond Standard), sets the admin of the proxy\\n     *         to be the deploying address (very temporary), and sets\\n     *         the native DDX governance/operational token.\\n     * @param _ddxToken The native DDX token address.\\n     */\\n    constructor(IDDX _ddxToken) public {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Temporarily set admin to the deploying address to facilitate\\n        // adding the Diamond functions\\n        dsDerivaDEX.admin = msg.sender;\\n\\n        // Set DDX token address for token logic in facet contracts\\n        require(address(_ddxToken) != address(0), \\\"DerivaDEX: ddx token is zero address.\\\");\\n        dsDerivaDEX.ddxToken = _ddxToken;\\n\\n        emit OwnershipTransferred(address(0), msg.sender);\\n\\n        // Create DiamondFacet contract -\\n        // implements DiamondCut interface and DiamondLoupe interface\\n        DiamondFacet diamondFacet = new DiamondFacet();\\n\\n        // Create OwnershipFacet contract which implements ownership\\n        // functions and supportsInterface function\\n        OwnershipFacet ownershipFacet = new OwnershipFacet();\\n\\n        IDiamondCut.FacetCut[] memory diamondCut = new IDiamondCut.FacetCut[](2);\\n\\n        // adding diamondCut function and diamond loupe functions\\n        diamondCut[0].facetAddress = address(diamondFacet);\\n        diamondCut[0].action = IDiamondCut.FacetCutAction.Add;\\n        diamondCut[0].functionSelectors = new bytes4[](6);\\n        diamondCut[0].functionSelectors[0] = DiamondFacet.diamondCut.selector;\\n        diamondCut[0].functionSelectors[1] = DiamondFacet.facetFunctionSelectors.selector;\\n        diamondCut[0].functionSelectors[2] = DiamondFacet.facets.selector;\\n        diamondCut[0].functionSelectors[3] = DiamondFacet.facetAddress.selector;\\n        diamondCut[0].functionSelectors[4] = DiamondFacet.facetAddresses.selector;\\n        diamondCut[0].functionSelectors[5] = DiamondFacet.supportsInterface.selector;\\n\\n        // adding ownership functions\\n        diamondCut[1].facetAddress = address(ownershipFacet);\\n        diamondCut[1].action = IDiamondCut.FacetCutAction.Add;\\n        diamondCut[1].functionSelectors = new bytes4[](2);\\n        diamondCut[1].functionSelectors[0] = OwnershipFacet.transferOwnershipToSelf.selector;\\n        diamondCut[1].functionSelectors[1] = OwnershipFacet.getAdmin.selector;\\n\\n        // execute internal diamondCut function to add functions\\n        LibDiamondCut.diamondCut(diamondCut, address(0), new bytes(0));\\n\\n        // adding ERC165 data\\n        ds.supportedInterfaces[IERC165.supportsInterface.selector] = true;\\n        ds.supportedInterfaces[IDiamondCut.diamondCut.selector] = true;\\n        bytes4 interfaceID =\\n            IDiamondLoupe.facets.selector ^\\n                IDiamondLoupe.facetFunctionSelectors.selector ^\\n                IDiamondLoupe.facetAddresses.selector ^\\n                IDiamondLoupe.facetAddress.selector;\\n        ds.supportedInterfaces[interfaceID] = true;\\n    }\\n\\n    // TODO(jalextowle): Remove this linter directive when\\n    // https://github.com/protofire/solhint/issues/248 is merged and released.\\n    /* solhint-disable ordering */\\n    receive() external payable {\\n        revert(\\\"DerivaDEX does not directly accept ether.\\\");\\n    }\\n\\n    // Finds facet for function that is called and executes the\\n    // function if it is found and returns any value.\\n    fallback() external payable {\\n        LibDiamondStorage.DiamondStorage storage ds;\\n        bytes32 position = LibDiamondStorage.DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds_slot := position\\n        }\\n        address facet = ds.selectorToFacetAndPosition[msg.sig].facetAddress;\\n        require(facet != address(0), \\\"Function does not exist.\\\");\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(0, 0, size)\\n            switch result\\n                case 0 {\\n                    revert(0, size)\\n                }\\n                default {\\n                    return(0, size)\\n                }\\n        }\\n    }\\n    /* solhint-enable ordering */\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/LibDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of internal diamondCut function.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"./IDiamondCut.sol\\\";\\n\\nlibrary LibDiamondCut {\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    // This code is almost the same as the external diamondCut,\\n    // except it is using 'FacetCut[] memory _diamondCut' instead of\\n    // 'FacetCut[] calldata _diamondCut'.\\n    // The code is duplicated to prevent copying calldata to memory which\\n    // causes an error for a two dimensional array.\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        require(_diamondCut.length > 0, \\\"LibDiamondCut: No facets to cut\\\");\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            addReplaceRemoveFacetSelectors(\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addReplaceRemoveFacetSelectors(\\n        address _newFacetAddress,\\n        IDiamondCut.FacetCutAction _action,\\n        bytes4[] memory _selectors\\n    ) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        require(_selectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        // add or replace functions\\n        if (_newFacetAddress != address(0)) {\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_newFacetAddress].facetAddressPosition;\\n            // add new facet address if it does not exist\\n            if (\\n                facetAddressPosition == 0 && ds.facetFunctionSelectors[_newFacetAddress].functionSelectors.length == 0\\n            ) {\\n                ensureHasContractCode(_newFacetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n                facetAddressPosition = ds.facetAddresses.length;\\n                ds.facetAddresses.push(_newFacetAddress);\\n                ds.facetFunctionSelectors[_newFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            // add or replace selectors\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n                // add\\n                if (_action == IDiamondCut.FacetCutAction.Add) {\\n                    require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n                    addSelector(_newFacetAddress, selector);\\n                } else if (_action == IDiamondCut.FacetCutAction.Replace) {\\n                    // replace\\n                    require(\\n                        oldFacetAddress != _newFacetAddress,\\n                        \\\"LibDiamondCut: Can't replace function with same function\\\"\\n                    );\\n                    removeSelector(oldFacetAddress, selector);\\n                    addSelector(_newFacetAddress, selector);\\n                } else {\\n                    revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n                }\\n            }\\n        } else {\\n            require(\\n                _action == IDiamondCut.FacetCutAction.Remove,\\n                \\\"LibDiamondCut: action not set to FacetCutAction.Remove\\\"\\n            );\\n            // remove selectors\\n            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {\\n                bytes4 selector = _selectors[selectorIndex];\\n                removeSelector(ds.selectorToFacetAndPosition[selector].facetAddress, selector);\\n            }\\n        }\\n    }\\n\\n    function addSelector(address _newFacet, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 selectorPosition = ds.facetFunctionSelectors[_newFacet].functionSelectors.length;\\n        ds.facetFunctionSelectors[_newFacet].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _newFacet;\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = uint16(selectorPosition);\\n    }\\n\\n    function removeSelector(address _oldFacetAddress, bytes4 _selector) internal {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        require(_oldFacetAddress != address(0), \\\"LibDiamondCut: Can't remove or replace function that doesn't exist\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors.length - 1;\\n        bytes4 lastSelector = ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors[lastSelectorPosition];\\n        // if not the same then replace _selector with lastSelector\\n        if (lastSelector != _selector) {\\n            ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint16(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_oldFacetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_oldFacetAddress].facetAddressPosition;\\n            if (_oldFacetAddress != lastFacetAddress) {\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = uint16(facetAddressPosition);\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_oldFacetAddress];\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                LibDiamondCut.ensureHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function ensureHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/DiamondFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n*\\n* Implementation of diamondCut external function and DiamondLoupe interface.\\n/******************************************************************************/\\n\\nimport \\\"./LibDiamondStorage.sol\\\";\\nimport \\\"./LibDiamondCut.sol\\\";\\nimport \\\"../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport \\\"./IDiamondCut.sol\\\";\\nimport \\\"./IDiamondLoupe.sol\\\";\\nimport \\\"./IERC165.sol\\\";\\n\\ncontract DiamondFacet is IDiamondCut, IDiamondLoupe, IERC165 {\\n    // Standard diamondCut external function\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external override {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"DiamondFacet: Must own the contract\\\");\\n        require(_diamondCut.length > 0, \\\"DiamondFacet: No facets to cut\\\");\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            LibDiamondCut.addReplaceRemoveFacetSelectors(\\n                _diamondCut[facetIndex].facetAddress,\\n                _diamondCut[facetIndex].action,\\n                _diamondCut[facetIndex].functionSelectors\\n            );\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        LibDiamondCut.initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    // Diamond Loupe Functions\\n    ////////////////////////////////////////////////////////////////////\\n    /// These functions are expected to be called frequently by tools.\\n    //\\n    // struct Facet {\\n    //     address facetAddress;\\n    //     bytes4[] functionSelectors;\\n    // }\\n    //\\n    /// @notice Gets all facets and their selectors.\\n    /// @return facets_ Facet\\n    function facets() external view override returns (Facet[] memory facets_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        uint256 numFacets = ds.facetAddresses.length;\\n        facets_ = new Facet[](numFacets);\\n        for (uint256 i; i < numFacets; i++) {\\n            address facetAddress_ = ds.facetAddresses[i];\\n            facets_[i].facetAddress = facetAddress_;\\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\\n        }\\n    }\\n\\n    /// @notice Gets all the function selectors provided by a facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet)\\n        external\\n        view\\n        override\\n        returns (bytes4[] memory facetFunctionSelectors_)\\n    {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\\n    }\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view override returns (address[] memory facetAddresses_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddresses_ = ds.facetAddresses;\\n    }\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view override returns (address facetAddress_) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\\n    }\\n\\n    // This implements ERC-165.\\n    function supportsInterface(bytes4 _interfaceId) external view override returns (bool) {\\n        LibDiamondStorage.DiamondStorage storage ds = LibDiamondStorage.diamondStorage();\\n        return ds.supportedInterfaces[_interfaceId];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/OwnershipFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { LibDiamondStorageDerivaDEX } from \\\"../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStorage } from \\\"../diamond/LibDiamondStorage.sol\\\";\\nimport { IERC165 } from \\\"./IERC165.sol\\\";\\n\\ncontract OwnershipFacet {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @notice This function transfers ownership to self. This is done\\n     *         so that we can ensure upgrades (using diamondCut) and\\n     *         various other critical parameter changing scenarios\\n     *         can only be done via governance (a facet).\\n     */\\n    function transferOwnershipToSelf() external {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"Not authorized\\\");\\n        dsDerivaDEX.admin = address(this);\\n\\n        emit OwnershipTransferred(msg.sender, address(this));\\n    }\\n\\n    /**\\n     * @notice This gets the admin for the diamond.\\n     * @return Admin address.\\n     */\\n    function getAdmin() external view returns (address) {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        return dsDerivaDEX.admin;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/LibDiamondStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nlibrary LibDiamondStorage {\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the facet address in the facetAddresses array\\n        // and the position of the selector in the facetSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction { Add, Replace, Remove }\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/IDiamondLoupe.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n/******************************************************************************/\\n\\nimport \\\"./IDiamondCut.sol\\\";\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/storage/LibDiamondStorageDerivaDEX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IDDX } from \\\"../tokens/interfaces/IDDX.sol\\\";\\n\\nlibrary LibDiamondStorageDerivaDEX {\\n    struct DiamondStorageDerivaDEX {\\n        string name;\\n        address admin;\\n        IDDX ddxToken;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION_DERIVADEX =\\n        keccak256(\\\"diamond.standard.diamond.storage.DerivaDEX.DerivaDEX\\\");\\n\\n    function diamondStorageDerivaDEX() internal pure returns (DiamondStorageDerivaDEX storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION_DERIVADEX;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IDDX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IDDX {\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function delegate(address _delegatee) external;\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DDXWalletCloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IDDX } from \\\"./interfaces/IDDX.sol\\\";\\n\\n/**\\n * @title DDXWalletCloneable\\n * @author DerivaDEX\\n * @notice This is a cloneable on-chain DDX wallet that holds a trader's\\n *         stakes and issued rewards.\\n */\\ncontract DDXWalletCloneable {\\n    // Whether contract has already been initialized once before\\n    bool initialized;\\n\\n    /**\\n     * @notice This function initializes the on-chain DDX wallet\\n     *         for a given trader.\\n     * @param _trader Trader address.\\n     * @param _ddxToken DDX token address.\\n     * @param _derivaDEX DerivaDEX Proxy address.\\n     */\\n    function initialize(\\n        address _trader,\\n        IDDX _ddxToken,\\n        address _derivaDEX\\n    ) external {\\n        // Prevent initializing more than once\\n        require(!initialized, \\\"DDXWalletCloneable: already init.\\\");\\n        initialized = true;\\n\\n        // Automatically delegate the holdings of this contract/wallet\\n        // back to the trader.\\n        _ddxToken.delegate(_trader);\\n\\n        // Approve the DerivaDEX Proxy contract for unlimited transfers\\n        _ddxToken.approve(_derivaDEX, uint96(-1));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/trader/Trader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath96 } from \\\"../../libs/SafeMath96.sol\\\";\\nimport { TraderDefs } from \\\"../../libs/defs/TraderDefs.sol\\\";\\nimport { LibDiamondStorageDerivaDEX } from \\\"../../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStorageTrader } from \\\"../../storage/LibDiamondStorageTrader.sol\\\";\\nimport { DDXWalletCloneable } from \\\"../../tokens/DDXWalletCloneable.sol\\\";\\nimport { IDDX } from \\\"../../tokens/interfaces/IDDX.sol\\\";\\nimport { IDDXWalletCloneable } from \\\"../../tokens/interfaces/IDDXWalletCloneable.sol\\\";\\nimport { LibTraderInternal } from \\\"./LibTraderInternal.sol\\\";\\n\\n/**\\n * @title Trader\\n * @author DerivaDEX\\n * @notice This is a facet to the DerivaDEX proxy contract that handles\\n *         the logic pertaining to traders - staking DDX, withdrawing\\n *         DDX, receiving DDX rewards, etc.\\n */\\ncontract Trader {\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event RewardCliffSet(bool rewardCliffSet);\\n\\n    event DDXRewardIssued(address trader, uint96 amount);\\n\\n    /**\\n     * @notice Limits functions to only be called via governance.\\n     */\\n    modifier onlyAdmin {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"Trader: must be called by Gov.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Limits functions to only be called post reward cliff.\\n     */\\n    modifier postRewardCliff {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n        require(dsTrader.rewardCliff, \\\"Trader: prior to reward cliff.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice This function initializes the state with some critical\\n     *         information, including the on-chain wallet cloneable\\n     *         contract address. This can only be called via governance.\\n     * @dev This function is best called as a parameter to the\\n     *      diamond cut function. This is removed prior to the selectors\\n     *      being added to the diamond, meaning it cannot be called\\n     *      again.\\n     * @dev This function is best called as a parameter to the\\n     *      diamond cut function. This is removed prior to the selectors\\n     *      being added to the diamond, meaning it cannot be called\\n     *      again.\\n     */\\n    function initialize(IDDXWalletCloneable _ddxWalletCloneable) external onlyAdmin {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        // Set the on-chain DDX wallet cloneable contract address\\n        dsTrader.ddxWalletCloneable = _ddxWalletCloneable;\\n    }\\n\\n    /**\\n     * @notice This function sets the reward cliff.\\n     * @param _rewardCliff Reward cliff.\\n     */\\n    function setRewardCliff(bool _rewardCliff) external onlyAdmin {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        // Set the reward cliff (boolean value)\\n        dsTrader.rewardCliff = _rewardCliff;\\n\\n        emit RewardCliffSet(_rewardCliff);\\n    }\\n\\n    /**\\n     * @notice This function issues DDX rewards to a trader. It can\\n     *         only be called via governance.\\n     * @param _amount DDX tokens to be rewarded.\\n     * @param _trader Trader recipient address.\\n     */\\n    function issueDDXReward(uint96 _amount, address _trader) external onlyAdmin {\\n        // Call the internal function to issue DDX rewards. This\\n        // internal function is shareable with other facets that import\\n        // the LibTraderInternal library.\\n        LibTraderInternal.issueDDXReward(_amount, _trader);\\n    }\\n\\n    /**\\n     * @notice This function issues DDX rewards to an external address.\\n     *         It can only be called via governance.\\n     * @param _amount DDX tokens to be rewarded.\\n     * @param _recipient External recipient address.\\n     */\\n    function issueDDXToRecipient(uint96 _amount, address _recipient) external onlyAdmin {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Transfer DDX from trader to trader's on-chain wallet\\n        dsDerivaDEX.ddxToken.mint(_recipient, _amount);\\n\\n        emit DDXRewardIssued(_recipient, _amount);\\n    }\\n\\n    /**\\n     * @notice This function lets traders take DDX from their wallet\\n     *         into their on-chain DDX wallet. It's important to note\\n     *         that any DDX staked from the trader to this wallet\\n     *         delegates the voting rights of that stake back to the\\n     *         user. To be more explicit, if Alice's personal wallet is\\n     *         delegating to Bob, and she now stakes a portion of her\\n     *         DDX into this on-chain DDX wallet of hers, those tokens\\n     *         will now count towards her voting power, not Bob's, since\\n     *         her on-chain wallet is automatically delegating back to\\n     *         her.\\n     * @param _amount The DDX tokens to be staked.\\n     */\\n    function stakeDDXFromTrader(uint96 _amount) external {\\n        transferDDXToWallet(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice This function lets traders send DDX from their wallet\\n     *         into another trader's on-chain DDX wallet. It's\\n     *         important to note that any DDX staked to this wallet\\n     *         delegates the voting rights of that stake back to the\\n     *         user.\\n     * @param _trader Trader address to receive DDX (inside their\\n     *        wallet, which will be created if it does not already\\n     *        exist).\\n     * @param _amount The DDX tokens to be staked.\\n     */\\n    function sendDDXFromTraderToTraderWallet(address _trader, uint96 _amount) external {\\n        transferDDXToWallet(_trader, _amount);\\n    }\\n\\n    /**\\n     * @notice This function lets traders withdraw DDX from their\\n     *         on-chain DDX wallet to their personal wallet. It's\\n     *         important to note that the voting rights for any DDX\\n     *         withdrawn are returned back to the delegatee of the\\n     *         user's personal wallet. To be more explicit, if Alice is\\n     *         personal wallet is delegating to Bob, and she now\\n     *         withdraws a portion of her DDX from this on-chain DDX\\n     *         wallet of hers, those tokens will now count towards Bob's\\n     *         voting power, not her's, since her on-chain wallet is\\n     *         automatically delegating back to her, but her personal\\n     *         wallet is delegating to Bob. Withdrawals can only happen\\n     *         when the governance cliff is lifted.\\n     * @param _amount The DDX tokens to be withdrawn.\\n     */\\n    function withdrawDDXToTrader(uint96 _amount) external postRewardCliff {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        TraderDefs.Trader storage trader = dsTrader.traders[msg.sender];\\n\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Subtract trader's DDX balance in the contract\\n        trader.ddxBalance = trader.ddxBalance.sub96(_amount);\\n\\n        // Transfer DDX from trader's on-chain wallet to the trader\\n        dsDerivaDEX.ddxToken.transferFrom(trader.ddxWalletContract, msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice This function gets the attributes for a given trader.\\n     * @param _trader Trader address.\\n     */\\n    function getTrader(address _trader) external view returns (TraderDefs.Trader memory) {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        return dsTrader.traders[_trader];\\n    }\\n\\n    /**\\n     * @notice This function transfers DDX from the sender\\n     *         to another trader's DDX wallet.\\n     * @param _trader Trader address' DDX wallet address to transfer\\n     *        into.\\n     * @param _amount Amount of DDX to transfer.\\n     */\\n    function transferDDXToWallet(address _trader, uint96 _amount) internal {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        TraderDefs.Trader storage trader = dsTrader.traders[_trader];\\n\\n        // If trader does not have a DDX on-chain wallet yet, create one\\n        if (trader.ddxWalletContract == address(0)) {\\n            LibTraderInternal.createDDXWallet(_trader);\\n        }\\n\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Add trader's DDX balance in the contract\\n        trader.ddxBalance = trader.ddxBalance.add96(_amount);\\n\\n        // Transfer DDX from trader to trader's on-chain wallet\\n        dsDerivaDEX.ddxToken.transferFrom(msg.sender, trader.ddxWalletContract, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath96.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath96 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add96(uint96 a, uint96 b) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub96(uint96 a, uint96 b) internal pure returns (uint96) {\\n        return sub96(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        uint96 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/defs/TraderDefs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title TraderDefs\\n * @author DerivaDEX\\n *\\n * This library contains the common structs and enums pertaining to\\n * traders.\\n */\\nlibrary TraderDefs {\\n    // Consists of trader attributes, including the DDX balance and\\n    // the onchain DDX wallet contract address\\n    struct Trader {\\n        uint96 ddxBalance;\\n        address ddxWalletContract;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/LibDiamondStorageTrader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { TraderDefs } from \\\"../libs/defs/TraderDefs.sol\\\";\\nimport { IDDXWalletCloneable } from \\\"../tokens/interfaces/IDDXWalletCloneable.sol\\\";\\n\\nlibrary LibDiamondStorageTrader {\\n    struct DiamondStorageTrader {\\n        mapping(address => TraderDefs.Trader) traders;\\n        bool rewardCliff;\\n        IDDXWalletCloneable ddxWalletCloneable;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION_TRADER = keccak256(\\\"diamond.standard.diamond.storage.DerivaDEX.Trader\\\");\\n\\n    function diamondStorageTrader() internal pure returns (DiamondStorageTrader storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION_TRADER;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IDDXWalletCloneable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { IDDX } from \\\"./IDDX.sol\\\";\\n\\ninterface IDDXWalletCloneable {\\n    function initialize(\\n        address _trader,\\n        IDDX _ddxToken,\\n        address _derivaDEX\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/facets/trader/LibTraderInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { LibClone } from \\\"../../libs/LibClone.sol\\\";\\nimport { SafeMath96 } from \\\"../../libs/SafeMath96.sol\\\";\\nimport { TraderDefs } from \\\"../../libs/defs/TraderDefs.sol\\\";\\nimport { LibDiamondStorageDerivaDEX } from \\\"../../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStorageTrader } from \\\"../../storage/LibDiamondStorageTrader.sol\\\";\\nimport { IDDX } from \\\"../../tokens/interfaces/IDDX.sol\\\";\\nimport { IDDXWalletCloneable } from \\\"../../tokens/interfaces/IDDXWalletCloneable.sol\\\";\\n\\n/**\\n * @title TraderInternalLib\\n * @author DerivaDEX\\n * @notice This is a library of internal functions mainly defined in\\n *         the Trader facet, but used in other facets.\\n */\\nlibrary LibTraderInternal {\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event DDXRewardIssued(address trader, uint96 amount);\\n\\n    /**\\n     * @notice This function creates a new DDX wallet for a trader.\\n     * @param _trader Trader address.\\n     */\\n    function createDDXWallet(address _trader) internal {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        // Leveraging the minimal proxy contract/clone factory pattern\\n        // as described here (https://eips.ethereum.org/EIPS/eip-1167)\\n        IDDXWalletCloneable ddxWallet = IDDXWalletCloneable(LibClone.createClone(address(dsTrader.ddxWalletCloneable)));\\n\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Cloneable contracts have no constructor, so instead we use\\n        // an initialize function. This initialize delegates this\\n        // on-chain DDX wallet back to the trader and sets the allowance\\n        // for the DerivaDEX Proxy contract to be unlimited.\\n        ddxWallet.initialize(_trader, dsDerivaDEX.ddxToken, address(this));\\n\\n        // Store the on-chain wallet address in the trader's storage\\n        dsTrader.traders[_trader].ddxWalletContract = address(ddxWallet);\\n    }\\n\\n    /**\\n     * @notice This function issues DDX rewards to a trader. It can be\\n     *         called by any facet part of the diamond.\\n     * @param _amount DDX tokens to be rewarded.\\n     * @param _trader Trader address.\\n     */\\n    function issueDDXReward(uint96 _amount, address _trader) internal {\\n        LibDiamondStorageTrader.DiamondStorageTrader storage dsTrader = LibDiamondStorageTrader.diamondStorageTrader();\\n\\n        TraderDefs.Trader storage trader = dsTrader.traders[_trader];\\n\\n        // If trader does not have a DDX on-chain wallet yet, create one\\n        if (trader.ddxWalletContract == address(0)) {\\n            createDDXWallet(_trader);\\n        }\\n\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n\\n        // Add trader's DDX balance in the contract\\n        trader.ddxBalance = trader.ddxBalance.add96(_amount);\\n\\n        // Transfer DDX from trader to trader's on-chain wallet\\n        dsDerivaDEX.ddxToken.mint(trader.ddxWalletContract, _amount);\\n\\n        emit DDXRewardIssued(_trader, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibClone.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/*\\n    The MIT License (MIT)\\n    Copyright (c) 2018 Murray Software, LLC.\\n    Permission is hereby granted, free of charge, to any person obtaining\\n    a copy of this software and associated documentation files (the\\n    \\\"Software\\\"), to deal in the Software without restriction, including\\n    without limitation the rights to use, copy, modify, merge, publish,\\n    distribute, sublicense, and/or sell copies of the Software, and to\\n    permit persons to whom the Software is furnished to do so, subject to\\n    the following conditions:\\n    The above copyright notice and this permission notice shall be included\\n    in all copies or substantial portions of the Software.\\n    THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\n    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\n    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\n    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\n    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\n    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\n    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n//solhint-disable max-line-length\\n//solhint-disable no-inline-assembly\\n\\nlibrary LibClone {\\n    function createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            result := create(0, clone, 0x37)\\n        }\\n    }\\n\\n    function isClone(address target, address query) internal view returns (bool result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(eq(mload(clone), mload(other)), eq(mload(add(clone, 0xd)), mload(add(other, 0xd))))\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/insurance-fund/InsuranceFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { Math } from \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport { SafeMath32 } from \\\"../../libs/SafeMath32.sol\\\";\\nimport { SafeMath96 } from \\\"../../libs/SafeMath96.sol\\\";\\nimport { MathHelpers } from \\\"../../libs/MathHelpers.sol\\\";\\nimport { InsuranceFundDefs } from \\\"../../libs/defs/InsuranceFundDefs.sol\\\";\\nimport { LibDiamondStorageDerivaDEX } from \\\"../../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStorageInsuranceFund } from \\\"../../storage/LibDiamondStorageInsuranceFund.sol\\\";\\nimport { LibDiamondStorageTrader } from \\\"../../storage/LibDiamondStorageTrader.sol\\\";\\nimport { LibDiamondStoragePause } from \\\"../../storage/LibDiamondStoragePause.sol\\\";\\nimport { IDDX } from \\\"../../tokens/interfaces/IDDX.sol\\\";\\nimport { LibTraderInternal } from \\\"../trader/LibTraderInternal.sol\\\";\\nimport { IAToken } from \\\"../interfaces/IAToken.sol\\\";\\nimport { IComptroller } from \\\"../interfaces/IComptroller.sol\\\";\\nimport { ICToken } from \\\"../interfaces/ICToken.sol\\\";\\nimport { IDIFundToken } from \\\"../../tokens/interfaces/IDIFundToken.sol\\\";\\nimport { IDIFundTokenFactory } from \\\"../../tokens/interfaces/IDIFundTokenFactory.sol\\\";\\n\\ninterface IERCCustom {\\n    function decimals() external view returns (uint8);\\n}\\n\\n/**\\n * @title InsuranceFund\\n * @author DerivaDEX\\n * @notice This is a facet to the DerivaDEX proxy contract that handles\\n *         the logic pertaining to insurance mining - staking directly\\n *         into the insurance fund and receiving a DDX issuance to be\\n *         used in governance/operations.\\n * @dev This facet at the moment only handles insurance mining. It can\\n *      and will grow to handle the remaining functions of the insurance\\n *      fund, such as receiving quote-denominated fees and liquidation\\n *      spreads, among others. The Diamond storage will only be\\n *      affected when facet functions are called via the proxy\\n *      contract, no checks are necessary.\\n */\\ncontract InsuranceFund {\\n    using SafeMath32 for uint32;\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint96;\\n    using SafeMath for uint256;\\n    using MathHelpers for uint32;\\n    using MathHelpers for uint96;\\n    using MathHelpers for uint224;\\n    using MathHelpers for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Compound-related constant variables\\n    // kovan: 0x5eAe89DC1C671724A672ff0630122ee834098657\\n    IComptroller public constant COMPTROLLER = IComptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    // kovan: 0x61460874a7196d6a22D1eE4922473664b3E95270\\n    IERC20 public constant COMP_TOKEN = IERC20(0xc00e94Cb662C3520282E6f5717214004A7f26888);\\n\\n    event InsuranceFundInitialized(\\n        uint32 interval,\\n        uint32 withdrawalFactor,\\n        uint96 mineRatePerBlock,\\n        uint96 advanceIntervalReward,\\n        uint256 miningFinalBlockNumber\\n    );\\n\\n    event InsuranceFundCollateralAdded(\\n        bytes32 collateralName,\\n        address underlyingToken,\\n        address collateralToken,\\n        InsuranceFundDefs.Flavor flavor\\n    );\\n\\n    event StakedToInsuranceFund(address staker, uint96 amount, bytes32 collateralName);\\n\\n    event WithdrawnFromInsuranceFund(address withdrawer, uint96 amount, bytes32 collateralName);\\n\\n    event AdvancedOtherRewards(address intervalAdvancer, uint96 advanceReward);\\n\\n    event InsuranceMineRewardsClaimed(address claimant, uint96 minedAmount);\\n\\n    event MineRatePerBlockSet(uint96 mineRatePerBlock);\\n\\n    event AdvanceIntervalRewardSet(uint96 advanceIntervalReward);\\n\\n    event WithdrawalFactorSet(uint32 withdrawalFactor);\\n\\n    event InsuranceMiningExtended(uint256 miningFinalBlockNumber);\\n\\n    /**\\n     * @notice Limits functions to only be called via governance.\\n     */\\n    modifier onlyAdmin {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"IFund: must be called by Gov.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Limits functions to only be called while insurance\\n     *         mining is ongoing.\\n     */\\n    modifier insuranceMiningOngoing {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        require(block.number < dsInsuranceFund.miningFinalBlockNumber, \\\"IFund: mining ended.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Limits functions to only be called while other\\n     *         rewards checkpointing is ongoing.\\n     */\\n    modifier otherRewardsOngoing {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        require(\\n            dsInsuranceFund.otherRewardsCheckpointBlock < dsInsuranceFund.miningFinalBlockNumber,\\n            \\\"IFund: other rewards checkpointing ended.\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Limits functions to only be called via governance.\\n     */\\n    modifier isNotPaused {\\n        LibDiamondStoragePause.DiamondStoragePause storage dsPause = LibDiamondStoragePause.diamondStoragePause();\\n        require(!dsPause.isPaused, \\\"IFund: paused.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice This function initializes the state with some critical\\n     *         information. This can only be called via governance.\\n     * @dev This function is best called as a parameter to the\\n     *      diamond cut function. This is removed prior to the selectors\\n     *      being added to the diamond, meaning it cannot be called\\n     *      again.\\n     * @param _interval The interval length (blocks) for other rewards\\n     *        claiming checkpoints (i.e. COMP and extra aTokens).\\n     * @param _withdrawalFactor Specifies the withdrawal fee if users\\n     *        redeem their insurance tokens.\\n     * @param _mineRatePerBlock The DDX tokens to be mined each interval\\n     *        for insurance mining.\\n     * @param _advanceIntervalReward DDX reward for participant who\\n     *        advances the insurance mining interval.\\n     * @param _insuranceMiningLength Insurance mining length (blocks).\\n     */\\n    function initialize(\\n        uint32 _interval,\\n        uint32 _withdrawalFactor,\\n        uint96 _mineRatePerBlock,\\n        uint96 _advanceIntervalReward,\\n        uint256 _insuranceMiningLength,\\n        IDIFundTokenFactory _diFundTokenFactory\\n    ) external onlyAdmin {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Set the interval for other rewards claiming checkpoints\\n        // (i.e. COMP and aTokens that accrue to the contract)\\n        // (e.g. 40320 ~ 1 week = 7 * 24 * 60 * 60 / 15 blocks)\\n        dsInsuranceFund.interval = _interval;\\n\\n        // Keep track of the block number for other rewards checkpoint,\\n        // which is initialized to the block number the insurance fund\\n        // facet is added to the diamond\\n        dsInsuranceFund.otherRewardsCheckpointBlock = block.number;\\n\\n        // Set the withdrawal factor, capped at 1000, implying 0% fee\\n        require(_withdrawalFactor <= 1000, \\\"IFund: withdrawal fee too high.\\\");\\n        // Set withdrawal ratio, which will be used with a 1e3 scaling\\n        // factor, meaning a value of 995 implies a withdrawal fee of\\n        // 0.5% since 995/1e3 => 0.995\\n        dsInsuranceFund.withdrawalFactor = _withdrawalFactor;\\n\\n        // Set the insurance mine rate per block.\\n        // (e.g. 1.189e18 ~ 5% liquidity mine (50mm tokens))\\n        dsInsuranceFund.mineRatePerBlock = _mineRatePerBlock;\\n\\n        // Incentive to advance the other rewards interval\\n        // (e.g. 100e18 = 100 DDX)\\n        dsInsuranceFund.advanceIntervalReward = _advanceIntervalReward;\\n\\n        // Set the final block number for insurance mining\\n        dsInsuranceFund.miningFinalBlockNumber = block.number.add(_insuranceMiningLength);\\n\\n        // DIFundToken factory to deploy DerivaDEX Insurance Fund token\\n        // contracts pertaining to each supported collateral\\n        dsInsuranceFund.diFundTokenFactory = _diFundTokenFactory;\\n\\n        // Initialize the DDX market state index and block. These values\\n        // are critical for computing the DDX continuously issued per\\n        // block\\n        dsInsuranceFund.ddxMarketState.index = 1e36;\\n        dsInsuranceFund.ddxMarketState.block = block.number.safe32(\\\"IFund: exceeds 32 bits\\\");\\n\\n        emit InsuranceFundInitialized(\\n            _interval,\\n            _withdrawalFactor,\\n            _mineRatePerBlock,\\n            _advanceIntervalReward,\\n            dsInsuranceFund.miningFinalBlockNumber\\n        );\\n    }\\n\\n    /**\\n     * @notice This function sets the DDX mine rate per block.\\n     * @param _mineRatePerBlock The DDX tokens mine rate per block.\\n     */\\n    function setMineRatePerBlock(uint96 _mineRatePerBlock) external onlyAdmin insuranceMiningOngoing isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // NOTE(jalextowle): We must update the DDX Market State prior to\\n        // changing the mine rate per block in order to lock in earned rewards\\n        // for insurance mining participants.\\n        updateDDXMarketState(dsInsuranceFund);\\n\\n        require(_mineRatePerBlock != dsInsuranceFund.mineRatePerBlock, \\\"IFund: same as current value.\\\");\\n        // Set the insurance mine rate per block.\\n        // (e.g. 1.189e18 ~ 5% liquidity mine (50mm tokens))\\n        dsInsuranceFund.mineRatePerBlock = _mineRatePerBlock;\\n\\n        emit MineRatePerBlockSet(_mineRatePerBlock);\\n    }\\n\\n    /**\\n     * @notice This function sets the advance interval reward.\\n     * @param _advanceIntervalReward DDX reward for advancing interval.\\n     */\\n    function setAdvanceIntervalReward(uint96 _advanceIntervalReward)\\n        external\\n        onlyAdmin\\n        insuranceMiningOngoing\\n        isNotPaused\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        require(_advanceIntervalReward != dsInsuranceFund.advanceIntervalReward, \\\"IFund: same as current value.\\\");\\n        // Set the advance interval reward\\n        dsInsuranceFund.advanceIntervalReward = _advanceIntervalReward;\\n\\n        emit AdvanceIntervalRewardSet(_advanceIntervalReward);\\n    }\\n\\n    /**\\n     * @notice This function sets the withdrawal factor.\\n     * @param _withdrawalFactor Withdrawal factor.\\n     */\\n    function setWithdrawalFactor(uint32 _withdrawalFactor) external onlyAdmin insuranceMiningOngoing isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        require(_withdrawalFactor != dsInsuranceFund.withdrawalFactor, \\\"IFund: same as current value.\\\");\\n        // Set the withdrawal factor, capped at 1000, implying 0% fee\\n        require(dsInsuranceFund.withdrawalFactor <= 1000, \\\"IFund: withdrawal fee too high.\\\");\\n        dsInsuranceFund.withdrawalFactor = _withdrawalFactor;\\n\\n        emit WithdrawalFactorSet(_withdrawalFactor);\\n    }\\n\\n    /**\\n     * @notice This function extends insurance mining.\\n     * @param _insuranceMiningExtension Insurance mining extension\\n     *         (blocks).\\n     */\\n    function extendInsuranceMining(uint256 _insuranceMiningExtension)\\n        external\\n        onlyAdmin\\n        insuranceMiningOngoing\\n        isNotPaused\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        require(_insuranceMiningExtension != 0, \\\"IFund: invalid extension.\\\");\\n        // Extend the mining final block number\\n        dsInsuranceFund.miningFinalBlockNumber = dsInsuranceFund.miningFinalBlockNumber.add(_insuranceMiningExtension);\\n\\n        emit InsuranceMiningExtended(dsInsuranceFund.miningFinalBlockNumber);\\n    }\\n\\n    /**\\n     * @notice This function adds a new supported collateral type that\\n     *         can be staked to the insurance fund. It can only\\n     *         be called via governance.\\n     * @dev For vanilla contracts (e.g. USDT, USDC, etc.), the\\n     *      underlying token equals address(0).\\n     * @param _collateralName Name of collateral.\\n     * @param _collateralSymbol Symbol of collateral.\\n     * @param _underlyingToken Deployed address of underlying token.\\n     * @param _collateralToken Deployed address of collateral token.\\n     * @param _flavor Collateral flavor (Vanilla, Compound, Aave, etc.).\\n     */\\n    function addInsuranceFundCollateral(\\n        string memory _collateralName,\\n        string memory _collateralSymbol,\\n        address _underlyingToken,\\n        address _collateralToken,\\n        InsuranceFundDefs.Flavor _flavor\\n    ) external onlyAdmin insuranceMiningOngoing isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Obtain bytes32 representation of collateral name\\n        bytes32 result;\\n        assembly {\\n            result := mload(add(_collateralName, 32))\\n        }\\n\\n        // Ensure collateral has not already been added\\n        require(\\n            dsInsuranceFund.stakeCollaterals[result].collateralToken == address(0),\\n            \\\"IFund: collateral already added.\\\"\\n        );\\n\\n        require(_collateralToken != address(0), \\\"IFund: collateral address must be non-zero.\\\");\\n        require(!isCollateralTokenPresent(_collateralToken), \\\"IFund: collateral token already present.\\\");\\n        require(_underlyingToken != _collateralToken, \\\"IFund: token addresses are same.\\\");\\n        if (_flavor == InsuranceFundDefs.Flavor.Vanilla) {\\n            // If collateral is of vanilla flavor, there should only be\\n            // a value for collateral token, and underlying token should\\n            // be empty\\n            require(_underlyingToken == address(0), \\\"IFund: underlying address non-zero for Vanilla.\\\");\\n        }\\n\\n        // Add collateral type to storage, including its underlying\\n        // token and collateral token addresses, and its flavor\\n        dsInsuranceFund.stakeCollaterals[result].underlyingToken = _underlyingToken;\\n        dsInsuranceFund.stakeCollaterals[result].collateralToken = _collateralToken;\\n        dsInsuranceFund.stakeCollaterals[result].flavor = _flavor;\\n\\n        // Create a DerivaDEX Insurance Fund token contract associated\\n        // with this supported collateral\\n        dsInsuranceFund.stakeCollaterals[result].diFundToken = IDIFundToken(\\n            dsInsuranceFund.diFundTokenFactory.createNewDIFundToken(\\n                _collateralName,\\n                _collateralSymbol,\\n                IERCCustom(_collateralToken).decimals()\\n            )\\n        );\\n        dsInsuranceFund.collateralNames.push(result);\\n\\n        emit InsuranceFundCollateralAdded(result, _underlyingToken, _collateralToken, _flavor);\\n    }\\n\\n    /**\\n     * @notice This function allows participants to stake a supported\\n     *         collateral type to the insurance fund.\\n     * @param _collateralName Name of collateral.\\n     * @param _amount Amount to stake.\\n     */\\n    function stakeToInsuranceFund(bytes32 _collateralName, uint96 _amount) external insuranceMiningOngoing isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Obtain the collateral struct for the collateral type\\n        // participant is staking\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        // Ensure this is a supported collateral type and that the user\\n        // has approved the proxy contract for transfer\\n        require(stakeCollateral.collateralToken != address(0), \\\"IFund: invalid collateral.\\\");\\n\\n        // Ensure non-zero stake amount\\n        require(_amount > 0, \\\"IFund: non-zero amount.\\\");\\n\\n        // Claim DDX for staking user. We do this prior to the stake\\n        // taking effect, thereby preventing someone from being rewarded\\n        // instantly for the stake.\\n        claimDDXFromInsuranceMining(msg.sender);\\n\\n        // Increment the underlying capitalization\\n        stakeCollateral.cap = stakeCollateral.cap.add96(_amount);\\n\\n        // Transfer collateral amount from user to proxy contract\\n        IERC20(stakeCollateral.collateralToken).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        // Mint DIFund tokens to user\\n        stakeCollateral.diFundToken.mint(msg.sender, _amount);\\n\\n        emit StakedToInsuranceFund(msg.sender, _amount, _collateralName);\\n    }\\n\\n    /**\\n     * @notice This function allows participants to withdraw a supported\\n     *         collateral type from the insurance fund.\\n     * @param _collateralName Name of collateral.\\n     * @param _amount Amount to stake.\\n     */\\n    function withdrawFromInsuranceFund(bytes32 _collateralName, uint96 _amount) external isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Obtain the collateral struct for the collateral type\\n        // participant is staking\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        // Ensure this is a supported collateral type and that the user\\n        // has approved the proxy contract for transfer\\n        require(stakeCollateral.collateralToken != address(0), \\\"IFund: invalid collateral.\\\");\\n\\n        // Ensure non-zero withdraw amount\\n        require(_amount > 0, \\\"IFund: non-zero amount.\\\");\\n\\n        // Claim DDX for withdrawing user. We do this prior to the\\n        // redeem taking effect.\\n        claimDDXFromInsuranceMining(msg.sender);\\n\\n        // Determine underlying to transfer based on how much underlying\\n        // can be redeemed given the current underlying capitalization\\n        // and how many DIFund tokens are globally available. This\\n        // theoretically fails in the scenario where globally there are\\n        // 0 insurance fund tokens, however that would mean the user\\n        // also has 0 tokens in their possession, and thus would have\\n        // nothing to be redeemed anyways.\\n        uint96 underlyingToTransferNoFee =\\n            _amount.proportion96(stakeCollateral.cap, stakeCollateral.diFundToken.totalSupply());\\n        uint96 underlyingToTransfer = underlyingToTransferNoFee.proportion96(dsInsuranceFund.withdrawalFactor, 1e3);\\n\\n        // Decrement the capitalization\\n        stakeCollateral.cap = stakeCollateral.cap.sub96(underlyingToTransferNoFee);\\n\\n        // Increment the withdrawal fee cap\\n        stakeCollateral.withdrawalFeeCap = stakeCollateral.withdrawalFeeCap.add96(\\n            underlyingToTransferNoFee.sub96(underlyingToTransfer)\\n        );\\n\\n        // Transfer collateral amount from proxy contract to user\\n        IERC20(stakeCollateral.collateralToken).safeTransfer(msg.sender, underlyingToTransfer);\\n\\n        // Burn DIFund tokens being redeemed from user\\n        stakeCollateral.diFundToken.burnFrom(msg.sender, _amount);\\n\\n        emit WithdrawnFromInsuranceFund(msg.sender, _amount, _collateralName);\\n    }\\n\\n    /**\\n     * @notice Advance other rewards interval\\n     */\\n    function advanceOtherRewardsInterval() external otherRewardsOngoing isNotPaused {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Check if the current block has exceeded the interval bounds,\\n        // allowing for a new other rewards interval to be checkpointed\\n        require(\\n            block.number >= dsInsuranceFund.otherRewardsCheckpointBlock.add(dsInsuranceFund.interval),\\n            \\\"IFund: advance too soon.\\\"\\n        );\\n\\n        // Maintain the USD-denominated sum of all Compound-flavor\\n        // assets. This needs to be stored separately than the rest\\n        // due to the way COMP tokens are rewarded to the contract in\\n        // order to properly disseminate to the user.\\n        uint96 normalizedCapCheckpointSumCompound;\\n\\n        // Loop through each of the supported collateral types\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            // Obtain collateral struct under consideration\\n            InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n            if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Compound) {\\n                // If collateral is of type Compound, set the exchange\\n                // rate at this point in time. We do this so later on,\\n                // when claiming rewards, we know the exchange rate\\n                // checkpointed balances should be converted to\\n                // determine the USD-denominated value of holdings\\n                // needed to compute fair share of DDX rewards.\\n                stakeCollateral.exchangeRate = ICToken(stakeCollateral.collateralToken).exchangeRateStored().safe96(\\n                    \\\"IFund: amount exceeds 96 bits\\\"\\n                );\\n\\n                // Set checkpoint cap for this Compound flavor\\n                // collateral to handle COMP distribution lookbacks\\n                stakeCollateral.checkpointCap = stakeCollateral.cap;\\n\\n                // Increment the normalized Compound checkpoint cap\\n                // with the USD-denominated value\\n                normalizedCapCheckpointSumCompound = normalizedCapCheckpointSumCompound.add96(\\n                    getUnderlyingTokenAmountForCompound(stakeCollateral.cap, stakeCollateral.exchangeRate)\\n                );\\n            } else if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Aave) {\\n                // If collateral is of type Aave, we need to do some\\n                // custom Aave aToken reward distribution. We first\\n                // determine the contract's aToken balance for this\\n                // collateral type and subtract the underlying\\n                // aToken capitalization that are due to users. This\\n                // leaves us with the excess that has been rewarded\\n                // to the contract due to Aave's mechanisms, but\\n                // belong to the users.\\n                uint96 myATokenBalance =\\n                    uint96(IAToken(stakeCollateral.collateralToken).balanceOf(address(this)).sub(stakeCollateral.cap));\\n\\n                // Store the aToken yield information\\n                dsInsuranceFund.aTokenYields[dsInsuranceFund.collateralNames[i]] = InsuranceFundDefs\\n                    .ExternalYieldCheckpoint({ accrued: myATokenBalance, totalNormalizedCap: 0 });\\n            }\\n        }\\n\\n        // Ensure that the normalized cap sum is non-zero\\n        if (normalizedCapCheckpointSumCompound > 0) {\\n            // If there's Compound-type asset capitalization in the\\n            // system, claim COMP accrued to this contract. This COMP is\\n            // a result of holding all the cToken deposits from users.\\n            // We claim COMP via Compound's Comptroller contract.\\n            COMPTROLLER.claimComp(address(this));\\n\\n            // Obtain contract's balance of COMP\\n            uint96 myCompBalance = COMP_TOKEN.balanceOf(address(this)).safe96(\\\"IFund: amount exceeds 96 bits.\\\");\\n\\n            // Store the updated value as the checkpointed COMP yield owed\\n            // for this interval\\n            dsInsuranceFund.compYields = InsuranceFundDefs.ExternalYieldCheckpoint({\\n                accrued: myCompBalance,\\n                totalNormalizedCap: normalizedCapCheckpointSumCompound\\n            });\\n        }\\n\\n        // Set other rewards checkpoint block to current block\\n        dsInsuranceFund.otherRewardsCheckpointBlock = block.number;\\n\\n        // Issue DDX reward to trader's on-chain DDX wallet as an\\n        // incentive to users calling this function\\n        LibTraderInternal.issueDDXReward(dsInsuranceFund.advanceIntervalReward, msg.sender);\\n\\n        emit AdvancedOtherRewards(msg.sender, dsInsuranceFund.advanceIntervalReward);\\n    }\\n\\n    /**\\n     * @notice This function gets some high level insurance mining\\n     *         details.\\n     * @return The interval length (blocks) for other rewards\\n     *         claiming checkpoints (i.e. COMP and extra aTokens).\\n     * @return Current insurance mine withdrawal factor.\\n     * @return DDX reward for advancing interval.\\n     * @return Total global insurance mined amount in DDX.\\n     * @return Current insurance mine rate per block.\\n     * @return Insurance mining final block number.\\n     * @return DDX market state used for continuous DDX payouts.\\n     * @return Supported collateral names supported.\\n     */\\n    function getInsuranceMineInfo()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint96,\\n            uint96,\\n            uint96,\\n            uint256,\\n            InsuranceFundDefs.DDXMarketState memory,\\n            bytes32[] memory\\n        )\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        return (\\n            dsInsuranceFund.interval,\\n            dsInsuranceFund.withdrawalFactor,\\n            dsInsuranceFund.advanceIntervalReward,\\n            dsInsuranceFund.minedAmount,\\n            dsInsuranceFund.mineRatePerBlock,\\n            dsInsuranceFund.miningFinalBlockNumber,\\n            dsInsuranceFund.ddxMarketState,\\n            dsInsuranceFund.collateralNames\\n        );\\n    }\\n\\n    /**\\n     * @notice This function gets the current claimant state for a user.\\n     * @param _claimant Claimant address.\\n     * @return Claimant state.\\n     */\\n    function getDDXClaimantState(address _claimant) external view returns (InsuranceFundDefs.DDXClaimantState memory) {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        return dsInsuranceFund.ddxClaimantState[_claimant];\\n    }\\n\\n    /**\\n     * @notice This function gets a supported collateral type's data,\\n     *         including collateral's token addresses, collateral\\n     *         flavor/type, current cap and withdrawal amounts, the\\n     *         latest checkpointed cap, and exchange rate (for cTokens).\\n     *         An interface for the DerivaDEX Insurance Fund token\\n     *         corresponding to this collateral is also maintained.\\n     * @param _collateralName Name of collateral.\\n     * @return Stake collateral.\\n     */\\n    function getStakeCollateralByCollateralName(bytes32 _collateralName)\\n        external\\n        view\\n        returns (InsuranceFundDefs.StakeCollateral memory)\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        return dsInsuranceFund.stakeCollaterals[_collateralName];\\n    }\\n\\n    /**\\n     * @notice This function gets unclaimed DDX rewards for a claimant.\\n     * @param _claimant Claimant address.\\n     * @return Unclaimed DDX rewards.\\n     */\\n    function getUnclaimedDDXRewards(address _claimant) external view returns (uint96) {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Number of blocks that have elapsed from the last protocol\\n        // interaction resulting in DDX accrual. If insurance mining\\n        // has ended, we use this as the reference point, so deltaBlocks\\n        // will be 0 from the second time onwards.\\n        uint256 deltaBlocks =\\n            Math.min(block.number, dsInsuranceFund.miningFinalBlockNumber).sub(dsInsuranceFund.ddxMarketState.block);\\n\\n        // Save off last index value\\n        uint256 index = dsInsuranceFund.ddxMarketState.index;\\n\\n        // If number of blocks elapsed and mine rate per block are\\n        // non-zero\\n        if (deltaBlocks > 0 && dsInsuranceFund.mineRatePerBlock > 0) {\\n            // Maintain a running total of USDT-normalized claim tokens\\n            // (i.e. 1e6 multiplier)\\n            uint256 claimTokens;\\n\\n            // Loop through each of the supported collateral types\\n            for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n                // Obtain the collateral struct for the collateral type\\n                // participant is staking\\n                InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                    dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n\\n                // Increment the USDT-normalized claim tokens count with\\n                // the current total supply\\n                claimTokens = claimTokens.add(\\n                    getNormalizedCollateralValue(\\n                        dsInsuranceFund.collateralNames[i],\\n                        stakeCollateral.diFundToken.totalSupply().safe96(\\\"IFund: exceeds 96 bits\\\")\\n                    )\\n                );\\n            }\\n\\n            // Compute DDX accrued during the time elapsed and the\\n            // number of tokens accrued per claim token outstanding\\n            uint256 ddxAccrued = deltaBlocks.mul(dsInsuranceFund.mineRatePerBlock);\\n            uint256 ratio = claimTokens > 0 ? ddxAccrued.mul(1e36).div(claimTokens) : 0;\\n\\n            // Increment the index\\n            index = index.add(ratio);\\n        }\\n\\n        // Obtain the most recent claimant index\\n        uint256 ddxClaimantIndex = dsInsuranceFund.ddxClaimantState[_claimant].index;\\n\\n        // If the claimant index is 0, i.e. it's the user's first time\\n        // interacting with the protocol, initialize it to this starting\\n        // value\\n        if ((ddxClaimantIndex == 0) && (index > 0)) {\\n            ddxClaimantIndex = 1e36;\\n        }\\n\\n        // Maintain a running total of USDT-normalized claimant tokens\\n        // (i.e. 1e6 multiplier)\\n        uint256 claimantTokens;\\n\\n        // Loop through each of the supported collateral types\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            // Obtain the collateral struct for the collateral type\\n            // participant is staking\\n            InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n\\n            // Increment the USDT-normalized claimant tokens count with\\n            // the current balance\\n            claimantTokens = claimantTokens.add(\\n                getNormalizedCollateralValue(\\n                    dsInsuranceFund.collateralNames[i],\\n                    stakeCollateral.diFundToken.balanceOf(_claimant).safe96(\\\"IFund: exceeds 96 bits\\\")\\n                )\\n            );\\n        }\\n\\n        // Compute the unclaimed DDX based on the number of claimant\\n        // tokens and the difference between the user's index and the\\n        // claimant index computed above\\n        return claimantTokens.mul(index.sub(ddxClaimantIndex)).div(1e36).safe96(\\\"IFund: exceeds 96 bits\\\");\\n    }\\n\\n    /**\\n     * @notice Calculate DDX accrued by a claimant and possibly transfer\\n     *         it to them.\\n     * @param _claimant The address of the claimant.\\n     */\\n    function claimDDXFromInsuranceMining(address _claimant) public {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Update the DDX Market State in order to determine the amount of\\n        // rewards that should be paid to the claimant.\\n        updateDDXMarketState(dsInsuranceFund);\\n\\n        // Obtain the most recent claimant index\\n        uint256 ddxClaimantIndex = dsInsuranceFund.ddxClaimantState[_claimant].index;\\n        dsInsuranceFund.ddxClaimantState[_claimant].index = dsInsuranceFund.ddxMarketState.index;\\n\\n        // If the claimant index is 0, i.e. it's the user's first time\\n        // interacting with the protocol, initialize it to this starting\\n        // value\\n        if ((ddxClaimantIndex == 0) && (dsInsuranceFund.ddxMarketState.index > 0)) {\\n            ddxClaimantIndex = 1e36;\\n        }\\n\\n        // Compute the difference between the latest DDX market state\\n        // index and the claimant's index\\n        uint256 deltaIndex = uint256(dsInsuranceFund.ddxMarketState.index).sub(ddxClaimantIndex);\\n\\n        // Maintain a running total of USDT-normalized claimant tokens\\n        // (i.e. 1e6 multiplier)\\n        uint256 claimantTokens;\\n\\n        // Loop through each of the supported collateral types\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            // Obtain the collateral struct for the collateral type\\n            // participant is staking\\n            InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n\\n            // Increment the USDT-normalized claimant tokens count with\\n            // the current balance\\n            claimantTokens = claimantTokens.add(\\n                getNormalizedCollateralValue(\\n                    dsInsuranceFund.collateralNames[i],\\n                    stakeCollateral.diFundToken.balanceOf(_claimant).safe96(\\\"IFund: exceeds 96 bits\\\")\\n                )\\n            );\\n        }\\n\\n        // Compute the claimed DDX based on the number of claimant\\n        // tokens and the difference between the user's index and the\\n        // claimant index computed above\\n        uint96 claimantDelta = claimantTokens.mul(deltaIndex).div(1e36).safe96(\\\"IFund: exceeds 96 bits\\\");\\n\\n        if (claimantDelta != 0) {\\n            // Adjust insurance mined amount\\n            dsInsuranceFund.minedAmount = dsInsuranceFund.minedAmount.add96(claimantDelta);\\n\\n            // Increment the insurance mined claimed DDX for claimant\\n            dsInsuranceFund.ddxClaimantState[_claimant].claimedDDX = dsInsuranceFund.ddxClaimantState[_claimant]\\n                .claimedDDX\\n                .add96(claimantDelta);\\n\\n            // Mint the DDX governance/operational token claimed reward\\n            // from the proxy contract to the participant\\n            LibTraderInternal.issueDDXReward(claimantDelta, _claimant);\\n        }\\n\\n        // Check if COMP or aTokens have not already been claimed\\n        if (dsInsuranceFund.stakerToOtherRewardsClaims[_claimant] < dsInsuranceFund.otherRewardsCheckpointBlock) {\\n            // Record the current block number preventing a user from\\n            // reclaiming the COMP reward unfairly\\n            dsInsuranceFund.stakerToOtherRewardsClaims[_claimant] = block.number;\\n\\n            // Claim COMP and extra aTokens\\n            claimOtherRewardsFromInsuranceMining(_claimant);\\n        }\\n\\n        emit InsuranceMineRewardsClaimed(_claimant, claimantDelta);\\n    }\\n\\n    /**\\n     * @notice Get USDT-normalized collateral token amount.\\n     * @param _collateralName The collateral name.\\n     * @param _value The number of tokens.\\n     */\\n    function getNormalizedCollateralValue(bytes32 _collateralName, uint96 _value) public view returns (uint96) {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        return\\n            (stakeCollateral.flavor != InsuranceFundDefs.Flavor.Compound)\\n                ? getUnderlyingTokenAmountForVanilla(_value, stakeCollateral.collateralToken)\\n                : getUnderlyingTokenAmountForCompound(\\n                    _value,\\n                    ICToken(stakeCollateral.collateralToken).exchangeRateStored()\\n                );\\n    }\\n\\n    /**\\n     * @notice This function gets a participant's current\\n     *         USD-normalized/denominated stake and global\\n     *         USD-normalized/denominated stake across all supported\\n     *         collateral types.\\n     * @param _staker Participant's address.\\n     * @return Current USD redemption value of DIFund tokens staked.\\n     * @return Current USD global cap.\\n     */\\n    function getCurrentTotalStakes(address _staker) public view returns (uint96, uint96) {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Maintain running totals\\n        uint96 normalizedStakerStakeSum;\\n        uint96 normalizedGlobalCapSum;\\n\\n        // Loop through each supported collateral\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            (, , uint96 normalizedStakerStake, uint96 normalizedGlobalCap) =\\n                getCurrentStakeByCollateralNameAndStaker(dsInsuranceFund.collateralNames[i], _staker);\\n            normalizedStakerStakeSum = normalizedStakerStakeSum.add96(normalizedStakerStake);\\n            normalizedGlobalCapSum = normalizedGlobalCapSum.add96(normalizedGlobalCap);\\n        }\\n\\n        return (normalizedStakerStakeSum, normalizedGlobalCapSum);\\n    }\\n\\n    /**\\n     * @notice This function gets a participant's current DIFund token\\n     *         holdings and global DIFund token holdings for a\\n     *         collateral type and staker, in addition to the\\n     *         USD-normalized collateral in the system and the\\n     *         redemption value for the staker.\\n     * @param _collateralName Name of collateral.\\n     * @param _staker Participant's address.\\n     * @return DIFund tokens for staker.\\n     * @return DIFund tokens globally.\\n     * @return Redemption value for staker (USD-denominated).\\n     * @return Underlying collateral (USD-denominated) in staking system.\\n     */\\n    function getCurrentStakeByCollateralNameAndStaker(bytes32 _collateralName, address _staker)\\n        public\\n        view\\n        returns (\\n            uint96,\\n            uint96,\\n            uint96,\\n            uint96\\n        )\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        // Get DIFund tokens for staker\\n        uint96 stakerStake = stakeCollateral.diFundToken.balanceOf(_staker).safe96(\\\"IFund: exceeds 96 bits.\\\");\\n\\n        // Get DIFund tokens globally\\n        uint96 globalCap = stakeCollateral.diFundToken.totalSupply().safe96(\\\"IFund: exceeds 96 bits.\\\");\\n\\n        // Compute global USD-denominated stake capitalization. This is\\n        // is straightforward for non-Compound assets, but requires\\n        // exchange rate conversion for Compound assets.\\n        uint96 normalizedGlobalCap =\\n            (stakeCollateral.flavor != InsuranceFundDefs.Flavor.Compound)\\n                ? getUnderlyingTokenAmountForVanilla(stakeCollateral.cap, stakeCollateral.collateralToken)\\n                : getUnderlyingTokenAmountForCompound(\\n                    stakeCollateral.cap,\\n                    ICToken(stakeCollateral.collateralToken).exchangeRateStored()\\n                );\\n\\n        // Compute the redemption value (USD-normalized) for staker\\n        // given DIFund token holdings\\n        uint96 normalizedStakerStake = globalCap > 0 ? normalizedGlobalCap.proportion96(stakerStake, globalCap) : 0;\\n        return (stakerStake, globalCap, normalizedStakerStake, normalizedGlobalCap);\\n    }\\n\\n    /**\\n     * @notice This function gets a participant's DIFund token\\n     *         holdings and global DIFund token holdings for Compound\\n     *         and Aave tokens for a collateral type and staker as of\\n     *         the checkpointed block, in addition to the\\n     *         USD-normalized collateral in the system and the\\n     *         redemption value for the staker.\\n     * @param _collateralName Name of collateral.\\n     * @param _staker Participant's address.\\n     * @return DIFund tokens for staker.\\n     * @return DIFund tokens globally.\\n     * @return Redemption value for staker (USD-denominated).\\n     * @return Underlying collateral (USD-denominated) in staking system.\\n     */\\n    function getOtherRewardsStakeByCollateralNameAndStaker(bytes32 _collateralName, address _staker)\\n        public\\n        view\\n        returns (\\n            uint96,\\n            uint96,\\n            uint96,\\n            uint96\\n        )\\n    {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        // Get DIFund tokens for staker as of the checkpointed block\\n        uint96 stakerStake =\\n            stakeCollateral.diFundToken.getPriorValues(_staker, dsInsuranceFund.otherRewardsCheckpointBlock.sub(1));\\n\\n        // Get DIFund tokens globally as of the checkpointed block\\n        uint96 globalCap =\\n            stakeCollateral.diFundToken.getTotalPriorValues(dsInsuranceFund.otherRewardsCheckpointBlock.sub(1));\\n\\n        // If Aave, don't worry about the normalized values since 1-1\\n        if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Aave) {\\n            return (stakerStake, globalCap, 0, 0);\\n        }\\n\\n        // Compute global USD-denominated stake capitalization. This is\\n        // is straightforward for non-Compound assets, but requires\\n        // exchange rate conversion for Compound assets.\\n        uint96 normalizedGlobalCap =\\n            getUnderlyingTokenAmountForCompound(stakeCollateral.checkpointCap, stakeCollateral.exchangeRate);\\n\\n        // Compute the redemption value (USD-normalized) for staker\\n        // given DIFund token holdings\\n        uint96 normalizedStakerStake = globalCap > 0 ? normalizedGlobalCap.proportion96(stakerStake, globalCap) : 0;\\n        return (stakerStake, globalCap, normalizedStakerStake, normalizedGlobalCap);\\n    }\\n\\n    /**\\n     * @notice Claim other rewards (COMP and aTokens) for a claimant.\\n     * @param _claimant The address for the claimant.\\n     */\\n    function claimOtherRewardsFromInsuranceMining(address _claimant) internal {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n\\n        // Maintain a running total of COMP to be claimed from\\n        // insurance mining contract as a by product of cToken deposits\\n        uint96 compClaimedAmountSum;\\n\\n        // Loop through collateral names that are supported\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            // Obtain collateral struct under consideration\\n            InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n\\n            if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Vanilla) {\\n                // If collateral is of Vanilla flavor, we just\\n                // continue...\\n                continue;\\n            }\\n\\n            // Compute the DIFund token holdings and the normalized,\\n            // USDT-normalized collateral value for the user\\n            (uint96 collateralStaker, uint96 collateralTotal, uint96 normalizedCollateralStaker, ) =\\n                getOtherRewardsStakeByCollateralNameAndStaker(dsInsuranceFund.collateralNames[i], _claimant);\\n\\n            if ((collateralTotal == 0) || (collateralStaker == 0)) {\\n                // If there are no DIFund tokens, there is no reason to\\n                // claim rewards, so we continue...\\n                continue;\\n            }\\n\\n            if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Aave) {\\n                // Aave has a special circumstance, where every\\n                // aToken results in additional aTokens accruing\\n                // to the holder's wallet. In this case, this is\\n                // the DerivaDEX contract. Therefore, we must\\n                // appropriately distribute the extra aTokens to\\n                // users claiming DDX for their aToken deposits.\\n                transferTokensAave(_claimant, dsInsuranceFund.collateralNames[i], collateralStaker, collateralTotal);\\n            } else if (stakeCollateral.flavor == InsuranceFundDefs.Flavor.Compound) {\\n                // If collateral is of type Compound, determine the\\n                // COMP claimant is entitled to based on the COMP\\n                // yield for this interval, the claimant's\\n                // DIFundToken share, and the USD-denominated\\n                // share for this market.\\n                uint96 compClaimedAmount =\\n                    dsInsuranceFund.compYields.accrued.proportion96(\\n                        normalizedCollateralStaker,\\n                        dsInsuranceFund.compYields.totalNormalizedCap\\n                    );\\n\\n                // Increment the COMP claimed sum to be paid out\\n                // later\\n                compClaimedAmountSum = compClaimedAmountSum.add96(compClaimedAmount);\\n            }\\n        }\\n\\n        // Distribute any COMP to be shared with the user\\n        if (compClaimedAmountSum > 0) {\\n            transferTokensCompound(_claimant, compClaimedAmountSum);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function transfers extra Aave aTokens to claimant.\\n     */\\n    function transferTokensAave(\\n        address _claimant,\\n        bytes32 _collateralName,\\n        uint96 _aaveStaker,\\n        uint96 _aaveTotal\\n    ) internal {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        // Obtain collateral struct under consideration\\n        InsuranceFundDefs.StakeCollateral storage stakeCollateral = dsInsuranceFund.stakeCollaterals[_collateralName];\\n\\n        uint96 aTokenClaimedAmount =\\n            dsInsuranceFund.aTokenYields[_collateralName].accrued.proportion96(_aaveStaker, _aaveTotal);\\n\\n        // Continues in scenarios token transfer fails (such as\\n        // transferring 0 tokens)\\n        try IAToken(stakeCollateral.collateralToken).transfer(_claimant, aTokenClaimedAmount) {} catch {}\\n    }\\n\\n    /**\\n     * @notice This function transfers COMP tokens from the contract to\\n     *         a recipient.\\n     * @param _amount Amount of COMP to receive.\\n     */\\n    function transferTokensCompound(address _claimant, uint96 _amount) internal {\\n        // Continues in scenarios token transfer fails (such as\\n        // transferring 0 tokens)\\n        try COMP_TOKEN.transfer(_claimant, _amount) {} catch {}\\n    }\\n\\n    /**\\n     * @notice Updates the DDX market state to ensure that claimants can receive\\n     *         their earned DDX rewards.\\n     */\\n    function updateDDXMarketState(LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund)\\n        internal\\n    {\\n        // Number of blocks that have elapsed from the last protocol\\n        // interaction resulting in DDX accrual. If insurance mining\\n        // has ended, we use this as the reference point, so deltaBlocks\\n        // will be 0 from the second time onwards.\\n        uint256 endBlock = Math.min(block.number, dsInsuranceFund.miningFinalBlockNumber);\\n        uint256 deltaBlocks = endBlock.sub(dsInsuranceFund.ddxMarketState.block);\\n\\n        // If number of blocks elapsed and mine rate per block are\\n        // non-zero\\n        if (deltaBlocks > 0 && dsInsuranceFund.mineRatePerBlock > 0) {\\n            // Maintain a running total of USDT-normalized claim tokens\\n            // (i.e. 1e6 multiplier)\\n            uint256 claimTokens;\\n\\n            // Loop through each of the supported collateral types\\n            for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n                // Obtain the collateral struct for the collateral type\\n                // participant is staking\\n                InsuranceFundDefs.StakeCollateral storage stakeCollateral =\\n                    dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]];\\n\\n                // Increment the USDT-normalized claim tokens count with\\n                // the current total supply\\n                claimTokens = claimTokens.add(\\n                    getNormalizedCollateralValue(\\n                        dsInsuranceFund.collateralNames[i],\\n                        stakeCollateral.diFundToken.totalSupply().safe96(\\\"IFund: exceeds 96 bits\\\")\\n                    )\\n                );\\n            }\\n\\n            // Compute DDX accrued during the time elapsed and the\\n            // number of tokens accrued per claim token outstanding\\n            uint256 ddxAccrued = deltaBlocks.mul(dsInsuranceFund.mineRatePerBlock);\\n            uint256 ratio = claimTokens > 0 ? ddxAccrued.mul(1e36).div(claimTokens) : 0;\\n\\n            // Increment the index\\n            uint256 index = uint256(dsInsuranceFund.ddxMarketState.index).add(ratio);\\n\\n            // Update the claim ddx market state with the new index\\n            // and block\\n            dsInsuranceFund.ddxMarketState.index = index.safe224(\\\"IFund: exceeds 224 bits\\\");\\n            dsInsuranceFund.ddxMarketState.block = endBlock.safe32(\\\"IFund: exceeds 32 bits\\\");\\n        } else if (deltaBlocks > 0) {\\n            dsInsuranceFund.ddxMarketState.block = endBlock.safe32(\\\"IFund: exceeds 32 bits\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice This function checks if a collateral token is present.\\n     * @param _collateralToken Collateral token address.\\n     * @return Whether collateral token is present or not.\\n     */\\n    function isCollateralTokenPresent(address _collateralToken) internal view returns (bool) {\\n        LibDiamondStorageInsuranceFund.DiamondStorageInsuranceFund storage dsInsuranceFund =\\n            LibDiamondStorageInsuranceFund.diamondStorageInsuranceFund();\\n        for (uint256 i = 0; i < dsInsuranceFund.collateralNames.length; i++) {\\n            // Return true if collateral token has been added\\n            if (\\n                dsInsuranceFund.stakeCollaterals[dsInsuranceFund.collateralNames[i]].collateralToken == _collateralToken\\n            ) {\\n                return true;\\n            }\\n        }\\n\\n        // Collateral token has not been added, return false\\n        return false;\\n    }\\n\\n    /**\\n     * @notice This function computes the underlying token amount for a\\n     *         vanilla token.\\n     * @param _vanillaAmount Number of vanilla tokens.\\n     * @param _collateral Address of vanilla collateral.\\n     * @return Underlying token amount.\\n     */\\n    function getUnderlyingTokenAmountForVanilla(uint96 _vanillaAmount, address _collateral)\\n        internal\\n        view\\n        returns (uint96)\\n    {\\n        uint256 vanillaDecimals = uint256(IERCCustom(_collateral).decimals());\\n        if (vanillaDecimals >= 6) {\\n            return uint256(_vanillaAmount).div(10**(vanillaDecimals.sub(6))).safe96(\\\"IFund: amount exceeds 96 bits\\\");\\n        }\\n        return\\n            uint256(_vanillaAmount).mul(10**(uint256(6).sub(vanillaDecimals))).safe96(\\\"IFund: amount exceeds 96 bits\\\");\\n    }\\n\\n    /**\\n     * @notice This function computes the underlying token amount for a\\n     *         cToken amount by computing the current exchange rate.\\n     * @param _cTokenAmount Number of cTokens.\\n     * @param _exchangeRate Exchange rate derived from Compound.\\n     * @return Underlying token amount.\\n     */\\n    function getUnderlyingTokenAmountForCompound(uint96 _cTokenAmount, uint256 _exchangeRate)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        return _exchangeRate.mul(_cTokenAmount).div(1e18).safe96(\\\"IFund: amount exceeds 96 bits.\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath32.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath32 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add32(uint32 a, uint32 b) internal pure returns (uint32) {\\n        uint32 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub32(uint32 a, uint32 b) internal pure returns (uint32) {\\n        return sub32(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub32(\\n        uint32 a,\\n        uint32 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint32) {\\n        require(b <= a, errorMessage);\\n        uint32 c = a - b;\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/MathHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { Math } from \\\"openzeppelin-solidity/contracts/math/Math.sol\\\";\\nimport { SafeMath96 } from \\\"./SafeMath96.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary MathHelpers {\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint256;\\n\\n    function proportion96(\\n        uint96 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint96) {\\n        return safe96(uint256(a).mul(b).div(c), \\\"Amount exceeds 96 bits\\\");\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe224(uint256 n, string memory errorMessage) internal pure returns (uint224) {\\n        require(n < 2**224, errorMessage);\\n        return uint224(n);\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function clamp96(\\n        uint96 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure returns (uint96) {\\n        return safe96(Math.min(Math.max(a, b), c), \\\"Amount exceeds 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/defs/InsuranceFundDefs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { IDIFundToken } from \\\"../../tokens/interfaces/IDIFundToken.sol\\\";\\n\\n/**\\n * @title InsuranceFundDefs\\n * @author DerivaDEX\\n *\\n * This library contains the common structs and enums pertaining to\\n * the insurance fund.\\n */\\nlibrary InsuranceFundDefs {\\n    // DDX market state maintaining claim index and last updated block\\n    struct DDXMarketState {\\n        uint224 index;\\n        uint32 block;\\n    }\\n\\n    // DDX claimant state maintaining claim index and claimed DDX\\n    struct DDXClaimantState {\\n        uint256 index;\\n        uint96 claimedDDX;\\n    }\\n\\n    // Supported collateral struct consisting of the collateral's token\\n    // addresses, collateral flavor/type, current cap and withdrawal\\n    // amounts, the latest checkpointed cap, and exchange rate (for\\n    // cTokens). An interface for the DerivaDEX Insurance Fund token\\n    // corresponding to this collateral is also maintained.\\n    struct StakeCollateral {\\n        address underlyingToken;\\n        address collateralToken;\\n        IDIFundToken diFundToken;\\n        uint96 cap;\\n        uint96 withdrawalFeeCap;\\n        uint96 checkpointCap;\\n        uint96 exchangeRate;\\n        Flavor flavor;\\n    }\\n\\n    // Contains the yield accrued and the total normalized cap.\\n    // Total normalized cap is maintained for Compound flavors so COMP\\n    // distribution can be paid out properly\\n    struct ExternalYieldCheckpoint {\\n        uint96 accrued;\\n        uint96 totalNormalizedCap;\\n    }\\n\\n    // Type of collateral\\n    enum Flavor { Vanilla, Compound, Aave }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/LibDiamondStorageInsuranceFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { InsuranceFundDefs } from \\\"../libs/defs/InsuranceFundDefs.sol\\\";\\nimport { IDIFundTokenFactory } from \\\"../tokens/interfaces/IDIFundTokenFactory.sol\\\";\\n\\nlibrary LibDiamondStorageInsuranceFund {\\n    struct DiamondStorageInsuranceFund {\\n        // List of supported collateral names\\n        bytes32[] collateralNames;\\n        // Collateral name to stake collateral struct\\n        mapping(bytes32 => InsuranceFundDefs.StakeCollateral) stakeCollaterals;\\n        mapping(address => InsuranceFundDefs.DDXClaimantState) ddxClaimantState;\\n        // aToken name to yield checkpoints\\n        mapping(bytes32 => InsuranceFundDefs.ExternalYieldCheckpoint) aTokenYields;\\n        mapping(address => uint256) stakerToOtherRewardsClaims;\\n        // Interval to COMP yield checkpoint\\n        InsuranceFundDefs.ExternalYieldCheckpoint compYields;\\n        // Set the interval for other rewards claiming checkpoints\\n        // (i.e. COMP and aTokens that accrue to the contract)\\n        // (e.g. 40320 ~ 1 week = 7 * 24 * 60 * 60 / 15 blocks)\\n        uint32 interval;\\n        // Current insurance mining withdrawal factor\\n        uint32 withdrawalFactor;\\n        // DDX to be issued per block as insurance mining reward\\n        uint96 mineRatePerBlock;\\n        // Incentive to advance the insurance mining interval\\n        // (e.g. 100e18 = 100 DDX)\\n        uint96 advanceIntervalReward;\\n        // Total DDX insurance mined\\n        uint96 minedAmount;\\n        // Insurance fund capitalization due to liquidations and fees\\n        uint96 liqAndFeeCapitalization;\\n        // Checkpoint block for other rewards\\n        uint256 otherRewardsCheckpointBlock;\\n        // Insurance mining final block number\\n        uint256 miningFinalBlockNumber;\\n        InsuranceFundDefs.DDXMarketState ddxMarketState;\\n        IDIFundTokenFactory diFundTokenFactory;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION_INSURANCE_FUND =\\n        keccak256(\\\"diamond.standard.diamond.storage.DerivaDEX.InsuranceFund\\\");\\n\\n    function diamondStorageInsuranceFund() internal pure returns (DiamondStorageInsuranceFund storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION_INSURANCE_FUND;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/LibDiamondStoragePause.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nlibrary LibDiamondStoragePause {\\n    struct DiamondStoragePause {\\n        bool isPaused;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION_PAUSE = keccak256(\\\"diamond.standard.diamond.storage.DerivaDEX.Pause\\\");\\n\\n    function diamondStoragePause() internal pure returns (DiamondStoragePause storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION_PAUSE;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IAToken {\\n    function decimals() external returns (uint256);\\n\\n    function transfer(address _recipient, uint256 _amount) external;\\n\\n    function balanceOf(address _user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/facets/interfaces/IComptroller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nabstract contract IComptroller {\\n    struct CompMarketState {\\n        uint224 index;\\n        uint32 block;\\n    }\\n\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true; // solhint-disable-line const-name-snakecase\\n\\n    // @notice The COMP market supply state for each market\\n    mapping(address => CompMarketState) public compSupplyState;\\n\\n    /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n    mapping(address => mapping(address => uint256)) public compSupplierIndex;\\n\\n    /// @notice The portion of compRate that each market currently receives\\n    mapping(address => uint256) public compSpeeds;\\n\\n    /// @notice The COMP accrued but not yet transferred to each user\\n    mapping(address => uint256) public compAccrued;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external virtual returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external virtual returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external virtual returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external virtual;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external virtual returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external virtual;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external virtual returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external virtual;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external virtual returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external virtual;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external virtual returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external virtual;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external virtual returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external virtual;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external virtual returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external virtual;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external virtual returns (uint256, uint256);\\n\\n    function claimComp(address holder) public virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/facets/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface ICToken {\\n    function accrueInterest() external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getCash() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IDIFundToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title IDIFundToken\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is the native token contract for DerivaDEX. It\\n *         implements the ERC-20 standard, with additional\\n *         functionality to efficiently handle the governance aspect of\\n *         the DerivaDEX ecosystem.\\n * @dev The contract makes use of some nonstandard types not seen in\\n *      the ERC-20 standard. The DDX token makes frequent use of the\\n *      uint96 data type, as opposed to the more standard uint256 type.\\n *      Given the maintenance of arrays of balances, allowances, and\\n *      voting checkpoints, this allows us to more efficiently pack\\n *      data together, thereby resulting in cheaper transactions.\\n */\\ninterface IDIFundToken {\\n    function transfer(address _recipient, uint256 _amount) external returns (bool);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function burnFrom(address _account, uint256 _amount) external;\\n\\n    function delegate(address _delegatee) external;\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool);\\n\\n    function approve(address _spender, uint256 _amount) external returns (bool);\\n\\n    function getPriorValues(address account, uint256 blockNumber) external view returns (uint96);\\n\\n    function getTotalPriorValues(uint256 blockNumber) external view returns (uint96);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/interfaces/IDIFundTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { DIFundToken } from \\\"../DIFundToken.sol\\\";\\n\\n/**\\n * @title DIFundToken\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is the token contract for tokenized DerivaDEX insurance\\n *         fund positions. It implements the ERC-20 standard, with\\n *         additional functionality around snapshotting user and global\\n *         balances.\\n * @dev The contract makes use of some nonstandard types not seen in\\n *      the ERC-20 standard. The DIFundToken makes frequent use of the\\n *      uint96 data type, as opposed to the more standard uint256 type.\\n *      Given the maintenance of arrays of balances and allowances, this\\n *      allows us to more efficiently pack data together, thereby\\n *      resulting in cheaper transactions.\\n */\\ninterface IDIFundTokenFactory {\\n    function createNewDIFundToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external returns (address);\\n\\n    function diFundTokens(uint256 index) external returns (DIFundToken);\\n\\n    function issuer() external view returns (address);\\n\\n    function getDIFundTokens() external view returns (DIFundToken[] memory);\\n\\n    function getDIFundTokensLength() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DIFundToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { LibBytes } from \\\"../libs/LibBytes.sol\\\";\\nimport { LibEIP712 } from \\\"../libs/LibEIP712.sol\\\";\\nimport { LibPermit } from \\\"../libs/LibPermit.sol\\\";\\nimport { SafeMath96 } from \\\"../libs/SafeMath96.sol\\\";\\nimport { IInsuranceFund } from \\\"../facets/interfaces/IInsuranceFund.sol\\\";\\n\\n/**\\n * @title DIFundToken\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is the token contract for tokenized DerivaDEX insurance\\n *         fund positions. It implements the ERC-20 standard, with\\n *         additional functionality around snapshotting user and global\\n *         balances.\\n * @dev The contract makes use of some nonstandard types not seen in\\n *      the ERC-20 standard. The DIFundToken makes frequent use of the\\n *      uint96 data type, as opposed to the more standard uint256 type.\\n *      Given the maintenance of arrays of balances and allowances, this\\n *      allows us to more efficiently pack data together, thereby\\n *      resulting in cheaper transactions.\\n */\\ncontract DIFundToken {\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint256;\\n    using LibBytes for bytes;\\n\\n    uint256 internal _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    string private _version;\\n    uint8 private _decimals;\\n\\n    /// @notice Address authorized to issue/mint DDX tokens\\n    address public issuer;\\n\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A checkpoint for marking vote count from given block\\n    struct Checkpoint {\\n        uint32 id;\\n        uint96 values;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint256) public numCheckpoints;\\n\\n    mapping(uint256 => Checkpoint) totalCheckpoints;\\n\\n    uint256 numTotalCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Emitted when a user account's balance changes\\n    event ValuesChanged(address indexed user, uint96 previousValue, uint96 newValue);\\n\\n    /// @notice Emitted when a user account's balance changes\\n    event TotalValuesChanged(uint96 previousValue, uint96 newValue);\\n\\n    /// @notice Emitted when transfer takes place\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice Emitted when approval takes place\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new DIFundToken token\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals,\\n        address _issuer\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n        _version = \\\"1\\\";\\n\\n        // Set issuer to deploying address\\n        issuer = _issuer;\\n    }\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     * @return Name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the token.\\n     * @return Symbol of the token.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     * @return Number of decimals.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param _spender The address of the account which may transfer tokens\\n     * @param _amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address _spender, uint256 _amount) external returns (bool) {\\n        require(_spender != address(0), \\\"DIFT: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Set allowance\\n        allowances[msg.sender][_spender] = amount;\\n\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool) {\\n        require(_spender != address(0), \\\"DIFT: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_addedValue == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_addedValue, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Increase allowance\\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].add96(amount);\\n\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool) {\\n        require(_spender != address(0), \\\"DIFT: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_subtractedValue == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_subtractedValue, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Decrease allowance\\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].sub96(\\n            amount,\\n            \\\"DIFT: decreased allowance below zero.\\\"\\n        );\\n\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param _account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param _recipient The address of the destination account\\n     * @param _amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Claim DDX rewards on behalf of the sender\\n        IInsuranceFund(issuer).claimDDXFromInsuranceMining(msg.sender);\\n\\n        // Claim DDX rewards on behalf of the recipient\\n        IInsuranceFund(issuer).claimDDXFromInsuranceMining(_recipient);\\n\\n        // Transfer tokens from sender to recipient\\n        _transferTokens(msg.sender, _recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param _sender The address of the source account\\n     * @param _recipient The address of the destination account\\n     * @param _amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool) {\\n        uint96 spenderAllowance = allowances[_sender][msg.sender];\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        if (msg.sender != _sender && spenderAllowance != uint96(-1)) {\\n            // Tx sender is not the same as transfer sender and doesn't\\n            // have unlimited allowance.\\n            // Reduce allowance by amount being transferred\\n            uint96 newAllowance = spenderAllowance.sub96(amount);\\n            allowances[_sender][msg.sender] = newAllowance;\\n\\n            emit Approval(_sender, msg.sender, newAllowance);\\n        }\\n\\n        // Claim DDX rewards on behalf of the sender\\n        IInsuranceFund(issuer).claimDDXFromInsuranceMining(_sender);\\n\\n        // Claim DDX rewards on behalf of the recipient\\n        IInsuranceFund(issuer).claimDDXFromInsuranceMining(_recipient);\\n\\n        // Transfer tokens from sender to recipient\\n        _transferTokens(_sender, _recipient, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function mint(address _recipient, uint256 _amount) external {\\n        require(msg.sender == issuer, \\\"DIFT: unauthorized mint.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Mint tokens to recipient\\n        _transferTokensMint(_recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, decreasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function burn(uint256 _amount) external {\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Burn tokens from sender\\n        _transferTokensBurn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function burnFrom(address _account, uint256 _amount) external {\\n        uint96 spenderAllowance = allowances[_account][msg.sender];\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        if (msg.sender != _account && spenderAllowance != uint96(-1) && msg.sender != issuer) {\\n            // Tx sender is not the same as burn account and doesn't\\n            // have unlimited allowance.\\n            // Reduce allowance by amount being transferred\\n            uint96 newAllowance = spenderAllowance.sub96(amount, \\\"DIFT: burn amount exceeds allowance.\\\");\\n            allowances[_account][msg.sender] = newAllowance;\\n\\n            emit Approval(_account, msg.sender, newAllowance);\\n        }\\n\\n        // Burn tokens from account\\n        _transferTokensBurn(_account, amount);\\n    }\\n\\n    /**\\n     * @notice Permits allowance from signatory to `spender`\\n     * @param _spender The spender being approved\\n     * @param _value The value being approved\\n     * @param _nonce The contract state required to match the signature\\n     * @param _expiry The time at which to expire the signature\\n     * @param _signature Signature\\n     */\\n    function permit(\\n        address _spender,\\n        uint256 _value,\\n        uint256 _nonce,\\n        uint256 _expiry,\\n        bytes memory _signature\\n    ) external {\\n        // Perform EIP712 hashing logic\\n        bytes32 eip712OrderParamsDomainHash = LibEIP712.hashEIP712Domain(_name, _version, getChainId(), address(this));\\n        bytes32 permitHash =\\n            LibPermit.getPermitHash(\\n                LibPermit.Permit({ spender: _spender, value: _value, nonce: _nonce, expiry: _expiry }),\\n                eip712OrderParamsDomainHash\\n            );\\n\\n        // Perform sig recovery\\n        uint8 v = uint8(_signature[0]);\\n        bytes32 r = _signature.readBytes32(1);\\n        bytes32 s = _signature.readBytes32(33);\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        address recovered = ecrecover(permitHash, v, r, s);\\n\\n        require(recovered != address(0), \\\"DIFT: invalid signature.\\\");\\n        require(_nonce == nonces[recovered]++, \\\"DIFT: invalid nonce.\\\");\\n        require(block.timestamp <= _expiry, \\\"DIFT: signature expired.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_value == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_value, \\\"DIFT: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Set allowance\\n        allowances[recovered][_spender] = amount;\\n        emit Approval(recovered, _spender, _value);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param _account The address of the account holding the funds\\n     * @param _spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address _account, address _spender) external view returns (uint256) {\\n        return allowances[_account][_spender];\\n    }\\n\\n    /**\\n     * @notice Get the total max supply of DDX tokens\\n     * @return The total max supply of DDX\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of values for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param _account The address of the account to check\\n     * @param _blockNumber The block number to get the vote balance at\\n     * @return The number of values the account had as of the given block\\n     */\\n    function getPriorValues(address _account, uint256 _blockNumber) external view returns (uint96) {\\n        require(_blockNumber < block.number, \\\"DIFT: block not yet determined.\\\");\\n\\n        uint256 numCheckpointsAccount = numCheckpoints[_account];\\n        if (numCheckpointsAccount == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[_account][numCheckpointsAccount - 1].id <= _blockNumber) {\\n            return checkpoints[_account][numCheckpointsAccount - 1].values;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[_account][0].id > _blockNumber) {\\n            return 0;\\n        }\\n\\n        // Perform binary search to find the most recent token holdings\\n        uint256 lower = 0;\\n        uint256 upper = numCheckpointsAccount - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint256 center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = checkpoints[_account][center];\\n            if (cp.id == _blockNumber) {\\n                return cp.values;\\n            } else if (cp.id < _blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[_account][lower].values;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of values for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param _blockNumber The block number to get the vote balance at\\n     * @return The number of values the account had as of the given block\\n     */\\n    function getTotalPriorValues(uint256 _blockNumber) external view returns (uint96) {\\n        require(_blockNumber < block.number, \\\"DIFT: block not yet determined.\\\");\\n\\n        if (numTotalCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (totalCheckpoints[numTotalCheckpoints - 1].id <= _blockNumber) {\\n            return totalCheckpoints[numTotalCheckpoints - 1].values;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (totalCheckpoints[0].id > _blockNumber) {\\n            return 0;\\n        }\\n\\n        // Perform binary search to find the most recent token holdings\\n        // leading to a measure of voting power\\n        uint256 lower = 0;\\n        uint256 upper = numTotalCheckpoints - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint256 center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = totalCheckpoints[center];\\n            if (cp.id == _blockNumber) {\\n                return cp.values;\\n            } else if (cp.id < _blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return totalCheckpoints[lower].values;\\n    }\\n\\n    function _transferTokens(\\n        address _spender,\\n        address _recipient,\\n        uint96 _amount\\n    ) internal {\\n        require(_spender != address(0), \\\"DIFT: cannot transfer from the zero address.\\\");\\n        require(_recipient != address(0), \\\"DIFT: cannot transfer to the zero address.\\\");\\n\\n        // Reduce spender's balance and increase recipient balance\\n        balances[_spender] = balances[_spender].sub96(_amount);\\n        balances[_recipient] = balances[_recipient].add96(_amount);\\n        emit Transfer(_spender, _recipient, _amount);\\n\\n        // Move values from spender to recipient\\n        _moveTokens(_spender, _recipient, _amount);\\n    }\\n\\n    function _transferTokensMint(address _recipient, uint96 _amount) internal {\\n        require(_recipient != address(0), \\\"DIFT: cannot transfer to the zero address.\\\");\\n\\n        // Add to recipient's balance\\n        balances[_recipient] = balances[_recipient].add96(_amount);\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n\\n        emit Transfer(address(0), _recipient, _amount);\\n\\n        // Add value to recipient's checkpoint\\n        _moveTokens(address(0), _recipient, _amount);\\n        _writeTotalCheckpoint(_amount, true);\\n    }\\n\\n    function _transferTokensBurn(address _spender, uint96 _amount) internal {\\n        require(_spender != address(0), \\\"DIFT: cannot transfer from the zero address.\\\");\\n\\n        // Reduce the spender/burner's balance\\n        balances[_spender] = balances[_spender].sub96(_amount, \\\"DIFT: not enough balance to burn.\\\");\\n\\n        // Reduce the circulating supply\\n        _totalSupply = _totalSupply.sub(_amount);\\n        emit Transfer(_spender, address(0), _amount);\\n\\n        // Reduce value from spender's checkpoint\\n        _moveTokens(_spender, address(0), _amount);\\n        _writeTotalCheckpoint(_amount, false);\\n    }\\n\\n    function _moveTokens(\\n        address _initUser,\\n        address _finUser,\\n        uint96 _amount\\n    ) internal {\\n        if (_initUser != _finUser && _amount > 0) {\\n            // Initial user address is different than final\\n            // user address and nonzero number of values moved\\n            if (_initUser != address(0)) {\\n                uint256 initUserNum = numCheckpoints[_initUser];\\n\\n                // Retrieve and compute the old and new initial user\\n                // address' values\\n                uint96 initUserOld = initUserNum > 0 ? checkpoints[_initUser][initUserNum - 1].values : 0;\\n                uint96 initUserNew = initUserOld.sub96(_amount);\\n                _writeCheckpoint(_initUser, initUserOld, initUserNew);\\n            }\\n\\n            if (_finUser != address(0)) {\\n                uint256 finUserNum = numCheckpoints[_finUser];\\n\\n                // Retrieve and compute the old and new final user\\n                // address' values\\n                uint96 finUserOld = finUserNum > 0 ? checkpoints[_finUser][finUserNum - 1].values : 0;\\n                uint96 finUserNew = finUserOld.add96(_amount);\\n                _writeCheckpoint(_finUser, finUserOld, finUserNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address _user,\\n        uint96 _oldValues,\\n        uint96 _newValues\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"DIFT: exceeds 32 bits.\\\");\\n        uint256 userNum = numCheckpoints[_user];\\n        if (userNum > 0 && checkpoints[_user][userNum - 1].id == blockNumber) {\\n            // If latest checkpoint is current block, edit in place\\n            checkpoints[_user][userNum - 1].values = _newValues;\\n        } else {\\n            // Create a new id, value pair\\n            checkpoints[_user][userNum] = Checkpoint({ id: blockNumber, values: _newValues });\\n            numCheckpoints[_user] = userNum.add(1);\\n        }\\n\\n        emit ValuesChanged(_user, _oldValues, _newValues);\\n    }\\n\\n    function _writeTotalCheckpoint(uint96 _amount, bool increase) internal {\\n        if (_amount > 0) {\\n            uint32 blockNumber = safe32(block.number, \\\"DIFT: exceeds 32 bits.\\\");\\n            uint96 oldValues = numTotalCheckpoints > 0 ? totalCheckpoints[numTotalCheckpoints - 1].values : 0;\\n            uint96 newValues = increase ? oldValues.add96(_amount) : oldValues.sub96(_amount);\\n\\n            if (numTotalCheckpoints > 0 && totalCheckpoints[numTotalCheckpoints - 1].id == block.number) {\\n                // If latest checkpoint is current block, edit in place\\n                totalCheckpoints[numTotalCheckpoints - 1].values = newValues;\\n            } else {\\n                // Create a new id, value pair\\n                totalCheckpoints[numTotalCheckpoints].id = blockNumber;\\n                totalCheckpoints[numTotalCheckpoints].values = newValues;\\n                numTotalCheckpoints = numTotalCheckpoints.add(1);\\n            }\\n\\n            emit TotalValuesChanged(oldValues, newValues);\\n        }\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibBytes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.6.12;\\n\\nlibrary LibBytes {\\n    using LibBytes for bytes;\\n\\n    /// @dev Gets the memory address for a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of byte array. This\\n    ///         points to the header of the byte array which contains\\n    ///         the length.\\n    function rawAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := input\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n    /// @param input Byte array to lookup.\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n    function contentAddress(bytes memory input) internal pure returns (uint256 memoryAddress) {\\n        assembly {\\n            memoryAddress := add(input, 32)\\n        }\\n        return memoryAddress;\\n    }\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n    /// @param dest memory address to copy bytes to.\\n    /// @param source memory address to copy bytes from.\\n    /// @param length number of bytes to copy.\\n    function memCopy(\\n        uint256 dest,\\n        uint256 source,\\n        uint256 length\\n    ) internal pure {\\n        if (length < 32) {\\n            // Handle a partial word by reading destination and masking\\n            // off the bits we are interested in.\\n            // This correctly handles overlap, zero lengths and source == dest\\n            assembly {\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n                let s := and(mload(source), not(mask))\\n                let d := and(mload(dest), mask)\\n                mstore(dest, or(s, d))\\n            }\\n        } else {\\n            // Skip the O(length) loop when source == dest.\\n            if (source == dest) {\\n                return;\\n            }\\n\\n            // For large copies we copy whole words at a time. The final\\n            // word is aligned to the end of the range (instead of after the\\n            // previous) to handle partial words. So a copy will look like this:\\n            //\\n            //  ####\\n            //      ####\\n            //          ####\\n            //            ####\\n            //\\n            // We handle overlap in the source and destination range by\\n            // changing the copying direction. This prevents us from\\n            // overwriting parts of source that we still need to copy.\\n            //\\n            // This correctly handles source == dest\\n            //\\n            if (source > dest) {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n                    // is easier to compare with in the loop, and these\\n                    // are also the addresses we need for copying the\\n                    // last bytes.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the last 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the last bytes in\\n                    // source already due to overlap.\\n                    let last := mload(sEnd)\\n\\n                    // Copy whole words front to back\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {\\n\\n                    } lt(source, sEnd) {\\n\\n                    } {\\n                        mstore(dest, mload(source))\\n                        source := add(source, 32)\\n                        dest := add(dest, 32)\\n                    }\\n\\n                    // Write the last 32 bytes\\n                    mstore(dEnd, last)\\n                }\\n            } else {\\n                assembly {\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n                    // are the starting points when copying a word at the end.\\n                    length := sub(length, 32)\\n                    let sEnd := add(source, length)\\n                    let dEnd := add(dest, length)\\n\\n                    // Remember the first 32 bytes of source\\n                    // This needs to be done here and not after the loop\\n                    // because we may have overwritten the first bytes in\\n                    // source already due to overlap.\\n                    let first := mload(source)\\n\\n                    // Copy whole words back to front\\n                    // We use a signed comparisson here to allow dEnd to become\\n                    // negative (happens when source and dest < 32). Valid\\n                    // addresses in local memory will never be larger than\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n                    // Note: the first check is always true,\\n                    // this could have been a do-while loop.\\n                    // solhint-disable-next-line no-empty-blocks\\n                    for {\\n\\n                    } slt(dest, dEnd) {\\n\\n                    } {\\n                        mstore(dEnd, mload(sEnd))\\n                        sEnd := sub(sEnd, 32)\\n                        dEnd := sub(dEnd, 32)\\n                    }\\n\\n                    // Write the first 32 bytes\\n                    mstore(dest, first)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a slices from a byte array.\\n    /// @param b The byte array to take a slice from.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    function slice(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (bytes memory result) {\\n        require(from <= to, \\\"FROM_LESS_THAN_TO_REQUIRED\\\");\\n        require(to <= b.length, \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\");\\n\\n        // Create a new bytes structure and copy contents\\n        result = new bytes(to - from);\\n        memCopy(result.contentAddress(), b.contentAddress() + from, result.length);\\n        return result;\\n    }\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n    /// @param from The starting index for the slice (inclusive).\\n    /// @param to The final index for the slice (exclusive).\\n    /// @return result The slice containing bytes at indices [from, to)\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n    function sliceDestructive(\\n        bytes memory b,\\n        uint256 from,\\n        uint256 to\\n    ) internal pure returns (bytes memory result) {\\n        require(from <= to, \\\"FROM_LESS_THAN_TO_REQUIRED\\\");\\n        require(to <= b.length, \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\");\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n        assembly {\\n            result := add(b, from)\\n            mstore(result, sub(to, from))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The byte that was popped off.\\n    function popLastByte(bytes memory b) internal pure returns (bytes1 result) {\\n        require(b.length > 0, \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\");\\n\\n        // Store last byte.\\n        result = b[b.length - 1];\\n\\n        assembly {\\n            // Decrement length of byte array.\\n            let newLen := sub(mload(b), 1)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n    /// @param b Byte array that will be modified.\\n    /// @return result The 20 byte address that was popped off.\\n    function popLast20Bytes(bytes memory b) internal pure returns (address result) {\\n        require(b.length >= 20, \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\");\\n\\n        // Store last 20 bytes.\\n        result = readAddress(b, b.length - 20);\\n\\n        assembly {\\n            // Subtract 20 from byte array length.\\n            let newLen := sub(mload(b), 20)\\n            mstore(b, newLen)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Tests equality of two byte arrays.\\n    /// @param lhs First byte array to compare.\\n    /// @param rhs Second byte array to compare.\\n    /// @return equal True if arrays are the same. False otherwise.\\n    function equals(bytes memory lhs, bytes memory rhs) internal pure returns (bool equal) {\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n        // We early exit on unequal lengths, but keccak would also correctly\\n        // handle this.\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(bytes memory b, uint256 index) internal pure returns (address result) {\\n        require(\\n            b.length >= index + 20, // 20 is length of address\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n    /// @param b Byte array to insert address into.\\n    /// @param index Index in byte array of address.\\n    /// @param input Address to put into byte array.\\n    function writeAddress(\\n        bytes memory b,\\n        uint256 index,\\n        address input\\n    ) internal pure {\\n        require(\\n            b.length >= index + 20, // 20 is length of address\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Store address into array memory\\n        assembly {\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n            let neighbors := and(\\n                mload(add(b, index)),\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n            )\\n\\n            // Make sure input address is clean.\\n            // (Solidity does not guarantee this)\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n            // Store the neighbors and address into memory\\n            mstore(add(b, index), xor(input, neighbors))\\n        }\\n    }\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes32 value.\\n    /// @param index Index in byte array of bytes32 value.\\n    /// @return result bytes32 value from byte array.\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        require(b.length >= index + 32, \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\");\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes32 to put into byte array.\\n    function writeBytes32(\\n        bytes memory b,\\n        uint256 index,\\n        bytes32 input\\n    ) internal pure {\\n        require(b.length >= index + 32, \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\");\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            mstore(add(b, index), input)\\n        }\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(bytes memory b, uint256 index) internal pure returns (uint256 result) {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input uint256 to put into byte array.\\n    function writeUint256(\\n        bytes memory b,\\n        uint256 index,\\n        uint256 input\\n    ) internal pure {\\n        writeBytes32(b, index, bytes32(input));\\n    }\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n    /// @param b Byte array containing a bytes4 value.\\n    /// @param index Index in byte array of bytes4 value.\\n    /// @return result bytes4 value from byte array.\\n    function readBytes4(bytes memory b, uint256 index) internal pure returns (bytes4 result) {\\n        require(b.length >= index + 4, \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\");\\n\\n        // Arrays are prefixed by a 32 byte length field\\n        index += 32;\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads nested bytes from a specific position.\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n    ///            Both should be treated as immutable.\\n    /// @param b Byte array containing nested bytes.\\n    /// @param index Index of nested bytes.\\n    /// @return result Nested bytes.\\n    function readBytesWithLength(bytes memory b, uint256 index) internal pure returns (bytes memory result) {\\n        // Read length of nested bytes\\n        uint256 nestedBytesLength = readUint256(b, index);\\n        index += 32;\\n\\n        // Assert length of <b> is valid, given\\n        // length of nested bytes\\n        require(b.length >= index + nestedBytesLength, \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\");\\n\\n        // Return a pointer to the byte array as it exists inside `b`\\n        assembly {\\n            result := add(b, index)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n    /// @param b Byte array to insert <input> into.\\n    /// @param index Index in byte array of <input>.\\n    /// @param input bytes to insert.\\n    function writeBytesWithLength(\\n        bytes memory b,\\n        uint256 index,\\n        bytes memory input\\n    ) internal pure {\\n        // Assert length of <b> is valid, given\\n        // length of input\\n        require(\\n            b.length >= index + 32 + input.length, // 32 bytes to store length\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n        );\\n\\n        // Copy <input> into <b>\\n        memCopy(\\n            b.contentAddress() + index,\\n            input.rawAddress(), // includes length of <input>\\n            input.length + 32 // +32 bytes to store <input> length\\n        );\\n    }\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n    /// @param source Byte array to copy onto dest bytes.\\n    function deepCopyBytes(bytes memory dest, bytes memory source) internal pure {\\n        uint256 sourceLen = source.length;\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n        require(dest.length >= sourceLen, \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\");\\n        memCopy(dest.contentAddress(), source.contentAddress(), sourceLen);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n  Copyright 2019 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.6.12;\\n\\nlibrary LibEIP712 {\\n    // Hash of the EIP712 Domain Separator Schema\\n    // keccak256(abi.encodePacked(\\n    //     \\\"EIP712Domain(\\\",\\n    //     \\\"string name,\\\",\\n    //     \\\"string version,\\\",\\n    //     \\\"uint256 chainId,\\\",\\n    //     \\\"address verifyingContract\\\",\\n    //     \\\")\\\"\\n    // ))\\n    bytes32 internal constant _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH =\\n        0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev Calculates a EIP712 domain separator.\\n    /// @param name The EIP712 domain name.\\n    /// @param version The EIP712 domain version.\\n    /// @param verifyingContract The EIP712 verifying contract.\\n    /// @return result EIP712 domain separator.\\n    function hashEIP712Domain(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId,\\n        address verifyingContract\\n    ) internal pure returns (bytes32 result) {\\n        bytes32 schemaHash = _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH;\\n\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     _EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n        //     keccak256(bytes(name)),\\n        //     keccak256(bytes(version)),\\n        //     chainId,\\n        //     uint256(verifyingContract)\\n        // ))\\n\\n        assembly {\\n            // Calculate hashes of dynamic data\\n            let nameHash := keccak256(add(name, 32), mload(name))\\n            let versionHash := keccak256(add(version, 32), mload(version))\\n\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            // Store params in memory\\n            mstore(memPtr, schemaHash)\\n            mstore(add(memPtr, 32), nameHash)\\n            mstore(add(memPtr, 64), versionHash)\\n            mstore(add(memPtr, 96), chainId)\\n            mstore(add(memPtr, 128), verifyingContract)\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 160)\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Calculates EIP712 encoding for a hash struct with a given domain hash.\\n    /// @param eip712DomainHash Hash of the domain domain separator data, computed\\n    ///                         with getDomainHash().\\n    /// @param hashStruct The EIP712 hash struct.\\n    /// @return result EIP712 hash applied to the given EIP712 Domain.\\n    function hashEIP712Message(bytes32 eip712DomainHash, bytes32 hashStruct) internal pure returns (bytes32 result) {\\n        // Assembly for more efficient computing:\\n        // keccak256(abi.encodePacked(\\n        //     EIP191_HEADER,\\n        //     EIP712_DOMAIN_HASH,\\n        //     hashStruct\\n        // ));\\n\\n        assembly {\\n            // Load free memory pointer\\n            let memPtr := mload(64)\\n\\n            mstore(memPtr, 0x1901000000000000000000000000000000000000000000000000000000000000) // EIP191 header\\n            mstore(add(memPtr, 2), eip712DomainHash) // EIP712 domain hash\\n            mstore(add(memPtr, 34), hashStruct) // Hash of struct\\n\\n            // Compute hash\\n            result := keccak256(memPtr, 66)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibPermit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport { LibEIP712 } from \\\"./LibEIP712.sol\\\";\\n\\nlibrary LibPermit {\\n    struct Permit {\\n        address spender; // Spender\\n        uint256 value; // Value\\n        uint256 nonce; // Nonce\\n        uint256 expiry; // Expiry\\n    }\\n\\n    // Hash for the EIP712 LibPermit Schema\\n    //    bytes32 constant internal EIP712_PERMIT_SCHEMA_HASH = keccak256(abi.encodePacked(\\n    //        \\\"Permit(\\\",\\n    //        \\\"address spender,\\\",\\n    //        \\\"uint256 value,\\\",\\n    //        \\\"uint256 nonce,\\\",\\n    //        \\\"uint256 expiry\\\",\\n    //        \\\")\\\"\\n    //    ));\\n    bytes32 internal constant EIP712_PERMIT_SCHEMA_HASH =\\n        0x58e19c95adc541dea238d3211d11e11e7def7d0c7fda4e10e0c45eb224ef2fb7;\\n\\n    /// @dev Calculates Keccak-256 hash of the permit.\\n    /// @param permit The permit structure.\\n    /// @return permitHash Keccak-256 EIP712 hash of the permit.\\n    function getPermitHash(Permit memory permit, bytes32 eip712ExchangeDomainHash)\\n        internal\\n        pure\\n        returns (bytes32 permitHash)\\n    {\\n        permitHash = LibEIP712.hashEIP712Message(eip712ExchangeDomainHash, hashPermit(permit));\\n        return permitHash;\\n    }\\n\\n    /// @dev Calculates EIP712 hash of the permit.\\n    /// @param permit The permit structure.\\n    /// @return result EIP712 hash of the permit.\\n    function hashPermit(Permit memory permit) internal pure returns (bytes32 result) {\\n        // Assembly for more efficiently computing:\\n        bytes32 schemaHash = EIP712_PERMIT_SCHEMA_HASH;\\n\\n        assembly {\\n            // Assert permit offset (this is an internal error that should never be triggered)\\n            if lt(permit, 32) {\\n                invalid()\\n            }\\n\\n            // Calculate memory addresses that will be swapped out before hashing\\n            let pos1 := sub(permit, 32)\\n\\n            // Backup\\n            let temp1 := mload(pos1)\\n\\n            // Hash in place\\n            mstore(pos1, schemaHash)\\n            result := keccak256(pos1, 160)\\n\\n            // Restore\\n            mstore(pos1, temp1)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/interfaces/IInsuranceFund.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IInsuranceFund {\\n    function claimDDXFromInsuranceMining(address _claimant) external;\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DIFundTokenFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { LibBytes } from \\\"../libs/LibBytes.sol\\\";\\nimport { LibEIP712 } from \\\"../libs/LibEIP712.sol\\\";\\nimport { LibPermit } from \\\"../libs/LibPermit.sol\\\";\\nimport { SafeMath96 } from \\\"../libs/SafeMath96.sol\\\";\\nimport { DIFundToken } from \\\"./DIFundToken.sol\\\";\\n\\n/**\\n * @title DIFundTokenFactory\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is the native token contract for DerivaDEX. It\\n *         implements the ERC-20 standard, with additional\\n *         functionality to efficiently handle the governance aspect of\\n *         the DerivaDEX ecosystem.\\n * @dev The contract makes use of some nonstandard types not seen in\\n *      the ERC-20 standard. The DDX token makes frequent use of the\\n *      uint96 data type, as opposed to the more standard uint256 type.\\n *      Given the maintenance of arrays of balances, allowances, and\\n *      voting checkpoints, this allows us to more efficiently pack\\n *      data together, thereby resulting in cheaper transactions.\\n */\\ncontract DIFundTokenFactory {\\n    DIFundToken[] public diFundTokens;\\n\\n    address public issuer;\\n\\n    /**\\n     * @notice Construct a new DDX token\\n     */\\n    constructor(address _issuer) public {\\n        // Set issuer to deploying address\\n        issuer = _issuer;\\n    }\\n\\n    function createNewDIFundToken(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) external returns (address) {\\n        require(msg.sender == issuer, \\\"DIFTF: unauthorized.\\\");\\n        DIFundToken diFundToken = new DIFundToken(_name, _symbol, _decimals, issuer);\\n        diFundTokens.push(diFundToken);\\n        return address(diFundToken);\\n    }\\n\\n    function getDIFundTokens() external view returns (DIFundToken[] memory) {\\n        return diFundTokens;\\n    }\\n\\n    function getDIFundTokensLength() external view returns (uint256) {\\n        return diFundTokens.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DDX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { LibBytes } from \\\"../libs/LibBytes.sol\\\";\\nimport { LibEIP712 } from \\\"../libs/LibEIP712.sol\\\";\\nimport { LibDelegation } from \\\"../libs/LibDelegation.sol\\\";\\nimport { LibPermit } from \\\"../libs/LibPermit.sol\\\";\\nimport { SafeMath96 } from \\\"../libs/SafeMath96.sol\\\";\\n\\n/**\\n * @title DDX\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is the native token contract for DerivaDEX. It\\n *         implements the ERC-20 standard, with additional\\n *         functionality to efficiently handle the governance aspect of\\n *         the DerivaDEX ecosystem.\\n * @dev The contract makes use of some nonstandard types not seen in\\n *      the ERC-20 standard. The DDX token makes frequent use of the\\n *      uint96 data type, as opposed to the more standard uint256 type.\\n *      Given the maintenance of arrays of balances, allowances, and\\n *      voting checkpoints, this allows us to more efficiently pack\\n *      data together, thereby resulting in cheaper transactions.\\n */\\ncontract DDX {\\n    using SafeMath96 for uint96;\\n    using SafeMath for uint256;\\n    using LibBytes for bytes;\\n\\n    /// @notice ERC20 token name for this token\\n    string public constant name = \\\"DerivaDAO\\\"; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice ERC20 token symbol for this token\\n    string public constant symbol = \\\"DDX\\\"; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice ERC20 token decimals for this token\\n    uint8 public constant decimals = 18; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice Version number for this token. Used for EIP712 hashing.\\n    string public constant version = \\\"1\\\"; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice Max number of tokens to be issued (100 million DDX)\\n    uint96 public constant MAX_SUPPLY = 100000000e18;\\n\\n    /// @notice Total number of tokens in circulation (50 million DDX)\\n    uint96 public constant PRE_MINE_SUPPLY = 50000000e18;\\n\\n    /// @notice Issued supply of tokens\\n    uint96 public issuedSupply;\\n\\n    /// @notice Current total/circulating supply of tokens\\n    uint96 public totalSupply;\\n\\n    /// @notice Whether ownership has been transferred to the DAO\\n    bool public ownershipTransferred;\\n\\n    /// @notice Address authorized to issue/mint DDX tokens\\n    address public issuer;\\n\\n    mapping(address => mapping(address => uint96)) internal allowances;\\n\\n    mapping(address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking vote count from given block\\n    struct Checkpoint {\\n        uint32 id;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint256) public numCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice Emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint96 previousBalance, uint96 newBalance);\\n\\n    /// @notice Emitted when transfer takes place\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice Emitted when approval takes place\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /**\\n     * @notice Construct a new DDX token\\n     */\\n    constructor() public {\\n        // Set issuer to deploying address\\n        issuer = msg.sender;\\n\\n        // Issue pre-mine token supply to deploying address and\\n        // set the issued and circulating supplies to pre-mine amount\\n        _transferTokensMint(msg.sender, PRE_MINE_SUPPLY);\\n    }\\n\\n    /**\\n     * @notice Transfer ownership of DDX token from the deploying\\n     *         address to the DerivaDEX Proxy/DAO\\n     * @param _derivaDEXProxy DerivaDEX Proxy address\\n     */\\n    function transferOwnershipToDerivaDEXProxy(address _derivaDEXProxy) external {\\n        // Ensure deploying address is calling this, destination is not\\n        // the zero address, and that ownership has never been\\n        // transferred thus far\\n        require(msg.sender == issuer, \\\"DDX: unauthorized transfer of ownership.\\\");\\n        require(_derivaDEXProxy != address(0), \\\"DDX: transferring to zero address.\\\");\\n        require(!ownershipTransferred, \\\"DDX: ownership already transferred.\\\");\\n\\n        // Set ownership transferred boolean flag and the new authorized\\n        // issuer\\n        ownershipTransferred = true;\\n        issuer = _derivaDEXProxy;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param _spender The address of the account which may transfer tokens\\n     * @param _amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address _spender, uint256 _amount) external returns (bool) {\\n        require(_spender != address(0), \\\"DDX: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Set allowance\\n        allowances[msg.sender][_spender] = amount;\\n\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool) {\\n        require(_spender != address(0), \\\"DDX: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_addedValue == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_addedValue, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Increase allowance\\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].add96(amount);\\n\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     * Emits an {Approval} event indicating the updated allowance.\\n     * Requirements:\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool) {\\n        require(_spender != address(0), \\\"DDX: approve to the zero address.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_subtractedValue == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_subtractedValue, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Decrease allowance\\n        allowances[msg.sender][_spender] = allowances[msg.sender][_spender].sub96(\\n            amount,\\n            \\\"DDX: decreased allowance below zero.\\\"\\n        );\\n\\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param _account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param _recipient The address of the destination account\\n     * @param _amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address _recipient, uint256 _amount) external returns (bool) {\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Transfer tokens from sender to recipient\\n        _transferTokens(msg.sender, _recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param _from The address of the source account\\n     * @param _recipient The address of the destination account\\n     * @param _amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _recipient,\\n        uint256 _amount\\n    ) external returns (bool) {\\n        uint96 spenderAllowance = allowances[_from][msg.sender];\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        if (msg.sender != _from && spenderAllowance != uint96(-1)) {\\n            // Tx sender is not the same as transfer sender and doesn't\\n            // have unlimited allowance.\\n            // Reduce allowance by amount being transferred\\n            uint96 newAllowance = spenderAllowance.sub96(amount);\\n            allowances[_from][msg.sender] = newAllowance;\\n\\n            emit Approval(_from, msg.sender, newAllowance);\\n        }\\n\\n        // Transfer tokens from sender to recipient\\n        _transferTokens(_from, _recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function mint(address _recipient, uint256 _amount) external {\\n        require(msg.sender == issuer, \\\"DDX: unauthorized mint.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Ensure the mint doesn't cause the issued supply to exceed\\n        // the total supply that could ever be issued\\n        require(issuedSupply.add96(amount) <= MAX_SUPPLY, \\\"DDX: cap exceeded.\\\");\\n\\n        // Mint tokens to recipient\\n        _transferTokensMint(_recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, decreasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function burn(uint256 _amount) external {\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Burn tokens from sender\\n        _transferTokensBurn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     *      the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function burnFrom(address _account, uint256 _amount) external {\\n        uint96 spenderAllowance = allowances[_account][msg.sender];\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_amount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_amount, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        if (msg.sender != _account && spenderAllowance != uint96(-1)) {\\n            // Tx sender is not the same as burn account and doesn't\\n            // have unlimited allowance.\\n            // Reduce allowance by amount being transferred\\n            uint96 newAllowance = spenderAllowance.sub96(amount, \\\"DDX: burn amount exceeds allowance.\\\");\\n            allowances[_account][msg.sender] = newAllowance;\\n\\n            emit Approval(_account, msg.sender, newAllowance);\\n        }\\n\\n        // Burn tokens from account\\n        _transferTokensBurn(_account, amount);\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param _delegatee The address to delegate votes to\\n     */\\n    function delegate(address _delegatee) external {\\n        _delegate(msg.sender, _delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param _delegatee The address to delegate votes to\\n     * @param _nonce The contract state required to match the signature\\n     * @param _expiry The time at which to expire the signature\\n     * @param _signature Signature\\n     */\\n    function delegateBySig(\\n        address _delegatee,\\n        uint256 _nonce,\\n        uint256 _expiry,\\n        bytes memory _signature\\n    ) external {\\n        // Perform EIP712 hashing logic\\n        bytes32 eip712OrderParamsDomainHash = LibEIP712.hashEIP712Domain(name, version, getChainId(), address(this));\\n        bytes32 delegationHash =\\n            LibDelegation.getDelegationHash(\\n                LibDelegation.Delegation({ delegatee: _delegatee, nonce: _nonce, expiry: _expiry }),\\n                eip712OrderParamsDomainHash\\n            );\\n\\n        // Perform sig recovery\\n        uint8 v = uint8(_signature[0]);\\n        bytes32 r = _signature.readBytes32(1);\\n        bytes32 s = _signature.readBytes32(33);\\n        address recovered = ecrecover(delegationHash, v, r, s);\\n\\n        require(recovered != address(0), \\\"DDX: invalid signature.\\\");\\n        require(_nonce == nonces[recovered]++, \\\"DDX: invalid nonce.\\\");\\n        require(block.timestamp <= _expiry, \\\"DDX: signature expired.\\\");\\n\\n        // Delegate votes from recovered address to delegatee\\n        _delegate(recovered, _delegatee);\\n    }\\n\\n    /**\\n     * @notice Permits allowance from signatory to `spender`\\n     * @param _spender The spender being approved\\n     * @param _value The value being approved\\n     * @param _nonce The contract state required to match the signature\\n     * @param _expiry The time at which to expire the signature\\n     * @param _signature Signature\\n     */\\n    function permit(\\n        address _spender,\\n        uint256 _value,\\n        uint256 _nonce,\\n        uint256 _expiry,\\n        bytes memory _signature\\n    ) external {\\n        // Perform EIP712 hashing logic\\n        bytes32 eip712OrderParamsDomainHash = LibEIP712.hashEIP712Domain(name, version, getChainId(), address(this));\\n        bytes32 permitHash =\\n            LibPermit.getPermitHash(\\n                LibPermit.Permit({ spender: _spender, value: _value, nonce: _nonce, expiry: _expiry }),\\n                eip712OrderParamsDomainHash\\n            );\\n\\n        // Perform sig recovery\\n        uint8 v = uint8(_signature[0]);\\n        bytes32 r = _signature.readBytes32(1);\\n        bytes32 s = _signature.readBytes32(33);\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        address recovered = ecrecover(permitHash, v, r, s);\\n\\n        require(recovered != address(0), \\\"DDX: invalid signature.\\\");\\n        require(_nonce == nonces[recovered]++, \\\"DDX: invalid nonce.\\\");\\n        require(block.timestamp <= _expiry, \\\"DDX: signature expired.\\\");\\n\\n        // Convert amount to uint96\\n        uint96 amount;\\n        if (_value == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(_value, \\\"DDX: amount exceeds 96 bits.\\\");\\n        }\\n\\n        // Set allowance\\n        allowances[recovered][_spender] = amount;\\n        emit Approval(recovered, _spender, _value);\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param _account The address of the account holding the funds\\n     * @param _spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address _account, address _spender) external view returns (uint256) {\\n        return allowances[_account][_spender];\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance.\\n     * @param _account The address to get votes balance.\\n     * @return The number of current votes.\\n     */\\n    function getCurrentVotes(address _account) external view returns (uint96) {\\n        uint256 numCheckpointsAccount = numCheckpoints[_account];\\n        return numCheckpointsAccount > 0 ? checkpoints[_account][numCheckpointsAccount - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param _account The address of the account to check\\n     * @param _blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address _account, uint256 _blockNumber) external view returns (uint96) {\\n        require(_blockNumber < block.number, \\\"DDX: block not yet determined.\\\");\\n\\n        uint256 numCheckpointsAccount = numCheckpoints[_account];\\n        if (numCheckpointsAccount == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[_account][numCheckpointsAccount - 1].id <= _blockNumber) {\\n            return checkpoints[_account][numCheckpointsAccount - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[_account][0].id > _blockNumber) {\\n            return 0;\\n        }\\n\\n        // Perform binary search to find the most recent token holdings\\n        // leading to a measure of voting power\\n        uint256 lower = 0;\\n        uint256 upper = numCheckpointsAccount - 1;\\n        while (upper > lower) {\\n            // ceil, avoiding overflow\\n            uint256 center = upper - (upper - lower) / 2;\\n            Checkpoint memory cp = checkpoints[_account][center];\\n            if (cp.id == _blockNumber) {\\n                return cp.votes;\\n            } else if (cp.id < _blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[_account][lower].votes;\\n    }\\n\\n    function _delegate(address _delegator, address _delegatee) internal {\\n        // Get the current address delegator has delegated\\n        address currentDelegate = _getDelegatee(_delegator);\\n\\n        // Get delegator's DDX balance\\n        uint96 delegatorBalance = balances[_delegator];\\n\\n        // Set delegator's new delegatee address\\n        delegates[_delegator] = _delegatee;\\n\\n        emit DelegateChanged(_delegator, currentDelegate, _delegatee);\\n\\n        // Move votes from currently-delegated address to\\n        // new address\\n        _moveDelegates(currentDelegate, _delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(\\n        address _spender,\\n        address _recipient,\\n        uint96 _amount\\n    ) internal {\\n        require(_spender != address(0), \\\"DDX: cannot transfer from the zero address.\\\");\\n        require(_recipient != address(0), \\\"DDX: cannot transfer to the zero address.\\\");\\n\\n        // Reduce spender's balance and increase recipient balance\\n        balances[_spender] = balances[_spender].sub96(_amount);\\n        balances[_recipient] = balances[_recipient].add96(_amount);\\n        emit Transfer(_spender, _recipient, _amount);\\n\\n        // Move votes from currently-delegated address to\\n        // recipient's delegated address\\n        _moveDelegates(_getDelegatee(_spender), _getDelegatee(_recipient), _amount);\\n    }\\n\\n    function _transferTokensMint(address _recipient, uint96 _amount) internal {\\n        require(_recipient != address(0), \\\"DDX: cannot transfer to the zero address.\\\");\\n\\n        // Add to recipient's balance\\n        balances[_recipient] = balances[_recipient].add96(_amount);\\n\\n        // Increase the issued supply and circulating supply\\n        issuedSupply = issuedSupply.add96(_amount);\\n        totalSupply = totalSupply.add96(_amount);\\n\\n        emit Transfer(address(0), _recipient, _amount);\\n\\n        // Add delegates to recipient's delegated address\\n        _moveDelegates(address(0), _getDelegatee(_recipient), _amount);\\n    }\\n\\n    function _transferTokensBurn(address _spender, uint96 _amount) internal {\\n        require(_spender != address(0), \\\"DDX: cannot transfer from the zero address.\\\");\\n\\n        // Reduce the spender/burner's balance\\n        balances[_spender] = balances[_spender].sub96(_amount, \\\"DDX: not enough balance to burn.\\\");\\n\\n        // Reduce the total supply\\n        totalSupply = totalSupply.sub96(_amount);\\n        emit Transfer(_spender, address(0), _amount);\\n\\n        // MRedduce delegates from spender's delegated address\\n        _moveDelegates(_getDelegatee(_spender), address(0), _amount);\\n    }\\n\\n    function _moveDelegates(\\n        address _initDel,\\n        address _finDel,\\n        uint96 _amount\\n    ) internal {\\n        if (_initDel != _finDel && _amount > 0) {\\n            // Initial delegated address is different than final\\n            // delegated address and nonzero number of votes moved\\n            if (_initDel != address(0)) {\\n                uint256 initDelNum = numCheckpoints[_initDel];\\n\\n                // Retrieve and compute the old and new initial delegate\\n                // address' votes\\n                uint96 initDelOld = initDelNum > 0 ? checkpoints[_initDel][initDelNum - 1].votes : 0;\\n                uint96 initDelNew = initDelOld.sub96(_amount);\\n                _writeCheckpoint(_initDel, initDelOld, initDelNew);\\n            }\\n\\n            if (_finDel != address(0)) {\\n                uint256 finDelNum = numCheckpoints[_finDel];\\n\\n                // Retrieve and compute the old and new final delegate\\n                // address' votes\\n                uint96 finDelOld = finDelNum > 0 ? checkpoints[_finDel][finDelNum - 1].votes : 0;\\n                uint96 finDelNew = finDelOld.add96(_amount);\\n                _writeCheckpoint(_finDel, finDelOld, finDelNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address _delegatee,\\n        uint96 _oldVotes,\\n        uint96 _newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"DDX: exceeds 32 bits.\\\");\\n        uint256 delNum = numCheckpoints[_delegatee];\\n        if (delNum > 0 && checkpoints[_delegatee][delNum - 1].id == blockNumber) {\\n            // If latest checkpoint is current block, edit in place\\n            checkpoints[_delegatee][delNum - 1].votes = _newVotes;\\n        } else {\\n            // Create a new id, vote pair\\n            checkpoints[_delegatee][delNum] = Checkpoint({ id: blockNumber, votes: _newVotes });\\n            numCheckpoints[_delegatee] = delNum.add(1);\\n        }\\n\\n        emit DelegateVotesChanged(_delegatee, _oldVotes, _newVotes);\\n    }\\n\\n    function _getDelegatee(address _delegator) internal view returns (address) {\\n        if (delegates[_delegator] == address(0)) {\\n            return _delegator;\\n        }\\n        return delegates[_delegator];\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibDelegation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport { LibEIP712 } from \\\"./LibEIP712.sol\\\";\\n\\nlibrary LibDelegation {\\n    struct Delegation {\\n        address delegatee; // Delegatee\\n        uint256 nonce; // Nonce\\n        uint256 expiry; // Expiry\\n    }\\n\\n    // Hash for the EIP712 OrderParams Schema\\n    //    bytes32 constant internal EIP712_DELEGATION_SCHEMA_HASH = keccak256(abi.encodePacked(\\n    //        \\\"Delegation(\\\",\\n    //        \\\"address delegatee,\\\",\\n    //        \\\"uint256 nonce,\\\",\\n    //        \\\"uint256 expiry\\\",\\n    //        \\\")\\\"\\n    //    ));\\n    bytes32 internal constant EIP712_DELEGATION_SCHEMA_HASH =\\n        0xe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf;\\n\\n    /// @dev Calculates Keccak-256 hash of the delegation.\\n    /// @param delegation The delegation structure.\\n    /// @return delegationHash Keccak-256 EIP712 hash of the delegation.\\n    function getDelegationHash(Delegation memory delegation, bytes32 eip712ExchangeDomainHash)\\n        internal\\n        pure\\n        returns (bytes32 delegationHash)\\n    {\\n        delegationHash = LibEIP712.hashEIP712Message(eip712ExchangeDomainHash, hashDelegation(delegation));\\n        return delegationHash;\\n    }\\n\\n    /// @dev Calculates EIP712 hash of the delegation.\\n    /// @param delegation The delegation structure.\\n    /// @return result EIP712 hash of the delegation.\\n    function hashDelegation(Delegation memory delegation) internal pure returns (bytes32 result) {\\n        // Assembly for more efficiently computing:\\n        bytes32 schemaHash = EIP712_DELEGATION_SCHEMA_HASH;\\n\\n        assembly {\\n            // Assert delegation offset (this is an internal error that should never be triggered)\\n            if lt(delegation, 32) {\\n                invalid()\\n            }\\n\\n            // Calculate memory addresses that will be swapped out before hashing\\n            let pos1 := sub(delegation, 32)\\n\\n            // Backup\\n            let temp1 := mload(pos1)\\n\\n            // Hash in place\\n            mstore(pos1, schemaHash)\\n            result := keccak256(pos1, 128)\\n\\n            // Restore\\n            mstore(pos1, temp1)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/LibVoteCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/*\\n\\n  Copyright 2018 ZeroEx Intl.\\n\\n  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n  you may not use this file except in compliance with the License.\\n  You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n  Unless required by applicable law or agreed to in writing, software\\n  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n  See the License for the specific language governing permissions and\\n  limitations under the License.\\n\\n*/\\n\\npragma solidity 0.6.12;\\n\\nimport { LibEIP712 } from \\\"./LibEIP712.sol\\\";\\n\\nlibrary LibVoteCast {\\n    struct VoteCast {\\n        uint128 proposalId; // Proposal ID\\n        bool support; // Support\\n    }\\n\\n    // Hash for the EIP712 OrderParams Schema\\n    //    bytes32 constant internal EIP712_VOTE_CAST_SCHEMA_HASH = keccak256(abi.encodePacked(\\n    //        \\\"VoteCast(\\\",\\n    //        \\\"uint128 proposalId,\\\",\\n    //        \\\"bool support\\\",\\n    //        \\\")\\\"\\n    //    ));\\n    bytes32 internal constant EIP712_VOTE_CAST_SCHEMA_HASH =\\n        0x4abb8ae9facc09d5584ac64f616551bfc03c3ac63e5c431132305bd9bc8f8246;\\n\\n    /// @dev Calculates Keccak-256 hash of the vote cast.\\n    /// @param voteCast The vote cast structure.\\n    /// @return voteCastHash Keccak-256 EIP712 hash of the vote cast.\\n    function getVoteCastHash(VoteCast memory voteCast, bytes32 eip712ExchangeDomainHash)\\n        internal\\n        pure\\n        returns (bytes32 voteCastHash)\\n    {\\n        voteCastHash = LibEIP712.hashEIP712Message(eip712ExchangeDomainHash, hashVoteCast(voteCast));\\n        return voteCastHash;\\n    }\\n\\n    /// @dev Calculates EIP712 hash of the vote cast.\\n    /// @param voteCast The vote cast structure.\\n    /// @return result EIP712 hash of the vote cast.\\n    function hashVoteCast(VoteCast memory voteCast) internal pure returns (bytes32 result) {\\n        // Assembly for more efficiently computing:\\n        bytes32 schemaHash = EIP712_VOTE_CAST_SCHEMA_HASH;\\n\\n        assembly {\\n            // Assert vote cast offset (this is an internal error that should never be triggered)\\n            if lt(voteCast, 32) {\\n                invalid()\\n            }\\n\\n            // Calculate memory addresses that will be swapped out before hashing\\n            let pos1 := sub(voteCast, 32)\\n\\n            // Backup\\n            let temp1 := mload(pos1)\\n\\n            // Hash in place\\n            mstore(pos1, schemaHash)\\n            result := keccak256(pos1, 96)\\n\\n            // Restore\\n            mstore(pos1, temp1)\\n        }\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/governance/Governance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { GovernanceDefs } from \\\"../../libs/defs/GovernanceDefs.sol\\\";\\nimport { LibEIP712 } from \\\"../../libs/LibEIP712.sol\\\";\\nimport { LibVoteCast } from \\\"../../libs/LibVoteCast.sol\\\";\\nimport { LibBytes } from \\\"../../libs/LibBytes.sol\\\";\\nimport { SafeMath32 } from \\\"../../libs/SafeMath32.sol\\\";\\nimport { SafeMath96 } from \\\"../../libs/SafeMath96.sol\\\";\\nimport { SafeMath128 } from \\\"../../libs/SafeMath128.sol\\\";\\nimport { MathHelpers } from \\\"../../libs/MathHelpers.sol\\\";\\nimport { LibDiamondStorageDerivaDEX } from \\\"../../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStorageGovernance } from \\\"../../storage/LibDiamondStorageGovernance.sol\\\";\\n\\n/**\\n * @title Governance\\n * @author DerivaDEX (Borrowed/inspired from Compound)\\n * @notice This is a facet to the DerivaDEX proxy contract that handles\\n *         the logic pertaining to governance. The Diamond storage\\n *         will only be affected when facet functions are called via\\n *         the proxy contract, no checks are necessary.\\n * @dev The Diamond storage will only be affected when facet functions\\n *      are called via the proxy contract, no checks are necessary.\\n */\\ncontract Governance {\\n    using SafeMath32 for uint32;\\n    using SafeMath96 for uint96;\\n    using SafeMath128 for uint128;\\n    using SafeMath for uint256;\\n    using MathHelpers for uint96;\\n    using MathHelpers for uint256;\\n    using LibBytes for bytes;\\n\\n    /// @notice name for this Governance contract\\n    string public constant name = \\\"DDX Governance\\\"; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice version for this Governance contract\\n    string public constant version = \\\"1\\\"; // solhint-disable-line const-name-snakecase\\n\\n    /// @notice Emitted when a new proposal is created\\n    event ProposalCreated(\\n        uint128 indexed id,\\n        address indexed proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /// @notice Emitted when a vote has been cast on a proposal\\n    event VoteCast(address indexed voter, uint128 indexed proposalId, bool support, uint96 votes);\\n\\n    /// @notice Emitted when a proposal has been canceled\\n    event ProposalCanceled(uint128 indexed id);\\n\\n    /// @notice Emitted when a proposal has been queued\\n    event ProposalQueued(uint128 indexed id, uint256 eta);\\n\\n    /// @notice Emitted when a proposal has been executed\\n    event ProposalExecuted(uint128 indexed id);\\n\\n    /// @notice Emitted when a proposal action has been canceled\\n    event CancelTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    /// @notice Emitted when a proposal action has been executed\\n    event ExecuteTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    /// @notice Emitted when a proposal action has been queued\\n    event QueueTransaction(\\n        bytes32 indexed txHash,\\n        address indexed target,\\n        uint256 value,\\n        string signature,\\n        bytes data,\\n        uint256 eta\\n    );\\n\\n    /**\\n     * @notice Limits functions to only be called via governance.\\n     */\\n    modifier onlyAdmin {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"Governance: must be called by Governance admin.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice This function initializes the state with some critical\\n     *         information. This can only be called once and must be\\n     *         done via governance.\\n     * @dev This function is best called as a parameter to the\\n     *      diamond cut function. This is removed prior to the selectors\\n     *      being added to the diamond, meaning it cannot be called\\n     *      again.\\n     * @param _quorumVotes Minimum number of for votes required, even\\n     *        if there's a majority in favor.\\n     * @param _proposalThreshold Minimum DDX token holdings required\\n     *        to create a proposal\\n     * @param _proposalMaxOperations Max number of operations/actions a\\n     *        proposal can have\\n     * @param _votingDelay Number of blocks after a proposal is made\\n     *        that voting begins.\\n     * @param _votingPeriod Number of blocks voting will be held.\\n     * @param _skipRemainingVotingThreshold Number of for or against\\n     *        votes that are necessary to skip the remainder of the\\n     *        voting period.\\n     * @param _gracePeriod Period in which a successful proposal must be\\n     *        executed, otherwise will be expired.\\n     * @param _timelockDelay Time (s) in which a successful proposal\\n     *        must be in the queue before it can be executed.\\n     */\\n    function initialize(\\n        uint32 _proposalMaxOperations,\\n        uint32 _votingDelay,\\n        uint32 _votingPeriod,\\n        uint32 _gracePeriod,\\n        uint32 _timelockDelay,\\n        uint32 _quorumVotes,\\n        uint32 _proposalThreshold,\\n        uint32 _skipRemainingVotingThreshold\\n    ) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        // Ensure state variable comparisons are valid\\n        requireValidSkipRemainingVotingThreshold(_skipRemainingVotingThreshold);\\n        requireSkipRemainingVotingThresholdGtQuorumVotes(_skipRemainingVotingThreshold, _quorumVotes);\\n\\n        // Set initial variable values\\n        dsGovernance.proposalMaxOperations = _proposalMaxOperations;\\n        dsGovernance.votingDelay = _votingDelay;\\n        dsGovernance.votingPeriod = _votingPeriod;\\n        dsGovernance.gracePeriod = _gracePeriod;\\n        dsGovernance.timelockDelay = _timelockDelay;\\n        dsGovernance.quorumVotes = _quorumVotes;\\n        dsGovernance.proposalThreshold = _proposalThreshold;\\n        dsGovernance.skipRemainingVotingThreshold = _skipRemainingVotingThreshold;\\n        dsGovernance.fastPathFunctionSignatures[\\\"setIsPaused(bool)\\\"] = true;\\n    }\\n\\n    /**\\n     * @notice This function allows participants who have sufficient\\n     *         DDX holdings to create new proposals up for vote. The\\n     *         proposals contain the ordered lists of on-chain\\n     *         executable calldata.\\n     * @param _targets Addresses of contracts involved.\\n     * @param _values Values to be passed along with the calls.\\n     * @param _signatures Function signatures.\\n     * @param _calldatas Calldata passed to the function.\\n     * @param _description Text description of proposal.\\n     */\\n    function propose(\\n        address[] memory _targets,\\n        uint256[] memory _values,\\n        string[] memory _signatures,\\n        bytes[] memory _calldatas,\\n        string memory _description\\n    ) external returns (uint128) {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        // Ensure proposer has sufficient token holdings to propose\\n        require(\\n            dsDerivaDEX.ddxToken.getPriorVotes(msg.sender, block.number.sub(1)) >= getProposerThresholdCount(),\\n            \\\"Governance: proposer votes below proposal threshold.\\\"\\n        );\\n        require(\\n            _targets.length == _values.length &&\\n                _targets.length == _signatures.length &&\\n                _targets.length == _calldatas.length,\\n            \\\"Governance: proposal function information parity mismatch.\\\"\\n        );\\n        require(_targets.length != 0, \\\"Governance: must provide actions.\\\");\\n        require(_targets.length <= dsGovernance.proposalMaxOperations, \\\"Governance: too many actions.\\\");\\n\\n        if (dsGovernance.latestProposalIds[msg.sender] != 0) {\\n            // Ensure proposer doesn't already have one active/pending\\n            GovernanceDefs.ProposalState proposersLatestProposalState =\\n                state(dsGovernance.latestProposalIds[msg.sender]);\\n            require(\\n                proposersLatestProposalState != GovernanceDefs.ProposalState.Active,\\n                \\\"Governance: one live proposal per proposer, found an already active proposal.\\\"\\n            );\\n            require(\\n                proposersLatestProposalState != GovernanceDefs.ProposalState.Pending,\\n                \\\"Governance: one live proposal per proposer, found an already pending proposal.\\\"\\n            );\\n        }\\n\\n        // Proposal voting starts votingDelay after proposal is made\\n        uint256 startBlock = block.number.add(dsGovernance.votingDelay);\\n\\n        // Increment count of proposals\\n        dsGovernance.proposalCount++;\\n\\n        // Create new proposal struct and add to mapping\\n        GovernanceDefs.Proposal memory newProposal =\\n            GovernanceDefs.Proposal({\\n                id: dsGovernance.proposalCount,\\n                proposer: msg.sender,\\n                delay: getTimelockDelayForSignatures(_signatures),\\n                eta: 0,\\n                targets: _targets,\\n                values: _values,\\n                signatures: _signatures,\\n                calldatas: _calldatas,\\n                startBlock: startBlock,\\n                endBlock: startBlock.add(dsGovernance.votingPeriod),\\n                forVotes: 0,\\n                againstVotes: 0,\\n                canceled: false,\\n                executed: false\\n            });\\n\\n        dsGovernance.proposals[newProposal.id] = newProposal;\\n\\n        // Update proposer's latest proposal\\n        dsGovernance.latestProposalIds[newProposal.proposer] = newProposal.id;\\n\\n        emit ProposalCreated(\\n            newProposal.id,\\n            msg.sender,\\n            _targets,\\n            _values,\\n            _signatures,\\n            _calldatas,\\n            startBlock,\\n            startBlock.add(dsGovernance.votingPeriod),\\n            _description\\n        );\\n        return newProposal.id;\\n    }\\n\\n    /**\\n     * @notice This function allows any participant to queue a\\n     *         successful proposal for execution. Proposals are deemed\\n     *         successful if at any point the number of for votes has\\n     *         exceeded the skip remaining voting threshold or if there\\n     *         is a simple majority (and more for votes than the\\n     *         minimum quorum) at the end of voting.\\n     * @param _proposalId Proposal id.\\n     */\\n    function queue(uint128 _proposalId) external {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        // Ensure proposal has succeeded (i.e. it has either enough for\\n        // votes to skip the remainder of the voting period or the\\n        // voting period has ended and there is a simple majority in\\n        // favor and also above the quorum\\n        require(\\n            state(_proposalId) == GovernanceDefs.ProposalState.Succeeded,\\n            \\\"Governance: proposal can only be queued if it is succeeded.\\\"\\n        );\\n        GovernanceDefs.Proposal storage proposal = dsGovernance.proposals[_proposalId];\\n\\n        // Establish eta of execution, which is a number of seconds\\n        // after queuing at which point proposal can actually execute\\n        uint256 eta = block.timestamp.add(proposal.delay);\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            // Ensure proposal action is not already in the queue\\n            bytes32 txHash =\\n                keccak256(\\n                    abi.encode(\\n                        proposal.targets[i],\\n                        proposal.values[i],\\n                        proposal.signatures[i],\\n                        proposal.calldatas[i],\\n                        eta\\n                    )\\n                );\\n            require(!dsGovernance.queuedTransactions[txHash], \\\"Governance: proposal action already queued at eta.\\\");\\n            dsGovernance.queuedTransactions[txHash] = true;\\n            emit QueueTransaction(\\n                txHash,\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                eta\\n            );\\n        }\\n        // Set proposal eta timestamp after which it can be executed\\n        proposal.eta = eta;\\n        emit ProposalQueued(_proposalId, eta);\\n    }\\n\\n    /**\\n     * @notice This function allows any participant to execute a\\n     *         queued proposal. A proposal in the queue must be in the\\n     *         queue for the delay period it was proposed with prior to\\n     *         executing, allowing the community to position itself\\n     *         accordingly.\\n     * @param _proposalId Proposal id.\\n     */\\n    function execute(uint128 _proposalId) external payable {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        // Ensure proposal is queued\\n        require(\\n            state(_proposalId) == GovernanceDefs.ProposalState.Queued,\\n            \\\"Governance: proposal can only be executed if it is queued.\\\"\\n        );\\n        GovernanceDefs.Proposal storage proposal = dsGovernance.proposals[_proposalId];\\n        // Ensure proposal has been in the queue long enough\\n        require(block.timestamp >= proposal.eta, \\\"Governance: proposal hasn't finished queue time length.\\\");\\n\\n        // Ensure proposal hasn't been in the queue for too long\\n        require(block.timestamp <= proposal.eta.add(dsGovernance.gracePeriod), \\\"Governance: transaction is stale.\\\");\\n\\n        proposal.executed = true;\\n\\n        // Loop through each of the actions in the proposal\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            bytes32 txHash =\\n                keccak256(\\n                    abi.encode(\\n                        proposal.targets[i],\\n                        proposal.values[i],\\n                        proposal.signatures[i],\\n                        proposal.calldatas[i],\\n                        proposal.eta\\n                    )\\n                );\\n            require(dsGovernance.queuedTransactions[txHash], \\\"Governance: transaction hasn't been queued.\\\");\\n\\n            dsGovernance.queuedTransactions[txHash] = false;\\n\\n            // Execute action\\n            bytes memory callData;\\n            require(bytes(proposal.signatures[i]).length != 0, \\\"Governance: Invalid function signature.\\\");\\n            callData = abi.encodePacked(bytes4(keccak256(bytes(proposal.signatures[i]))), proposal.calldatas[i]);\\n            // solium-disable-next-line security/no-call-value\\n            (bool success, ) = proposal.targets[i].call{ value: proposal.values[i] }(callData);\\n\\n            require(success, \\\"Governance: transaction execution reverted.\\\");\\n\\n            emit ExecuteTransaction(\\n                txHash,\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n        emit ProposalExecuted(_proposalId);\\n    }\\n\\n    /**\\n     * @notice This function allows any participant to cancel any non-\\n     *         executed proposal. It can be canceled if the proposer's\\n     *         token holdings has dipped below the proposal threshold\\n     *         at the time of cancellation.\\n     * @param _proposalId Proposal id.\\n     */\\n    function cancel(uint128 _proposalId) external {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        GovernanceDefs.ProposalState state = state(_proposalId);\\n\\n        // Ensure proposal hasn't executed\\n        require(state != GovernanceDefs.ProposalState.Executed, \\\"Governance: cannot cancel executed proposal.\\\");\\n\\n        GovernanceDefs.Proposal storage proposal = dsGovernance.proposals[_proposalId];\\n\\n        // Ensure proposer's token holdings has dipped below the\\n        // proposer threshold, leaving their proposal subject to\\n        // cancellation\\n        require(\\n            dsDerivaDEX.ddxToken.getPriorVotes(proposal.proposer, block.number.sub(1)) < getProposerThresholdCount(),\\n            \\\"Governance: proposer above threshold.\\\"\\n        );\\n\\n        proposal.canceled = true;\\n\\n        // Loop through each of the proposal's actions\\n        for (uint256 i = 0; i < proposal.targets.length; i++) {\\n            bytes32 txHash =\\n                keccak256(\\n                    abi.encode(\\n                        proposal.targets[i],\\n                        proposal.values[i],\\n                        proposal.signatures[i],\\n                        proposal.calldatas[i],\\n                        proposal.eta\\n                    )\\n                );\\n            dsGovernance.queuedTransactions[txHash] = false;\\n            emit CancelTransaction(\\n                txHash,\\n                proposal.targets[i],\\n                proposal.values[i],\\n                proposal.signatures[i],\\n                proposal.calldatas[i],\\n                proposal.eta\\n            );\\n        }\\n\\n        emit ProposalCanceled(_proposalId);\\n    }\\n\\n    /**\\n     * @notice This function allows participants to cast either in\\n     *         favor or against a particular proposal.\\n     * @param _proposalId Proposal id.\\n     * @param _support In favor (true) or against (false).\\n     */\\n    function castVote(uint128 _proposalId, bool _support) external {\\n        return _castVote(msg.sender, _proposalId, _support);\\n    }\\n\\n    /**\\n     * @notice This function allows participants to cast votes with\\n     *         offline signatures in favor or against a particular\\n     *         proposal.\\n     * @param _proposalId Proposal id.\\n     * @param _support In favor (true) or against (false).\\n     * @param _signature Signature\\n     */\\n    function castVoteBySig(\\n        uint128 _proposalId,\\n        bool _support,\\n        bytes memory _signature\\n    ) external {\\n        // EIP712 hashing logic\\n        bytes32 eip712OrderParamsDomainHash = LibEIP712.hashEIP712Domain(name, version, getChainId(), address(this));\\n        bytes32 voteCastHash =\\n            LibVoteCast.getVoteCastHash(\\n                LibVoteCast.VoteCast({ proposalId: _proposalId, support: _support }),\\n                eip712OrderParamsDomainHash\\n            );\\n\\n        // Recover the signature and EIP712 hash\\n        uint8 v = uint8(_signature[0]);\\n        bytes32 r = _signature.readBytes32(1);\\n        bytes32 s = _signature.readBytes32(33);\\n        address recovered = ecrecover(voteCastHash, v, r, s);\\n\\n        require(recovered != address(0), \\\"Governance: invalid signature.\\\");\\n        return _castVote(recovered, _proposalId, _support);\\n    }\\n\\n    /**\\n     * @notice This function sets the quorum votes required for a\\n     *         proposal to pass. It must be called via\\n     *         governance.\\n     * @param _quorumVotes Quorum votes threshold.\\n     */\\n    function setQuorumVotes(uint32 _quorumVotes) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        requireSkipRemainingVotingThresholdGtQuorumVotes(dsGovernance.skipRemainingVotingThreshold, _quorumVotes);\\n        dsGovernance.quorumVotes = _quorumVotes;\\n    }\\n\\n    /**\\n     * @notice This function sets the token holdings threshold required\\n     *         to propose something. It must be called via\\n     *         governance.\\n     * @param _proposalThreshold Proposal threshold.\\n     */\\n    function setProposalThreshold(uint32 _proposalThreshold) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.proposalThreshold = _proposalThreshold;\\n    }\\n\\n    /**\\n     * @notice This function sets the max operations a proposal can\\n     *         carry out. It must be called via governance.\\n     * @param _proposalMaxOperations Proposal's max operations.\\n     */\\n    function setProposalMaxOperations(uint32 _proposalMaxOperations) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.proposalMaxOperations = _proposalMaxOperations;\\n    }\\n\\n    /**\\n     * @notice This function sets the voting delay in blocks from when\\n     *         a proposal is made and voting begins. It must be called\\n     *         via governance.\\n     * @param _votingDelay Voting delay (blocks).\\n     */\\n    function setVotingDelay(uint32 _votingDelay) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.votingDelay = _votingDelay;\\n    }\\n\\n    /**\\n     * @notice This function sets the voting period in blocks that a\\n     *         vote will last. It must be called via\\n     *         governance.\\n     * @param _votingPeriod Voting period (blocks).\\n     */\\n    function setVotingPeriod(uint32 _votingPeriod) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.votingPeriod = _votingPeriod;\\n    }\\n\\n    /**\\n     * @notice This function sets the threshold at which a proposal can\\n     *         immediately be deemed successful or rejected if the for\\n     *         or against votes exceeds this threshold, even if the\\n     *         voting period is still ongoing. It must be called\\n     *         governance.\\n     * @param _skipRemainingVotingThreshold Threshold for or against\\n     *        votes must reach to skip remainder of voting period.\\n     */\\n    function setSkipRemainingVotingThreshold(uint32 _skipRemainingVotingThreshold) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        requireValidSkipRemainingVotingThreshold(_skipRemainingVotingThreshold);\\n        requireSkipRemainingVotingThresholdGtQuorumVotes(_skipRemainingVotingThreshold, dsGovernance.quorumVotes);\\n        dsGovernance.skipRemainingVotingThreshold = _skipRemainingVotingThreshold;\\n    }\\n\\n    /**\\n     * @notice This function sets the grace period in seconds that a\\n     *         queued proposal can last before expiring. It must be\\n     *         called via governance.\\n     * @param _gracePeriod Grace period (seconds).\\n     */\\n    function setGracePeriod(uint32 _gracePeriod) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.gracePeriod = _gracePeriod;\\n    }\\n\\n    /**\\n     * @notice This function sets the timelock delay (s) a proposal\\n     *         must be queued before execution.\\n     * @param _timelockDelay Timelock delay (seconds).\\n     */\\n    function setTimelockDelay(uint32 _timelockDelay) external onlyAdmin {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        dsGovernance.timelockDelay = _timelockDelay;\\n    }\\n\\n    /**\\n     * @notice This function allows any participant to retrieve\\n     *         the actions involved in a given proposal.\\n     * @param _proposalId Proposal id.\\n     * @return targets Addresses of contracts involved.\\n     * @return values Values to be passed along with the calls.\\n     * @return signatures Function signatures.\\n     * @return calldatas Calldata passed to the function.\\n     */\\n    function getActions(uint128 _proposalId)\\n        external\\n        view\\n        returns (\\n            address[] memory targets,\\n            uint256[] memory values,\\n            string[] memory signatures,\\n            bytes[] memory calldatas\\n        )\\n    {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        GovernanceDefs.Proposal storage p = dsGovernance.proposals[_proposalId];\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\n    }\\n\\n    /**\\n     * @notice This function allows any participant to retrieve\\n     *         the receipt for a given proposal and voter.\\n     * @param _proposalId Proposal id.\\n     * @param _voter Voter address.\\n     * @return Voter receipt.\\n     */\\n    function getReceipt(uint128 _proposalId, address _voter) external view returns (GovernanceDefs.Receipt memory) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        return dsGovernance.proposals[_proposalId].receipts[_voter];\\n    }\\n\\n    /**\\n     * @notice This function gets a proposal from an ID.\\n     * @param _proposalId Proposal id.\\n     * @return Proposal attributes.\\n     */\\n    function getProposal(uint128 _proposalId)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            address,\\n            uint32,\\n            uint96,\\n            uint96,\\n            uint128,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        GovernanceDefs.Proposal memory proposal = dsGovernance.proposals[_proposalId];\\n        return (\\n            proposal.canceled,\\n            proposal.executed,\\n            proposal.proposer,\\n            proposal.delay,\\n            proposal.forVotes,\\n            proposal.againstVotes,\\n            proposal.id,\\n            proposal.eta,\\n            proposal.startBlock,\\n            proposal.endBlock\\n        );\\n    }\\n\\n    /**\\n     * @notice This function gets whether a proposal action transaction\\n     *         hash is queued or not.\\n     * @param _txHash Proposal action tx hash.\\n     * @return Is proposal action transaction hash queued or not.\\n     */\\n    function getIsQueuedTransaction(bytes32 _txHash) external view returns (bool) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        return dsGovernance.queuedTransactions[_txHash];\\n    }\\n\\n    /**\\n     * @notice This function gets the Governance facet's current\\n     *         parameters.\\n     * @return Proposal max operations.\\n     * @return Voting delay.\\n     * @return Voting period.\\n     * @return Grace period.\\n     * @return Timelock delay.\\n     * @return Quorum votes threshold.\\n     * @return Proposal threshold.\\n     * @return Skip remaining voting threshold.\\n     */\\n    function getGovernanceParameters()\\n        external\\n        view\\n        returns (\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32,\\n            uint32\\n        )\\n    {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        return (\\n            dsGovernance.proposalMaxOperations,\\n            dsGovernance.votingDelay,\\n            dsGovernance.votingPeriod,\\n            dsGovernance.gracePeriod,\\n            dsGovernance.timelockDelay,\\n            dsGovernance.quorumVotes,\\n            dsGovernance.proposalThreshold,\\n            dsGovernance.skipRemainingVotingThreshold\\n        );\\n    }\\n\\n    /**\\n     * @notice This function gets the proposal count.\\n     * @return Proposal count.\\n     */\\n    function getProposalCount() external view returns (uint128) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        return dsGovernance.proposalCount;\\n    }\\n\\n    /**\\n     * @notice This function gets the latest proposal ID for a user.\\n     * @param _proposer Proposer's address.\\n     * @return Proposal ID.\\n     */\\n    function getLatestProposalId(address _proposer) external view returns (uint128) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        return dsGovernance.latestProposalIds[_proposer];\\n    }\\n\\n    /**\\n     * @notice This function gets the quorum vote count given the\\n     *         quorum vote percentage relative to the total DDX supply.\\n     * @return Quorum vote count.\\n     */\\n    function getQuorumVoteCount() public view returns (uint96) {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        uint96 totalSupply = dsDerivaDEX.ddxToken.totalSupply().safe96(\\\"Governance: amount exceeds 96 bits\\\");\\n        return totalSupply.proportion96(dsGovernance.quorumVotes, 100);\\n    }\\n\\n    /**\\n     * @notice This function gets the quorum vote count given the\\n     *         quorum vote percentage relative to the total DDX supply.\\n     * @return Quorum vote count.\\n     */\\n    function getProposerThresholdCount() public view returns (uint96) {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        uint96 totalSupply = dsDerivaDEX.ddxToken.totalSupply().safe96(\\\"Governance: amount exceeds 96 bits\\\");\\n        return totalSupply.proportion96(dsGovernance.proposalThreshold, 100);\\n    }\\n\\n    /**\\n     * @notice This function gets the quorum vote count given the\\n     *         quorum vote percentage relative to the total DDX supply.\\n     * @return Quorum vote count.\\n     */\\n    function getSkipRemainingVotingThresholdCount() public view returns (uint96) {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        uint96 totalSupply = dsDerivaDEX.ddxToken.totalSupply().safe96(\\\"Governance: amount exceeds 96 bits\\\");\\n        return totalSupply.proportion96(dsGovernance.skipRemainingVotingThreshold, 100);\\n    }\\n\\n    /**\\n     * @notice This function retrieves the status for any given\\n     *         proposal.\\n     * @param _proposalId Proposal id.\\n     * @return Status of proposal.\\n     */\\n    function state(uint128 _proposalId) public view returns (GovernanceDefs.ProposalState) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        require(dsGovernance.proposalCount >= _proposalId && _proposalId > 0, \\\"Governance: invalid proposal id.\\\");\\n        GovernanceDefs.Proposal storage proposal = dsGovernance.proposals[_proposalId];\\n\\n        // Note the 3rd conditional where we can escape out of the vote\\n        // phase if the for or against votes exceeds the skip remaining\\n        // voting threshold\\n        if (proposal.canceled) {\\n            return GovernanceDefs.ProposalState.Canceled;\\n        } else if (block.number <= proposal.startBlock) {\\n            return GovernanceDefs.ProposalState.Pending;\\n        } else if (\\n            (block.number <= proposal.endBlock) &&\\n            (proposal.forVotes < getSkipRemainingVotingThresholdCount()) &&\\n            (proposal.againstVotes < getSkipRemainingVotingThresholdCount())\\n        ) {\\n            return GovernanceDefs.ProposalState.Active;\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < getQuorumVoteCount()) {\\n            return GovernanceDefs.ProposalState.Defeated;\\n        } else if (proposal.eta == 0) {\\n            return GovernanceDefs.ProposalState.Succeeded;\\n        } else if (proposal.executed) {\\n            return GovernanceDefs.ProposalState.Executed;\\n        } else if (block.timestamp >= proposal.eta.add(dsGovernance.gracePeriod)) {\\n            return GovernanceDefs.ProposalState.Expired;\\n        } else {\\n            return GovernanceDefs.ProposalState.Queued;\\n        }\\n    }\\n\\n    function _castVote(\\n        address _voter,\\n        uint128 _proposalId,\\n        bool _support\\n    ) internal {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n        require(state(_proposalId) == GovernanceDefs.ProposalState.Active, \\\"Governance: voting is closed.\\\");\\n        GovernanceDefs.Proposal storage proposal = dsGovernance.proposals[_proposalId];\\n        GovernanceDefs.Receipt storage receipt = proposal.receipts[_voter];\\n\\n        // Ensure voter has not already voted\\n        require(!receipt.hasVoted, \\\"Governance: voter already voted.\\\");\\n\\n        // Obtain the token holdings (voting power) for participant at\\n        // the time voting started. They may have gained or lost tokens\\n        // since then, doesn't matter.\\n        uint96 votes = dsDerivaDEX.ddxToken.getPriorVotes(_voter, proposal.startBlock);\\n\\n        // Ensure voter has nonzero voting power\\n        require(votes > 0, \\\"Governance: voter has no voting power.\\\");\\n        if (_support) {\\n            // Increment the for votes in favor\\n            proposal.forVotes = proposal.forVotes.add96(votes);\\n        } else {\\n            // Increment the against votes\\n            proposal.againstVotes = proposal.againstVotes.add96(votes);\\n        }\\n\\n        // Set receipt attributes based on cast vote parameters\\n        receipt.hasVoted = true;\\n        receipt.support = _support;\\n        receipt.votes = votes;\\n\\n        emit VoteCast(_voter, _proposalId, _support, votes);\\n    }\\n\\n    function getTimelockDelayForSignatures(string[] memory _signatures) internal view returns (uint32) {\\n        LibDiamondStorageGovernance.DiamondStorageGovernance storage dsGovernance =\\n            LibDiamondStorageGovernance.diamondStorageGovernance();\\n\\n        for (uint256 i = 0; i < _signatures.length; i++) {\\n            if (!dsGovernance.fastPathFunctionSignatures[_signatures[i]]) {\\n                return dsGovernance.timelockDelay;\\n            }\\n        }\\n        return 1;\\n    }\\n\\n    function requireSkipRemainingVotingThresholdGtQuorumVotes(uint32 _skipRemainingVotingThreshold, uint32 _quorumVotes)\\n        internal\\n        pure\\n    {\\n        require(_skipRemainingVotingThreshold > _quorumVotes, \\\"Governance: skip rem votes must be higher than quorum.\\\");\\n    }\\n\\n    function requireValidSkipRemainingVotingThreshold(uint32 _skipRemainingVotingThreshold) internal pure {\\n        require(_skipRemainingVotingThreshold >= 50, \\\"Governance: skip rem votes must be higher than 50pct.\\\");\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/defs/GovernanceDefs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n * @title GovernanceDefs\\n * @author DerivaDEX\\n *\\n * This library contains the common structs and enums pertaining to\\n * the governance.\\n */\\nlibrary GovernanceDefs {\\n    struct Proposal {\\n        bool canceled;\\n        bool executed;\\n        address proposer;\\n        uint32 delay;\\n        uint96 forVotes;\\n        uint96 againstVotes;\\n        uint128 id;\\n        uint256 eta;\\n        address[] targets;\\n        string[] signatures;\\n        bytes[] calldatas;\\n        uint256[] values;\\n        uint256 startBlock;\\n        uint256 endBlock;\\n        mapping(address => Receipt) receipts;\\n    }\\n\\n    struct Receipt {\\n        bool hasVoted;\\n        bool support;\\n        uint96 votes;\\n    }\\n\\n    enum ProposalState { Pending, Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/SafeMath128.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath128 {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint128 a, uint128 b) internal pure returns (uint128) {\\n        uint128 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b <= a, errorMessage);\\n        uint128 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint128 a, uint128 b) internal pure returns (uint128) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint128 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b > 0, errorMessage);\\n        uint128 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint128 a,\\n        uint128 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint128) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/LibDiamondStorageGovernance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { GovernanceDefs } from \\\"../libs/defs/GovernanceDefs.sol\\\";\\n\\nlibrary LibDiamondStorageGovernance {\\n    struct DiamondStorageGovernance {\\n        // Proposal struct by ID\\n        mapping(uint256 => GovernanceDefs.Proposal) proposals;\\n        // Latest proposal IDs by proposer address\\n        mapping(address => uint128) latestProposalIds;\\n        // Whether transaction hash is currently queued\\n        mapping(bytes32 => bool) queuedTransactions;\\n        // Fast path for governance\\n        mapping(string => bool) fastPathFunctionSignatures;\\n        // Max number of operations/actions a proposal can have\\n        uint32 proposalMaxOperations;\\n        // Number of blocks after a proposal is made that voting begins\\n        // (e.g. 1 block)\\n        uint32 votingDelay;\\n        // Number of blocks voting will be held\\n        // (e.g. 17280 blocks ~ 3 days of blocks)\\n        uint32 votingPeriod;\\n        // Time window (s) a successful proposal must be executed,\\n        // otherwise will be expired, measured in seconds\\n        // (e.g. 1209600 seconds)\\n        uint32 gracePeriod;\\n        // Minimum time (s) in which a successful proposal must be\\n        // in the queue before it can be executed\\n        // (e.g. 0 seconds)\\n        uint32 minimumDelay;\\n        // Maximum time (s) in which a successful proposal must be\\n        // in the queue before it can be executed\\n        // (e.g. 2592000 seconds ~ 30 days)\\n        uint32 maximumDelay;\\n        // Minimum number of for votes required, even if there's a\\n        // majority in favor\\n        // (e.g. 2000000e18 ~ 4% of pre-mine DDX supply)\\n        uint32 quorumVotes;\\n        // Minimum DDX token holdings required to create a proposal\\n        // (e.g. 500000e18 ~ 1% of pre-mine DDX supply)\\n        uint32 proposalThreshold;\\n        // Number of for or against votes that are necessary to skip\\n        // the remainder of the voting period\\n        // (e.g. 25000000e18 tokens/votes)\\n        uint32 skipRemainingVotingThreshold;\\n        // Time (s) proposals must be queued before executing\\n        uint32 timelockDelay;\\n        // Total number of proposals\\n        uint128 proposalCount;\\n    }\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION_GOVERNANCE =\\n        keccak256(\\\"diamond.standard.diamond.storage.DerivaDEX.Governance\\\");\\n\\n    function diamondStorageGovernance() internal pure returns (DiamondStorageGovernance storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION_GOVERNANCE;\\n        assembly {\\n            ds_slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/pause/Pause.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { LibDiamondStorageDerivaDEX } from \\\"../../storage/LibDiamondStorageDerivaDEX.sol\\\";\\nimport { LibDiamondStoragePause } from \\\"../../storage/LibDiamondStoragePause.sol\\\";\\n\\n/**\\n * @title Pause\\n * @author DerivaDEX\\n * @notice This is a facet to the DerivaDEX proxy contract that handles\\n *         the logic pertaining to pausing functionality. The purpose\\n *         of this is to ensure the system can pause in the unlikely\\n *         scenario of a bug or issue materially jeopardizing users'\\n *         funds or experience. This facet will be removed entirely\\n *         as the system stabilizes shortly. It's important to note that\\n *         unlike the vast majority of projects, even during this\\n *         short-lived period of time in which the system can be paused,\\n *         no single admin address can wield this power, but rather\\n *         pausing must be carried out via governance.\\n */\\ncontract Pause {\\n    event PauseInitialized();\\n\\n    event IsPausedSet(bool isPaused);\\n\\n    /**\\n     * @notice Limits functions to only be called via governance.\\n     */\\n    modifier onlyAdmin {\\n        LibDiamondStorageDerivaDEX.DiamondStorageDerivaDEX storage dsDerivaDEX =\\n            LibDiamondStorageDerivaDEX.diamondStorageDerivaDEX();\\n        require(msg.sender == dsDerivaDEX.admin, \\\"Pause: must be called by Gov.\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice This function initializes the facet.\\n     */\\n    function initialize() external onlyAdmin {\\n        emit PauseInitialized();\\n    }\\n\\n    /**\\n     * @notice This function sets the paused status.\\n     * @param _isPaused Whether contracts are paused or not.\\n     */\\n    function setIsPaused(bool _isPaused) external onlyAdmin {\\n        LibDiamondStoragePause.DiamondStoragePause storage dsPause = LibDiamondStoragePause.diamondStoragePause();\\n\\n        dsPause.isPaused = _isPaused;\\n\\n        emit IsPausedSet(_isPaused);\\n    }\\n\\n    /**\\n     * @notice This function gets whether the contract ecosystem is\\n     *         currently paused.\\n     * @return Whether contracts are paused or not.\\n     */\\n    function getIsPaused() public view returns (bool) {\\n        LibDiamondStoragePause.DiamondStoragePause storage dsPause = LibDiamondStoragePause.diamondStoragePause();\\n\\n        return dsPause.isPaused;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/HDUMToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n *Submitted for verification at Etherscan.io on 2019-07-18\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { SafeMath } from \\\"openzeppelin-solidity/contracts/math/SafeMath.sol\\\";\\nimport { Ownable } from \\\"openzeppelin-solidity/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary Roles {\\n    struct Role {\\n        mapping(address => bool) bearer;\\n    }\\n\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\n        role.bearer[account] = true;\\n    }\\n\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\n        role.bearer[account] = false;\\n    }\\n\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\n        return role.bearer[account];\\n    }\\n}\\n\\ncontract PauserRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    Roles.Role private _pausers;\\n\\n    event PauserAdded(address indexed account);\\n\\n    event PauserRemoved(address indexed account);\\n\\n    constructor() internal {\\n        _addPauser(msg.sender);\\n    }\\n\\n    modifier onlyPauser() {\\n        require(isPauser(msg.sender), \\\"PauserRole: caller does not have the Pauser role\\\");\\n        _;\\n    }\\n\\n    function isPauser(address account) public view returns (bool) {\\n        return _pausers.has(account);\\n    }\\n\\n    function addPauser(address account) public onlyOwner {\\n        _addPauser(account);\\n    }\\n\\n    function removePauser(address account) public onlyOwner {\\n        _removePauser(account);\\n    }\\n\\n    function renouncePauser() public {\\n        _removePauser(msg.sender);\\n    }\\n\\n    function _addPauser(address account) internal {\\n        _pausers.add(account);\\n        emit PauserAdded(account);\\n    }\\n\\n    function _removePauser(address account) internal {\\n        _pausers.remove(account);\\n        emit PauserRemoved(account);\\n    }\\n}\\n\\ncontract Pausable is PauserRole {\\n    bool private _paused;\\n\\n    event Paused(address account);\\n\\n    event Unpaused(address account);\\n\\n    constructor() internal {\\n        _paused = false;\\n    }\\n\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    function pause() public onlyPauser whenNotPaused {\\n        _paused = true;\\n        emit Paused(msg.sender);\\n    }\\n\\n    function unpause() public onlyPauser whenPaused {\\n        _paused = false;\\n        emit Unpaused(msg.sender);\\n    }\\n}\\n\\ncontract ERC20 is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    event Issue(address indexed account, uint256 amount);\\n\\n    event Redeem(address indexed account, uint256 value);\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function _issue(address account, uint256 amount) internal {\\n        require(account != address(0), \\\"CoinFactory: issue to the zero address\\\");\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n        emit Issue(account, amount);\\n    }\\n\\n    function _redeem(address account, uint256 value) internal {\\n        require(account != address(0), \\\"CoinFactory: redeem from the zero address\\\");\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n        emit Redeem(account, value);\\n    }\\n}\\n\\ncontract ERC20Pausable is ERC20, Pausable {\\n    function transfer(address to, uint256 value) public virtual override whenNotPaused returns (bool) {\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public virtual override whenNotPaused returns (bool) {\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public virtual override whenNotPaused returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\\n\\ncontract CoinFactoryAdminRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    event CoinFactoryAdminRoleAdded(address indexed account);\\n\\n    event CoinFactoryAdminRoleRemoved(address indexed account);\\n\\n    Roles.Role private _coinFactoryAdmins;\\n\\n    constructor() internal {\\n        _addCoinFactoryAdmin(msg.sender);\\n    }\\n\\n    modifier onlyCoinFactoryAdmin() {\\n        require(isCoinFactoryAdmin(msg.sender), \\\"CoinFactoryAdminRole: caller does not have the CoinFactoryAdmin role\\\");\\n        _;\\n    }\\n\\n    function isCoinFactoryAdmin(address account) public view returns (bool) {\\n        return _coinFactoryAdmins.has(account);\\n    }\\n\\n    function addCoinFactoryAdmin(address account) public onlyOwner {\\n        _addCoinFactoryAdmin(account);\\n    }\\n\\n    function removeCoinFactoryAdmin(address account) public onlyOwner {\\n        _removeCoinFactoryAdmin(account);\\n    }\\n\\n    function renounceCoinFactoryAdmin() public {\\n        _removeCoinFactoryAdmin(msg.sender);\\n    }\\n\\n    function _addCoinFactoryAdmin(address account) internal {\\n        _coinFactoryAdmins.add(account);\\n        emit CoinFactoryAdminRoleAdded(account);\\n    }\\n\\n    function _removeCoinFactoryAdmin(address account) internal {\\n        _coinFactoryAdmins.remove(account);\\n        emit CoinFactoryAdminRoleRemoved(account);\\n    }\\n}\\n\\ncontract CoinFactory is ERC20, CoinFactoryAdminRole {\\n    function issue(address account, uint256 amount) public onlyCoinFactoryAdmin returns (bool) {\\n        _issue(account, amount);\\n        return true;\\n    }\\n\\n    function redeem(address account, uint256 amount) public onlyCoinFactoryAdmin returns (bool) {\\n        _redeem(account, amount);\\n        return true;\\n    }\\n}\\n\\ncontract BlacklistAdminRole is Ownable {\\n    using Roles for Roles.Role;\\n\\n    event BlacklistAdminAdded(address indexed account);\\n    event BlacklistAdminRemoved(address indexed account);\\n\\n    Roles.Role private _blacklistAdmins;\\n\\n    constructor() internal {\\n        _addBlacklistAdmin(msg.sender);\\n    }\\n\\n    modifier onlyBlacklistAdmin() {\\n        require(isBlacklistAdmin(msg.sender), \\\"BlacklistAdminRole: caller does not have the BlacklistAdmin role\\\");\\n        _;\\n    }\\n\\n    function isBlacklistAdmin(address account) public view returns (bool) {\\n        return _blacklistAdmins.has(account);\\n    }\\n\\n    function addBlacklistAdmin(address account) public onlyOwner {\\n        _addBlacklistAdmin(account);\\n    }\\n\\n    function removeBlacklistAdmin(address account) public onlyOwner {\\n        _removeBlacklistAdmin(account);\\n    }\\n\\n    function renounceBlacklistAdmin() public {\\n        _removeBlacklistAdmin(msg.sender);\\n    }\\n\\n    function _addBlacklistAdmin(address account) internal {\\n        _blacklistAdmins.add(account);\\n        emit BlacklistAdminAdded(account);\\n    }\\n\\n    function _removeBlacklistAdmin(address account) internal {\\n        _blacklistAdmins.remove(account);\\n        emit BlacklistAdminRemoved(account);\\n    }\\n}\\n\\ncontract Blacklist is ERC20, BlacklistAdminRole {\\n    mapping(address => bool) private _blacklist;\\n\\n    event BlacklistAdded(address indexed account);\\n\\n    event BlacklistRemoved(address indexed account);\\n\\n    function addBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _addBlacklist(accounts[i]);\\n        }\\n    }\\n\\n    function removeBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            _removeBlacklist(accounts[i]);\\n        }\\n    }\\n\\n    function isBlacklist(address account) public view returns (bool) {\\n        return _blacklist[account];\\n    }\\n\\n    function _addBlacklist(address account) internal {\\n        _blacklist[account] = true;\\n        emit BlacklistAdded(account);\\n    }\\n\\n    function _removeBlacklist(address account) internal {\\n        _blacklist[account] = false;\\n        emit BlacklistRemoved(account);\\n    }\\n}\\n\\ncontract HDUMToken is ERC20, ERC20Pausable, CoinFactory, Blacklist {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    uint256 private _totalSupply;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) public {\\n        _totalSupply = 0;\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    function transfer(address to, uint256 value) public override(ERC20, ERC20Pausable) whenNotPaused returns (bool) {\\n        require(!isBlacklist(msg.sender), \\\"HDUMToken: caller in blacklist can't transfer\\\");\\n        require(!isBlacklist(to), \\\"HDUMToken: not allow to transfer to recipient address in blacklist\\\");\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public override(ERC20, ERC20Pausable) whenNotPaused returns (bool) {\\n        require(!isBlacklist(msg.sender), \\\"HDUMToken: caller in blacklist can't transferFrom\\\");\\n        require(!isBlacklist(from), \\\"HDUMToken: from in blacklist can't transfer\\\");\\n        require(!isBlacklist(to), \\\"HDUMToken: not allow to transfer to recipient address in blacklist\\\");\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value) public virtual override(ERC20, ERC20Pausable) returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        virtual\\n        override(ERC20, ERC20Pausable)\\n        returns (bool)\\n    {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        virtual\\n        override(ERC20, ERC20Pausable)\\n        returns (bool)\\n    {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/SafeERC20Wrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport { Context } from \\\"openzeppelin-solidity/contracts/GSN/Context.sol\\\";\\nimport { IERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract SafeERC20Wrapper is Context {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private _token;\\n\\n    constructor(IERC20 token) public {\\n        _token = token;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public {\\n        _token.safeTransfer(recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public {\\n        _token.safeTransferFrom(sender, recipient, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) public {\\n        _token.safeApprove(spender, amount);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 amount) public {\\n        _token.safeIncreaseAllowance(spender, amount);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 amount) public {\\n        _token.safeDecreaseAllowance(spender, amount);\\n    }\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _token.allowance(owner, spender);\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _token.balanceOf(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\r\n    },\r\n    \"contracts/tokens/DummyToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\\\";\\n\\n// mock class using ERC20\\ncontract DummyToken is ERC20 {\\n    uint256 public constant INITIAL_SUPPLY = 100000000 * (10**18);\\n\\n    constructor(string memory name, string memory symbol) public payable ERC20(name, symbol) {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n\\n    function mint(address account, uint256 amount) public {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public {\\n        _burn(account, amount);\\n    }\\n\\n    function transferInternal(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) public {\\n        _transfer(from, to, value);\\n    }\\n\\n    function approveInternal(\\n        address owner,\\n        address spender,\\n        uint256 value\\n    ) public {\\n        _approve(owner, spender, value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50000,\r\n      \"details\": {\r\n        \"yul\": false,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"constantOptimizer\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"previousBalance\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newBalance\",\"type\":\"uint96\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_MINE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuedSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownershipTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_derivaDEXProxy\",\"type\":\"address\"}],\"name\":\"transferOwnershipToDerivaDEXProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DDX","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"50000","ConstructorArguments":"","EVMVersion":"istanbul","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://aec35072efe66180c187e7b85927bf9cc88209bad97967175eedc785bd1e3a23"}]