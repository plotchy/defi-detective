[{"SourceCode":"pragma solidity 0.6.4;\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n//ERC20 Interface\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address account) external view returns (uint);\r\n    function transfer(address, uint) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    }\r\n    \r\ninterface ASP {\r\n    \r\n   function scaledToken(uint amount) external returns(bool);\r\n   function totalFrozen() external view returns (uint256);\r\n }\r\n\r\ninterface OSP {\r\n    \r\n   function scaledToken(uint amount) external returns(bool);\r\n   function totalFrozen() external view returns (uint256);\r\n }\r\n \r\ninterface DSP {\r\n    \r\n   function scaledToken(uint amount) external returns(bool);\r\n   function totalFrozen() external view returns (uint256);\r\n }\r\n\r\ninterface USP {\r\n    \r\n   function scaledToken(uint amount) external returns(bool);\r\n   function totalFrozen() external view returns (uint256);\r\n }\r\n    \r\n//======================================AXIA CONTRACT=========================================//\r\ncontract AXIATOKEN is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n//======================================AXIA EVENTS=========================================//\r\n\r\n    event NewEpoch(uint epoch, uint emission, uint nextepoch);\r\n    event NewDay(uint epoch, uint day, uint nextday);\r\n    event BurnEvent(address indexed pool, address indexed burnaddress, uint amount);\r\n    event emissions(address indexed root, address indexed pool, uint value);\r\n    event TrigRewardEvent(address indexed root, address indexed receiver, uint value);\r\n    event BasisPointAdded(uint value);\r\n    \r\n    \r\n   // ERC-20 Parameters\r\n    string public name; \r\n    string public symbol;\r\n    uint public decimals; \r\n    uint public startdecimal;\r\n    uint public override totalSupply;\r\n    uint public initialsupply;\r\n    \r\n     //======================================STAKING POOLS=========================================//\r\n    \r\n    address public lonePool;\r\n    address public swapPool;\r\n    address public DefiPool;\r\n    address public OraclePool;\r\n    \r\n    address public burningPool;\r\n    \r\n    uint public pool1Amount;\r\n    uint public pool2Amount;\r\n    uint public pool3Amount;\r\n    uint public pool4Amount;\r\n    uint public basisAmount;\r\n    uint public poolAmountTrig;\r\n    \r\n    \r\n    uint public TrigAmount;\r\n    \r\n    \r\n    // ERC-20 Mappings\r\n    mapping(address => uint) public override balanceOf;\r\n    mapping(address => mapping(address => uint)) public override allowance;\r\n    \r\n    \r\n    // Public Parameters\r\n    uint crypto; \r\n    uint startcrypto;\r\n    uint public emission;\r\n    uint public currentEpoch; \r\n    uint public currentDay;\r\n    uint public daysPerEpoch; \r\n    uint public secondsPerDay;\r\n    uint public genesis;\r\n    uint public nextEpochTime; \r\n    uint public nextDayTime;\r\n    uint public amountToEmit;\r\n    uint public BPE;\r\n    \r\n    //======================================BASIS POINT VARIABLES=========================================//\r\n    uint public bpValue;\r\n    uint public actualValue;\r\n    uint public TrigReward;\r\n    uint public burnAmount;\r\n    address administrator;\r\n    uint totalEmitted;\r\n    \r\n    uint256 public pool1percentage = 500;\r\n    uint256 public pool2percentage = 4500;\r\n    uint256 public pool3percentage = 2500;\r\n    uint256 public pool4percentage = 2500;\r\n    uint256 public basispercentage = 500;\r\n    uint256 public trigRewardpercentage = 20;\r\n    \r\n    \r\n    address public messagesender;\r\n     \r\n    // Public Mappings\r\n    \r\n    mapping(address=>bool) public emission_Whitelisted;\r\n    \r\n\r\n    //=====================================CREATION=========================================//\r\n    // Constructor\r\n    constructor() public {\r\n        name = \"AXIA TOKEN (axiaprotocol.io)\"; \r\n        symbol = \"AXIAv3\"; \r\n        decimals = 18; \r\n        startdecimal = 16;\r\n        crypto = 1*10**decimals; \r\n        startcrypto =  1*10**startdecimal; \r\n        totalSupply = 3800000*crypto;                                 \r\n        initialsupply = 120000000*startcrypto;\r\n        emission = 7200*crypto; \r\n        currentEpoch = 1; \r\n        currentDay = 1;                             \r\n        genesis = now;\r\n        \r\n        daysPerEpoch = 180; \r\n        secondsPerDay = 86400; \r\n       \r\n        administrator = msg.sender;\r\n        balanceOf[administrator] = initialsupply; \r\n        emit Transfer(administrator, address(this), initialsupply);                                \r\n        nextEpochTime = genesis + (secondsPerDay * daysPerEpoch);                                   \r\n        nextDayTime = genesis + secondsPerDay;                                                      \r\n        \r\n        emission_Whitelisted[administrator] = true;\r\n        \r\n        \r\n        \r\n    }\r\n    \r\n//========================================CONFIGURATIONS=========================================//\r\n    \r\n    function poolconfigs(address _axia, address _swap, address _defi, address _oracle) public onlyAdministrator returns (bool success) {\r\n        \r\n        lonePool = _axia;\r\n        swapPool = _swap;\r\n        DefiPool = _defi;\r\n        OraclePool = _oracle;\r\n        \r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    function burningPoolconfigs(address _pooladdress) public onlyAdministrator returns (bool success) {\r\n           \r\n        burningPool = _pooladdress;\r\n        \r\n        return true;\r\n    }\r\n    \r\n    \r\n    modifier onlyAdministrator() {\r\n        require(msg.sender == administrator, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyBurningPool() {\r\n        require(msg.sender == burningPool, \"Authorization: Only the pool that allows burn can call on this\");\r\n        _;\r\n    }\r\n    \r\n    function secondAndDay(uint _secondsperday, uint _daysperepoch) public onlyAdministrator returns (bool success) {\r\n       secondsPerDay = _secondsperday;\r\n       daysPerEpoch = _daysperepoch;\r\n        return true;\r\n    }\r\n    \r\n    function nextEpoch(uint _nextepoch) public onlyAdministrator returns (bool success) {\r\n       nextEpochTime = _nextepoch;\r\n       \r\n        return true;\r\n    }\r\n    \r\n    function whitelistOnEmission(address _address) public onlyAdministrator returns (bool success) {\r\n       emission_Whitelisted[_address] = true;\r\n        return true;\r\n    }\r\n    \r\n    function unwhitelistOnEmission(address _address) public onlyAdministrator returns (bool success) {\r\n       emission_Whitelisted[_address] = false;\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function supplyeffect(uint _amount) public onlyBurningPool returns (bool success) {\r\n       totalSupply -= _amount;\r\n       emit BurnEvent(burningPool, address(0x0), _amount);\r\n        return true;\r\n    }\r\n    \r\n    function poolpercentages(uint _p1, uint _p2, uint _p3, uint _p4, uint _basispercent, uint trigRe) public onlyAdministrator returns (bool success) {\r\n       \r\n       pool1percentage = _p1;\r\n       pool2percentage = _p2;\r\n       pool3percentage = _p3;\r\n       pool4percentage = _p4;\r\n       basispercentage = _basispercent;\r\n       trigRewardpercentage = trigRe;\r\n       \r\n       return true;\r\n    }\r\n    \r\n    function Burn(uint _amount) public returns (bool success) {\r\n       \r\n       require(balanceOf[msg.sender] >= _amount, \"You do not have the amount of tokens you wanna burn in your wallet\");\r\n       balanceOf[msg.sender] -= _amount;\r\n       totalSupply -= _amount;\r\n       emit BurnEvent(msg.sender, address(0x0), _amount);\r\n       return true;\r\n       \r\n    }\r\n    \r\n   //========================================ERC20=========================================//\r\n    // ERC20 Transfer function\r\n    function transfer(address to, uint value) public override returns (bool success) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n    // ERC20 Approve function\r\n    function approve(address spender, uint value) public override returns (bool success) {\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n    // ERC20 TransferFrom function\r\n    function transferFrom(address from, address to, uint value) public override returns (bool success) {\r\n        require(value <= allowance[from][msg.sender], 'Must not send more than allowance');\r\n        allowance[from][msg.sender] -= value;\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n    \r\n  \r\n    \r\n    // Internal transfer function which includes the Fee\r\n    function _transfer(address _from, address _to, uint _value) private {\r\n        \r\n        messagesender = msg.sender; //this is the person actually making the call on this function\r\n        \r\n        \r\n        require(balanceOf[_from] >= _value, 'Must not send more than balance');\r\n        require(balanceOf[_to] + _value >= balanceOf[_to], 'Balance overflow');\r\n        \r\n        balanceOf[_from] -= _value;\r\n        \r\n        \r\n        if(emission_Whitelisted[messagesender] == false){ \r\n          \r\n                if(now >= nextDayTime){\r\n                \r\n                amountToEmit = emittingAmount();\r\n                \r\n                \r\n                uint basisAmountQuota = mulDiv(amountToEmit, basispercentage, 10000);\r\n                amountToEmit = amountToEmit - basisAmountQuota;\r\n                basisAmount = basisAmountQuota;\r\n                \r\n                pool1Amount = mulDiv(amountToEmit, pool1percentage, 10000);\r\n                pool2Amount = mulDiv(amountToEmit, pool2percentage, 10000);\r\n                pool3Amount = mulDiv(amountToEmit, pool3percentage, 10000);\r\n                pool4Amount = mulDiv(amountToEmit, pool4percentage, 10000);\r\n                \r\n                \r\n                \r\n                poolAmountTrig = mulDiv(amountToEmit, trigRewardpercentage, 10000);\r\n                TrigAmount = poolAmountTrig.div(2);\r\n                \r\n                pool1Amount = pool1Amount.sub(TrigAmount);\r\n                pool2Amount = pool2Amount.sub(TrigAmount);\r\n                \r\n                TrigReward = poolAmountTrig;\r\n                \r\n                uint Ofrozenamount = ospfrozen();\r\n                uint Dfrozenamount = dspfrozen();\r\n                uint Ufrozenamount = uspfrozen();\r\n                uint Afrozenamount = aspfrozen();\r\n                \r\n                balanceOf[address(this)] += basisAmount;\r\n                emit Transfer(address(this), address(this), basisAmount);\r\n                BPE += basisAmount;\r\n                \r\n                \r\n                if(Ofrozenamount > 0){\r\n                    \r\n                OSP(OraclePool).scaledToken(pool4Amount);\r\n                balanceOf[OraclePool] += pool4Amount;\r\n                emit Transfer(address(this), OraclePool, pool4Amount);\r\n                \r\n                \r\n                    \r\n                }else{\r\n                  \r\n                 balanceOf[address(this)] += pool4Amount; \r\n                 emit Transfer(address(this), address(this), pool4Amount);\r\n                 \r\n                 BPE += pool4Amount;\r\n                    \r\n                }\r\n                \r\n                if(Dfrozenamount > 0){\r\n                    \r\n                DSP(DefiPool).scaledToken(pool3Amount);\r\n                balanceOf[DefiPool] += pool3Amount;\r\n                emit Transfer(address(this), DefiPool, pool3Amount);\r\n                \r\n                \r\n                    \r\n                }else{\r\n                  \r\n                 balanceOf[address(this)] += pool3Amount; \r\n                 emit Transfer(address(this), address(this), pool3Amount);\r\n                 BPE += pool3Amount;\r\n                    \r\n                }\r\n                \r\n                if(Ufrozenamount > 0){\r\n                    \r\n                USP(swapPool).scaledToken(pool2Amount);\r\n                balanceOf[swapPool] += pool2Amount;\r\n                emit Transfer(address(this), swapPool, pool2Amount);\r\n                \r\n                    \r\n                }else{\r\n                  \r\n                 balanceOf[address(this)] += pool2Amount; \r\n                 emit Transfer(address(this), address(this), pool2Amount);\r\n                 BPE += pool2Amount;\r\n                    \r\n                }\r\n                \r\n                if(Afrozenamount > 0){\r\n                    \r\n                 ASP(lonePool).scaledToken(pool1Amount);\r\n                 balanceOf[lonePool] += pool1Amount;\r\n                 emit Transfer(address(this), lonePool, pool1Amount);\r\n                \r\n                }else{\r\n                  \r\n                 balanceOf[address(this)] += pool1Amount; \r\n                 emit Transfer(address(this), address(this), pool1Amount);\r\n                 BPE += pool1Amount;\r\n                    \r\n                }\r\n                \r\n                nextDayTime += secondsPerDay;\r\n                currentDay += 1; \r\n                emit NewDay(currentEpoch, currentDay, nextDayTime);\r\n                \r\n                //reward the wallet that triggered the EMISSION\r\n                balanceOf[_from] += TrigReward; //this is rewardig the person that triggered the emission\r\n                emit Transfer(address(this), _from, TrigReward);\r\n                emit TrigRewardEvent(address(this), msg.sender, TrigReward);\r\n                \r\n            }\r\n        \r\n            \r\n        }\r\n       \r\n       balanceOf[_to] += _value;\r\n       emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    \r\n\r\n    \r\n   \r\n    //======================================EMISSION========================================//\r\n    // Internal - Update emission function\r\n    \r\n    function emittingAmount() internal returns(uint){\r\n       \r\n        if(now >= nextEpochTime){\r\n            \r\n            currentEpoch += 1;\r\n            \r\n            if(currentEpoch > 10){\r\n            \r\n               emission = BPE;\r\n               BPE -= emission.div(2);\r\n               balanceOf[address(this)] -= emission.div(2);\r\n            \r\n               \r\n            }\r\n            emission = emission/2;\r\n            nextEpochTime += (secondsPerDay * daysPerEpoch);\r\n            emit NewEpoch(currentEpoch, emission, nextEpochTime);\r\n          \r\n        }\r\n        \r\n        return emission;\r\n        \r\n        \r\n    }\r\n  \r\n  \r\n  \r\n    function ospfrozen() public view returns(uint){\r\n        \r\n        return OSP(OraclePool).totalFrozen();\r\n       \r\n    }\r\n    \r\n    function dspfrozen() public view returns(uint){\r\n        \r\n        return DSP(DefiPool).totalFrozen();\r\n       \r\n    }\r\n    \r\n    function uspfrozen() public view returns(uint){\r\n        \r\n        return USP(swapPool).totalFrozen();\r\n       \r\n    } \r\n    \r\n    function aspfrozen() public view returns(uint){\r\n        \r\n        return ASP(lonePool).totalFrozen();\r\n       \r\n    }\r\n    \r\n     function mulDiv (uint x, uint y, uint z) public pure returns (uint) {\r\n          (uint l, uint h) = fullMul (x, y);\r\n          assert (h < z);\r\n          uint mm = mulmod (x, y, z);\r\n          if (mm > l) h -= 1;\r\n          l -= mm;\r\n          uint pow2 = z & -z;\r\n          z /= pow2;\r\n          l /= pow2;\r\n          l += h * ((-pow2) / pow2 + 1);\r\n          uint r = 1;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          r *= 2 - z * r;\r\n          return l * r;\r\n    }\r\n    \r\n     function fullMul (uint x, uint y) private pure returns (uint l, uint h) {\r\n          uint mm = mulmod (x, y, uint (-1));\r\n          l = x * y;\r\n          h = mm - l;\r\n          if (mm < l) h -= 1;\r\n    }\r\n    \r\n   \r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"BasisPointAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burnaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextday\",\"type\":\"uint256\"}],\"name\":\"NewDay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"emission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextepoch\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"root\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TrigRewardEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"root\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"emissions\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DefiPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OraclePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TrigAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TrigReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actualValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToEmit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aspfrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basispercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burningPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pooladdress\",\"type\":\"address\"}],\"name\":\"burningPoolconfigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daysPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dspfrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emission_Whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialsupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lonePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messagesender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"name\":\"mulDiv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextDayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nextepoch\",\"type\":\"uint256\"}],\"name\":\"nextEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ospfrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool1percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool2percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool3percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool4percentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolAmountTrig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_axia\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"poolconfigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_p1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_p4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_basispercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"trigRe\",\"type\":\"uint256\"}],\"name\":\"poolpercentages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_secondsperday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daysperepoch\",\"type\":\"uint256\"}],\"name\":\"secondAndDay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondsPerDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startdecimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"supplyeffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trigRewardpercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"unwhitelistOnEmission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uspfrozen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"whitelistOnEmission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AXIATOKEN","CompilerVersion":"v0.6.4+commit.1dca32f3","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://60f1621343328e09c0e75a61b294c450c36cc8b9118addb0ad14fe24045933e6"}]