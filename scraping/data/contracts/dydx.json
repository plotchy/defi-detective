[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0\r\n\r\n// File contracts/dependencies/open-zeppelin/Context.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/dependencies/open-zeppelin/IERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File contracts/dependencies/open-zeppelin/SafeMath.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, 'SafeMath: addition overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return sub(a, b, 'SafeMath: subtraction overflow');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, 'SafeMath: multiplication overflow');\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return div(a, b, 'SafeMath: division by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    // Solidity only automatically asserts when dividing by 0\r\n    require(b > 0, errorMessage);\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return mod(a, b, 'SafeMath: modulo by zero');\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * Reverts with custom message when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b != 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/dependencies/open-zeppelin/Address.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n  /**\r\n   * @dev Returns true if `account` is a contract.\r\n   *\r\n   * [IMPORTANT]\r\n   * ====\r\n   * It is unsafe to assume that an address for which this function returns\r\n   * false is an externally-owned account (EOA) and not a contract.\r\n   *\r\n   * Among others, `isContract` will return false for the following\r\n   * types of addresses:\r\n   *\r\n   *  - an externally-owned account\r\n   *  - a contract in construction\r\n   *  - an address where a contract will be created\r\n   *  - an address where a contract lived, but was destroyed\r\n   * ====\r\n   */\r\n  function isContract(address account) internal view returns (bool) {\r\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n    // for accounts without code, i.e. `keccak256('')`\r\n    bytes32 codehash;\r\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // solhint-disable-next-line no-inline-assembly\r\n    assembly {\r\n      codehash := extcodehash(account)\r\n    }\r\n    return (codehash != accountHash && codehash != 0x0);\r\n  }\r\n\r\n  /**\r\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n   * `recipient`, forwarding all available gas and reverting on errors.\r\n   *\r\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n   * imposed by `transfer`, making them unable to receive funds via\r\n   * `transfer`. {sendValue} removes this limitation.\r\n   *\r\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n   *\r\n   * IMPORTANT: because control is transferred to `recipient`, care must be\r\n   * taken to not create reentrancy vulnerabilities. Consider using\r\n   * {ReentrancyGuard} or the\r\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n   */\r\n  function sendValue(address payable recipient, uint256 amount) internal {\r\n    require(address(this).balance >= amount, 'Address: insufficient balance');\r\n\r\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n    (bool success, ) = recipient.call{value: amount}('');\r\n    require(success, 'Address: unable to send value, recipient may have reverted');\r\n  }\r\n}\r\n\r\n\r\n// File contracts/dependencies/open-zeppelin/ERC20.sol\r\n\r\npragma solidity ^0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string internal _name;\r\n    string internal _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() virtual public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() virtual public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() virtual public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n\r\n// File contracts/dependencies/open-zeppelin/Ownable.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n  address private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor() {\r\n    address msgSender = _msgSender();\r\n    _owner = msgSender;\r\n    emit OwnershipTransferred(address(0), msgSender);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public virtual onlyOwner {\r\n    emit OwnershipTransferred(_owner, address(0));\r\n    _owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IGovernancePowerDelegationERC20.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\ninterface IGovernancePowerDelegationERC20 {\r\n\r\n  enum DelegationType {\r\n    VOTING_POWER,\r\n    PROPOSITION_POWER\r\n  }\r\n\r\n  /**\r\n   * @dev Emitted when a user delegates governance power to another user.\r\n   *\r\n   * @param  delegator       The delegator.\r\n   * @param  delegatee       The delegatee.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  event DelegateChanged(\r\n    address indexed delegator,\r\n    address indexed delegatee,\r\n    DelegationType delegationType\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when an action changes the delegated power of a user.\r\n   *\r\n   * @param  user            The user whose delegated power has changed.\r\n   * @param  amount          The new amount of delegated power for the user.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType);\r\n\r\n  /**\r\n   * @dev Delegates a specific governance power to a delegatee.\r\n   *\r\n   * @param  delegatee       The address to delegate power to.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function delegateByType(address delegatee, DelegationType delegationType) external virtual;\r\n\r\n  /**\r\n   * @dev Delegates all governance powers to a delegatee.\r\n   *\r\n   * @param  delegatee  The user to which the power will be delegated.\r\n   */\r\n  function delegate(address delegatee) external virtual;\r\n\r\n  /**\r\n   * @dev Returns the delegatee of an user.\r\n   *\r\n   * @param  delegator       The address of the delegator.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getDelegateeByType(address delegator, DelegationType delegationType)\r\n    external\r\n    view\r\n    virtual\r\n    returns (address);\r\n\r\n  /**\r\n   * @dev Returns the current delegated power of a user. The current power is the power delegated\r\n   *  at the time of the last snapshot.\r\n   *\r\n   * @param  user            The user whose power to query.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getPowerCurrent(address user, DelegationType delegationType)\r\n    external\r\n    view\r\n    virtual\r\n    returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the delegated power of a user at a certain block.\r\n   *\r\n   * @param  user            The user whose power to query.\r\n   * @param  blockNumber     The block number at which to get the user's power.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getPowerAtBlock(\r\n    address user,\r\n    uint256 blockNumber,\r\n    DelegationType delegationType\r\n  )\r\n    external\r\n    view\r\n    virtual\r\n    returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/governance/token/GovernancePowerDelegationERC20Mixin.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n/**\r\n * @title GovernancePowerDelegationERC20Mixin\r\n * @author dYdX\r\n *\r\n * @dev Provides support for two types of governance powers, both endowed by the governance\r\n *  token, and separately delegatable. Provides functions for delegation and for querying a user's\r\n *  power at a certain block number.\r\n */\r\nabstract contract GovernancePowerDelegationERC20Mixin is\r\n  ERC20,\r\n  IGovernancePowerDelegationERC20\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  // ============ Constants ============\r\n\r\n  /// @notice EIP-712 typehash for delegation by signature of a specific governance power type.\r\n  bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256(\r\n    'DelegateByType(address delegatee,uint256 type,uint256 nonce,uint256 expiry)'\r\n  );\r\n\r\n  /// @notice EIP-712 typehash for delegation by signature of all governance powers.\r\n  bytes32 public constant DELEGATE_TYPEHASH = keccak256(\r\n    'Delegate(address delegatee,uint256 nonce,uint256 expiry)'\r\n  );\r\n\r\n  // ============ Structs ============\r\n\r\n  /// @dev Snapshot of a value on a specific block, used to track voting power for proposals.\r\n  struct Snapshot {\r\n    uint128 blockNumber;\r\n    uint128 value;\r\n  }\r\n\r\n  // ============ External Functions ============\r\n\r\n  /**\r\n   * @notice Delegates a specific governance power to a delegatee.\r\n   *\r\n   * @param  delegatee       The address to delegate power to.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function delegateByType(\r\n    address delegatee,\r\n    DelegationType delegationType\r\n  )\r\n    external\r\n    override\r\n  {\r\n    _delegateByType(msg.sender, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates all governance powers to a delegatee.\r\n   *\r\n   * @param  delegatee  The address to delegate power to.\r\n   */\r\n  function delegate(\r\n    address delegatee\r\n  )\r\n    external\r\n    override\r\n  {\r\n    _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER);\r\n    _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the delegatee of a user.\r\n   *\r\n   * @param  delegator       The address of the delegator.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getDelegateeByType(\r\n    address delegator,\r\n    DelegationType delegationType\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (address)\r\n  {\r\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\r\n\r\n    return _getDelegatee(delegator, delegates);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the current power of a user. The current power is the power delegated\r\n   *  at the time of the last snapshot.\r\n   *\r\n   * @param  user            The user whose power to query.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getPowerCurrent(\r\n    address user,\r\n    DelegationType delegationType\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n      // delegates\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the power of a user at a certain block.\r\n   *\r\n   * @param  user            The user whose power to query.\r\n   * @param  blockNumber     The block number at which to get the user's power.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function getPowerAtBlock(\r\n    address user,\r\n    uint256 blockNumber,\r\n    DelegationType delegationType\r\n  )\r\n    external\r\n    override\r\n    view\r\n    returns (uint256)\r\n  {\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n      // delegates\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber);\r\n  }\r\n\r\n  // ============ Internal Functions ============\r\n\r\n  /**\r\n   * @dev Delegates one specific power to a delegatee.\r\n   *\r\n   * @param  delegator       The user whose power to delegate.\r\n   * @param  delegatee       The address to delegate power to.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function _delegateByType(\r\n    address delegator,\r\n    address delegatee,\r\n    DelegationType delegationType\r\n  )\r\n    internal\r\n  {\r\n    require(\r\n      delegatee != address(0),\r\n      'INVALID_DELEGATEE'\r\n    );\r\n\r\n    (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType);\r\n\r\n    uint256 delegatorBalance = balanceOf(delegator);\r\n\r\n    address previousDelegatee = _getDelegatee(delegator, delegates);\r\n\r\n    delegates[delegator] = delegatee;\r\n\r\n    _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType);\r\n    emit DelegateChanged(delegator, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @dev Moves power from one user to another.\r\n   *\r\n   * @param  from            The user from which delegated power is moved.\r\n   * @param  to              The user that will receive the delegated power.\r\n   * @param  amount          The amount of power to be moved.\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function _moveDelegatesByType(\r\n    address from,\r\n    address to,\r\n    uint256 amount,\r\n    DelegationType delegationType\r\n  )\r\n    internal\r\n  {\r\n    if (from == to) {\r\n      return;\r\n    }\r\n\r\n    (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n      mapping(address => uint256) storage snapshotsCounts,\r\n      // delegates\r\n    ) = _getDelegationDataByType(delegationType);\r\n\r\n    if (from != address(0)) {\r\n      uint256 previous = 0;\r\n      uint256 fromSnapshotsCount = snapshotsCounts[from];\r\n\r\n      if (fromSnapshotsCount != 0) {\r\n        previous = snapshots[from][fromSnapshotsCount - 1].value;\r\n      } else {\r\n        previous = balanceOf(from);\r\n      }\r\n\r\n      uint256 newAmount = previous.sub(amount);\r\n      _writeSnapshot(\r\n        snapshots,\r\n        snapshotsCounts,\r\n        from,\r\n        uint128(newAmount)\r\n      );\r\n\r\n      emit DelegatedPowerChanged(from, newAmount, delegationType);\r\n    }\r\n\r\n    if (to != address(0)) {\r\n      uint256 previous = 0;\r\n      uint256 toSnapshotsCount = snapshotsCounts[to];\r\n      if (toSnapshotsCount != 0) {\r\n        previous = snapshots[to][toSnapshotsCount - 1].value;\r\n      } else {\r\n        previous = balanceOf(to);\r\n      }\r\n\r\n      uint256 newAmount = previous.add(amount);\r\n      _writeSnapshot(\r\n        snapshots,\r\n        snapshotsCounts,\r\n        to,\r\n        uint128(newAmount)\r\n      );\r\n\r\n      emit DelegatedPowerChanged(to, newAmount, delegationType);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Searches for a balance snapshot by block number using binary search.\r\n   *\r\n   * @param  snapshots        The mapping of snapshots by user.\r\n   * @param  snapshotsCounts  The mapping of the number of snapshots by user.\r\n   * @param  user             The user for which the snapshot is being searched.\r\n   * @param  blockNumber      The block number being searched.\r\n   */\r\n  function _searchByBlockNumber(\r\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n    mapping(address => uint256) storage snapshotsCounts,\r\n    address user,\r\n    uint256 blockNumber\r\n  )\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(\r\n      blockNumber <= block.number,\r\n      'INVALID_BLOCK_NUMBER'\r\n    );\r\n\r\n    uint256 snapshotsCount = snapshotsCounts[user];\r\n\r\n    if (snapshotsCount == 0) {\r\n      return balanceOf(user);\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) {\r\n      return snapshots[user][snapshotsCount - 1].value;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (snapshots[user][0].blockNumber > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 lower = 0;\r\n    uint256 upper = snapshotsCount - 1;\r\n    while (upper > lower) {\r\n      uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n      Snapshot memory snapshot = snapshots[user][center];\r\n      if (snapshot.blockNumber == blockNumber) {\r\n        return snapshot.value;\r\n      } else if (snapshot.blockNumber < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return snapshots[user][lower].value;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns delegation data (snapshot, snapshotsCount, delegates) by delegation type.\r\n   *\r\n   *  Note: This mixin contract does not itself define any storage, and we require the inheriting\r\n   *  contract to implement this method to provide access to the relevant mappings in storage.\r\n   *  This pattern was implemented by Aave for legacy reasons and we have decided not to change it.\r\n   *\r\n   * @param  delegationType  The type of power (VOTING_POWER, PROPOSITION_POWER).\r\n   */\r\n  function _getDelegationDataByType(\r\n    DelegationType delegationType\r\n  )\r\n    internal\r\n    virtual\r\n    view\r\n    returns (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage, // snapshots\r\n      mapping(address => uint256) storage, // snapshotsCount\r\n      mapping(address => address) storage // delegates\r\n    );\r\n\r\n  /**\r\n   * @dev Writes a snapshot of a user's token/power balance.\r\n   *\r\n   * @param  snapshots        The mapping of snapshots by user.\r\n   * @param  snapshotsCounts  The mapping of the number of snapshots by user.\r\n   * @param  owner            The user whose power to snapshot.\r\n   * @param  newValue         The new balance to snapshot at the current block.\r\n   */\r\n  function _writeSnapshot(\r\n    mapping(address => mapping(uint256 => Snapshot)) storage snapshots,\r\n    mapping(address => uint256) storage snapshotsCounts,\r\n    address owner,\r\n    uint128 newValue\r\n  )\r\n    internal\r\n  {\r\n    uint128 currentBlock = uint128(block.number);\r\n\r\n    uint256 ownerSnapshotsCount = snapshotsCounts[owner];\r\n    mapping(uint256 => Snapshot) storage ownerSnapshots = snapshots[owner];\r\n\r\n    if (\r\n      ownerSnapshotsCount != 0 &&\r\n      ownerSnapshots[ownerSnapshotsCount - 1].blockNumber == currentBlock\r\n    ) {\r\n      // Doing multiple operations in the same block\r\n      ownerSnapshots[ownerSnapshotsCount - 1].value = newValue;\r\n    } else {\r\n      ownerSnapshots[ownerSnapshotsCount] = Snapshot(currentBlock, newValue);\r\n      snapshotsCounts[owner] = ownerSnapshotsCount + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the delegatee of a user. If a user never performed any delegation, their\r\n   *  delegated address will be 0x0, in which case we return the user's own address.\r\n   *\r\n   * @param  delegator  The address of the user for which return the delegatee.\r\n   * @param  delegates  The mapping of delegates for a particular type of delegation.\r\n   */\r\n  function _getDelegatee(\r\n    address delegator,\r\n    mapping(address => address) storage delegates\r\n  )\r\n    internal\r\n    view\r\n    returns (address)\r\n  {\r\n    address previousDelegatee = delegates[delegator];\r\n\r\n    if (previousDelegatee == address(0)) {\r\n      return delegator;\r\n    }\r\n\r\n    return previousDelegatee;\r\n  }\r\n}\r\n\r\n\r\n// File contracts/governance/token/DydxToken.sol\r\n\r\npragma solidity 0.7.5;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DydxToken\r\n * @author dYdX\r\n *\r\n * @notice The dYdX governance token.\r\n */\r\ncontract DydxToken is\r\n  GovernancePowerDelegationERC20Mixin,\r\n  Ownable\r\n{\r\n  using SafeMath for uint256;\r\n\r\n  // ============ Events ============\r\n\r\n  /**\r\n   * @dev Emitted when an address has been added to or removed from the token transfer allowlist.\r\n   *\r\n   * @param  account    Address that was added to or removed from the token transfer allowlist.\r\n   * @param  isAllowed  True if the address was added to the allowlist, false if removed.\r\n   */\r\n  event TransferAllowlistUpdated(\r\n    address account,\r\n    bool isAllowed\r\n  );\r\n\r\n  /**\r\n   * @dev Emitted when the transfer restriction timestamp is reassigned.\r\n   *\r\n   * @param  transfersRestrictedBefore  The new timestamp on and after which non-allowlisted\r\n   *                                    transfers may occur.\r\n   */\r\n  event TransfersRestrictedBeforeUpdated(\r\n    uint256 transfersRestrictedBefore\r\n  );\r\n\r\n  // ============ Constants ============\r\n\r\n  string internal constant NAME = 'dYdX';\r\n  string internal constant SYMBOL = 'DYDX';\r\n\r\n  uint256 public constant INITIAL_SUPPLY = 1_000_000_000 ether;\r\n\r\n  bytes32 public immutable DOMAIN_SEPARATOR;\r\n  bytes public constant EIP712_VERSION = '1';\r\n  bytes32 public constant EIP712_DOMAIN = keccak256(\r\n    'EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'\r\n  );\r\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\r\n    'Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)'\r\n  );\r\n\r\n  /// @notice Minimum time between mints.\r\n  uint256 public constant MINT_MIN_INTERVAL = 365 days;\r\n\r\n  /// @notice Cap on the percentage of the total supply that can be minted at each mint.\r\n  ///  Denominated in percentage points (units out of 100).\r\n  uint256 public immutable MINT_MAX_PERCENT;\r\n\r\n  /// @notice The timestamp on and after which the transfer restriction must be lifted.\r\n  uint256 public immutable TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN;\r\n\r\n  // ============ Storage ============\r\n\r\n  /// @dev Mapping from (owner) => (next valid nonce) for EIP-712 signatures.\r\n  mapping(address => uint256) internal _nonces;\r\n\r\n  mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots;\r\n  mapping(address => uint256) public _votingSnapshotsCounts;\r\n  mapping(address => address) public _votingDelegates;\r\n\r\n  mapping(address => mapping(uint256 => Snapshot)) public _propositionPowerSnapshots;\r\n  mapping(address => uint256) public _propositionPowerSnapshotsCounts;\r\n  mapping(address => address) public _propositionPowerDelegates;\r\n\r\n  /// @notice Snapshots of the token total supply, at each block where the total supply has changed.\r\n  mapping(uint256 => Snapshot) public _totalSupplySnapshots;\r\n\r\n  /// @notice Number of snapshots of the token total supply.\r\n  uint256 public _totalSupplySnapshotsCount;\r\n\r\n  /// @notice Allowlist of addresses which may send or receive tokens while transfers are\r\n  ///  otherwise restricted.\r\n  mapping(address => bool) public _tokenTransferAllowlist;\r\n\r\n  /// @notice The timestamp on and after which minting may occur.\r\n  uint256 public _mintingRestrictedBefore;\r\n\r\n  /// @notice The timestamp on and after which non-allowlisted transfers may occur.\r\n  uint256 public _transfersRestrictedBefore;\r\n\r\n  // ============ Constructor ============\r\n\r\n  /**\r\n   * @notice Constructor.\r\n   *\r\n   * @param  distributor                           The address which will receive the initial supply of tokens.\r\n   * @param  transfersRestrictedBefore             Timestamp, before which transfers are restricted unless the\r\n   *                                               origin or destination address is in the allowlist.\r\n   * @param  transferRestrictionLiftedNoLaterThan  Timestamp, which is the maximum timestamp that transfer\r\n   *                                               restrictions can be extended to.\r\n   * @param  mintingRestrictedBefore               Timestamp, before which minting is not allowed.\r\n   * @param  mintMaxPercent                        Cap on the percentage of the total supply that can be minted at\r\n   *                                               each mint.\r\n   */\r\n  constructor(\r\n    address distributor,\r\n    uint256 transfersRestrictedBefore,\r\n    uint256 transferRestrictionLiftedNoLaterThan,\r\n    uint256 mintingRestrictedBefore,\r\n    uint256 mintMaxPercent\r\n  )\r\n    ERC20(NAME, SYMBOL)\r\n  {\r\n    uint256 chainId;\r\n\r\n    // solium-disable-next-line\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n\r\n    DOMAIN_SEPARATOR = keccak256(\r\n      abi.encode(\r\n        EIP712_DOMAIN,\r\n        keccak256(bytes(NAME)),\r\n        keccak256(bytes(EIP712_VERSION)),\r\n        chainId,\r\n        address(this)\r\n      )\r\n    );\r\n\r\n    // Validate and set parameters.\r\n    require(\r\n      transfersRestrictedBefore > block.timestamp,\r\n      'TRANSFERS_RESTRICTED_BEFORE_TOO_EARLY'\r\n    );\r\n    require(\r\n      transfersRestrictedBefore <= transferRestrictionLiftedNoLaterThan,\r\n      'MAX_TRANSFER_RESTRICTION_TOO_EARLY'\r\n    );\r\n    require(\r\n      mintingRestrictedBefore > block.timestamp,\r\n      'MINTING_RESTRICTED_BEFORE_TOO_EARLY'\r\n    );\r\n    _transfersRestrictedBefore = transfersRestrictedBefore;\r\n    TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN = transferRestrictionLiftedNoLaterThan;\r\n    _mintingRestrictedBefore = mintingRestrictedBefore;\r\n    MINT_MAX_PERCENT = mintMaxPercent;\r\n\r\n    // Mint the initial supply.\r\n    _mint(distributor, INITIAL_SUPPLY);\r\n\r\n    emit TransfersRestrictedBeforeUpdated(transfersRestrictedBefore);\r\n  }\r\n\r\n  // ============ Other Functions ============\r\n\r\n  /**\r\n   * @notice Adds addresses to the token transfer allowlist. Reverts if any of the addresses\r\n   *  already exist in the allowlist. Only callable by owner.\r\n   *\r\n   * @param  addressesToAdd  Addresses to add to the token transfer allowlist.\r\n   */\r\n  function addToTokenTransferAllowlist(\r\n    address[] calldata addressesToAdd\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < addressesToAdd.length; i++) {\r\n      require(\r\n        !_tokenTransferAllowlist[addressesToAdd[i]],\r\n        'ADDRESS_EXISTS_IN_TRANSFER_ALLOWLIST'\r\n      );\r\n      _tokenTransferAllowlist[addressesToAdd[i]] = true;\r\n      emit TransferAllowlistUpdated(addressesToAdd[i], true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Removes addresses from the token transfer allowlist. Reverts if any of the addresses\r\n   *  don't exist in the allowlist. Only callable by owner.\r\n   *\r\n   * @param  addressesToRemove  Addresses to remove from the token transfer allowlist.\r\n   */\r\n  function removeFromTokenTransferAllowlist(\r\n    address[] calldata addressesToRemove\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    for (uint256 i = 0; i < addressesToRemove.length; i++) {\r\n      require(\r\n        _tokenTransferAllowlist[addressesToRemove[i]],\r\n        'ADDRESS_DOES_NOT_EXIST_IN_TRANSFER_ALLOWLIST'\r\n      );\r\n      _tokenTransferAllowlist[addressesToRemove[i]] = false;\r\n      emit TransferAllowlistUpdated(addressesToRemove[i], false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the transfer restriction. Reverts if the transfer restriction has already passed,\r\n   *  the new transfer restriction is earlier than the previous one, or the new transfer restriction is\r\n   *  after the maximum transfer restriction.\r\n   *\r\n   * @param  transfersRestrictedBefore  The timestamp on and after which non-allowlisted transfers may occur.\r\n   */\r\n  function updateTransfersRestrictedBefore(\r\n    uint256 transfersRestrictedBefore\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    uint256 previousTransfersRestrictedBefore = _transfersRestrictedBefore;\r\n    require(\r\n      block.timestamp < previousTransfersRestrictedBefore,\r\n      'TRANSFER_RESTRICTION_ENDED'\r\n    );\r\n    require(\r\n      previousTransfersRestrictedBefore <= transfersRestrictedBefore,\r\n      'NEW_TRANSFER_RESTRICTION_TOO_EARLY'\r\n    );\r\n    require(\r\n      transfersRestrictedBefore <= TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN,\r\n      'AFTER_MAX_TRANSFER_RESTRICTION'\r\n    );\r\n\r\n    _transfersRestrictedBefore = transfersRestrictedBefore;\r\n\r\n    emit TransfersRestrictedBeforeUpdated(transfersRestrictedBefore);\r\n  }\r\n\r\n  /**\r\n   * @notice Mint new tokens. Only callable by owner after the required time period has elapsed.\r\n   *\r\n   * @param  recipient  The address to receive minted tokens.\r\n   * @param  amount     The number of tokens to mint.\r\n   */\r\n  function mint(\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    external\r\n    onlyOwner\r\n  {\r\n    require(\r\n      block.timestamp >= _mintingRestrictedBefore,\r\n      'MINT_TOO_EARLY'\r\n    );\r\n    require(\r\n      amount <= totalSupply().mul(MINT_MAX_PERCENT).div(100),\r\n      'MAX_MINT_EXCEEDED'\r\n    );\r\n\r\n    // Update the next allowed minting time.\r\n    _mintingRestrictedBefore = block.timestamp.add(MINT_MIN_INTERVAL);\r\n\r\n    // Mint the amount.\r\n    _mint(recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Implements the permit function as specified in EIP-2612.\r\n   *\r\n   * @param  owner     Address of the token owner.\r\n   * @param  spender   Address of the spender.\r\n   * @param  value     Amount of allowance.\r\n   * @param  deadline  Expiration timestamp for the signature.\r\n   * @param  v         Signature param.\r\n   * @param  r         Signature param.\r\n   * @param  s         Signature param.\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 value,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  )\r\n    external\r\n  {\r\n    require(\r\n      owner != address(0),\r\n      'INVALID_OWNER'\r\n    );\r\n    require(\r\n      block.timestamp <= deadline,\r\n      'INVALID_EXPIRATION'\r\n    );\r\n    uint256 currentValidNonce = _nonces[owner];\r\n    bytes32 digest = keccak256(\r\n      abi.encodePacked(\r\n        '\\x19\\x01',\r\n        DOMAIN_SEPARATOR,\r\n        keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline))\r\n      )\r\n    );\r\n\r\n    require(\r\n      owner == ecrecover(digest, v, r, s),\r\n      'INVALID_SIGNATURE'\r\n    );\r\n    _nonces[owner] = currentValidNonce.add(1);\r\n    _approve(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the next valid nonce for EIP-712 signatures.\r\n   *\r\n   *  This nonce should be used when signing for any of the following functions:\r\n   *   - permit()\r\n   *   - delegateByTypeBySig()\r\n   *   - delegateBySig()\r\n   */\r\n  function nonces(\r\n    address owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return _nonces[owner];\r\n  }\r\n\r\n  function transfer(\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    returns (bool)\r\n  {\r\n    _requireTransferAllowed(_msgSender(), recipient);\r\n    return super.transfer(recipient, amount);\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  )\r\n    public\r\n    override\r\n    returns (bool)\r\n  {\r\n    _requireTransferAllowed(sender, recipient);\r\n    return super.transferFrom(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @dev Override _mint() to write a snapshot whenever the total supply changes.\r\n   *\r\n   *  These snapshots are intended to be used by the governance strategy.\r\n   *\r\n   *  Note that the ERC20 _burn() function is never used. If desired, an official burn mechanism\r\n   *  could be implemented external to this contract, and accounted for in the governance strategy.\r\n   */\r\n  function _mint(\r\n    address account,\r\n    uint256 amount\r\n  )\r\n    internal\r\n    override\r\n  {\r\n    super._mint(account, amount);\r\n\r\n    uint256 snapshotsCount = _totalSupplySnapshotsCount;\r\n    uint128 currentBlock = uint128(block.number);\r\n    uint128 newValue = uint128(totalSupply());\r\n\r\n    // Note: There is no special case for the total supply being updated multiple times in the same\r\n    // block. That should never occur.\r\n    _totalSupplySnapshots[snapshotsCount] = Snapshot(currentBlock, newValue);\r\n    _totalSupplySnapshotsCount = snapshotsCount.add(1);\r\n  }\r\n\r\n  function _requireTransferAllowed(\r\n    address sender,\r\n    address recipient\r\n  )\r\n    view\r\n    internal\r\n  {\r\n    // Compare against the constant `TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN` first\r\n    // to avoid additional gas costs from reading from storage.\r\n    if (\r\n      block.timestamp < TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN &&\r\n      block.timestamp < _transfersRestrictedBefore\r\n    ) {\r\n      // While transfers are restricted, a transfer is permitted if either the sender or the\r\n      // recipient is on the allowlist.\r\n      require(\r\n        _tokenTransferAllowlist[sender] || _tokenTransferAllowlist[recipient],\r\n        'NON_ALLOWLIST_TRANSFERS_DISABLED'\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Writes a snapshot before any transfer operation, including: _transfer, _mint and _burn.\r\n   *  - On _transfer, it writes snapshots for both 'from' and 'to'.\r\n   *  - On _mint, only for `to`.\r\n   *  - On _burn, only for `from`.\r\n   *\r\n   * @param  from    The sender.\r\n   * @param  to      The recipient.\r\n   * @param  amount  The amount being transfered.\r\n   */\r\n  function _beforeTokenTransfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  )\r\n    internal\r\n    override\r\n  {\r\n    address votingFromDelegatee = _getDelegatee(from, _votingDelegates);\r\n    address votingToDelegatee = _getDelegatee(to, _votingDelegates);\r\n\r\n    _moveDelegatesByType(\r\n      votingFromDelegatee,\r\n      votingToDelegatee,\r\n      amount,\r\n      DelegationType.VOTING_POWER\r\n    );\r\n\r\n    address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates);\r\n    address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates);\r\n\r\n    _moveDelegatesByType(\r\n      propPowerFromDelegatee,\r\n      propPowerToDelegatee,\r\n      amount,\r\n      DelegationType.PROPOSITION_POWER\r\n    );\r\n  }\r\n\r\n  function _getDelegationDataByType(\r\n    DelegationType delegationType\r\n  )\r\n    internal\r\n    override\r\n    view\r\n    returns (\r\n      mapping(address => mapping(uint256 => Snapshot)) storage, // snapshots\r\n      mapping(address => uint256) storage, // snapshots count\r\n      mapping(address => address) storage // delegatees list\r\n    )\r\n  {\r\n    if (delegationType == DelegationType.VOTING_POWER) {\r\n      return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates);\r\n    } else {\r\n      return (\r\n        _propositionPowerSnapshots,\r\n        _propositionPowerSnapshotsCounts,\r\n        _propositionPowerDelegates\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates specific governance power from signer to `delegatee` using an EIP-712 signature.\r\n   *\r\n   * @param  delegatee       The address to delegate votes to.\r\n   * @param  delegationType  The type of delegation (VOTING_POWER, PROPOSITION_POWER).\r\n   * @param  nonce           The signer's nonce for EIP-712 signatures on this contract.\r\n   * @param  expiry          Expiration timestamp for the signature.\r\n   * @param  v               Signature param.\r\n   * @param  r               Signature param.\r\n   * @param  s               Signature param.\r\n   */\r\n  function delegateByTypeBySig(\r\n    address delegatee,\r\n    DelegationType delegationType,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  )\r\n    public\r\n  {\r\n    bytes32 structHash = keccak256(\r\n      abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry)\r\n    );\r\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\r\n    address signer = ecrecover(digest, v, r, s);\r\n    require(\r\n      signer != address(0),\r\n      'INVALID_SIGNATURE'\r\n    );\r\n    require(\r\n      nonce == _nonces[signer]++,\r\n      'INVALID_NONCE'\r\n    );\r\n    require(\r\n      block.timestamp <= expiry,\r\n      'INVALID_EXPIRATION'\r\n    );\r\n    _delegateByType(signer, delegatee, delegationType);\r\n  }\r\n\r\n  /**\r\n   * @dev Delegates both governance powers from signer to `delegatee` using an EIP-712 signature.\r\n   *\r\n   * @param  delegatee  The address to delegate votes to.\r\n   * @param  nonce      The signer's nonce for EIP-712 signatures on this contract.\r\n   * @param  expiry     Expiration timestamp for the signature.\r\n   * @param  v          Signature param.\r\n   * @param  r          Signature param.\r\n   * @param  s          Signature param.\r\n   */\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  )\r\n    public\r\n  {\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry));\r\n    bytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', DOMAIN_SEPARATOR, structHash));\r\n    address signer = ecrecover(digest, v, r, s);\r\n    require(\r\n      signer != address(0),\r\n      'INVALID_SIGNATURE'\r\n    );\r\n    require(\r\n      nonce == _nonces[signer]++,\r\n      'INVALID_NONCE'\r\n    );\r\n    require(\r\n      block.timestamp <= expiry,\r\n      'INVALID_EXPIRATION'\r\n    );\r\n    _delegateByType(signer, delegatee, DelegationType.VOTING_POWER);\r\n    _delegateByType(signer, delegatee, DelegationType.PROPOSITION_POWER);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"transfersRestrictedBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transferRestrictionLiftedNoLaterThan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintingRestrictedBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintMaxPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"DelegatedPowerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"TransferAllowlistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transfersRestrictedBefore\",\"type\":\"uint256\"}],\"name\":\"TransfersRestrictedBeforeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_BY_TYPE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712_VERSION\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_MAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_MIN_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_mintingRestrictedBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_propositionPowerDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_propositionPowerSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_propositionPowerSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_tokenTransferAllowlist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_totalSupplySnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupplySnapshotsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_transfersRestrictedBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingDelegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_votingSnapshots\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"blockNumber\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"value\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_votingSnapshotsCounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToAdd\",\"type\":\"address[]\"}],\"name\":\"addToTokenTransferAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"delegateByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateByTypeBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getDelegateeByType\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerAtBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"enum IGovernancePowerDelegationERC20.DelegationType\",\"name\":\"delegationType\",\"type\":\"uint8\"}],\"name\":\"getPowerCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressesToRemove\",\"type\":\"address[]\"}],\"name\":\"removeFromTokenTransferAllowlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transfersRestrictedBefore\",\"type\":\"uint256\"}],\"name\":\"updateTransfersRestrictedBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"DydxToken","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000301df37d653b281af83a1ddf4464ef21a622ec8300000000000000000000000000000000000000000000000000000000611e71f0000000000000000000000000000000000000000000000000000000006145fef0000000000000000000000000000000000000000000000000000000006a564ef00000000000000000000000000000000000000000000000000000000000000002","EVMVersion":"Default","Library":"","LicenseType":"Apache-2.0","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1bc2d69deb253172a3e0761bf351bf8b317e0b6377e62b43a4510998861cbcf6"}]