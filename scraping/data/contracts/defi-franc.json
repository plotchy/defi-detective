[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DCHFToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Dependencies/CheckContract.sol\\\";\\nimport \\\"./Interfaces/IDCHFToken.sol\\\";\\n\\n/*\\n * DCHFToken contract valid for both V1 and V2:\\n *\\n * It allows to have 2 or more TroveManagers registered that can mint and burn.\\n * It allows to have 2 or more BorrowerOperations registered that can mint and burn.\\n *\\n * Two public arrays record the TroveManager and BorrowerOps addresses registered.\\n *\\n * Two events are logged when modifying the array of troveManagers and borrowerOps.\\n *\\n * The different modifiers are updated and check if either one of the TroveManagers\\n * or BorrowerOperations are making the call with mapping(address => bool).\\n *\\n * functions addTroveManager and addBorrowerOps register new contracts into the array.\\n *\\n * functions removeTroveManager and removeBorrowerOps enable the removal of a contract\\n * from both the mapping and the public array.\\n *\\n * Additional checks in place in order to ensure that the addresses added are real\\n * TroveManager or BorrowerOps contracts.\\n */\\n\\ninterface ITroveManager {\\n\\tfunction isContractTroveManager() external pure returns (bool);\\n}\\n\\ninterface IBorrowerOps {\\n\\tfunction isContractBorrowerOps() external pure returns (bool);\\n}\\n\\ncontract DCHFToken is CheckContract, IDCHFToken, Ownable {\\n\\tusing SafeMath for uint256;\\n\\n\\taddress[] public troveManagers;\\n\\taddress[] public borrowerOps;\\n\\n\\tIStabilityPoolManager public immutable stabilityPoolManager;\\n\\n\\tmapping(address => bool) public emergencyStopMintingCollateral;\\n\\n\\tmapping(address => bool) public validTroveManagers;\\n\\tmapping(address => bool) public validBorrowerOps;\\n\\n\\tevent EmergencyStopMintingCollateral(address _asset, bool state);\\n\\tevent UpdateTroveManagers(address[] troveManagers);\\n\\tevent UpdateBorrowerOps(address[] borrowerOps);\\n\\n\\tconstructor(address _stabilityPoolManagerAddress) ERC20(\\\"Defi Franc\\\", \\\"DCHF\\\") {\\n\\t\\tcheckContract(_stabilityPoolManagerAddress);\\n\\n\\t\\tstabilityPoolManager = IStabilityPoolManager(_stabilityPoolManagerAddress);\\n\\t\\temit StabilityPoolAddressChanged(_stabilityPoolManagerAddress);\\n\\t}\\n\\n\\t// --- Functions for intra-Dfranc calls ---\\n\\n\\tfunction emergencyStopMinting(address _asset, bool status) external override onlyOwner {\\n\\t\\temergencyStopMintingCollateral[_asset] = status;\\n\\t\\temit EmergencyStopMintingCollateral(_asset, status);\\n\\t}\\n\\n\\tfunction mint(\\n\\t\\taddress _asset,\\n\\t\\taddress _account,\\n\\t\\tuint256 _amount\\n\\t) external override {\\n\\t\\t_requireCallerIsBorrowerOperations();\\n\\t\\trequire(!emergencyStopMintingCollateral[_asset], \\\"Mint is blocked on this collateral\\\");\\n\\t\\t_mint(_account, _amount);\\n\\t}\\n\\n\\tfunction burn(address _account, uint256 _amount) external override {\\n\\t\\t_requireCallerIsBOorTroveMorSP();\\n\\t\\t_burn(_account, _amount);\\n\\t}\\n\\n\\tfunction sendToPool(\\n\\t\\taddress _sender,\\n\\t\\taddress _poolAddress,\\n\\t\\tuint256 _amount\\n\\t) external override {\\n\\t\\t_requireCallerIsStabilityPool();\\n\\t\\t_transfer(_sender, _poolAddress, _amount);\\n\\t}\\n\\n\\tfunction returnFromPool(\\n\\t\\taddress _poolAddress,\\n\\t\\taddress _receiver,\\n\\t\\tuint256 _amount\\n\\t) external override {\\n\\t\\t_requireCallerIsTroveMorSP();\\n\\t\\t_transfer(_poolAddress, _receiver, _amount);\\n\\t}\\n\\n\\t// --- External functions ---\\n\\n\\tfunction transfer(address recipient, uint256 amount) public override returns (bool) {\\n\\t\\t_requireValidRecipient(recipient);\\n\\t\\treturn super.transfer(recipient, amount);\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public override returns (bool) {\\n\\t\\t_requireValidRecipient(recipient);\\n\\t\\treturn super.transferFrom(sender, recipient, amount);\\n\\t}\\n\\n\\tfunction addTroveManager(address _troveManager) external override onlyOwner {\\n\\t\\tCheckContract(_troveManager);\\n\\t\\tassert(ITroveManager(_troveManager).isContractTroveManager());\\n\\t\\trequire(!validTroveManagers[_troveManager], \\\"TroveManager already exists\\\");\\n\\t\\tvalidTroveManagers[_troveManager] = true;\\n\\t\\ttroveManagers.push(_troveManager);\\n\\t\\temit UpdateTroveManagers(troveManagers);\\n\\t}\\n\\n\\tfunction removeTroveManager(address _troveManager) external override onlyOwner {\\n\\t\\trequire(validTroveManagers[_troveManager], \\\"TroveManager does not exist\\\");\\n\\t\\tdelete validTroveManagers[_troveManager];\\n\\t\\t_removeElement(troveManagers, _troveManager);\\n\\t\\temit UpdateTroveManagers(troveManagers);\\n\\t}\\n\\n\\tfunction addBorrowerOps(address _borrowerOps) external override onlyOwner {\\n\\t\\tCheckContract(_borrowerOps);\\n\\t\\tassert(IBorrowerOps(_borrowerOps).isContractBorrowerOps());\\n\\t\\trequire(!validBorrowerOps[_borrowerOps], \\\"BorrowerOps already exists\\\");\\n\\t\\tvalidBorrowerOps[_borrowerOps] = true;\\n\\t\\tborrowerOps.push(_borrowerOps);\\n\\t\\temit UpdateBorrowerOps(borrowerOps);\\n\\t}\\n\\n\\tfunction removeBorrowerOps(address _borrowerOps) external override onlyOwner {\\n\\t\\trequire(validBorrowerOps[_borrowerOps], \\\"BorrowerOps does not exist\\\");\\n\\t\\tdelete validBorrowerOps[_borrowerOps];\\n\\t\\t_removeElement(borrowerOps, _borrowerOps);\\n\\t\\temit UpdateBorrowerOps(borrowerOps);\\n\\t}\\n\\n\\t// --- Internal functions ---\\n\\n\\tfunction _removeElement(address[] storage _array, address _contract) internal {\\n\\t\\tfor (uint256 i; i < _array.length; i++) {\\n\\t\\t\\tif (_array[i] == _contract) {\\n\\t\\t\\t\\t_array[i] = _array[_array.length - 1];\\n\\t\\t\\t\\t_array.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// --- 'require' functions ---\\n\\n\\tfunction _requireValidRecipient(address _recipient) internal view {\\n\\t\\trequire(\\n\\t\\t\\t_recipient != address(0) && _recipient != address(this),\\n\\t\\t\\t\\\"DCHF: Cannot transfer tokens directly to the DCHF token contract or the zero address\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t!stabilityPoolManager.isStabilityPool(_recipient) &&\\n\\t\\t\\t\\t!validTroveManagers[_recipient] &&\\n\\t\\t\\t\\t!validBorrowerOps[_recipient],\\n\\t\\t\\t\\\"DCHF: Cannot transfer tokens directly to the StabilityPool, TroveManager or BorrowerOps\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireCallerIsBorrowerOperations() internal view {\\n\\t\\trequire(validBorrowerOps[msg.sender], \\\"DCHFToken: Caller is not BorrowerOperations\\\");\\n\\t}\\n\\n\\tfunction _requireCallerIsBOorTroveMorSP() internal view {\\n\\t\\trequire(\\n\\t\\t\\tvalidBorrowerOps[msg.sender] ||\\n\\t\\t\\t\\tvalidTroveManagers[msg.sender] ||\\n\\t\\t\\t\\tstabilityPoolManager.isStabilityPool(msg.sender),\\n\\t\\t\\t\\\"DCHF: Caller is neither BorrowerOperations nor TroveManager nor StabilityPool\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireCallerIsStabilityPool() internal view {\\n\\t\\trequire(\\n\\t\\t\\tstabilityPoolManager.isStabilityPool(msg.sender),\\n\\t\\t\\t\\\"DCHF: Caller is not the StabilityPool\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _requireCallerIsTroveMorSP() internal view {\\n\\t\\trequire(\\n\\t\\t\\tvalidTroveManagers[msg.sender] || stabilityPoolManager.isStabilityPool(msg.sender),\\n\\t\\t\\t\\\"DCHF: Caller is neither TroveManager nor StabilityPool\\\"\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/CheckContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\ncontract CheckContract {\\n\\tfunction checkContract(address _account) internal view {\\n\\t\\trequire(_account != address(0), \\\"Account cannot be zero address\\\");\\n\\n\\t\\tuint256 size;\\n\\t\\tassembly {\\n\\t\\t\\tsize := extcodesize(_account)\\n\\t\\t}\\n\\t\\trequire(size > 0, \\\"Account code size cannot be zero\\\");\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDCHFToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\nimport \\\"../Dependencies/ERC20Permit.sol\\\";\\nimport \\\"../Interfaces/IStabilityPoolManager.sol\\\";\\n\\nabstract contract IDCHFToken is ERC20Permit {\\n\\t// --- Events ---\\n\\n\\tevent StabilityPoolAddressChanged(address _newStabilityPoolAddress);\\n\\n\\tevent DCHFTokenBalanceUpdated(address _user, uint256 _amount);\\n\\n\\tfunction emergencyStopMinting(address _asset, bool status) external virtual;\\n\\n\\tfunction addTroveManager(address _troveManager) external virtual;\\n\\n\\tfunction removeTroveManager(address _troveManager) external virtual;\\n\\n\\tfunction addBorrowerOps(address _borrowerOps) external virtual;\\n\\n\\tfunction removeBorrowerOps(address _borrowerOps) external virtual;\\n\\n\\tfunction mint(\\n\\t\\taddress _asset,\\n\\t\\taddress _account,\\n\\t\\tuint256 _amount\\n\\t) external virtual;\\n\\n\\tfunction burn(address _account, uint256 _amount) external virtual;\\n\\n\\tfunction sendToPool(\\n\\t\\taddress _sender,\\n\\t\\taddress poolAddress,\\n\\t\\tuint256 _amount\\n\\t) external virtual;\\n\\n\\tfunction returnFromPool(\\n\\t\\taddress poolAddress,\\n\\t\\taddress user,\\n\\t\\tuint256 _amount\\n\\t) external virtual;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Dependencies/ERC20Permit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\ninterface IERC2612Permit {\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n\\t * given `owner`'s signed approval.\\n\\t *\\n\\t * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n\\t * ordering also apply here.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `deadline` must be a timestamp in the future.\\n\\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n\\t * over the EIP712-formatted function arguments.\\n\\t * - the signature must use ``owner``'s current nonce (see {nonces}).\\n\\t *\\n\\t * For more information on the signature format, see the\\n\\t * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n\\t * section].\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n\\t * included whenever a signature is generated for {permit}.\\n\\t *\\n\\t * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n\\t * prevents a signature from being used multiple times.\\n\\t */\\n\\tfunction nonces(address owner) external view returns (uint256);\\n}\\n\\nabstract contract ERC20Permit is ERC20, IERC2612Permit {\\n\\tusing Counters for Counters.Counter;\\n\\n\\tmapping(address => Counters.Counter) private _nonces;\\n\\n\\t// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\tbytes32 public constant PERMIT_TYPEHASH =\\n\\t\\t0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n\\tbytes32 public DOMAIN_SEPARATOR;\\n\\n\\tconstructor() {\\n\\t\\tuint256 chainID;\\n\\t\\tassembly {\\n\\t\\t\\tchainID := chainid()\\n\\t\\t}\\n\\n\\t\\tDOMAIN_SEPARATOR = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tkeccak256(bytes(name())),\\n\\t\\t\\t\\tkeccak256(bytes(\\\"1\\\")), // Version\\n\\t\\t\\t\\tchainID,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC2612Permit-permit}.\\n\\t *\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external virtual override {\\n\\t\\trequire(block.timestamp <= deadline, \\\"Permit: expired deadline\\\");\\n\\n\\t\\tbytes32 hashStruct = keccak256(\\n\\t\\t\\tabi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline)\\n\\t\\t);\\n\\n\\t\\tbytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\\n\\n\\t\\taddress signer = ecrecover(_hash, v, r, s);\\n\\t\\trequire(signer != address(0) && signer == owner, \\\"ERC20Permit: Invalid signature\\\");\\n\\n\\t\\t_nonces[owner].increment();\\n\\t\\t_approve(owner, spender, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC2612Permit-nonces}.\\n\\t */\\n\\tfunction nonces(address owner) public view override returns (uint256) {\\n\\t\\treturn _nonces[owner].current();\\n\\t}\\n\\n\\tfunction chainId() public view returns (uint256 chainID) {\\n\\t\\tassembly {\\n\\t\\t\\tchainID := chainid()\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPoolManager.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\n\\nimport \\\"./IStabilityPool.sol\\\";\\n\\ninterface IStabilityPoolManager {\\n\\tevent StabilityPoolAdded(address asset, address stabilityPool);\\n\\tevent StabilityPoolRemoved(address asset, address stabilityPool);\\n\\n\\tfunction isStabilityPool(address stabilityPool) external view returns (bool);\\n\\n\\tfunction addStabilityPool(address asset, address stabilityPool) external;\\n\\n\\tfunction getAssetStabilityPool(address asset) external view returns (IStabilityPool);\\n\\n\\tfunction unsafeGetAssetStabilityPool(address asset) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./IDeposit.sol\\\";\\n\\ninterface IStabilityPool is IDeposit {\\n\\t// --- Events ---\\n\\tevent StabilityPoolAssetBalanceUpdated(uint256 _newBalance);\\n\\tevent StabilityPoolDCHFBalanceUpdated(uint256 _newBalance);\\n\\n\\tevent BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\\n\\tevent TroveManagerAddressChanged(address _newTroveManagerAddress);\\n\\tevent DefaultPoolAddressChanged(address _newDefaultPoolAddress);\\n\\tevent DCHFTokenAddressChanged(address _newDCHFTokenAddress);\\n\\tevent SortedTrovesAddressChanged(address _newSortedTrovesAddress);\\n\\tevent CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\\n\\n\\tevent P_Updated(uint256 _P);\\n\\tevent S_Updated(uint256 _S, uint128 _epoch, uint128 _scale);\\n\\tevent G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n\\tevent EpochUpdated(uint128 _currentEpoch);\\n\\tevent ScaleUpdated(uint128 _currentScale);\\n\\n\\tevent DepositSnapshotUpdated(address indexed _depositor, uint256 _P, uint256 _S, uint256 _G);\\n\\tevent SystemSnapshotUpdated(uint256 _P, uint256 _G);\\n\\tevent UserDepositChanged(address indexed _depositor, uint256 _newDeposit);\\n\\tevent StakeChanged(uint256 _newSystemStake, address _depositor);\\n\\n\\tevent AssetGainWithdrawn(address indexed _depositor, uint256 _Asset, uint256 _DCHFLoss);\\n\\tevent MONPaidToDepositor(address indexed _depositor, uint256 _MON);\\n\\tevent AssetSent(address _to, uint256 _amount);\\n\\n\\t// --- Functions ---\\n\\n\\tfunction NAME() external view returns (string memory name);\\n\\n\\t/*\\n\\t * Called only once on init, to set addresses of other Dfranc contracts\\n\\t * Callable only by owner, renounces ownership at the end\\n\\t */\\n\\tfunction setAddresses(\\n\\t\\taddress _assetAddress,\\n\\t\\taddress _borrowerOperationsAddress,\\n\\t\\taddress _troveManagerAddress,\\n\\t\\taddress _troveManagerHelperAddress,\\n\\t\\taddress _dchfTokenAddress,\\n\\t\\taddress _sortedTrovesAddress,\\n\\t\\taddress _communityIssuanceAddress,\\n\\t\\taddress _dfrancParamsAddress\\n\\t) external;\\n\\n\\t/*\\n\\t * Initial checks:\\n\\t * - Frontend is registered or zero address\\n\\t * - Sender is not a registered frontend\\n\\t * - _amount is not zero\\n\\t * ---\\n\\t * - Triggers a MON issuance, based on time passed since the last issuance. The MON issuance is shared between *all* depositors and front ends\\n\\t * - Tags the deposit with the provided front end tag param, if it's a new deposit\\n\\t * - Sends depositor's accumulated gains (MON, ETH) to depositor\\n\\t * - Sends the tagged front end's accumulated MON gains to the tagged front end\\n\\t * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\\n\\t */\\n\\tfunction provideToSP(uint256 _amount) external;\\n\\n\\t/*\\n\\t * Initial checks:\\n\\t * - _amount is zero or there are no under collateralized troves left in the system\\n\\t * - User has a non zero deposit\\n\\t * ---\\n\\t * - Triggers a MON issuance, based on time passed since the last issuance. The MON issuance is shared between *all* depositors and front ends\\n\\t * - Removes the deposit's front end tag if it is a full withdrawal\\n\\t * - Sends all depositor's accumulated gains (MON, ETH) to depositor\\n\\t * - Sends the tagged front end's accumulated MON gains to the tagged front end\\n\\t * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\\n\\t *\\n\\t * If _amount > userDeposit, the user withdraws all of their compounded deposit.\\n\\t */\\n\\tfunction withdrawFromSP(uint256 _amount) external;\\n\\n\\t/*\\n\\t * Initial checks:\\n\\t * - User has a non zero deposit\\n\\t * - User has an open trove\\n\\t * - User has some ETH gain\\n\\t * ---\\n\\t * - Triggers a MON issuance, based on time passed since the last issuance. The MON issuance is shared between *all* depositors and front ends\\n\\t * - Sends all depositor's MON gain to  depositor\\n\\t * - Sends all tagged front end's MON gain to the tagged front end\\n\\t * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\\n\\t * - Leaves their compounded deposit in the Stability Pool\\n\\t * - Updates snapshots for deposit and tagged front end stake\\n\\t */\\n\\tfunction withdrawAssetGainToTrove(address _upperHint, address _lowerHint) external;\\n\\n\\t/*\\n\\t * Initial checks:\\n\\t * - Caller is TroveManager\\n\\t * ---\\n\\t * Cancels out the specified debt against the DCHF contained in the Stability Pool (as far as possible)\\n\\t * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\\n\\t * Only called by liquidation functions in the TroveManager.\\n\\t */\\n\\tfunction offset(uint256 _debt, uint256 _coll) external;\\n\\n\\t/*\\n\\t * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\\n\\t * to exclude edge cases like ETH received from a self-destruct.\\n\\t */\\n\\tfunction getAssetBalance() external view returns (uint256);\\n\\n\\t/*\\n\\t * Returns DCHF held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\\n\\t */\\n\\tfunction getTotalDCHFDeposits() external view returns (uint256);\\n\\n\\t/*\\n\\t * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\\n\\t */\\n\\tfunction getDepositorAssetGain(address _depositor) external view returns (uint256);\\n\\n\\t/*\\n\\t * Calculate the MON gain earned by a deposit since its last snapshots were taken.\\n\\t * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\\n\\t * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\\n\\t * which they made their deposit.\\n\\t */\\n\\tfunction getDepositorMONGain(address _depositor) external view returns (uint256);\\n\\n\\t/*\\n\\t * Return the user's compounded deposit.\\n\\t */\\n\\tfunction getCompoundedDCHFDeposit(address _depositor) external view returns (uint256);\\n\\n\\t/*\\n\\t * Return the front end's compounded stake.\\n\\t *\\n\\t * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\\n\\t */\\n\\tfunction getCompoundedTotalStake() external view returns (uint256);\\n\\n\\tfunction getNameBytes() external view returns (bytes32);\\n\\n\\tfunction getAssetType() external view returns (address);\\n\\n\\t/*\\n\\t * Fallback function\\n\\t * Only callable by Active Pool, it just accounts for ETH received\\n\\t * receive() external payable;\\n\\t */\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDeposit.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.14;\\n\\ninterface IDeposit {\\n\\tfunction receivedERC20(address _asset, uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stabilityPoolManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DCHFTokenBalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"EmergencyStopMintingCollateral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newStabilityPoolAddress\",\"type\":\"address\"}],\"name\":\"StabilityPoolAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"borrowerOps\",\"type\":\"address[]\"}],\"name\":\"UpdateBorrowerOps\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"troveManagers\",\"type\":\"address[]\"}],\"name\":\"UpdateTroveManagers\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOps\",\"type\":\"address\"}],\"name\":\"addBorrowerOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"}],\"name\":\"addTroveManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowerOps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"emergencyStopMinting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"emergencyStopMintingCollateral\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowerOps\",\"type\":\"address\"}],\"name\":\"removeBorrowerOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveManager\",\"type\":\"address\"}],\"name\":\"removeTroveManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"returnFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendToPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolManager\",\"outputs\":[{\"internalType\":\"contract IStabilityPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"troveManagers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validBorrowerOps\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validTroveManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"DCHFToken","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000202fbff035188f9f0525e144c8b3f8249a74ad21","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]