[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/InsureToken.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n/***\\n *@title InsureToken\\n *@author InsureDAO\\n * SPDX-License-Identifier: MIT\\n *@notice InsureDAO's governance token\\n */\\n\\n//libraries\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/pool/IOwnership.sol\\\";\\n\\ncontract InsureToken is IERC20 {\\n    event UpdateMiningParameters(\\n        uint256 time,\\n        uint256 rate,\\n        uint256 supply,\\n        int256 miningepoch\\n    );\\n    event SetMinter(address minter);\\n    event SetAdmin(address admin);\\n    event SetRate(uint256 rate);\\n\\n    string public name;\\n    string public symbol;\\n    uint256 public constant decimals = 18;\\n\\n    mapping(address => uint256) public override balanceOf;\\n    mapping(address => mapping(address => uint256)) allowances;\\n    uint256 public total_supply;\\n\\n    address public minter;\\n    IOwnership public immutable ownership;\\n\\n    //General constants\\n    uint256 constant YEAR = 86400 * 365;\\n\\n    // Allocation within 5years:\\n    // ==========\\n    // * Team & Development: 24%\\n    // * Liquidity Mining: 40%\\n    // * Investors: 10%\\n    // * Foundation Treasury: 14%\\n    // * Community Treasury: 10%\\n    // ==========\\n    //\\n    // After 5years:\\n    // ==========\\n    // * Liquidity Mining: 40%~ (Mint fixed amount every year)\\n    //\\n    // Mint 2_800_000 INSURE every year.\\n    // 6th year: 1.32% inflation rate\\n    // 7th year: 1.30% inflation rate\\n    // 8th year: 1.28% infration rate\\n    // so on\\n    // ==========\\n\\n    // Supply parameters\\n    uint256 constant INITIAL_SUPPLY = 126_000_000; //will be vested\\n    uint256 constant RATE_REDUCTION_TIME = YEAR;\\n    uint256[6] public RATES = [\\n        (28_000_000 * 10 ** 18) / YEAR, //epoch 0\\n        (22_400_000 * 10 ** 18) / YEAR, //epoch 1\\n        (16_800_000 * 10 ** 18) / YEAR, //epoch 2\\n        (11_200_000 * 10 ** 18) / YEAR, //epoch 3\\n        (5_600_000 * 10 ** 18) / YEAR, //epoch 4\\n        (2_800_000 * 10 ** 18) / YEAR //epoch 5~\\n    ];\\n\\n    uint256 constant RATE_DENOMINATOR = 10 ** 18;\\n    uint256 constant INFLATION_DELAY = 86400;\\n\\n    // Supply variables\\n    int256 public mining_epoch;\\n    uint256 public start_epoch_time;\\n    uint256 public rate;\\n\\n    uint256 public start_epoch_supply;\\n\\n    uint256 public emergency_minted;\\n\\n    modifier onlyOwner() {\\n        require(\\n            ownership.owner() == msg.sender,\\n            \\\"Caller is not allowed to operate\\\"\\n        );\\n        _;\\n    }\\n\\n\\n    /***\\n     * @notice Contract constructor\\n     * @param _name Token full name\\n     * @param _symbol Token symbol\\n     */\\n    constructor(string memory _name, string memory _symbol, address _ownership) {\\n        uint256 _init_supply = INITIAL_SUPPLY * RATE_DENOMINATOR;\\n        name = _name;\\n        symbol = _symbol;\\n        balanceOf[msg.sender] = _init_supply;\\n        total_supply = _init_supply;\\n        ownership = IOwnership(_ownership);\\n        emit Transfer(address(0), msg.sender, _init_supply);\\n\\n        unchecked {\\n            start_epoch_time =\\n                block.timestamp +\\n                INFLATION_DELAY -\\n                RATE_REDUCTION_TIME;\\n            mining_epoch = -1;\\n        }\\n        rate = 0;\\n        start_epoch_supply = _init_supply;\\n    }\\n\\n    /***\\n     *@dev Update mining rate and supply at the start of the epoch\\n     *     Any modifying mining call must also call this\\n     */\\n    function _update_mining_parameters() internal {\\n        uint256 _rate = rate;\\n        uint256 _start_epoch_supply = start_epoch_supply;\\n\\n        start_epoch_time += RATE_REDUCTION_TIME;\\n        unchecked {\\n            mining_epoch += 1;\\n        }\\n\\n        if (mining_epoch == 0) {\\n            _rate = RATES[uint256(mining_epoch)];\\n        } else if (mining_epoch < int256(6)) {\\n            _start_epoch_supply += RATES[uint256(mining_epoch) - 1] * YEAR;\\n            start_epoch_supply = _start_epoch_supply;\\n            _rate = RATES[uint256(mining_epoch)];\\n        } else {\\n            _start_epoch_supply += RATES[5] * YEAR;\\n            start_epoch_supply = _start_epoch_supply;\\n            _rate = RATES[5];\\n        }\\n        rate = _rate;\\n        emit UpdateMiningParameters(\\n            block.timestamp,\\n            _rate,\\n            _start_epoch_supply,\\n            mining_epoch\\n        );\\n    }\\n\\n    /***\\n     * @notice Update mining rate and supply at the start of the epoch\\n     * @dev Callable by any address, but only once per epoch\\n     *     Total supply becomes slightly larger if this function is called late\\n     */\\n    function update_mining_parameters() external {\\n        require(\\n            block.timestamp >= start_epoch_time + RATE_REDUCTION_TIME,\\n            \\\"dev: too soon!\\\"\\n        );\\n        _update_mining_parameters();\\n    }\\n\\n    /***\\n     *@notice Get timestamp of the current mining epoch start\\n     *        while simultaneously updating mining parameters\\n     *@return Timestamp of the epoch\\n     */\\n    function start_epoch_time_write() external returns(uint256) {\\n\\n        uint256 _start_epoch_time = start_epoch_time;\\n        if (block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n            return start_epoch_time;\\n        } else {\\n            return _start_epoch_time;\\n        }\\n    }\\n\\n    /***\\n     *@notice Get timestamp of the next mining epoch start\\n     *        while simultaneously updating mining parameters\\n     *@return Timestamp of the next epoch\\n     */\\n    function future_epoch_time_write() external returns(uint256) {\\n        uint256 _start_epoch_time = start_epoch_time;\\n        if (block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n            return start_epoch_time + RATE_REDUCTION_TIME;\\n        } else {\\n            return _start_epoch_time + RATE_REDUCTION_TIME;\\n        }\\n    }\\n\\n    function _available_supply() internal view returns(uint256) {\\n        return\\n        start_epoch_supply +\\n            ((block.timestamp - start_epoch_time) * rate) +\\n            emergency_minted;\\n    }\\n\\n    /***\\n     *@notice Current number of tokens in existence (claimed or unclaimed)\\n     */\\n    function available_supply() external view returns(uint256) {\\n        return _available_supply();\\n    }\\n\\n    /***\\n     *@notice How much supply is mintable from start timestamp till end timestamp\\n     *@param start Start of the time interval (timestamp)\\n     *@param end End of the time interval (timestamp)\\n     *@return Tokens mintable from `start` till `end`\\n     */\\n    function mintable_in_timeframe(uint256 start, uint256 end)\\n    external\\n    view\\n    returns(uint256) {\\n        require(start <= end, \\\"dev: start > end\\\");\\n        uint256 _to_mint = 0;\\n\\n        uint256 _current_epoch_time = start_epoch_time;\\n        uint256 _current_rate = rate;\\n        int256 _current_epoch = mining_epoch;\\n\\n        // Special case if end is in future (not yet minted) epoch\\n        if (end > _current_epoch_time + RATE_REDUCTION_TIME) {\\n\\n            _current_epoch_time += RATE_REDUCTION_TIME;\\n            if (_current_epoch < 5) {\\n                _current_epoch += 1;\\n                _current_rate = RATES[uint256(_current_epoch)];\\n            } else {\\n                _current_epoch += 1;\\n                _current_rate = RATES[5];\\n            }\\n        }\\n\\n        require(\\n            end <= _current_epoch_time + RATE_REDUCTION_TIME,\\n            \\\"dev: too far in future\\\"\\n        );\\n\\n        for (uint256 i; i < 999;) {\\n            // InsureDAO will not work in 1000 years.\\n            if (end >= _current_epoch_time) {\\n                uint256 current_end = end;\\n                if (current_end > _current_epoch_time + RATE_REDUCTION_TIME) {\\n                    current_end = _current_epoch_time + RATE_REDUCTION_TIME;\\n                }\\n                uint256 current_start = start;\\n                if (\\n                    current_start >= _current_epoch_time + RATE_REDUCTION_TIME\\n                ) {\\n                    break; // We should never get here but what if...\\n                } else if (current_start < _current_epoch_time) {\\n                    current_start = _current_epoch_time;\\n                }\\n                _to_mint += (_current_rate * (current_end - current_start));\\n\\n                if (start >= _current_epoch_time) {\\n                    break;\\n                }\\n            }\\n\\n            _current_epoch_time -= RATE_REDUCTION_TIME;\\n\\n            if (_current_epoch == 0) {\\n                _current_rate = 0;\\n            } else {\\n                _current_rate = _current_epoch < 5 ? RATES[uint256(_current_epoch) - 1] : RATES[5];\\n            }\\n\\n            _current_epoch -= 1;\\n\\n            assert(_current_rate <= RATES[0]); // This should never happen\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return _to_mint;\\n    }\\n\\n    /***\\n     *@notice Total number of tokens in existence.\\n     */\\n    function totalSupply() external view override returns(uint256) {\\n        return total_supply;\\n    }\\n\\n    /***\\n     *@notice Check the amount of tokens that an owner allowed to a spender\\n     *@param _owner The address which owns the funds\\n     *@param _spender The address which will spend the funds\\n     *@return uint256 specifying the amount of tokens still available for the spender\\n     */\\n    function allowance(address _owner, address _spender)\\n    external\\n    view\\n    override\\n    returns(uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /***\\n     *@notice Transfer `_value` tokens from `msg.sender` to `_to`\\n     *@dev Vyper does not allow underflows, so the subtraction in\\n     *     this function will revert on an insufficient balance\\n     *@param _to The address to transfer to\\n     *@param _value The amount to be transferred\\n     *@return bool success\\n     */\\n    function transfer(address _to, uint256 _value)\\n    external\\n    override\\n    returns(bool) {\\n        require(_to != address(0), \\\"transfers to 0x0 are not allowed\\\");\\n        uint256 _fromBalance = balanceOf[msg.sender];\\n        require(_fromBalance >= _value, \\\"transfer amount exceeds balance\\\");\\n        unchecked {\\n            balanceOf[msg.sender] = _fromBalance - _value;\\n        }\\n        balanceOf[_to] += _value;\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    /***\\n     * @notice Transfer `_value` tokens from `_from` to `_to`\\n     * @param _from address The address which you want to send tokens from\\n     * @param _to address The address which you want to transfer to\\n     * @param _value uint256 the amount of tokens to be transferred\\n     * @return bool success\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external override returns(bool) {\\n        require(_from != address(0), \\\"transfer from the zero address\\\");\\n        require(_to != address(0), \\\"transfer to the zero address\\\");\\n\\n        uint256 currentAllowance = allowances[_from][msg.sender];\\n        require(currentAllowance >= _value, \\\"transfer amount exceeds allow\\\");\\n        unchecked {\\n            allowances[_from][msg.sender] -= _value;\\n        }\\n\\n        uint256 _fromBalance = balanceOf[_from];\\n        require(_fromBalance >= _value, \\\"transfer amount exceeds balance\\\");\\n        unchecked {\\n            balanceOf[_from] -= _value;\\n        }\\n        balanceOf[_to] += _value;\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"approve from the zero address\\\");\\n        require(spender != address(0), \\\"approve to the zero address\\\");\\n\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     *@notice Approve `_spender` to transfer `_value` tokens on behalf of `msg.sender`\\n     *@param _spender The address which will spend the funds\\n     *@param _value The amount of tokens to be spent\\n     *@return bool success\\n     */\\n    function approve(address _spender, uint256 _value)\\n    external\\n    override\\n    returns(bool) {\\n        _approve(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address _spender, uint256 addedValue)\\n    external\\n    returns(bool) {\\n        _approve(\\n            msg.sender,\\n            _spender,\\n            allowances[msg.sender][_spender] + addedValue\\n        );\\n\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address _spender, uint256 subtractedValue)\\n    external\\n    returns(bool) {\\n        uint256 currentAllowance = allowances[msg.sender][_spender];\\n        require(\\n            currentAllowance >= subtractedValue,\\n            \\\"decreased allowance below zero\\\"\\n        );\\n        unchecked {\\n            _approve(msg.sender, _spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /***\\n     *@notice Mint `_value` tokens and assign them to `_to`\\n     *@dev Emits a Transfer event originating from 0x00\\n     *@param _to The account that will receive the created tokens\\n     *@param _value The amount that will be created\\n     *@return bool success\\n     */\\n    function mint(address _to, uint256 _value) external returns(bool) {\\n        require(msg.sender == minter, \\\"dev: minter only\\\");\\n        require(_to != address(0), \\\"dev: zero address\\\");\\n\\n        _mint(_to, _value);\\n\\n        return true;\\n    }\\n\\n    function _mint(address _to, uint256 _value) internal {\\n        uint256 _total_supply = total_supply + _value;\\n\\n        require(\\n            _total_supply <= _available_supply(),\\n            \\\"exceeds allowable mint amount\\\"\\n        );\\n        if (block.timestamp >= start_epoch_time + RATE_REDUCTION_TIME) {\\n            _update_mining_parameters();\\n        }\\n        total_supply = _total_supply;\\n\\n        balanceOf[_to] += _value;\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    /**\\n     *@notice Burn `_value` tokens belonging to `msg.sender`\\n     *@dev Emits a Transfer event with a destination of 0x00\\n     *@param _value The amount that will be burned\\n     *@return bool success\\n     */\\n    function burn(uint256 _value) external returns(bool) {\\n        require(\\n            balanceOf[msg.sender] >= _value,\\n            \\\"_value > balanceOf[msg.sender]\\\"\\n        );\\n\\n        unchecked {\\n            balanceOf[msg.sender] -= _value;\\n        }\\n        total_supply -= _value;\\n\\n        emit Transfer(msg.sender, address(0), _value);\\n        return true;\\n    }\\n\\n    /***\\n     *@notice Change the token name and symbol to `_name` and `_symbol`\\n     *@dev Only callable by the admin account\\n     *@param _name New token name\\n     *@param _symbol New token symbol\\n     */\\n    function set_name(string memory _name, string memory _symbol) external onlyOwner {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    /***\\n     *@notice Set the minter address\\n     *@dev Only callable once, when minter has not yet been set\\n     *@param _minter Address of the minter\\n     */\\n    function set_minter(address _minter) external onlyOwner {\\n        require(\\n            minter == address(0),\\n            \\\"can set the minter at creation\\\"\\n        );\\n        minter = _minter;\\n        emit SetMinter(_minter);\\n    }\\n\\n    /***\\n     *@notice Set the new rate for the infration after 5 years.\\n     *@dev input must be the number of INSURE to be minted per second.\\n     *@param _rate mint amount per second\\n     */\\n    function set_rate(uint256 _rate) external onlyOwner {\\n        require(_rate < RATES[5], \\\"Decrease Only\\\");\\n\\n        RATES[5] = _rate;\\n\\n        emit SetRate(_rate);\\n    }\\n\\n    /***\\n     * @notice Emergency minting only when CDS couldn't afford the insolvency.\\n     * @dev\\n     * @param _amountOut token amount needed. token is defiend whithin converter.\\n     * @param _to CDS address\\n     */\\n    function emergency_mint(uint256 _amount, address _to)\\n    external\\n    returns(bool) {\\n        require(msg.sender == minter, \\\"dev: minter only\\\");\\n        //mint\\n        emergency_minted += _amount;\\n        _mint(_to, _amount);\\n\\n        return true;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/pool/IOwnership.sol\": {\r\n      \"content\": \"pragma solidity 0.8.10;\\n\\n//SPDX-License-Identifier: MIT\\n\\ninterface IOwnership {\\n    function owner() external view returns (address);\\n\\n    function futureOwner() external view returns (address);\\n\\n    function commitTransferOwnership(address newOwner) external;\\n\\n    function acceptTransferOwnership() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_ownership\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"SetAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"SetMinter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"SetRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"miningepoch\",\"type\":\"int256\"}],\"name\":\"UpdateMiningParameters\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergency_mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergency_minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_epoch_time_write\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mining_epoch\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"mintable_in_timeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownership\",\"outputs\":[{\"internalType\":\"contract IOwnership\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"set_minter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"set_name\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"set_rate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_epoch_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_epoch_time\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start_epoch_time_write\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"total_supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update_mining_parameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"InsureToken","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000056246e83f3148b05ce2d90b44fbb4e9fa9eaf5bb000000000000000000000000000000000000000000000000000000000000000b496e73757265546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006494e535552450000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]