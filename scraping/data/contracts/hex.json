[{"SourceCode":"pragma solidity 0.5.13;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\ncontract GlobalsAndUtility is ERC20 {\r\n    /*  XfLobbyEnter      (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        address  indexed  memberAddr\r\n        uint256  indexed  entryId\r\n        uint96            rawAmount       -->  data0 [135: 40]\r\n        address  indexed  referrerAddr\r\n    */\r\n    event XfLobbyEnter(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  XfLobbyExit       (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        address  indexed  memberAddr\r\n        uint256  indexed  entryId\r\n        uint72            xfAmount        -->  data0 [111: 40]\r\n        address  indexed  referrerAddr\r\n    */\r\n    event XfLobbyExit(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  DailyDataUpdate   (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        uint16            beginDay        -->  data0 [ 55: 40]\r\n        uint16            endDay          -->  data0 [ 71: 56]\r\n        bool              isAutoUpdate    -->  data0 [ 79: 72]\r\n        address  indexed  updaterAddr\r\n    */\r\n    event DailyDataUpdate(\r\n        uint256 data0,\r\n        address indexed updaterAddr\r\n    );\r\n\r\n    /*  Claim             (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        bytes20  indexed  btcAddr\r\n        uint56            rawSatoshis     -->  data0 [ 95: 40]\r\n        uint56            adjSatoshis     -->  data0 [151: 96]\r\n        address  indexed  claimToAddr\r\n        uint8             claimFlags      -->  data0 [159:152]\r\n        uint72            claimedHearts   -->  data0 [231:160]\r\n        address  indexed  referrerAddr\r\n        address           senderAddr      -->  data1 [159:  0]\r\n    */\r\n    event Claim(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        bytes20 indexed btcAddr,\r\n        address indexed claimToAddr,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  ClaimAssist       (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        bytes20           btcAddr         -->  data0 [199: 40]\r\n        uint56            rawSatoshis     -->  data0 [255:200]\r\n        uint56            adjSatoshis     -->  data1 [ 55:  0]\r\n        address           claimToAddr     -->  data1 [215: 56]\r\n        uint8             claimFlags      -->  data1 [223:216]\r\n        uint72            claimedHearts   -->  data2 [ 71:  0]\r\n        address           referrerAddr    -->  data2 [231: 72]\r\n        address  indexed  senderAddr\r\n    */\r\n    event ClaimAssist(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        uint256 data2,\r\n        address indexed senderAddr\r\n    );\r\n\r\n    /*  StakeStart        (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    -->  data0 [111: 40]\r\n        uint72            stakeShares     -->  data0 [183:112]\r\n        uint16            stakedDays      -->  data0 [199:184]\r\n        bool              isAutoStake     -->  data0 [207:200]\r\n    */\r\n    event StakeStart(\r\n        uint256 data0,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /*  StakeGoodAccounting(auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    -->  data0 [111: 40]\r\n        uint72            stakeShares     -->  data0 [183:112]\r\n        uint72            payout          -->  data0 [255:184]\r\n        uint72            penalty         -->  data1 [ 71:  0]\r\n        address  indexed  senderAddr\r\n    */\r\n    event StakeGoodAccounting(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId,\r\n        address indexed senderAddr\r\n    );\r\n\r\n    /*  StakeEnd          (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    -->  data0 [111: 40]\r\n        uint72            stakeShares     -->  data0 [183:112]\r\n        uint72            payout          -->  data0 [255:184]\r\n        uint72            penalty         -->  data1 [ 71:  0]\r\n        uint16            servedDays      -->  data1 [ 87: 72]\r\n        bool              prevUnlocked    -->  data1 [ 95: 88]\r\n    */\r\n    event StakeEnd(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /*  ShareRateChange   (auto-generated event)\r\n\r\n        uint40            timestamp       -->  data0 [ 39:  0]\r\n        uint40            shareRate       -->  data0 [ 79: 40]\r\n        uint40   indexed  stakeId\r\n    */\r\n    event ShareRateChange(\r\n        uint256 data0,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /* Origin address */\r\n    address internal constant ORIGIN_ADDR = 0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;\r\n\r\n    /* Flush address */\r\n    address payable internal constant FLUSH_ADDR = 0xDEC9f2793e3c17cd26eeFb21C4762fA5128E0399;\r\n\r\n    /* ERC20 constants */\r\n    string public constant name = \"HEX\";\r\n    string public constant symbol = \"HEX\";\r\n    uint8 public constant decimals = 8;\r\n\r\n    /* Hearts per Satoshi = 10,000 * 1e8 / 1e8 = 1e4 */\r\n    uint256 private constant HEARTS_PER_HEX = 10 ** uint256(decimals); // 1e8\r\n    uint256 private constant HEX_PER_BTC = 1e4;\r\n    uint256 private constant SATOSHIS_PER_BTC = 1e8;\r\n    uint256 internal constant HEARTS_PER_SATOSHI = HEARTS_PER_HEX / SATOSHIS_PER_BTC * HEX_PER_BTC;\r\n\r\n    /* Time of contract launch (2019-12-03T00:00:00Z) */\r\n    uint256 internal constant LAUNCH_TIME = 1575331200;\r\n\r\n    /* Size of a Hearts or Shares uint */\r\n    uint256 internal constant HEART_UINT_SIZE = 72;\r\n\r\n    /* Size of a transform lobby entry index uint */\r\n    uint256 internal constant XF_LOBBY_ENTRY_INDEX_SIZE = 40;\r\n    uint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK = (1 << XF_LOBBY_ENTRY_INDEX_SIZE) - 1;\r\n\r\n    /* Seed for WAAS Lobby */\r\n    uint256 internal constant WAAS_LOBBY_SEED_HEX = 1e9;\r\n    uint256 internal constant WAAS_LOBBY_SEED_HEARTS = WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;\r\n\r\n    /* Start of claim phase */\r\n    uint256 internal constant PRE_CLAIM_DAYS = 1;\r\n    uint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\r\n\r\n    /* Length of claim phase */\r\n    uint256 private constant CLAIM_PHASE_WEEKS = 50;\r\n    uint256 internal constant CLAIM_PHASE_DAYS = CLAIM_PHASE_WEEKS * 7;\r\n\r\n    /* End of claim phase */\r\n    uint256 internal constant CLAIM_PHASE_END_DAY = CLAIM_PHASE_START_DAY + CLAIM_PHASE_DAYS;\r\n\r\n    /* Number of words to hold 1 bit for each transform lobby day */\r\n    uint256 internal constant XF_LOBBY_DAY_WORDS = (CLAIM_PHASE_END_DAY + 255) >> 8;\r\n\r\n    /* BigPayDay */\r\n    uint256 internal constant BIG_PAY_DAY = CLAIM_PHASE_END_DAY + 1;\r\n\r\n    /* Root hash of the UTXO Merkle tree */\r\n    bytes32 internal constant MERKLE_TREE_ROOT = 0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;\r\n\r\n    /* Size of a Satoshi claim uint in a Merkle leaf */\r\n    uint256 internal constant MERKLE_LEAF_SATOSHI_SIZE = 45;\r\n\r\n    /* Zero-fill between BTC address and Satoshis in a Merkle leaf */\r\n    uint256 internal constant MERKLE_LEAF_FILL_SIZE = 256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;\r\n    uint256 internal constant MERKLE_LEAF_FILL_BASE = (1 << MERKLE_LEAF_FILL_SIZE) - 1;\r\n    uint256 internal constant MERKLE_LEAF_FILL_MASK = MERKLE_LEAF_FILL_BASE << MERKLE_LEAF_SATOSHI_SIZE;\r\n\r\n    /* Size of a Satoshi total uint */\r\n    uint256 internal constant SATOSHI_UINT_SIZE = 51;\r\n    uint256 internal constant SATOSHI_UINT_MASK = (1 << SATOSHI_UINT_SIZE) - 1;\r\n\r\n    /* Total Satoshis from all BTC addresses in UTXO snapshot */\r\n    uint256 internal constant FULL_SATOSHIS_TOTAL = 1807766732160668;\r\n\r\n    /* Total Satoshis from supported BTC addresses in UTXO snapshot after applying Silly Whale */\r\n    uint256 internal constant CLAIMABLE_SATOSHIS_TOTAL = 910087996911001;\r\n\r\n    /* Number of claimable BTC addresses in UTXO snapshot */\r\n    uint256 internal constant CLAIMABLE_BTC_ADDR_COUNT = 27997742;\r\n\r\n    /* Largest BTC address Satoshis balance in UTXO snapshot (sanity check) */\r\n    uint256 internal constant MAX_BTC_ADDR_BALANCE_SATOSHIS = 25550214098481;\r\n\r\n    /* Percentage of total claimed Hearts that will be auto-staked from a claim */\r\n    uint256 internal constant AUTO_STAKE_CLAIM_PERCENT = 90;\r\n\r\n    /* Stake timing parameters */\r\n    uint256 internal constant MIN_STAKE_DAYS = 1;\r\n    uint256 internal constant MIN_AUTO_STAKE_DAYS = 350;\r\n\r\n    uint256 internal constant MAX_STAKE_DAYS = 5555; // Approx 15 years\r\n\r\n    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\r\n\r\n    uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\r\n    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\r\n\r\n    uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\r\n    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\r\n\r\n    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusHearts() */\r\n    uint256 private constant LPB_BONUS_PERCENT = 20;\r\n    uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\r\n    uint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\r\n    uint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\r\n\r\n    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusHearts() */\r\n    uint256 private constant BPB_BONUS_PERCENT = 10;\r\n    uint256 private constant BPB_MAX_HEX = 150 * 1e6;\r\n    uint256 internal constant BPB_MAX_HEARTS = BPB_MAX_HEX * HEARTS_PER_HEX;\r\n    uint256 internal constant BPB = BPB_MAX_HEARTS * 100 / BPB_BONUS_PERCENT;\r\n\r\n    /* Share rate is scaled to increase precision */\r\n    uint256 internal constant SHARE_RATE_SCALE = 1e5;\r\n\r\n    /* Share rate max (after scaling) */\r\n    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\r\n    uint256 internal constant SHARE_RATE_MAX = (1 << SHARE_RATE_UINT_SIZE) - 1;\r\n\r\n    /* Constants for preparing the claim message text */\r\n    uint8 internal constant ETH_ADDRESS_BYTE_LEN = 20;\r\n    uint8 internal constant ETH_ADDRESS_HEX_LEN = ETH_ADDRESS_BYTE_LEN * 2;\r\n\r\n    uint8 internal constant CLAIM_PARAM_HASH_BYTE_LEN = 12;\r\n    uint8 internal constant CLAIM_PARAM_HASH_HEX_LEN = CLAIM_PARAM_HASH_BYTE_LEN * 2;\r\n\r\n    uint8 internal constant BITCOIN_SIG_PREFIX_LEN = 24;\r\n    bytes24 internal constant BITCOIN_SIG_PREFIX_STR = \"Bitcoin Signed Message:\\n\";\r\n\r\n    bytes internal constant STD_CLAIM_PREFIX_STR = \"Claim_HEX_to_0x\";\r\n    bytes internal constant OLD_CLAIM_PREFIX_STR = \"Claim_BitcoinHEX_to_0x\";\r\n\r\n    bytes16 internal constant HEX_DIGITS = \"0123456789abcdef\";\r\n\r\n    /* Claim flags passed to btcAddressClaim()  */\r\n    uint8 internal constant CLAIM_FLAG_MSG_PREFIX_OLD = 1 << 0;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_COMPRESSED = 1 << 1;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH = 1 << 2;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_BECH32 = 1 << 3;\r\n    uint8 internal constant CLAIM_FLAG_ETH_ADDR_LOWERCASE = 1 << 4;\r\n\r\n    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\r\n    struct GlobalsCache {\r\n        // 1\r\n        uint256 _lockedHeartsTotal;\r\n        uint256 _nextStakeSharesTotal;\r\n        uint256 _shareRate;\r\n        uint256 _stakePenaltyTotal;\r\n        // 2\r\n        uint256 _dailyDataCount;\r\n        uint256 _stakeSharesTotal;\r\n        uint40 _latestStakeId;\r\n        uint256 _unclaimedSatoshisTotal;\r\n        uint256 _claimedSatoshisTotal;\r\n        uint256 _claimedBtcAddrCount;\r\n        //\r\n        uint256 _currentDay;\r\n    }\r\n\r\n    struct GlobalsStore {\r\n        // 1\r\n        uint72 lockedHeartsTotal;\r\n        uint72 nextStakeSharesTotal;\r\n        uint40 shareRate;\r\n        uint72 stakePenaltyTotal;\r\n        // 2\r\n        uint16 dailyDataCount;\r\n        uint72 stakeSharesTotal;\r\n        uint40 latestStakeId;\r\n        uint128 claimStats;\r\n    }\r\n\r\n    GlobalsStore public globals;\r\n\r\n    /* Claimed BTC addresses */\r\n    mapping(bytes20 => bool) public btcAddressClaims;\r\n\r\n    /* Daily data */\r\n    struct DailyDataStore {\r\n        uint72 dayPayoutTotal;\r\n        uint72 dayStakeSharesTotal;\r\n        uint56 dayUnclaimedSatoshisTotal;\r\n    }\r\n\r\n    mapping(uint256 => DailyDataStore) public dailyData;\r\n\r\n    /* Stake expanded for memory (except _stakeId) and compact for storage */\r\n    struct StakeCache {\r\n        uint40 _stakeId;\r\n        uint256 _stakedHearts;\r\n        uint256 _stakeShares;\r\n        uint256 _lockedDay;\r\n        uint256 _stakedDays;\r\n        uint256 _unlockedDay;\r\n        bool _isAutoStake;\r\n    }\r\n\r\n    struct StakeStore {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool isAutoStake;\r\n    }\r\n\r\n    mapping(address => StakeStore[]) public stakeLists;\r\n\r\n    /* Temporary state for calculating daily rounds */\r\n    struct DailyRoundState {\r\n        uint256 _allocSupplyCached;\r\n        uint256 _mintOriginBatch;\r\n        uint256 _payoutTotal;\r\n    }\r\n\r\n    struct XfLobbyEntryStore {\r\n        uint96 rawAmount;\r\n        address referrerAddr;\r\n    }\r\n\r\n    struct XfLobbyQueueStore {\r\n        uint40 headIndex;\r\n        uint40 tailIndex;\r\n        mapping(uint256 => XfLobbyEntryStore) entries;\r\n    }\r\n\r\n    mapping(uint256 => uint256) public xfLobby;\r\n    mapping(uint256 => mapping(address => XfLobbyQueueStore)) public xfLobbyMembers;\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Optionally update daily data for a smaller\r\n     * range to reduce gas cost for a subsequent operation\r\n     * @param beforeDay Only update days before this day number (optional; 0 for current day)\r\n     */\r\n    function dailyDataUpdate(uint256 beforeDay)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Skip pre-claim period */\r\n        require(g._currentDay > CLAIM_PHASE_START_DAY, \"HEX: Too early\");\r\n\r\n        if (beforeDay != 0) {\r\n            require(beforeDay <= g._currentDay, \"HEX: beforeDay cannot be in the future\");\r\n\r\n            _dailyDataUpdate(g, beforeDay, false);\r\n        } else {\r\n            /* Default to updating before current day */\r\n            _dailyDataUpdate(g, g._currentDay, false);\r\n        }\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\r\n     * a single call. Ugly implementation due to limitations of the standard ABI encoder.\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return Fixed array of packed values\r\n     */\r\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list)\r\n    {\r\n        require(beginDay < endDay && endDay <= globals.dailyDataCount, \"HEX: range invalid\");\r\n\r\n        list = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        uint256 v;\r\n        do {\r\n            v = uint256(dailyData[src].dayUnclaimedSatoshisTotal) << (HEART_UINT_SIZE * 2);\r\n            v |= uint256(dailyData[src].dayStakeSharesTotal) << HEART_UINT_SIZE;\r\n            v |= uint256(dailyData[src].dayPayoutTotal);\r\n\r\n            list[dst++] = v;\r\n        } while (++src < endDay);\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return most global info with a single call.\r\n     * Ugly implementation due to limitations of the standard ABI encoder.\r\n     * @return Fixed array of values\r\n     */\r\n    function globalInfo()\r\n        external\r\n        view\r\n        returns (uint256[13] memory)\r\n    {\r\n        uint256 _claimedBtcAddrCount;\r\n        uint256 _claimedSatoshisTotal;\r\n        uint256 _unclaimedSatoshisTotal;\r\n\r\n        (_claimedBtcAddrCount, _claimedSatoshisTotal, _unclaimedSatoshisTotal) = _claimStatsDecode(\r\n            globals.claimStats\r\n        );\r\n\r\n        return [\r\n            // 1\r\n            globals.lockedHeartsTotal,\r\n            globals.nextStakeSharesTotal,\r\n            globals.shareRate,\r\n            globals.stakePenaltyTotal,\r\n            // 2\r\n            globals.dailyDataCount,\r\n            globals.stakeSharesTotal,\r\n            globals.latestStakeId,\r\n            _unclaimedSatoshisTotal,\r\n            _claimedSatoshisTotal,\r\n            _claimedBtcAddrCount,\r\n            //\r\n            block.timestamp,\r\n            totalSupply(),\r\n            xfLobby[_currentDay()]\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\r\n     * staked Hearts. allocatedSupply() includes both.\r\n     * @return Allocated Supply in Hearts\r\n     */\r\n    function allocatedSupply()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply() + globals.lockedHeartsTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper for the current day number since launch time\r\n     * @return Current day number (zero-based)\r\n     */\r\n    function currentDay()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currentDay();\r\n    }\r\n\r\n    function _currentDay()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n    }\r\n\r\n    function _dailyDataUpdateAuto(GlobalsCache memory g)\r\n        internal\r\n    {\r\n        _dailyDataUpdate(g, g._currentDay, true);\r\n    }\r\n\r\n    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        view\r\n    {\r\n        // 1\r\n        g._lockedHeartsTotal = globals.lockedHeartsTotal;\r\n        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\r\n        g._shareRate = globals.shareRate;\r\n        g._stakePenaltyTotal = globals.stakePenaltyTotal;\r\n        // 2\r\n        g._dailyDataCount = globals.dailyDataCount;\r\n        g._stakeSharesTotal = globals.stakeSharesTotal;\r\n        g._latestStakeId = globals.latestStakeId;\r\n        (g._claimedBtcAddrCount, g._claimedSatoshisTotal, g._unclaimedSatoshisTotal) = _claimStatsDecode(\r\n            globals.claimStats\r\n        );\r\n        //\r\n        g._currentDay = _currentDay();\r\n\r\n        _globalsCacheSnapshot(g, gSnapshot);\r\n    }\r\n\r\n    function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        pure\r\n    {\r\n        // 1\r\n        gSnapshot._lockedHeartsTotal = g._lockedHeartsTotal;\r\n        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\r\n        gSnapshot._shareRate = g._shareRate;\r\n        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\r\n        // 2\r\n        gSnapshot._dailyDataCount = g._dailyDataCount;\r\n        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\r\n        gSnapshot._latestStakeId = g._latestStakeId;\r\n        gSnapshot._unclaimedSatoshisTotal = g._unclaimedSatoshisTotal;\r\n        gSnapshot._claimedSatoshisTotal = g._claimedSatoshisTotal;\r\n        gSnapshot._claimedBtcAddrCount = g._claimedBtcAddrCount;\r\n    }\r\n\r\n    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n    {\r\n        if (g._lockedHeartsTotal != gSnapshot._lockedHeartsTotal\r\n            || g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal\r\n            || g._shareRate != gSnapshot._shareRate\r\n            || g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal) {\r\n            // 1\r\n            globals.lockedHeartsTotal = uint72(g._lockedHeartsTotal);\r\n            globals.nextStakeSharesTotal = uint72(g._nextStakeSharesTotal);\r\n            globals.shareRate = uint40(g._shareRate);\r\n            globals.stakePenaltyTotal = uint72(g._stakePenaltyTotal);\r\n        }\r\n        if (g._dailyDataCount != gSnapshot._dailyDataCount\r\n            || g._stakeSharesTotal != gSnapshot._stakeSharesTotal\r\n            || g._latestStakeId != gSnapshot._latestStakeId\r\n            || g._unclaimedSatoshisTotal != gSnapshot._unclaimedSatoshisTotal\r\n            || g._claimedSatoshisTotal != gSnapshot._claimedSatoshisTotal\r\n            || g._claimedBtcAddrCount != gSnapshot._claimedBtcAddrCount) {\r\n            // 2\r\n            globals.dailyDataCount = uint16(g._dailyDataCount);\r\n            globals.stakeSharesTotal = uint72(g._stakeSharesTotal);\r\n            globals.latestStakeId = g._latestStakeId;\r\n            globals.claimStats = _claimStatsEncode(\r\n                g._claimedBtcAddrCount,\r\n                g._claimedSatoshisTotal,\r\n                g._unclaimedSatoshisTotal\r\n            );\r\n        }\r\n    }\r\n\r\n    function _stakeLoad(StakeStore storage stRef, uint40 stakeIdParam, StakeCache memory st)\r\n        internal\r\n        view\r\n    {\r\n        /* Ensure caller's stakeIndex is still current */\r\n        require(stakeIdParam == stRef.stakeId, \"HEX: stakeIdParam not in stake\");\r\n\r\n        st._stakeId = stRef.stakeId;\r\n        st._stakedHearts = stRef.stakedHearts;\r\n        st._stakeShares = stRef.stakeShares;\r\n        st._lockedDay = stRef.lockedDay;\r\n        st._stakedDays = stRef.stakedDays;\r\n        st._unlockedDay = stRef.unlockedDay;\r\n        st._isAutoStake = stRef.isAutoStake;\r\n    }\r\n\r\n    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\r\n        internal\r\n    {\r\n        stRef.stakeId = st._stakeId;\r\n        stRef.stakedHearts = uint72(st._stakedHearts);\r\n        stRef.stakeShares = uint72(st._stakeShares);\r\n        stRef.lockedDay = uint16(st._lockedDay);\r\n        stRef.stakedDays = uint16(st._stakedDays);\r\n        stRef.unlockedDay = uint16(st._unlockedDay);\r\n        stRef.isAutoStake = st._isAutoStake;\r\n    }\r\n\r\n    function _stakeAdd(\r\n        StakeStore[] storage stakeListRef,\r\n        uint40 newStakeId,\r\n        uint256 newStakedHearts,\r\n        uint256 newStakeShares,\r\n        uint256 newLockedDay,\r\n        uint256 newStakedDays,\r\n        bool newAutoStake\r\n    )\r\n        internal\r\n    {\r\n        stakeListRef.push(\r\n            StakeStore(\r\n                newStakeId,\r\n                uint72(newStakedHearts),\r\n                uint72(newStakeShares),\r\n                uint16(newLockedDay),\r\n                uint16(newStakedDays),\r\n                uint16(0), // unlockedDay\r\n                newAutoStake\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Efficiently delete from an unordered array by moving the last element\r\n     * to the \"hole\" and reducing the array length. Can change the order of the list\r\n     * and invalidate previously held indexes.\r\n     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\r\n     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\r\n     * @param stakeIndex Index of the element to delete\r\n     */\r\n    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\r\n        internal\r\n    {\r\n        uint256 lastIndex = stakeListRef.length - 1;\r\n\r\n        /* Skip the copy if element to be removed is already the last element */\r\n        if (stakeIndex != lastIndex) {\r\n            /* Copy last element to the requested element's \"hole\" */\r\n            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\r\n        }\r\n\r\n        /*\r\n            Reduce the array length now that the array is contiguous.\r\n            Surprisingly, 'pop()' uses less gas than 'stakeListRef.length = lastIndex'\r\n        */\r\n        stakeListRef.pop();\r\n    }\r\n\r\n    function _claimStatsEncode(\r\n        uint256 _claimedBtcAddrCount,\r\n        uint256 _claimedSatoshisTotal,\r\n        uint256 _unclaimedSatoshisTotal\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        uint256 v = _claimedBtcAddrCount << (SATOSHI_UINT_SIZE * 2);\r\n        v |= _claimedSatoshisTotal << SATOSHI_UINT_SIZE;\r\n        v |= _unclaimedSatoshisTotal;\r\n\r\n        return uint128(v);\r\n    }\r\n\r\n    function _claimStatsDecode(uint128 v)\r\n        internal\r\n        pure\r\n        returns (uint256 _claimedBtcAddrCount, uint256 _claimedSatoshisTotal, uint256 _unclaimedSatoshisTotal)\r\n    {\r\n        _claimedBtcAddrCount = v >> (SATOSHI_UINT_SIZE * 2);\r\n        _claimedSatoshisTotal = (v >> SATOSHI_UINT_SIZE) & SATOSHI_UINT_MASK;\r\n        _unclaimedSatoshisTotal = v & SATOSHI_UINT_MASK;\r\n\r\n        return (_claimedBtcAddrCount, _claimedSatoshisTotal, _unclaimedSatoshisTotal);\r\n    }\r\n\r\n    /**\r\n     * @dev Estimate the stake payout for an incomplete day\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param day Day to calculate bonuses for\r\n     * @return Payout in Hearts\r\n     */\r\n    function _estimatePayoutRewardsDay(GlobalsCache memory g, uint256 stakeSharesParam, uint256 day)\r\n        internal\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        /* Prevent updating state for this estimation */\r\n        GlobalsCache memory gTmp;\r\n        _globalsCacheSnapshot(g, gTmp);\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() + g._lockedHeartsTotal;\r\n\r\n        _dailyRoundCalc(gTmp, rs, day);\r\n\r\n        /* Stake is no longer locked so it must be added to total as if it were */\r\n        gTmp._stakeSharesTotal += stakeSharesParam;\r\n\r\n        payout = rs._payoutTotal * stakeSharesParam / gTmp._stakeSharesTotal;\r\n\r\n        if (day == BIG_PAY_DAY) {\r\n            uint256 bigPaySlice = gTmp._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam\r\n                / gTmp._stakeSharesTotal;\r\n            payout += bigPaySlice + _calcAdoptionBonus(gTmp, bigPaySlice);\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    function _calcAdoptionBonus(GlobalsCache memory g, uint256 payout)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            VIRAL REWARDS: Add adoption percentage bonus to payout\r\n\r\n            viral = payout * (claimedBtcAddrCount / CLAIMABLE_BTC_ADDR_COUNT)\r\n        */\r\n        uint256 viral = payout * g._claimedBtcAddrCount / CLAIMABLE_BTC_ADDR_COUNT;\r\n\r\n        /*\r\n            CRIT MASS REWARDS: Add adoption percentage bonus to payout\r\n\r\n            crit  = payout * (claimedSatoshisTotal / CLAIMABLE_SATOSHIS_TOTAL)\r\n        */\r\n        uint256 crit = payout * g._claimedSatoshisTotal / CLAIMABLE_SATOSHIS_TOTAL;\r\n\r\n        return viral + crit;\r\n    }\r\n\r\n    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n        pure\r\n    {\r\n        /*\r\n            Calculate payout round\r\n\r\n            Inflation of 3.69% inflation per 364 days             (approx 1 year)\r\n            dailyInterestRate   = exp(log(1 + 3.69%)  / 364) - 1\r\n                                = exp(log(1 + 0.0369) / 364) - 1\r\n                                = exp(log(1.0369) / 364) - 1\r\n                                = 0.000099553011616349            (approx)\r\n\r\n            payout  = allocSupply * dailyInterestRate\r\n                    = allocSupply / (1 / dailyInterestRate)\r\n                    = allocSupply / (1 / 0.000099553011616349)\r\n                    = allocSupply / 10044.899534066692            (approx)\r\n                    = allocSupply * 10000 / 100448995             (* 10000/10000 for int precision)\r\n        */\r\n        rs._payoutTotal = rs._allocSupplyCached * 10000 / 100448995;\r\n\r\n        if (day < CLAIM_PHASE_END_DAY) {\r\n            uint256 bigPaySlice = g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI / CLAIM_PHASE_DAYS;\r\n\r\n            uint256 originBonus = bigPaySlice + _calcAdoptionBonus(g, rs._payoutTotal + bigPaySlice);\r\n            rs._mintOriginBatch += originBonus;\r\n            rs._allocSupplyCached += originBonus;\r\n\r\n            rs._payoutTotal += _calcAdoptionBonus(g, rs._payoutTotal);\r\n        }\r\n\r\n        if (g._stakePenaltyTotal != 0) {\r\n            rs._payoutTotal += g._stakePenaltyTotal;\r\n            g._stakePenaltyTotal = 0;\r\n        }\r\n    }\r\n\r\n    function _dailyRoundCalcAndStore(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n    {\r\n        _dailyRoundCalc(g, rs, day);\r\n\r\n        dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);\r\n        dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);\r\n        dailyData[day].dayUnclaimedSatoshisTotal = uint56(g._unclaimedSatoshisTotal);\r\n    }\r\n\r\n    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay, bool isAutoUpdate)\r\n        private\r\n    {\r\n        if (g._dailyDataCount >= beforeDay) {\r\n            /* Already up-to-date */\r\n            return;\r\n        }\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() + g._lockedHeartsTotal;\r\n\r\n        uint256 day = g._dailyDataCount;\r\n\r\n        _dailyRoundCalcAndStore(g, rs, day);\r\n\r\n        /* Stakes started during this day are added to the total the next day */\r\n        if (g._nextStakeSharesTotal != 0) {\r\n            g._stakeSharesTotal += g._nextStakeSharesTotal;\r\n            g._nextStakeSharesTotal = 0;\r\n        }\r\n\r\n        while (++day < beforeDay) {\r\n            _dailyRoundCalcAndStore(g, rs, day);\r\n        }\r\n\r\n        _emitDailyDataUpdate(g._dailyDataCount, day, isAutoUpdate);\r\n        g._dailyDataCount = day;\r\n\r\n        if (rs._mintOriginBatch != 0) {\r\n            _mint(ORIGIN_ADDR, rs._mintOriginBatch);\r\n        }\r\n    }\r\n\r\n    function _emitDailyDataUpdate(uint256 beginDay, uint256 endDay, bool isAutoUpdate)\r\n        private\r\n    {\r\n        emit DailyDataUpdate( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint16(beginDay)) << 40)\r\n                | (uint256(uint16(endDay)) << 56)\r\n                | (isAutoUpdate ? (1 << 72) : 0),\r\n            msg.sender\r\n        );\r\n    }\r\n}\r\n\r\ncontract StakeableToken is GlobalsAndUtility {\r\n    /**\r\n     * @dev PUBLIC FACING: Open a stake.\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Enforce the minimum stake time */\r\n        require(newStakedDays >= MIN_STAKE_DAYS, \"HEX: newStakedDays lower than minimum\");\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        _stakeStart(g, newStakedHearts, newStakedDays, false);\r\n\r\n        /* Remove staked Hearts from balance of staker */\r\n        _burn(msg.sender, newStakedHearts);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\r\n     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\r\n     * @param stakerAddr Address of staker\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake's id\r\n     */\r\n    function stakeGoodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeLists[stakerAddr].length != 0, \"HEX: Empty stake list\");\r\n        require(stakeIndex < stakeLists[stakerAddr].length, \"HEX: stakeIndex invalid\");\r\n\r\n        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stRef, stakeIdParam, st);\r\n\r\n        /* Stake must have served full term */\r\n        require(g._currentDay >= st._lockedDay + st._stakedDays, \"HEX: Stake not fully served\");\r\n\r\n        /* Stake must still be locked */\r\n        require(st._unlockedDay == 0, \"HEX: Stake already unlocked\");\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        /* Unlock the completed stake */\r\n        _stakeUnlock(g, st);\r\n\r\n        /* stakeReturn value is unused here */\r\n        (, uint256 payout, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(\r\n            g,\r\n            st,\r\n            st._stakedDays\r\n        );\r\n\r\n        _emitStakeGoodAccounting(\r\n            stakerAddr,\r\n            stakeIdParam,\r\n            st._stakedHearts,\r\n            st._stakeShares,\r\n            payout,\r\n            penalty\r\n        );\r\n\r\n        if (cappedPenalty != 0) {\r\n            _splitPenaltyProceeds(g, cappedPenalty);\r\n        }\r\n\r\n        /* st._unlockedDay has changed */\r\n        _stakeUpdate(stRef, st);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\r\n     * a stake id is used to reject stale indexes.\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake's id\r\n     */\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeListRef.length != 0, \"HEX: Empty stake list\");\r\n        require(stakeIndex < stakeListRef.length, \"HEX: stakeIndex invalid\");\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        uint256 servedDays = 0;\r\n\r\n        bool prevUnlocked = (st._unlockedDay != 0);\r\n        uint256 stakeReturn;\r\n        uint256 payout = 0;\r\n        uint256 penalty = 0;\r\n        uint256 cappedPenalty = 0;\r\n\r\n        if (g._currentDay >= st._lockedDay) {\r\n            if (prevUnlocked) {\r\n                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\r\n                servedDays = st._stakedDays;\r\n            } else {\r\n                _stakeUnlock(g, st);\r\n\r\n                servedDays = g._currentDay - st._lockedDay;\r\n                if (servedDays > st._stakedDays) {\r\n                    servedDays = st._stakedDays;\r\n                } else {\r\n                    /* Deny early-unstake before an auto-stake minimum has been served */\r\n                    if (servedDays < MIN_AUTO_STAKE_DAYS) {\r\n                        require(!st._isAutoStake, \"HEX: Auto-stake still locked\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            (stakeReturn, payout, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);\r\n        } else {\r\n            /* Deny early-unstake before an auto-stake minimum has been served */\r\n            require(!st._isAutoStake, \"HEX: Auto-stake still locked\");\r\n\r\n            /* Stake hasn't been added to the total yet, so no penalties or rewards apply */\r\n            g._nextStakeSharesTotal -= st._stakeShares;\r\n\r\n            stakeReturn = st._stakedHearts;\r\n        }\r\n\r\n        _emitStakeEnd(\r\n            stakeIdParam,\r\n            st._stakedHearts,\r\n            st._stakeShares,\r\n            payout,\r\n            penalty,\r\n            servedDays,\r\n            prevUnlocked\r\n        );\r\n\r\n        if (cappedPenalty != 0 && !prevUnlocked) {\r\n            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\r\n            _splitPenaltyProceeds(g, cappedPenalty);\r\n        }\r\n\r\n        /* Pay the stake return, if any, to the staker */\r\n        if (stakeReturn != 0) {\r\n            _mint(msg.sender, stakeReturn);\r\n\r\n            /* Update the share rate if necessary */\r\n            _shareRateUpdate(g, st, stakeReturn);\r\n        }\r\n        g._lockedHeartsTotal -= st._stakedHearts;\r\n\r\n        _stakeRemove(stakeListRef, stakeIndex);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the current stake count for a staker address\r\n     * @param stakerAddr Address of staker\r\n     */\r\n    function stakeCount(address stakerAddr)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakeLists[stakerAddr].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Open a stake.\r\n     * @param g Cache of stored globals\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     * @param newAutoStake Stake is automatic directly from a new claim\r\n     */\r\n    function _stakeStart(\r\n        GlobalsCache memory g,\r\n        uint256 newStakedHearts,\r\n        uint256 newStakedDays,\r\n        bool newAutoStake\r\n    )\r\n        internal\r\n    {\r\n        /* Enforce the maximum stake time */\r\n        require(newStakedDays <= MAX_STAKE_DAYS, \"HEX: newStakedDays higher than maximum\");\r\n\r\n        uint256 bonusHearts = _stakeStartBonusHearts(newStakedHearts, newStakedDays);\r\n        uint256 newStakeShares = (newStakedHearts + bonusHearts) * SHARE_RATE_SCALE / g._shareRate;\r\n\r\n        /* Ensure newStakedHearts is enough for at least one stake share */\r\n        require(newStakeShares != 0, \"HEX: newStakedHearts must be at least minimum shareRate\");\r\n\r\n        /*\r\n            The stakeStart timestamp will always be part-way through the current\r\n            day, so it needs to be rounded-up to the next day to ensure all\r\n            stakes align with the same fixed calendar days. The current day is\r\n            already rounded-down, so rounded-up is current day + 1.\r\n        */\r\n        uint256 newLockedDay = g._currentDay < CLAIM_PHASE_START_DAY\r\n            ? CLAIM_PHASE_START_DAY + 1\r\n            : g._currentDay + 1;\r\n\r\n        /* Create Stake */\r\n        uint40 newStakeId = ++g._latestStakeId;\r\n        _stakeAdd(\r\n            stakeLists[msg.sender],\r\n            newStakeId,\r\n            newStakedHearts,\r\n            newStakeShares,\r\n            newLockedDay,\r\n            newStakedDays,\r\n            newAutoStake\r\n        );\r\n\r\n        _emitStakeStart(newStakeId, newStakedHearts, newStakeShares, newStakedDays, newAutoStake);\r\n\r\n        /* Stake is added to total in the next round, not the current round */\r\n        g._nextStakeSharesTotal += newStakeShares;\r\n\r\n        /* Track total staked Hearts for inflation calculations */\r\n        g._lockedHeartsTotal += newStakedHearts;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total stake payout including rewards for a multi-day range\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param beginDay First day to calculate bonuses for\r\n     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\r\n     * @return Payout in Hearts\r\n     */\r\n    function _calcPayoutRewards(\r\n        GlobalsCache memory g,\r\n        uint256 stakeSharesParam,\r\n        uint256 beginDay,\r\n        uint256 endDay\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        for (uint256 day = beginDay; day < endDay; day++) {\r\n            payout += dailyData[day].dayPayoutTotal * stakeSharesParam\r\n                / dailyData[day].dayStakeSharesTotal;\r\n        }\r\n\r\n        /* Less expensive to re-read storage than to have the condition inside the loop */\r\n        if (beginDay <= BIG_PAY_DAY && endDay > BIG_PAY_DAY) {\r\n            uint256 bigPaySlice = g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam\r\n                / dailyData[BIG_PAY_DAY].dayStakeSharesTotal;\r\n\r\n            payout += bigPaySlice + _calcAdoptionBonus(g, bigPaySlice);\r\n        }\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate bonus Hearts for a new stake, if any\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function _stakeStartBonusHearts(uint256 newStakedHearts, uint256 newStakedDays)\r\n        private\r\n        pure\r\n        returns (uint256 bonusHearts)\r\n    {\r\n        /*\r\n            LONGER PAYS BETTER:\r\n\r\n            If longer than 1 day stake is committed to, each extra day\r\n            gives bonus shares of approximately 0.0548%, which is approximately 20%\r\n            extra per year of increased stake length committed to, but capped to a\r\n            maximum of 200% extra.\r\n\r\n            extraDays       =  stakedDays - 1\r\n\r\n            longerBonus%    = (extraDays / 364) * 20%\r\n                            = (extraDays / 364) / 5\r\n                            =  extraDays / 1820\r\n                            =  extraDays / LPB\r\n\r\n            extraDays       =  longerBonus% * 1820\r\n            extraDaysMax    =  longerBonusMax% * 1820\r\n                            =  200% * 1820\r\n                            =  3640\r\n                            =  LPB_MAX_DAYS\r\n\r\n            BIGGER PAYS BETTER:\r\n\r\n            Bonus percentage scaled 0% to 10% for the first 150M HEX of stake.\r\n\r\n            biggerBonus%    = (cappedHearts /  BPB_MAX_HEARTS) * 10%\r\n                            = (cappedHearts /  BPB_MAX_HEARTS) / 10\r\n                            =  cappedHearts / (BPB_MAX_HEARTS * 10)\r\n                            =  cappedHearts /  BPB\r\n\r\n            COMBINED:\r\n\r\n            combinedBonus%  =            longerBonus%  +  biggerBonus%\r\n\r\n                                      cappedExtraDays     cappedHearts\r\n                            =         ---------------  +  ------------\r\n                                            LPB               BPB\r\n\r\n                                cappedExtraDays * BPB     cappedHearts * LPB\r\n                            =   ---------------------  +  ------------------\r\n                                      LPB * BPB               LPB * BPB\r\n\r\n                                cappedExtraDays * BPB  +  cappedHearts * LPB\r\n                            =   --------------------------------------------\r\n                                                  LPB  *  BPB\r\n\r\n            bonusHearts     = hearts * combinedBonus%\r\n                            = hearts * (cappedExtraDays * BPB  +  cappedHearts * LPB) / (LPB * BPB)\r\n        */\r\n        uint256 cappedExtraDays = 0;\r\n\r\n        /* Must be more than 1 day for Longer-Pays-Better */\r\n        if (newStakedDays > 1) {\r\n            cappedExtraDays = newStakedDays <= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;\r\n        }\r\n\r\n        uint256 cappedStakedHearts = newStakedHearts <= BPB_MAX_HEARTS\r\n            ? newStakedHearts\r\n            : BPB_MAX_HEARTS;\r\n\r\n        bonusHearts = cappedExtraDays * BPB + cappedStakedHearts * LPB;\r\n        bonusHearts = newStakedHearts * bonusHearts / (LPB * BPB);\r\n\r\n        return bonusHearts;\r\n    }\r\n\r\n    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\r\n        private\r\n        pure\r\n    {\r\n        g._stakeSharesTotal -= st._stakeShares;\r\n        st._unlockedDay = g._currentDay;\r\n    }\r\n\r\n    function _stakePerformance(GlobalsCache memory g, StakeCache memory st, uint256 servedDays)\r\n        private\r\n        view\r\n        returns (uint256 stakeReturn, uint256 payout, uint256 penalty, uint256 cappedPenalty)\r\n    {\r\n        if (servedDays < st._stakedDays) {\r\n            (payout, penalty) = _calcPayoutAndEarlyPenalty(\r\n                g,\r\n                st._lockedDay,\r\n                st._stakedDays,\r\n                servedDays,\r\n                st._stakeShares\r\n            );\r\n            stakeReturn = st._stakedHearts + payout;\r\n        } else {\r\n            // servedDays must == stakedDays here\r\n            payout = _calcPayoutRewards(\r\n                g,\r\n                st._stakeShares,\r\n                st._lockedDay,\r\n                st._lockedDay + servedDays\r\n            );\r\n            stakeReturn = st._stakedHearts + payout;\r\n\r\n            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);\r\n        }\r\n        if (penalty != 0) {\r\n            if (penalty > stakeReturn) {\r\n                /* Cannot have a negative stake return */\r\n                cappedPenalty = stakeReturn;\r\n                stakeReturn = 0;\r\n            } else {\r\n                /* Remove penalty from the stake return */\r\n                cappedPenalty = penalty;\r\n                stakeReturn -= cappedPenalty;\r\n            }\r\n        }\r\n        return (stakeReturn, payout, penalty, cappedPenalty);\r\n    }\r\n\r\n    function _calcPayoutAndEarlyPenalty(\r\n        GlobalsCache memory g,\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 servedDays,\r\n        uint256 stakeSharesParam\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout, uint256 penalty)\r\n    {\r\n        uint256 servedEndDay = lockedDayParam + servedDays;\r\n\r\n        /* 50% of stakedDays (rounded up) with a minimum applied */\r\n        uint256 penaltyDays = (stakedDaysParam + 1) / 2;\r\n        if (penaltyDays < EARLY_PENALTY_MIN_DAYS) {\r\n            penaltyDays = EARLY_PENALTY_MIN_DAYS;\r\n        }\r\n\r\n        if (servedDays == 0) {\r\n            /* Fill penalty days with the estimated average payout */\r\n            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);\r\n            penalty = expected * penaltyDays;\r\n            return (payout, penalty); // Actual payout was 0\r\n        }\r\n\r\n        if (penaltyDays < servedDays) {\r\n            /*\r\n                Simplified explanation of intervals where end-day is non-inclusive:\r\n\r\n                penalty:    [lockedDay  ...  penaltyEndDay)\r\n                delta:                      [penaltyEndDay  ...  servedEndDay)\r\n                payout:     [lockedDay  .......................  servedEndDay)\r\n            */\r\n            uint256 penaltyEndDay = lockedDayParam + penaltyDays;\r\n            penalty = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, penaltyEndDay);\r\n\r\n            uint256 delta = _calcPayoutRewards(g, stakeSharesParam, penaltyEndDay, servedEndDay);\r\n            payout = penalty + delta;\r\n            return (payout, penalty);\r\n        }\r\n\r\n        /* penaltyDays >= servedDays  */\r\n        payout = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, servedEndDay);\r\n\r\n        if (penaltyDays == servedDays) {\r\n            penalty = payout;\r\n        } else {\r\n            /*\r\n                (penaltyDays > servedDays) means not enough days served, so fill the\r\n                penalty days with the average payout from only the days that were served.\r\n            */\r\n            penalty = payout * penaltyDays / servedDays;\r\n        }\r\n        return (payout, penalty);\r\n    }\r\n\r\n    function _calcLatePenalty(\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 unlockedDayParam,\r\n        uint256 rawStakeReturn\r\n    )\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /* Allow grace time before penalties accrue */\r\n        uint256 maxUnlockedDay = lockedDayParam + stakedDaysParam + LATE_PENALTY_GRACE_DAYS;\r\n        if (unlockedDayParam <= maxUnlockedDay) {\r\n            return 0;\r\n        }\r\n\r\n        /* Calculate penalty as a percentage of stake return based on time */\r\n        return rawStakeReturn * (unlockedDayParam - maxUnlockedDay) / LATE_PENALTY_SCALE_DAYS;\r\n    }\r\n\r\n    function _splitPenaltyProceeds(GlobalsCache memory g, uint256 penalty)\r\n        private\r\n    {\r\n        /* Split a penalty 50:50 between Origin and stakePenaltyTotal */\r\n        uint256 splitPenalty = penalty / 2;\r\n\r\n        if (splitPenalty != 0) {\r\n            _mint(ORIGIN_ADDR, splitPenalty);\r\n        }\r\n\r\n        /* Use the other half of the penalty to account for an odd-numbered penalty */\r\n        splitPenalty = penalty - splitPenalty;\r\n        g._stakePenaltyTotal += splitPenalty;\r\n    }\r\n\r\n    function _shareRateUpdate(GlobalsCache memory g, StakeCache memory st, uint256 stakeReturn)\r\n        private\r\n    {\r\n        if (stakeReturn > st._stakedHearts) {\r\n            /*\r\n                Calculate the new shareRate that would yield the same number of shares if\r\n                the user re-staked this stakeReturn, factoring in any bonuses they would\r\n                receive in stakeStart().\r\n            */\r\n            uint256 bonusHearts = _stakeStartBonusHearts(stakeReturn, st._stakedDays);\r\n            uint256 newShareRate = (stakeReturn + bonusHearts) * SHARE_RATE_SCALE / st._stakeShares;\r\n\r\n            if (newShareRate > SHARE_RATE_MAX) {\r\n                /*\r\n                    Realistically this can't happen, but there are contrived theoretical\r\n                    scenarios that can lead to extreme values of newShareRate, so it is\r\n                    capped to prevent them anyway.\r\n                */\r\n                newShareRate = SHARE_RATE_MAX;\r\n            }\r\n\r\n            if (newShareRate > g._shareRate) {\r\n                g._shareRate = newShareRate;\r\n\r\n                _emitShareRateChange(newShareRate, st._stakeId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _emitStakeStart(\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 stakedDays,\r\n        bool isAutoStake\r\n    )\r\n        private\r\n    {\r\n        emit StakeStart( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) << 40)\r\n                | (uint256(uint72(stakeShares)) << 112)\r\n                | (uint256(uint16(stakedDays)) << 184)\r\n                | (isAutoStake ? (1 << 200) : 0),\r\n            msg.sender,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function _emitStakeGoodAccounting(\r\n        address stakerAddr,\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 payout,\r\n        uint256 penalty\r\n    )\r\n        private\r\n    {\r\n        emit StakeGoodAccounting( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) << 40)\r\n                | (uint256(uint72(stakeShares)) << 112)\r\n                | (uint256(uint72(payout)) << 184),\r\n            uint256(uint72(penalty)),\r\n            stakerAddr,\r\n            stakeId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _emitStakeEnd(\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 payout,\r\n        uint256 penalty,\r\n        uint256 servedDays,\r\n        bool prevUnlocked\r\n    )\r\n        private\r\n    {\r\n        emit StakeEnd( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) << 40)\r\n                | (uint256(uint72(stakeShares)) << 112)\r\n                | (uint256(uint72(payout)) << 184),\r\n            uint256(uint72(penalty))\r\n                | (uint256(uint16(servedDays)) << 72)\r\n                | (prevUnlocked ? (1 << 88) : 0),\r\n            msg.sender,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function _emitShareRateChange(uint256 shareRate, uint40 stakeId)\r\n        private\r\n    {\r\n        emit ShareRateChange( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint40(shareRate)) << 40),\r\n            stakeId\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\r\n     * defined by `root`. For this, a `proof` must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i < proof.length; i++) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash < proofElement) {\r\n                // Hash(current computed hash + current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof + current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\ncontract UTXOClaimValidation is StakeableToken {\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a BTC address and balance are unclaimed and part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if can be claimed\r\n     */\r\n    function btcAddressIsClaimable(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 day = _currentDay();\r\n\r\n        require(day >= CLAIM_PHASE_START_DAY, \"HEX: Claim phase has not yet started\");\r\n        require(day < CLAIM_PHASE_END_DAY, \"HEX: Claim phase has ended\");\r\n\r\n        /* Don't need to check Merkle proof if UTXO BTC address has already been claimed    */\r\n        if (btcAddressClaims[btcAddr]) {\r\n            return false;\r\n        }\r\n\r\n        /* Verify the Merkle tree proof */\r\n        return _btcAddressIsValid(btcAddr, rawSatoshis, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a BTC address and balance are part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function btcAddressIsValid(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof)\r\n        external\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _btcAddressIsValid(btcAddr, rawSatoshis, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a Merkle proof using the UTXO Merkle tree\r\n     * @param merkleLeaf Leaf asserted to be present in the Merkle tree\r\n     * @param proof Generated Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function merkleProofIsValid(bytes32 merkleLeaf, bytes32[] calldata proof)\r\n        external\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _merkleProofIsValid(merkleLeaf, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify that a Bitcoin signature matches the claim message containing\r\n     * the Ethereum address and claim param hash\r\n     * @param claimToAddr Eth address within the signed claim message\r\n     * @param claimParamHash Param hash within the signed claim message\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @return True if matching\r\n     */\r\n    function claimMessageMatchesSignature(\r\n        address claimToAddr,\r\n        bytes32 claimParamHash,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        require(v >= 27 && v <= 30, \"HEX: v invalid\");\r\n\r\n        /*\r\n            ecrecover() returns an Eth address rather than a public key, so\r\n            we must do the same to compare.\r\n        */\r\n        address pubKeyEthAddr = pubKeyToEthAddress(pubKeyX, pubKeyY);\r\n\r\n        /* Create and hash the claim message text */\r\n        bytes32 messageHash = _hash256(\r\n            _claimMessageCreate(claimToAddr, claimParamHash, claimFlags)\r\n        );\r\n\r\n        /* Verify the public key */\r\n        return ecrecover(messageHash, v, r, s) == pubKeyEthAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Derive an Ethereum address from an ECDSA public key\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @return Derived Eth address\r\n     */\r\n    function pubKeyToEthAddress(bytes32 pubKeyX, bytes32 pubKeyY)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(pubKeyX, pubKeyY)))));\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Derive a Bitcoin address from an ECDSA public key\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @return Derived Bitcoin address (binary; no base58-check encoding)\r\n     */\r\n    function pubKeyToBtcAddress(bytes32 pubKeyX, bytes32 pubKeyY, uint8 claimFlags)\r\n        public\r\n        pure\r\n        returns (bytes20)\r\n    {\r\n        /*\r\n            Helpful references:\r\n             - https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses\r\n             - https://github.com/cryptocoinjs/ecurve/blob/master/lib/point.js\r\n        */\r\n        uint8 startingByte;\r\n        bytes memory pubKey;\r\n        bool compressed = (claimFlags & CLAIM_FLAG_BTC_ADDR_COMPRESSED) != 0;\r\n        bool nested = (claimFlags & CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH) != 0;\r\n        bool bech32 = (claimFlags & CLAIM_FLAG_BTC_ADDR_BECH32) != 0;\r\n\r\n        if (compressed) {\r\n            /* Compressed public key format */\r\n            require(!(nested && bech32), \"HEX: claimFlags invalid\");\r\n\r\n            startingByte = (pubKeyY[31] & 0x01) == 0 ? 0x02 : 0x03;\r\n            pubKey = abi.encodePacked(startingByte, pubKeyX);\r\n        } else {\r\n            /* Uncompressed public key format */\r\n            require(!nested && !bech32, \"HEX: claimFlags invalid\");\r\n\r\n            startingByte = 0x04;\r\n            pubKey = abi.encodePacked(startingByte, pubKeyX, pubKeyY);\r\n        }\r\n\r\n        bytes20 pubKeyHash = _hash160(pubKey);\r\n        if (nested) {\r\n            return _hash160(abi.encodePacked(hex\"0014\", pubKeyHash));\r\n        }\r\n        return pubKeyHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a BTC address and balance are part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function _btcAddressIsValid(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] memory proof)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        /*\r\n            Ensure the proof does not attempt to treat a Merkle leaf as if it were an\r\n            internal Merkle tree node. A leaf will always have the zero-fill. An\r\n            internal node will never have the zero-fill, as guaranteed by HEX's Merkle\r\n            tree construction.\r\n\r\n            The first element, proof[0], will always be a leaf because it is the pair\r\n            of the leaf being validated. The rest of the elements, proof[1..length-1],\r\n            must be internal nodes.\r\n\r\n            The number of leaves (CLAIMABLE_BTC_ADDR_COUNT) is even, as guaranteed by\r\n            HEX's Merkle tree construction, which eliminates the only edge-case where\r\n            this validation would not apply.\r\n        */\r\n        require((uint256(proof[0]) & MERKLE_LEAF_FILL_MASK) == 0, \"HEX: proof invalid\");\r\n        for (uint256 i = 1; i < proof.length; i++) {\r\n            require((uint256(proof[i]) & MERKLE_LEAF_FILL_MASK) != 0, \"HEX: proof invalid\");\r\n        }\r\n\r\n        /*\r\n            Calculate the 32 byte Merkle leaf associated with this BTC address and balance\r\n                160 bits: BTC address\r\n                 52 bits: Zero-fill\r\n                 45 bits: Satoshis (limited by MAX_BTC_ADDR_BALANCE_SATOSHIS)\r\n        */\r\n        bytes32 merkleLeaf = bytes32(btcAddr) | bytes32(rawSatoshis);\r\n\r\n        /* Verify the Merkle tree proof */\r\n        return _merkleProofIsValid(merkleLeaf, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a Merkle proof using the UTXO Merkle tree\r\n     * @param merkleLeaf Leaf asserted to be present in the Merkle tree\r\n     * @param proof Generated Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function _merkleProofIsValid(bytes32 merkleLeaf, bytes32[] memory proof)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return MerkleProof.verify(proof, MERKLE_TREE_ROOT, merkleLeaf);\r\n    }\r\n\r\n    function _claimMessageCreate(address claimToAddr, bytes32 claimParamHash, uint8 claimFlags)\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory prefixStr = (claimFlags & CLAIM_FLAG_MSG_PREFIX_OLD) != 0\r\n            ? OLD_CLAIM_PREFIX_STR\r\n            : STD_CLAIM_PREFIX_STR;\r\n\r\n        bool includeAddrChecksum = (claimFlags & CLAIM_FLAG_ETH_ADDR_LOWERCASE) == 0;\r\n\r\n        bytes memory addrStr = _addressStringCreate(claimToAddr, includeAddrChecksum);\r\n\r\n        if (claimParamHash == 0) {\r\n            return abi.encodePacked(\r\n                BITCOIN_SIG_PREFIX_LEN,\r\n                BITCOIN_SIG_PREFIX_STR,\r\n                uint8(prefixStr.length) + ETH_ADDRESS_HEX_LEN,\r\n                prefixStr,\r\n                addrStr\r\n            );\r\n        }\r\n\r\n        bytes memory claimParamHashStr = new bytes(CLAIM_PARAM_HASH_HEX_LEN);\r\n\r\n        _hexStringFromData(claimParamHashStr, claimParamHash, CLAIM_PARAM_HASH_BYTE_LEN);\r\n\r\n        return abi.encodePacked(\r\n            BITCOIN_SIG_PREFIX_LEN,\r\n            BITCOIN_SIG_PREFIX_STR,\r\n            uint8(prefixStr.length) + ETH_ADDRESS_HEX_LEN + 1 + CLAIM_PARAM_HASH_HEX_LEN,\r\n            prefixStr,\r\n            addrStr,\r\n            \"_\",\r\n            claimParamHashStr\r\n        );\r\n    }\r\n\r\n    function _addressStringCreate(address addr, bool includeAddrChecksum)\r\n        private\r\n        pure\r\n        returns (bytes memory addrStr)\r\n    {\r\n        addrStr = new bytes(ETH_ADDRESS_HEX_LEN);\r\n        _hexStringFromData(addrStr, bytes32(bytes20(addr)), ETH_ADDRESS_BYTE_LEN);\r\n\r\n        if (includeAddrChecksum) {\r\n            bytes32 addrStrHash = keccak256(addrStr);\r\n\r\n            uint256 offset = 0;\r\n\r\n            for (uint256 i = 0; i < ETH_ADDRESS_BYTE_LEN; i++) {\r\n                uint8 b = uint8(addrStrHash[i]);\r\n\r\n                _addressStringChecksumChar(addrStr, offset++, b >> 4);\r\n                _addressStringChecksumChar(addrStr, offset++, b & 0x0f);\r\n            }\r\n        }\r\n\r\n        return addrStr;\r\n    }\r\n\r\n    function _addressStringChecksumChar(bytes memory addrStr, uint256 offset, uint8 hashNybble)\r\n        private\r\n        pure\r\n    {\r\n        bytes1 ch = addrStr[offset];\r\n\r\n        if (ch >= \"a\" && hashNybble >= 8) {\r\n            addrStr[offset] = ch ^ 0x20;\r\n        }\r\n    }\r\n\r\n    function _hexStringFromData(bytes memory hexStr, bytes32 data, uint256 dataLen)\r\n        private\r\n        pure\r\n    {\r\n        uint256 offset = 0;\r\n\r\n        for (uint256 i = 0; i < dataLen; i++) {\r\n            uint8 b = uint8(data[i]);\r\n\r\n            hexStr[offset++] = HEX_DIGITS[b >> 4];\r\n            hexStr[offset++] = HEX_DIGITS[b & 0x0f];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sha256(sha256(data))\r\n     * @param data Data to be hashed\r\n     * @return 32-byte hash\r\n     */\r\n    function _hash256(bytes memory data)\r\n        private\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return sha256(abi.encodePacked(sha256(data)));\r\n    }\r\n\r\n    /**\r\n     * @dev ripemd160(sha256(data))\r\n     * @param data Data to be hashed\r\n     * @return 20-byte hash\r\n     */\r\n    function _hash160(bytes memory data)\r\n        private\r\n        pure\r\n        returns (bytes20)\r\n    {\r\n        return ripemd160(abi.encodePacked(sha256(data)));\r\n    }\r\n}\r\n\r\ncontract UTXORedeemableToken is UTXOClaimValidation {\r\n    /**\r\n     * @dev PUBLIC FACING: Claim a BTC address and its Satoshi balance in Hearts\r\n     * crediting the appropriate amount to a specified Eth address. Bitcoin ECDSA\r\n     * signature must be from that BTC address and must match the claim message\r\n     * for the Eth address.\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @param claimToAddr Destination Eth address to credit Hearts to\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key for the BTC address\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key for the BTC address\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @param autoStakeDays Number of days to auto-stake, subject to minimum auto-stake days\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     * @return Total number of Hearts credited, if successful\r\n     */\r\n    function btcAddressClaim(\r\n        uint256 rawSatoshis,\r\n        bytes32[] calldata proof,\r\n        address claimToAddr,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        /* Sanity check */\r\n        require(rawSatoshis <= MAX_BTC_ADDR_BALANCE_SATOSHIS, \"HEX: CHK: rawSatoshis\");\r\n\r\n        /* Enforce the minimum stake time for the auto-stake from this claim */\r\n        require(autoStakeDays >= MIN_AUTO_STAKE_DAYS, \"HEX: autoStakeDays lower than minimum\");\r\n\r\n        /* Ensure signature matches the claim message containing the Eth address and claimParamHash */\r\n        {\r\n            bytes32 claimParamHash = 0;\r\n\r\n            if (claimToAddr != msg.sender) {\r\n                /* Claimer did not send this, so claim params must be signed */\r\n                claimParamHash = keccak256(\r\n                    abi.encodePacked(MERKLE_TREE_ROOT, autoStakeDays, referrerAddr)\r\n                );\r\n            }\r\n\r\n            require(\r\n                claimMessageMatchesSignature(\r\n                    claimToAddr,\r\n                    claimParamHash,\r\n                    pubKeyX,\r\n                    pubKeyY,\r\n                    claimFlags,\r\n                    v,\r\n                    r,\r\n                    s\r\n                ),\r\n                \"HEX: Signature mismatch\"\r\n            );\r\n        }\r\n\r\n        /* Derive BTC address from public key */\r\n        bytes20 btcAddr = pubKeyToBtcAddress(pubKeyX, pubKeyY, claimFlags);\r\n\r\n        /* Ensure BTC address has not yet been claimed */\r\n        require(!btcAddressClaims[btcAddr], \"HEX: BTC address balance already claimed\");\r\n\r\n        /* Ensure BTC address is part of the Merkle tree */\r\n        require(\r\n            _btcAddressIsValid(btcAddr, rawSatoshis, proof),\r\n            \"HEX: BTC address or balance unknown\"\r\n        );\r\n\r\n        /* Mark BTC address as claimed */\r\n        btcAddressClaims[btcAddr] = true;\r\n\r\n        return _satoshisClaimSync(\r\n            rawSatoshis,\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            autoStakeDays,\r\n            referrerAddr\r\n        );\r\n    }\r\n\r\n    function _satoshisClaimSync(\r\n        uint256 rawSatoshis,\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        totalClaimedHearts = _satoshisClaim(\r\n            g,\r\n            rawSatoshis,\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            autoStakeDays,\r\n            referrerAddr\r\n        );\r\n\r\n        _globalsSync(g, gSnapshot);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    /**\r\n     * @dev Credit an Eth address with the Hearts value of a raw Satoshis balance\r\n     * @param g Cache of stored globals\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param claimToAddr Destination Eth address for the claimed Hearts to be sent\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param autoStakeDays Number of days to auto-stake, subject to minimum auto-stake days\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     * @return Total number of Hearts credited, if successful\r\n     */\r\n    function _satoshisClaim(\r\n        GlobalsCache memory g,\r\n        uint256 rawSatoshis,\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        /* Allowed only during the claim phase */\r\n        require(g._currentDay >= CLAIM_PHASE_START_DAY, \"HEX: Claim phase has not yet started\");\r\n        require(g._currentDay < CLAIM_PHASE_END_DAY, \"HEX: Claim phase has ended\");\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        /* Sanity check */\r\n        require(\r\n            g._claimedBtcAddrCount < CLAIMABLE_BTC_ADDR_COUNT,\r\n            \"HEX: CHK: _claimedBtcAddrCount\"\r\n        );\r\n\r\n        (uint256 adjSatoshis, uint256 claimedHearts, uint256 claimBonusHearts) = _calcClaimValues(\r\n            g,\r\n            rawSatoshis\r\n        );\r\n\r\n        /* Increment claim count to track viral rewards */\r\n        g._claimedBtcAddrCount++;\r\n\r\n        totalClaimedHearts = _remitBonuses(\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            rawSatoshis,\r\n            adjSatoshis,\r\n            claimedHearts,\r\n            claimBonusHearts,\r\n            referrerAddr\r\n        );\r\n\r\n        /* Auto-stake a percentage of the successful claim */\r\n        uint256 autoStakeHearts = totalClaimedHearts * AUTO_STAKE_CLAIM_PERCENT / 100;\r\n        _stakeStart(g, autoStakeHearts, autoStakeDays, true);\r\n\r\n        /* Mint remaining claimed Hearts to claim address */\r\n        _mint(claimToAddr, totalClaimedHearts - autoStakeHearts);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    function _remitBonuses(\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 rawSatoshis,\r\n        uint256 adjSatoshis,\r\n        uint256 claimedHearts,\r\n        uint256 claimBonusHearts,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        totalClaimedHearts = claimedHearts + claimBonusHearts;\r\n\r\n        uint256 originBonusHearts = claimBonusHearts;\r\n\r\n        if (referrerAddr == address(0)) {\r\n            /* No referrer */\r\n            _emitClaim(\r\n                claimToAddr,\r\n                btcAddr,\r\n                claimFlags,\r\n                rawSatoshis,\r\n                adjSatoshis,\r\n                totalClaimedHearts,\r\n                referrerAddr\r\n            );\r\n        } else {\r\n            /* Referral bonus of 10% of total claimed Hearts to claimer */\r\n            uint256 referralBonusHearts = totalClaimedHearts / 10;\r\n\r\n            totalClaimedHearts += referralBonusHearts;\r\n\r\n            /* Then a cumulative referrer bonus of 20% to referrer */\r\n            uint256 referrerBonusHearts = totalClaimedHearts / 5;\r\n\r\n            originBonusHearts += referralBonusHearts + referrerBonusHearts;\r\n\r\n            if (referrerAddr == claimToAddr) {\r\n                /* Self-referred */\r\n                totalClaimedHearts += referrerBonusHearts;\r\n                _emitClaim(\r\n                    claimToAddr,\r\n                    btcAddr,\r\n                    claimFlags,\r\n                    rawSatoshis,\r\n                    adjSatoshis,\r\n                    totalClaimedHearts,\r\n                    referrerAddr\r\n                );\r\n            } else {\r\n                /* Referred by different address */\r\n                _emitClaim(\r\n                    claimToAddr,\r\n                    btcAddr,\r\n                    claimFlags,\r\n                    rawSatoshis,\r\n                    adjSatoshis,\r\n                    totalClaimedHearts,\r\n                    referrerAddr\r\n                );\r\n                _mint(referrerAddr, referrerBonusHearts);\r\n            }\r\n        }\r\n\r\n        _mint(ORIGIN_ADDR, originBonusHearts);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    function _emitClaim(\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 rawSatoshis,\r\n        uint256 adjSatoshis,\r\n        uint256 claimedHearts,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit Claim( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint56(rawSatoshis)) << 40)\r\n                | (uint256(uint56(adjSatoshis)) << 96)\r\n                | (uint256(claimFlags) << 152)\r\n                | (uint256(uint72(claimedHearts)) << 160),\r\n            uint256(uint160(msg.sender)),\r\n            btcAddr,\r\n            claimToAddr,\r\n            referrerAddr\r\n        );\r\n\r\n        if (claimToAddr == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        emit ClaimAssist( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint160(btcAddr)) << 40)\r\n                | (uint256(uint56(rawSatoshis)) << 200),\r\n            uint256(uint56(adjSatoshis))\r\n                | (uint256(uint160(claimToAddr)) << 56)\r\n                | (uint256(claimFlags) << 216),\r\n            uint256(uint72(claimedHearts))\r\n                | (uint256(uint160(referrerAddr)) << 72),\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _calcClaimValues(GlobalsCache memory g, uint256 rawSatoshis)\r\n        private\r\n        pure\r\n        returns (uint256 adjSatoshis, uint256 claimedHearts, uint256 claimBonusHearts)\r\n    {\r\n        /* Apply Silly Whale reduction */\r\n        adjSatoshis = _adjustSillyWhale(rawSatoshis);\r\n        require(\r\n            g._claimedSatoshisTotal + adjSatoshis <= CLAIMABLE_SATOSHIS_TOTAL,\r\n            \"HEX: CHK: _claimedSatoshisTotal\"\r\n        );\r\n        g._claimedSatoshisTotal += adjSatoshis;\r\n\r\n        uint256 daysRemaining = CLAIM_PHASE_END_DAY - g._currentDay;\r\n\r\n        /* Apply late-claim reduction */\r\n        adjSatoshis = _adjustLateClaim(adjSatoshis, daysRemaining);\r\n        g._unclaimedSatoshisTotal -= adjSatoshis;\r\n\r\n        /* Convert to Hearts and calculate speed bonus */\r\n        claimedHearts = adjSatoshis * HEARTS_PER_SATOSHI;\r\n        claimBonusHearts = _calcSpeedBonus(claimedHearts, daysRemaining);\r\n\r\n        return (adjSatoshis, claimedHearts, claimBonusHearts);\r\n    }\r\n\r\n    /**\r\n     * @dev Apply Silly Whale adjustment\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @return Adjusted BTC address balance in Satoshis\r\n     */\r\n    function _adjustSillyWhale(uint256 rawSatoshis)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (rawSatoshis < 1000e8) {\r\n            /* For < 1,000 BTC: no penalty */\r\n            return rawSatoshis;\r\n        }\r\n        if (rawSatoshis >= 10000e8) {\r\n            /* For >= 10,000 BTC: penalty is 75%, leaving 25% */\r\n            return rawSatoshis / 4;\r\n        }\r\n        /*\r\n            For 1,000 <= BTC < 10,000: penalty scales linearly from 50% to 75%\r\n\r\n            penaltyPercent  = (btc - 1000) / (10000 - 1000) * (75 - 50) + 50\r\n                            = (btc - 1000) / 9000 * 25 + 50\r\n                            = (btc - 1000) / 360 + 50\r\n\r\n            appliedPercent  = 100 - penaltyPercent\r\n                            = 100 - ((btc - 1000) / 360 + 50)\r\n                            = 100 - (btc - 1000) / 360 - 50\r\n                            = 50 - (btc - 1000) / 360\r\n                            = (18000 - (btc - 1000)) / 360\r\n                            = (18000 - btc + 1000) / 360\r\n                            = (19000 - btc) / 360\r\n\r\n            adjustedBtc     = btc * appliedPercent / 100\r\n                            = btc * ((19000 - btc) / 360) / 100\r\n                            = btc * (19000 - btc) / 36000\r\n\r\n            adjustedSat     = 1e8 * adjustedBtc\r\n                            = 1e8 * (btc * (19000 - btc) / 36000)\r\n                            = 1e8 * ((sat / 1e8) * (19000 - (sat / 1e8)) / 36000)\r\n                            = 1e8 * (sat / 1e8) * (19000 - (sat / 1e8)) / 36000\r\n                            = (sat / 1e8) * 1e8 * (19000 - (sat / 1e8)) / 36000\r\n                            = (sat / 1e8) * (19000e8 - sat) / 36000\r\n                            = sat * (19000e8 - sat) / 36000e8\r\n        */\r\n        return rawSatoshis * (19000e8 - rawSatoshis) / 36000e8;\r\n    }\r\n\r\n    /**\r\n     * @dev Apply late-claim adjustment to scale claim to zero by end of claim phase\r\n     * @param adjSatoshis Adjusted BTC address balance in Satoshis (after Silly Whale)\r\n     * @param daysRemaining Number of reward days remaining in claim phase\r\n     * @return Adjusted BTC address balance in Satoshis (after Silly Whale and Late-Claim)\r\n     */\r\n    function _adjustLateClaim(uint256 adjSatoshis, uint256 daysRemaining)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            Only valid from CLAIM_PHASE_DAYS to 1, and only used during that time.\r\n\r\n            adjustedSat = sat * (daysRemaining / CLAIM_PHASE_DAYS) * 100%\r\n                        = sat *  daysRemaining / CLAIM_PHASE_DAYS\r\n        */\r\n        return adjSatoshis * daysRemaining / CLAIM_PHASE_DAYS;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates speed bonus for claiming earlier in the claim phase\r\n     * @param claimedHearts Hearts claimed from adjusted BTC address balance Satoshis\r\n     * @param daysRemaining Number of claim days remaining in claim phase\r\n     * @return Speed bonus in Hearts\r\n     */\r\n    function _calcSpeedBonus(uint256 claimedHearts, uint256 daysRemaining)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            Only valid from CLAIM_PHASE_DAYS to 1, and only used during that time.\r\n            Speed bonus is 20% ... 0% inclusive.\r\n\r\n            bonusHearts = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) * 20%\r\n                        = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) * 20/100\r\n                        = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) / 5\r\n                        = claimedHearts  *  (daysRemaining - 1)  / ((CLAIM_PHASE_DAYS - 1)  * 5)\r\n        */\r\n        return claimedHearts * (daysRemaining - 1) / ((CLAIM_PHASE_DAYS - 1) * 5);\r\n    }\r\n}\r\n\r\ncontract TransformableToken is UTXORedeemableToken {\r\n    /**\r\n     * @dev PUBLIC FACING: Enter the tranform lobby for the current round\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEnter(address referrerAddr)\r\n        external\r\n        payable\r\n    {\r\n        uint256 enterDay = _currentDay();\r\n        require(enterDay < CLAIM_PHASE_END_DAY, \"HEX: Lobbies have ended\");\r\n\r\n        uint256 rawAmount = msg.value;\r\n        require(rawAmount != 0, \"HEX: Amount required\");\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 entryIndex = qRef.tailIndex++;\r\n\r\n        qRef.entries[entryIndex] = XfLobbyEntryStore(uint96(rawAmount), referrerAddr);\r\n\r\n        xfLobby[enterDay] += rawAmount;\r\n\r\n        _emitXfLobbyEnter(enterDay, entryIndex, rawAmount, referrerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Leave the transform lobby after the round is complete\r\n     * @param enterDay Day number when the member entered\r\n     * @param count Number of queued-enters to exit (optional; 0 for all)\r\n     */\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n        external\r\n    {\r\n        require(enterDay < _currentDay(), \"HEX: Round is not complete\");\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 headIndex = qRef.headIndex;\r\n        uint256 endIndex;\r\n\r\n        if (count != 0) {\r\n            require(count <= qRef.tailIndex - headIndex, \"HEX: count invalid\");\r\n            endIndex = headIndex + count;\r\n        } else {\r\n            endIndex = qRef.tailIndex;\r\n            require(headIndex < endIndex, \"HEX: count invalid\");\r\n        }\r\n\r\n        uint256 waasLobby = _waasLobby(enterDay);\r\n        uint256 _xfLobby = xfLobby[enterDay];\r\n        uint256 totalXfAmount = 0;\r\n        uint256 originBonusHearts = 0;\r\n\r\n        do {\r\n            uint256 rawAmount = qRef.entries[headIndex].rawAmount;\r\n            address referrerAddr = qRef.entries[headIndex].referrerAddr;\r\n\r\n            delete qRef.entries[headIndex];\r\n\r\n            uint256 xfAmount = waasLobby * rawAmount / _xfLobby;\r\n\r\n            if (referrerAddr == address(0)) {\r\n                /* No referrer */\r\n                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n            } else {\r\n                /* Referral bonus of 10% of xfAmount to member */\r\n                uint256 referralBonusHearts = xfAmount / 10;\r\n\r\n                xfAmount += referralBonusHearts;\r\n\r\n                /* Then a cumulative referrer bonus of 20% to referrer */\r\n                uint256 referrerBonusHearts = xfAmount / 5;\r\n\r\n                if (referrerAddr == msg.sender) {\r\n                    /* Self-referred */\r\n                    xfAmount += referrerBonusHearts;\r\n                    _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n                } else {\r\n                    /* Referred by different address */\r\n                    _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n                    _mint(referrerAddr, referrerBonusHearts);\r\n                }\r\n                originBonusHearts += referralBonusHearts + referrerBonusHearts;\r\n            }\r\n\r\n            totalXfAmount += xfAmount;\r\n        } while (++headIndex < endIndex);\r\n\r\n        qRef.headIndex = uint40(headIndex);\r\n\r\n        if (originBonusHearts != 0) {\r\n            _mint(ORIGIN_ADDR, originBonusHearts);\r\n        }\r\n        if (totalXfAmount != 0) {\r\n            _mint(msg.sender, totalXfAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Release any value that has been sent to the contract\r\n     */\r\n    function xfLobbyFlush()\r\n        external\r\n    {\r\n        require(address(this).balance != 0, \"HEX: No value\");\r\n\r\n        FLUSH_ADDR.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of xfLobby[] with\r\n     * a single call\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return Fixed array of values\r\n     */\r\n    function xfLobbyRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list)\r\n    {\r\n        require(\r\n            beginDay < endDay && endDay <= CLAIM_PHASE_END_DAY && endDay <= _currentDay(),\r\n            \"HEX: invalid range\"\r\n        );\r\n\r\n        list = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        do {\r\n            list[dst++] = uint256(xfLobby[src++]);\r\n        } while (src < endDay);\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return a current lobby member queue entry.\r\n     * Only needed due to limitations of the standard ABI encoder.\r\n     * @param memberAddr Eth address of the lobby member\r\n     * @param entryId 49 bit compound value. Top 9 bits: enterDay, Bottom 40 bits: entryIndex\r\n     * @return 1: Raw amount that was entered with; 2: Referring Eth addr (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEntry(address memberAddr, uint256 entryId)\r\n        external\r\n        view\r\n        returns (uint256 rawAmount, address referrerAddr)\r\n    {\r\n        uint256 enterDay = entryId >> XF_LOBBY_ENTRY_INDEX_SIZE;\r\n        uint256 entryIndex = entryId & XF_LOBBY_ENTRY_INDEX_MASK;\r\n\r\n        XfLobbyEntryStore storage entry = xfLobbyMembers[enterDay][memberAddr].entries[entryIndex];\r\n\r\n        require(entry.rawAmount != 0, \"HEX: Param invalid\");\r\n\r\n        return (entry.rawAmount, entry.referrerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the lobby days that a user is in with a single call\r\n     * @param memberAddr Eth address of the user\r\n     * @return Bit vector of lobby day numbers\r\n     */\r\n    function xfLobbyPendingDays(address memberAddr)\r\n        external\r\n        view\r\n        returns (uint256[XF_LOBBY_DAY_WORDS] memory words)\r\n    {\r\n        uint256 day = _currentDay() + 1;\r\n\r\n        if (day > CLAIM_PHASE_END_DAY) {\r\n            day = CLAIM_PHASE_END_DAY;\r\n        }\r\n\r\n        while (day-- != 0) {\r\n            if (xfLobbyMembers[day][memberAddr].tailIndex > xfLobbyMembers[day][memberAddr].headIndex) {\r\n                words[day >> 8] |= 1 << (day & 255);\r\n            }\r\n        }\r\n\r\n        return words;\r\n    }\r\n\r\n    function _waasLobby(uint256 enterDay)\r\n        private\r\n        returns (uint256 waasLobby)\r\n    {\r\n        if (enterDay >= CLAIM_PHASE_START_DAY) {\r\n            GlobalsCache memory g;\r\n            GlobalsCache memory gSnapshot;\r\n            _globalsLoad(g, gSnapshot);\r\n\r\n            _dailyDataUpdateAuto(g);\r\n\r\n            uint256 unclaimed = dailyData[enterDay].dayUnclaimedSatoshisTotal;\r\n            waasLobby = unclaimed * HEARTS_PER_SATOSHI / CLAIM_PHASE_DAYS;\r\n\r\n            _globalsSync(g, gSnapshot);\r\n        } else {\r\n            waasLobby = WAAS_LOBBY_SEED_HEARTS;\r\n        }\r\n        return waasLobby;\r\n    }\r\n\r\n    function _emitXfLobbyEnter(\r\n        uint256 enterDay,\r\n        uint256 entryIndex,\r\n        uint256 rawAmount,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit XfLobbyEnter( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint96(rawAmount)) << 40),\r\n            msg.sender,\r\n            (enterDay << XF_LOBBY_ENTRY_INDEX_SIZE) | entryIndex,\r\n            referrerAddr\r\n        );\r\n    }\r\n\r\n    function _emitXfLobbyExit(\r\n        uint256 enterDay,\r\n        uint256 entryIndex,\r\n        uint256 xfAmount,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit XfLobbyExit( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(xfAmount)) << 40),\r\n            msg.sender,\r\n            (enterDay << XF_LOBBY_ENTRY_INDEX_SIZE) | entryIndex,\r\n            referrerAddr\r\n        );\r\n    }\r\n}\r\n\r\ncontract HEX is TransformableToken {\r\n    constructor()\r\n        public\r\n    {\r\n        /* Initialize global shareRate to 1 */\r\n        globals.shareRate = uint40(1 * SHARE_RATE_SCALE);\r\n\r\n        /* Initialize dailyDataCount to skip pre-claim period */\r\n        globals.dailyDataCount = uint16(PRE_CLAIM_DAYS);\r\n\r\n        /* Add all Satoshis from UTXO snapshot to contract */\r\n        globals.claimStats = _claimStatsEncode(\r\n            0, // _claimedBtcAddrCount\r\n            0, // _claimedSatoshisTotal\r\n            FULL_SATOSHIS_TOTAL // _unclaimedSatoshisTotal\r\n        );\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes20\",\"name\":\"btcAddr\",\"type\":\"bytes20\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimToAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data2\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddr\",\"type\":\"address\"}],\"name\":\"ClaimAssist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"updaterAddr\",\"type\":\"address\"}],\"name\":\"DailyDataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"ShareRateChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"StakeEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"senderAddr\",\"type\":\"address\"}],\"name\":\"StakeGoodAccounting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"}],\"name\":\"StakeStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"XfLobbyEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data0\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"XfLobbyExit\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"allocatedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rawSatoshis\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"claimToAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyX\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyY\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"claimFlags\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"autoStakeDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"btcAddressClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"name\":\"btcAddressClaims\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"btcAddr\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"rawSatoshis\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"btcAddressIsClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes20\",\"name\":\"btcAddr\",\"type\":\"bytes20\"},{\"internalType\":\"uint256\",\"name\":\"rawSatoshis\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"btcAddressIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimToAddr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"claimParamHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyX\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyY\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"claimFlags\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claimMessageMatchesSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyData\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"dayPayoutTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"dayStakeSharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint56\",\"name\":\"dayUnclaimedSatoshisTotal\",\"type\":\"uint56\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeDay\",\"type\":\"uint256\"}],\"name\":\"dailyDataUpdate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globalInfo\",\"outputs\":[{\"internalType\":\"uint256[13]\",\"name\":\"\",\"type\":\"uint256[13]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"lockedHeartsTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"nextStakeSharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"shareRate\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakePenaltyTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"dailyDataCount\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"stakeSharesTotal\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"latestStakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint128\",\"name\":\"claimStats\",\"type\":\"uint128\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleLeaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"merkleProofIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyX\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyY\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"claimFlags\",\"type\":\"uint8\"}],\"name\":\"pubKeyToBtcAddress\",\"outputs\":[{\"internalType\":\"bytes20\",\"name\":\"\",\"type\":\"bytes20\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"pubKeyX\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pubKeyY\",\"type\":\"bytes32\"}],\"name\":\"pubKeyToEthAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"}],\"name\":\"stakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeEnd\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"stakeIdParam\",\"type\":\"uint40\"}],\"name\":\"stakeGoodAccounting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeLists\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"stakeId\",\"type\":\"uint40\"},{\"internalType\":\"uint72\",\"name\":\"stakedHearts\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"stakeShares\",\"type\":\"uint72\"},{\"internalType\":\"uint16\",\"name\":\"lockedDay\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"stakedDays\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"unlockedDay\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isAutoStake\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStakedHearts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStakedDays\",\"type\":\"uint256\"}],\"name\":\"stakeStart\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"xfLobby\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"name\":\"xfLobbyEnter\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"}],\"name\":\"xfLobbyEntry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrerAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"enterDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"xfLobbyExit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"xfLobbyFlush\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"xfLobbyMembers\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"headIndex\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"tailIndex\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"memberAddr\",\"type\":\"address\"}],\"name\":\"xfLobbyPendingDays\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"words\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beginDay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDay\",\"type\":\"uint256\"}],\"name\":\"xfLobbyRange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"list\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HEX","CompilerVersion":"v0.5.13+commit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://e1386410ff82a380822a5c5fb950ec31ad42ac34f1e670c4d9b8c7329878472b"}]