[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// d2O.sol -- d2O token\r\n\r\npragma solidity ^0.8.7;\r\n\r\ncontract d2O {\r\n    address public ArchAdmin;\r\n    mapping (address => uint256) public admins;\r\n\r\n    // --- ERC20 Data ---\r\n    string  public constant name     = \"Deuterium\";\r\n    string  public constant symbol   = \"d2O\";\r\n    string  public constant version  = \"1\";\r\n    uint8   public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n    uint256 public live;\r\n    uint256 public transferBlockWait;           //Amount of blocks to wait before user can transfer d2O after minting cross-chain\r\n    uint256 public lockupTriggerAmt;            //d2O amount where lockup will kick in after cross-chain transfer\r\n\r\n    mapping (address => uint256)                        public balanceOf;\r\n    mapping (address => mapping (address => uint256))   public allowance;\r\n    mapping (address => uint256)                        public nonces;\r\n    mapping (address => uint256)                        public transferBlockRelease;    //Block number after which user is able to transfer d2O\r\n\r\n    // --- Events ---\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event TransferBlockWait(uint256 blockWait);\r\n    event TransferBlockUpdate(address indexed user, uint256 blockNumer);\r\n    event LockupTriggerAmount(uint256 amount);\r\n    event Cage(uint256 status);\r\n    \r\n\r\n    // --- EIP712 niceties ---\r\n    uint256 public immutable deploymentChainId;\r\n    bytes32 private immutable _DOMAIN_SEPARATOR;\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n    modifier auth {\r\n        require(admins[msg.sender] == 1, \"d2O/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier alive {\r\n        require(live == 1, \"d2O/not-live\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        live = 1;\r\n        admins[msg.sender] = 1;\r\n        ArchAdmin = msg.sender;\r\n        emit Rely(msg.sender);\r\n\r\n        deploymentChainId = block.chainid;\r\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(block.chainid);\r\n    }\r\n\r\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\r\n        return keccak256(\r\n            abi.encode(\r\n                keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(version)),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\r\n        return block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\r\n    }\r\n\r\n    // --- Administration ---\r\n\r\n    function setArchAdmin(address newArch) external auth {\r\n        require(ArchAdmin == msg.sender && newArch != address(0), \"d2O/Must be ArchAdmin\");\r\n        ArchAdmin = newArch;\r\n        admins[ArchAdmin] = 1;\r\n    }\r\n\r\n    function rely(address usr) external auth {\r\n        admins[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n\r\n    function deny(address usr) external auth {\r\n        require(usr != ArchAdmin, \"d2O/ArchAdmin cannot lose admin - update ArchAdmin to another address\");\r\n        admins[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n\r\n    function cage(uint256 _live) external auth {\r\n        live = _live;\r\n        emit Cage(_live);\r\n    }\r\n\r\n    function setTransferBlockWait(uint256 num) external auth {\r\n        transferBlockWait = num;\r\n        emit TransferBlockWait(transferBlockWait);\r\n    }\r\n\r\n    function setTransferBlockRelease(address user, uint256 blockNumber) external auth {\r\n        transferBlockRelease[user] = blockNumber;\r\n        emit TransferBlockUpdate(user, blockNumber);\r\n    }\r\n\r\n    function setLockupTriggerAmount(uint256 amount) external auth {\r\n        lockupTriggerAmt = amount;\r\n        emit LockupTriggerAmount(amount);\r\n    }\r\n\r\n    // --- ERC20 Mutations ---\r\n    function transfer(address to, uint256 value) external alive returns (bool) {\r\n        require(to != address(0) && to != address(this), \"d2O/invalid-address\");\r\n        require(block.number > transferBlockRelease[msg.sender], \"d2O/transfer too soon after cross-chain mint\");\r\n        uint256 balance = balanceOf[msg.sender];\r\n        require(balance >= value, \"d2O/insufficient-balance\");\r\n\r\n        unchecked {\r\n            balanceOf[msg.sender] = balance - value;\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(msg.sender, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 value) external alive returns (bool) {\r\n        require(to != address(0) && to != address(this), \"d2O/invalid-address\");\r\n        require(block.number > transferBlockRelease[from], \"d2O/transfer too soon after cross-chain mint\");\r\n        uint256 balance = balanceOf[from];\r\n        require(balance >= value, \"d2O/insufficient-balance\");\r\n\r\n        if (from != msg.sender) {\r\n            uint256 allowed = allowance[from][msg.sender];\r\n            if (allowed != type(uint256).max) {\r\n                require(allowed >= value, \"d2O/insufficient-allowance\");\r\n\r\n                unchecked {\r\n                    allowance[from][msg.sender] = allowed - value;\r\n                }\r\n            }\r\n        }\r\n\r\n        unchecked {\r\n            balanceOf[from] = balance - value;\r\n            balanceOf[to] += value;\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        allowance[msg.sender][spender] = value;\r\n\r\n        emit Approval(msg.sender, spender, value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        uint256 newValue = allowance[msg.sender][spender] + addedValue;\r\n        allowance[msg.sender][spender] = newValue;\r\n\r\n        emit Approval(msg.sender, spender, newValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        return _decreaseAllowance(msg.sender, spender, subtractedValue);\r\n    }\r\n    \r\n    function decreaseAllowanceAdmin(address owner, address spender, uint256 subtractedValue) external auth returns (bool) {\r\n        return _decreaseAllowance(owner, spender, subtractedValue);\r\n    } \r\n\r\n    function _decreaseAllowance(address owner, address spender, uint256 subtractedValue) internal returns (bool) {\r\n        uint256 allowed = allowance[owner][spender];\r\n        require(allowed >= subtractedValue, \"d2O/insufficient-allowance\");\r\n        unchecked{\r\n            allowed = allowed - subtractedValue;\r\n        }\r\n        allowance[owner][spender] = allowed;\r\n\r\n        emit Approval(owner, spender, allowed);\r\n\r\n        return true;\r\n    }\r\n\r\n    // --- Mint/Burn ---\r\n    function mint(address to, uint256 value) external auth {\r\n        _mint(to, value);\r\n    }\r\n\r\n    function mintAndDelay(address to, uint256 value) external auth {\r\n        if(value > lockupTriggerAmt){\r\n            transferBlockRelease[to] = block.number + transferBlockWait;\r\n        }\r\n        _mint(to, value);\r\n    }\r\n\r\n    function _mint(address to, uint256 value) internal alive {\r\n        require(to != address(0) && to != address(this), \"d2O/invalid-address\");\r\n        unchecked {\r\n            balanceOf[to] = balanceOf[to] + value; // note: we don't need an overflow check here b/c balanceOf[to] <= totalSupply and there is an overflow check below\r\n        }\r\n        totalSupply = totalSupply + value;\r\n\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function burn(address from, uint256 value) external alive {\r\n        uint256 balance = balanceOf[from];\r\n        require(balance >= value, \"d2O/insufficient-balance\");\r\n        require(block.number > transferBlockRelease[from] || admins[msg.sender] == 1, \"d2O/burn too soon after cross-chain mint\");\r\n\r\n        if (from != msg.sender && admins[msg.sender] != 1) {\r\n            uint256 allowed = allowance[from][msg.sender];\r\n            if (allowed != type(uint256).max) {\r\n                require(allowed >= value, \"d2O/insufficient-allowance\");\r\n\r\n                unchecked {\r\n                    allowance[from][msg.sender] = allowed - value;\r\n                }\r\n            }\r\n        }\r\n\r\n        unchecked {\r\n            balanceOf[from] = balance - value; // note: we don't need overflow checks b/c require(balance >= value) and balance <= totalSupply\r\n            totalSupply     = totalSupply - value;\r\n        }\r\n\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    // --- Approve by signature ---\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        require(block.timestamp <= deadline, \"d2O/permit-expired\");\r\n\r\n        uint256 nonce;\r\n        unchecked { nonce = nonces[owner]++; }\r\n\r\n        bytes32 digest =\r\n            keccak256(abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                block.chainid == deploymentChainId ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid),\r\n                keccak256(abi.encode(\r\n                    PERMIT_TYPEHASH,\r\n                    owner,\r\n                    spender,\r\n                    value,\r\n                    nonce,\r\n                    deadline\r\n                ))\r\n            ));\r\n\r\n        require(owner != address(0) && owner == ecrecover(digest, v, r, s), \"d2O/invalid-permit\");\r\n\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"Cage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockupTriggerAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumer\",\"type\":\"uint256\"}],\"name\":\"TransferBlockUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockWait\",\"type\":\"uint256\"}],\"name\":\"TransferBlockWait\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ArchAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_live\",\"type\":\"uint256\"}],\"name\":\"cage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowanceAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deploymentChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupTriggerAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mintAndDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newArch\",\"type\":\"address\"}],\"name\":\"setArchAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setLockupTriggerAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"setTransferBlockRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"setTransferBlockWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferBlockRelease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBlockWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"d2O","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://469673a87d0f5c5ea5325306c5df232ac7ff0eb2d797f44fd6070ae9ffadbb26"}]