[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.12;\r\n\r\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\r\n// Subject to the MIT license.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"add: +\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        return sub(a, b, \"sub: -\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot underflow.\r\n     */\r\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b <= a, errorMessage);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \"mul: *\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, errorMessage);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        return div(a, b, \"div: /\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers.\r\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        return mod(a, b, \"mod: %\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\ncontract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor () internal {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call{value:amount}(\"\");\r\n        require(success, \"Address: reverted\");\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: < 0\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: !contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: !succeed\");\r\n        }\r\n    }\r\n}\r\n\r\nlibrary Keep3rV1Library {\r\n    function getReserve(address pair, address reserve) external view returns (uint) {\r\n        (uint _r0, uint _r1,) = IUniswapV2Pair(pair).getReserves();\r\n        if (IUniswapV2Pair(pair).token0() == reserve) {\r\n            return _r0;\r\n        } else if (IUniswapV2Pair(pair).token1() == reserve) {\r\n            return _r1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IGovernance {\r\n    function proposeJob(address job) external;\r\n}\r\n\r\ninterface IKeep3rV1Helper {\r\n    function getQuoteLimit(uint gasUsed) external view returns (uint);\r\n}\r\n\r\ncontract Keep3rV1 is ReentrancyGuard {\r\n    using SafeMath for uint;\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice Keep3r Helper to set max prices for the ecosystem\r\n    IKeep3rV1Helper public KPRH;\r\n\r\n    /// @notice EIP-20 token name for this token\r\n    string public constant name = \"Keep3rV1\";\r\n\r\n    /// @notice EIP-20 token symbol for this token\r\n    string public constant symbol = \"KP3R\";\r\n\r\n    /// @notice EIP-20 token decimals for this token\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// @notice Total number of tokens in circulation\r\n    uint public totalSupply = 0; // Initial 0\r\n\r\n    /// @notice A record of each accounts delegate\r\n    mapping (address => address) public delegates;\r\n\r\n    /// @notice A record of votes checkpoints for each account, by index\r\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\r\n\r\n    /// @notice The number of checkpoints for each account\r\n    mapping (address => uint32) public numCheckpoints;\r\n\r\n    mapping (address => mapping (address => uint)) internal allowances;\r\n    mapping (address => uint) internal balances;\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint chainId,address verifyingContract)\");\r\n    bytes32 public immutable DOMAINSEPARATOR;\r\n\r\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint nonce,uint expiry)\");\r\n\r\n    /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n    bytes32 public constant PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\");\r\n\r\n\r\n    /// @notice A record of states for signing / validating signatures\r\n    mapping (address => uint) public nonces;\r\n\r\n    /// @notice An event thats emitted when an account changes its delegate\r\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n    /// @notice An event thats emitted when a delegate account's vote balance changes\r\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\r\n\r\n    /// @notice A checkpoint for marking number of votes from a given block\r\n    struct Checkpoint {\r\n        uint32 fromBlock;\r\n        uint votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Delegate votes from `msg.sender` to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     */\r\n    function delegate(address delegatee) public {\r\n        _delegate(msg.sender, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Delegates votes from signatory to `delegatee`\r\n     * @param delegatee The address to delegate votes to\r\n     * @param nonce The contract state required to match the signature\r\n     * @param expiry The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\r\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAINSEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"delegateBySig: sig\");\r\n        require(nonce == nonces[signatory]++, \"delegateBySig: nonce\");\r\n        require(now <= expiry, \"delegateBySig: expired\");\r\n        _delegate(signatory, delegatee);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the current votes balance for `account`\r\n     * @param account The address to get votes balance\r\n     * @return The number of current votes for `account`\r\n     */\r\n    function getCurrentVotes(address account) external view returns (uint) {\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Determine the prior number of votes for an account as of a block number\r\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n     * @param account The address of the account to check\r\n     * @param blockNumber The block number to get the vote balance at\r\n     * @return The number of votes the account had as of the given block\r\n     */\r\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint) {\r\n        require(blockNumber < block.number, \"getPriorVotes:\");\r\n\r\n        uint32 nCheckpoints = numCheckpoints[account];\r\n        if (nCheckpoints == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // First check most recent balance\r\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n            return checkpoints[account][nCheckpoints - 1].votes;\r\n        }\r\n\r\n        // Next check implicit zero balance\r\n        if (checkpoints[account][0].fromBlock > blockNumber) {\r\n            return 0;\r\n        }\r\n\r\n        uint32 lower = 0;\r\n        uint32 upper = nCheckpoints - 1;\r\n        while (upper > lower) {\r\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n            Checkpoint memory cp = checkpoints[account][center];\r\n            if (cp.fromBlock == blockNumber) {\r\n                return cp.votes;\r\n            } else if (cp.fromBlock < blockNumber) {\r\n                lower = center;\r\n            } else {\r\n                upper = center - 1;\r\n            }\r\n        }\r\n        return checkpoints[account][lower].votes;\r\n    }\r\n\r\n    function _delegate(address delegator, address delegatee) internal {\r\n        address currentDelegate = delegates[delegator];\r\n        uint delegatorBalance = votes[delegator].add(bonds[delegator][address(this)]);\r\n        delegates[delegator] = delegatee;\r\n\r\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n    }\r\n\r\n    function _moveDelegates(address srcRep, address dstRep, uint amount) internal {\r\n        if (srcRep != dstRep && amount > 0) {\r\n            if (srcRep != address(0)) {\r\n                uint32 srcRepNum = numCheckpoints[srcRep];\r\n                uint srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n                uint srcRepNew = srcRepOld.sub(amount, \"_moveVotes: underflows\");\r\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n            }\r\n\r\n            if (dstRep != address(0)) {\r\n                uint32 dstRepNum = numCheckpoints[dstRep];\r\n                uint dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n                uint dstRepNew = dstRepOld.add(amount);\r\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint oldVotes, uint newVotes) internal {\r\n      uint32 blockNumber = safe32(block.number, \"_writeCheckpoint: 32 bits\");\r\n\r\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n      } else {\r\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n          numCheckpoints[delegatee] = nCheckpoints + 1;\r\n      }\r\n\r\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n    }\r\n\r\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\r\n        require(n < 2**32, errorMessage);\r\n        return uint32(n);\r\n    }\r\n\r\n    /// @notice The standard EIP-20 transfer event\r\n    event Transfer(address indexed from, address indexed to, uint amount);\r\n\r\n    /// @notice The standard EIP-20 approval event\r\n    event Approval(address indexed owner, address indexed spender, uint amount);\r\n\r\n    /// @notice Submit a job\r\n    event SubmitJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\r\n\r\n    /// @notice Apply credit to a job\r\n    event ApplyCredit(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\r\n\r\n    /// @notice Remove credit for a job\r\n    event RemoveJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\r\n\r\n    /// @notice Unbond credit for a job\r\n    event UnbondJob(address indexed job, address indexed liquidity, address indexed provider, uint block, uint credit);\r\n\r\n    /// @notice Added a Job\r\n    event JobAdded(address indexed job, uint block, address governance);\r\n\r\n    /// @notice Removed a job\r\n    event JobRemoved(address indexed job, uint block, address governance);\r\n\r\n    /// @notice Worked a job\r\n    event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block, uint amount);\r\n\r\n    /// @notice Keeper bonding\r\n    event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);\r\n\r\n    /// @notice Keeper bonded\r\n    event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);\r\n\r\n    /// @notice Keeper unbonding\r\n    event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);\r\n\r\n    /// @notice Keeper unbound\r\n    event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);\r\n\r\n    /// @notice Keeper slashed\r\n    event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);\r\n\r\n    /// @notice Keeper disputed\r\n    event KeeperDispute(address indexed keeper, uint block);\r\n\r\n    /// @notice Keeper resolved\r\n    event KeeperResolved(address indexed keeper, uint block);\r\n\r\n    event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);\r\n\r\n    /// @notice 1 day to bond to become a keeper\r\n    uint constant public BOND = 3 days;\r\n    /// @notice 14 days to unbond to remove funds from being a keeper\r\n    uint constant public UNBOND = 14 days;\r\n    /// @notice 3 days till liquidity can be bound\r\n    uint constant public LIQUIDITYBOND = 3 days;\r\n\r\n    /// @notice direct liquidity fee 0.3%\r\n    uint constant public FEE = 30;\r\n    uint constant public BASE = 10000;\r\n\r\n    /// @notice address used for ETH transfers\r\n    address constant public ETH = address(0xE);\r\n\r\n    /// @notice tracks all current bondings (time)\r\n    mapping(address => mapping(address => uint)) public bondings;\r\n    /// @notice tracks all current unbondings (time)\r\n    mapping(address => mapping(address => uint)) public unbondings;\r\n    /// @notice allows for partial unbonding\r\n    mapping(address => mapping(address => uint)) public partialUnbonding;\r\n    /// @notice tracks all current pending bonds (amount)\r\n    mapping(address => mapping(address => uint)) public pendingbonds;\r\n    /// @notice tracks how much a keeper has bonded\r\n    mapping(address => mapping(address => uint)) public bonds;\r\n    /// @notice tracks underlying votes (that don't have bond)\r\n    mapping(address => uint) public votes;\r\n\r\n    /// @notice total bonded (totalSupply for bonds)\r\n    uint public totalBonded = 0;\r\n    /// @notice tracks when a keeper was first registered\r\n    mapping(address => uint) public firstSeen;\r\n\r\n    /// @notice tracks if a keeper has a pending dispute\r\n    mapping(address => bool) public disputes;\r\n\r\n    /// @notice tracks last job performed for a keeper\r\n    mapping(address => uint) public lastJob;\r\n    /// @notice tracks the total job executions for a keeper\r\n    mapping(address => uint) public workCompleted;\r\n    /// @notice list of all jobs registered for the keeper system\r\n    mapping(address => bool) public jobs;\r\n    /// @notice the current credit available for a job\r\n    mapping(address => mapping(address => uint)) public credits;\r\n    /// @notice the balances for the liquidity providers\r\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityProvided;\r\n    /// @notice liquidity unbonding days\r\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityUnbonding;\r\n    /// @notice liquidity unbonding amounts\r\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmountsUnbonding;\r\n    /// @notice job proposal delay\r\n    mapping(address => uint) public jobProposalDelay;\r\n    /// @notice liquidity apply date\r\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityApplied;\r\n    /// @notice liquidity amount to apply\r\n    mapping(address => mapping(address => mapping(address => uint))) public liquidityAmount;\r\n\r\n    /// @notice list of all current keepers\r\n    mapping(address => bool) public keepers;\r\n    /// @notice blacklist of keepers not allowed to participate\r\n    mapping(address => bool) public blacklist;\r\n\r\n    /// @notice traversable array of keepers to make external management easier\r\n    address[] public keeperList;\r\n    /// @notice traversable array of jobs to make external management easier\r\n    address[] public jobList;\r\n\r\n    /// @notice governance address for the governance contract\r\n    address public governance;\r\n    address public pendingGovernance;\r\n\r\n    /// @notice the liquidity token supplied by users paying for jobs\r\n    mapping(address => bool) public liquidityAccepted;\r\n\r\n    address[] public liquidityPairs;\r\n\r\n    uint internal _gasUsed;\r\n\r\n    constructor(address _kph) public {\r\n        // Set governance for this token\r\n        governance = msg.sender;\r\n        DOMAINSEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\r\n        KPRH = IKeep3rV1Helper(_kph);\r\n    }\r\n\r\n    /**\r\n     * @notice Add ETH credit to a job to be paid out for work\r\n     * @param job the job being credited\r\n     */\r\n    function addCreditETH(address job) external payable {\r\n        require(jobs[job], \"addCreditETH: !job\");\r\n        uint _fee = msg.value.mul(FEE).div(BASE);\r\n        credits[job][ETH] = credits[job][ETH].add(msg.value.sub(_fee));\r\n        payable(governance).transfer(_fee);\r\n\r\n        emit AddCredit(ETH, job, msg.sender, block.number, msg.value);\r\n    }\r\n\r\n    /**\r\n     * @notice Add credit to a job to be paid out for work\r\n     * @param credit the credit being assigned to the job\r\n     * @param job the job being credited\r\n     * @param amount the amount of credit being added to the job\r\n     */\r\n    function addCredit(address credit, address job, uint amount) external nonReentrant {\r\n        require(jobs[job], \"addCreditETH: !job\");\r\n        uint _before = IERC20(credit).balanceOf(address(this));\r\n        IERC20(credit).safeTransferFrom(msg.sender, address(this), amount);\r\n        uint _received = IERC20(credit).balanceOf(address(this)).sub(_before);\r\n        uint _fee = _received.mul(FEE).div(BASE);\r\n        credits[job][credit] = credits[job][credit].add(_received.sub(_fee));\r\n        IERC20(credit).safeTransfer(governance, _fee);\r\n\r\n        emit AddCredit(credit, job, msg.sender, block.number, _received);\r\n    }\r\n\r\n    /**\r\n     * @notice Add non transferable votes for governance\r\n     * @param voter to add the votes to\r\n     * @param amount of votes to add\r\n     */\r\n    function addVotes(address voter, uint amount) external {\r\n        require(msg.sender == governance, \"addVotes: !gov\");\r\n        _activate(voter, address(this));\r\n        votes[voter] = votes[voter].add(amount);\r\n        totalBonded = totalBonded.add(amount);\r\n        _moveDelegates(address(0), delegates[voter], amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Remove non transferable votes for governance\r\n     * @param voter to subtract the votes\r\n     * @param amount of votes to remove\r\n     */\r\n    function removeVotes(address voter, uint amount) external {\r\n        require(msg.sender == governance, \"addVotes: !gov\");\r\n        votes[voter] = votes[voter].sub(amount);\r\n        totalBonded = totalBonded.sub(amount);\r\n        _moveDelegates(delegates[voter], address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Add credit to a job to be paid out for work\r\n     * @param job the job being credited\r\n     * @param amount the amount of credit being added to the job\r\n     */\r\n    function addKPRCredit(address job, uint amount) external {\r\n        require(msg.sender == governance, \"addKPRCredit: !gov\");\r\n        require(jobs[job], \"addKPRCredit: !job\");\r\n        credits[job][address(this)] = credits[job][address(this)].add(amount);\r\n        _mint(address(this), amount);\r\n        emit AddCredit(address(this), job, msg.sender, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Approve a liquidity pair for being accepted in future\r\n     * @param liquidity the liquidity no longer accepted\r\n     */\r\n    function approveLiquidity(address liquidity) external {\r\n        require(msg.sender == governance, \"approveLiquidity: !gov\");\r\n        require(!liquidityAccepted[liquidity], \"approveLiquidity: !pair\");\r\n        liquidityAccepted[liquidity] = true;\r\n        liquidityPairs.push(liquidity);\r\n    }\r\n\r\n    /**\r\n     * @notice Revoke a liquidity pair from being accepted in future\r\n     * @param liquidity the liquidity no longer accepted\r\n     */\r\n    function revokeLiquidity(address liquidity) external {\r\n        require(msg.sender == governance, \"revokeLiquidity: !gov\");\r\n        liquidityAccepted[liquidity] = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Displays all accepted liquidity pairs\r\n     */\r\n    function pairs() external view returns (address[] memory) {\r\n        return liquidityPairs;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows liquidity providers to submit jobs\r\n     * @param liquidity the liquidity being added\r\n     * @param job the job to assign credit to\r\n     * @param amount the amount of liquidity tokens to use\r\n     */\r\n    function addLiquidityToJob(address liquidity, address job, uint amount) external nonReentrant {\r\n        require(liquidityAccepted[liquidity], \"addLiquidityToJob: !pair\");\r\n        IERC20(liquidity).safeTransferFrom(msg.sender, address(this), amount);\r\n        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);\r\n\r\n        liquidityApplied[msg.sender][liquidity][job] = now.add(LIQUIDITYBOND);\r\n        liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);\r\n\r\n        if (!jobs[job] && jobProposalDelay[job] < now) {\r\n            IGovernance(governance).proposeJob(job);\r\n            jobProposalDelay[job] = now.add(UNBOND);\r\n        }\r\n        emit SubmitJob(job, liquidity, msg.sender, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Applies the credit provided in addLiquidityToJob to the job\r\n     * @param provider the liquidity provider\r\n     * @param liquidity the pair being added as liquidity\r\n     * @param job the job that is receiving the credit\r\n     */\r\n    function applyCreditToJob(address provider, address liquidity, address job) external {\r\n        require(liquidityAccepted[liquidity], \"addLiquidityToJob: !pair\");\r\n        require(liquidityApplied[provider][liquidity][job] != 0, \"credit: no bond\");\r\n        require(liquidityApplied[provider][liquidity][job] < now, \"credit: bonding\");\r\n        uint _liquidity = Keep3rV1Library.getReserve(liquidity, address(this));\r\n        uint _credit = _liquidity.mul(liquidityAmount[provider][liquidity][job]).div(IERC20(liquidity).totalSupply());\r\n        _mint(address(this), _credit);\r\n        credits[job][address(this)] = credits[job][address(this)].add(_credit);\r\n        liquidityAmount[provider][liquidity][job] = 0;\r\n\r\n        emit ApplyCredit(job, liquidity, provider, block.number, _credit);\r\n    }\r\n\r\n    /**\r\n     * @notice Unbond liquidity for a job\r\n     * @param liquidity the pair being unbound\r\n     * @param job the job being unbound from\r\n     * @param amount the amount of liquidity being removed\r\n     */\r\n    function unbondLiquidityFromJob(address liquidity, address job, uint amount) external {\r\n        require(liquidityAmount[msg.sender][liquidity][job] == 0, \"credit: pending credit\");\r\n        liquidityUnbonding[msg.sender][liquidity][job] = now.add(UNBOND);\r\n        liquidityAmountsUnbonding[msg.sender][liquidity][job] = liquidityAmountsUnbonding[msg.sender][liquidity][job].add(amount);\r\n        require(liquidityAmountsUnbonding[msg.sender][liquidity][job] <= liquidityProvided[msg.sender][liquidity][job], \"unbondLiquidityFromJob: insufficient funds\");\r\n\r\n        uint _liquidity = Keep3rV1Library.getReserve(liquidity, address(this));\r\n        uint _credit = _liquidity.mul(amount).div(IERC20(liquidity).totalSupply());\r\n        if (_credit > credits[job][address(this)]) {\r\n            _burn(address(this), credits[job][address(this)]);\r\n            credits[job][address(this)] = 0;\r\n        } else {\r\n            _burn(address(this), _credit);\r\n            credits[job][address(this)] = credits[job][address(this)].sub(_credit);\r\n        }\r\n\r\n        emit UnbondJob(job, liquidity, msg.sender, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows liquidity providers to remove liquidity\r\n     * @param liquidity the pair being unbound\r\n     * @param job the job being unbound from\r\n     */\r\n    function removeLiquidityFromJob(address liquidity, address job) external {\r\n        require(liquidityUnbonding[msg.sender][liquidity][job] != 0, \"removeJob: unbond\");\r\n        require(liquidityUnbonding[msg.sender][liquidity][job] < now, \"removeJob: unbonding\");\r\n        uint _amount = liquidityAmountsUnbonding[msg.sender][liquidity][job];\r\n        liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].sub(_amount);\r\n        liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;\r\n        IERC20(liquidity).safeTransfer(msg.sender, _amount);\r\n\r\n        emit RemoveJob(job, liquidity, msg.sender, block.number, _amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to mint new tokens to treasury\r\n     * @param amount the amount of tokens to mint to treasury\r\n     */\r\n    function mint(uint amount) external {\r\n        require(msg.sender == governance, \"mint: !gov\");\r\n        _mint(governance, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice burn owned tokens\r\n     * @param amount the amount of tokens to burn\r\n     */\r\n    function burn(uint amount) external {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    function _mint(address dst, uint amount) internal {\r\n        // mint the amount\r\n        totalSupply = totalSupply.add(amount);\r\n        // transfer the amount to the recipient\r\n        balances[dst] = balances[dst].add(amount);\r\n        emit Transfer(address(0), dst, amount);\r\n    }\r\n\r\n    function _burn(address dst, uint amount) internal {\r\n        require(dst != address(0), \"_burn: zero address\");\r\n        balances[dst] = balances[dst].sub(amount, \"_burn: exceeds balance\");\r\n        totalSupply = totalSupply.sub(amount);\r\n        emit Transfer(dst, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Implemented by jobs to show that a keeper performed work\r\n     * @param keeper address of the keeper that performed the work\r\n     */\r\n    function worked(address keeper) external {\r\n        workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));\r\n    }\r\n\r\n    /**\r\n     * @notice Implemented by jobs to show that a keeper performed work\r\n     * @param keeper address of the keeper that performed the work\r\n     * @param amount the reward that should be allocated\r\n     */\r\n    function workReceipt(address keeper, uint amount) public {\r\n        require(jobs[msg.sender], \"workReceipt: !job\");\r\n        require(amount <= KPRH.getQuoteLimit(_gasUsed.sub(gasleft())), \"workReceipt: max limit\");\r\n        credits[msg.sender][address(this)] = credits[msg.sender][address(this)].sub(amount, \"workReceipt: insuffient funds\");\r\n        lastJob[keeper] = now;\r\n        _reward(keeper, amount);\r\n        workCompleted[keeper] = workCompleted[keeper].add(amount);\r\n        emit KeeperWorked(address(this), msg.sender, keeper, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Implemented by jobs to show that a keeper performed work\r\n     * @param credit the asset being awarded to the keeper\r\n     * @param keeper address of the keeper that performed the work\r\n     * @param amount the reward that should be allocated\r\n     */\r\n    function receipt(address credit, address keeper, uint amount) external {\r\n        require(jobs[msg.sender], \"receipt: !job\");\r\n        credits[msg.sender][credit] = credits[msg.sender][credit].sub(amount, \"workReceipt: insuffient funds\");\r\n        lastJob[keeper] = now;\r\n        IERC20(credit).safeTransfer(keeper, amount);\r\n        emit KeeperWorked(credit, msg.sender, keeper, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Implemented by jobs to show that a keeper performed work\r\n     * @param keeper address of the keeper that performed the work\r\n     * @param amount the amount of ETH sent to the keeper\r\n     */\r\n    function receiptETH(address keeper, uint amount) external {\r\n        require(jobs[msg.sender], \"receipt: !job\");\r\n        credits[msg.sender][ETH] = credits[msg.sender][ETH].sub(amount, \"workReceipt: insuffient funds\");\r\n        lastJob[keeper] = now;\r\n        payable(keeper).transfer(amount);\r\n        emit KeeperWorked(ETH, msg.sender, keeper, block.number, amount);\r\n    }\r\n\r\n    function _reward(address _from, uint _amount) internal {\r\n        bonds[_from][address(this)] = bonds[_from][address(this)].add(_amount);\r\n        totalBonded = totalBonded.add(_amount);\r\n        _moveDelegates(address(0), delegates[_from], _amount);\r\n        emit Transfer(msg.sender, _from, _amount);\r\n    }\r\n\r\n    function _bond(address bonding, address _from, uint _amount) internal {\r\n        bonds[_from][bonding] = bonds[_from][bonding].add(_amount);\r\n        if (bonding == address(this)) {\r\n            totalBonded = totalBonded.add(_amount);\r\n            _moveDelegates(address(0), delegates[_from], _amount);\r\n        }\r\n    }\r\n\r\n    function _unbond(address bonding, address _from, uint _amount) internal {\r\n        bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);\r\n        if (bonding == address(this)) {\r\n            totalBonded = totalBonded.sub(_amount);\r\n            _moveDelegates(delegates[_from], address(0), _amount);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to add new job systems\r\n     * @param job address of the contract for which work should be performed\r\n     */\r\n    function addJob(address job) external {\r\n        require(msg.sender == governance, \"addJob: !gov\");\r\n        require(!jobs[job], \"addJob: job known\");\r\n        jobs[job] = true;\r\n        jobList.push(job);\r\n        emit JobAdded(job, block.number, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Full listing of all jobs ever added\r\n     * @return array blob\r\n     */\r\n    function getJobs() external view returns (address[] memory) {\r\n        return jobList;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to remove a job from the systems\r\n     * @param job address of the contract for which work should be performed\r\n     */\r\n    function removeJob(address job) external {\r\n        require(msg.sender == governance, \"removeJob: !gov\");\r\n        jobs[job] = false;\r\n        emit JobRemoved(job, block.number, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to change the Keep3rHelper for max spend\r\n     * @param _kprh new helper address to set\r\n     */\r\n    function setKeep3rHelper(IKeep3rV1Helper _kprh) external {\r\n        require(msg.sender == governance, \"setKeep3rHelper: !gov\");\r\n        KPRH = _kprh;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows governance to change governance (for future upgradability)\r\n     * @param _governance new governance address to set\r\n     */\r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"setGovernance: !gov\");\r\n        pendingGovernance = _governance;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows pendingGovernance to accept their role as governance (protection pattern)\r\n     */\r\n    function acceptGovernance() external {\r\n        require(msg.sender == pendingGovernance, \"acceptGovernance: !pendingGov\");\r\n        governance = pendingGovernance;\r\n    }\r\n\r\n    /**\r\n     * @notice confirms if the current keeper is registered, can be used for general (non critical) functions\r\n     * @param keeper the keeper being investigated\r\n     * @return true/false if the address is a keeper\r\n     */\r\n    function isKeeper(address keeper) external returns (bool) {\r\n        _gasUsed = gasleft();\r\n        return keepers[keeper];\r\n    }\r\n\r\n    /**\r\n     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\r\n     * @param keeper the keeper being investigated\r\n     * @param minBond the minimum requirement for the asset provided in bond\r\n     * @param earned the total funds earned in the keepers lifetime\r\n     * @param age the age of the keeper in the system\r\n     * @return true/false if the address is a keeper and has more than the bond\r\n     */\r\n    function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {\r\n        _gasUsed = gasleft();\r\n        return keepers[keeper]\r\n                && bonds[keeper][address(this)].add(votes[keeper]) >= minBond\r\n                && workCompleted[keeper] >= earned\r\n                && now.sub(firstSeen[keeper]) >= age;\r\n    }\r\n\r\n    /**\r\n     * @notice confirms if the current keeper is registered and has a minimum bond, should be used for protected functions\r\n     * @param keeper the keeper being investigated\r\n     * @param bond the bound asset being evaluated\r\n     * @param minBond the minimum requirement for the asset provided in bond\r\n     * @param earned the total funds earned in the keepers lifetime\r\n     * @param age the age of the keeper in the system\r\n     * @return true/false if the address is a keeper and has more than the bond\r\n     */\r\n    function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {\r\n        _gasUsed = gasleft();\r\n        return keepers[keeper]\r\n                && bonds[keeper][bond] >= minBond\r\n                && workCompleted[keeper] >= earned\r\n                && now.sub(firstSeen[keeper]) >= age;\r\n    }\r\n\r\n    /**\r\n     * @notice begin the bonding process for a new keeper\r\n     * @param bonding the asset being bound\r\n     * @param amount the amount of bonding asset being bound\r\n     */\r\n    function bond(address bonding, uint amount) external nonReentrant {\r\n        require(!blacklist[msg.sender], \"bond: blacklisted\");\r\n        bondings[msg.sender][bonding] = now.add(BOND);\r\n        if (bonding == address(this)) {\r\n            _transferTokens(msg.sender, address(this), amount);\r\n        } else {\r\n            uint _before = IERC20(bonding).balanceOf(address(this));\r\n            IERC20(bonding).safeTransferFrom(msg.sender, address(this), amount);\r\n            amount = IERC20(bonding).balanceOf(address(this)).sub(_before);\r\n        }\r\n        pendingbonds[msg.sender][bonding] = pendingbonds[msg.sender][bonding].add(amount);\r\n        emit KeeperBonding(msg.sender, block.number, bondings[msg.sender][bonding], amount);\r\n    }\r\n\r\n    /**\r\n     * @notice get full list of keepers in the system\r\n     */\r\n    function getKeepers() external view returns (address[] memory) {\r\n        return keeperList;\r\n    }\r\n\r\n    /**\r\n     * @notice allows a keeper to activate/register themselves after bonding\r\n     * @param bonding the asset being activated as bond collateral\r\n     */\r\n    function activate(address bonding) external {\r\n        require(!blacklist[msg.sender], \"activate: blacklisted\");\r\n        require(bondings[msg.sender][bonding] != 0 && bondings[msg.sender][bonding] < now, \"activate: bonding\");\r\n        _activate(msg.sender, bonding);\r\n    }\r\n    \r\n    function _activate(address keeper, address bonding) internal {\r\n        if (firstSeen[keeper] == 0) {\r\n          firstSeen[keeper] = now;\r\n          keeperList.push(keeper);\r\n          lastJob[keeper] = now;\r\n        }\r\n        keepers[keeper] = true;\r\n        _bond(bonding, keeper, pendingbonds[keeper][bonding]);\r\n        pendingbonds[keeper][bonding] = 0;\r\n        emit KeeperBonded(keeper, block.number, block.timestamp, bonds[keeper][bonding]);\r\n    }\r\n\r\n    /**\r\n     * @notice begin the unbonding process to stop being a keeper\r\n     * @param bonding the asset being unbound\r\n     * @param amount allows for partial unbonding\r\n     */\r\n    function unbond(address bonding, uint amount) external {\r\n        unbondings[msg.sender][bonding] = now.add(UNBOND);\r\n        _unbond(bonding, msg.sender, amount);\r\n        partialUnbonding[msg.sender][bonding] = partialUnbonding[msg.sender][bonding].add(amount);\r\n        emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender][bonding], amount);\r\n    }\r\n\r\n    /**\r\n     * @notice withdraw funds after unbonding has finished\r\n     * @param bonding the asset to withdraw from the bonding pool\r\n     */\r\n    function withdraw(address bonding) external nonReentrant {\r\n        require(unbondings[msg.sender][bonding] != 0 && unbondings[msg.sender][bonding] < now, \"withdraw: unbonding\");\r\n        require(!disputes[msg.sender], \"withdraw: disputes\");\r\n\r\n        if (bonding == address(this)) {\r\n            _transferTokens(address(this), msg.sender, partialUnbonding[msg.sender][bonding]);\r\n        } else {\r\n            IERC20(bonding).safeTransfer(msg.sender, partialUnbonding[msg.sender][bonding]);\r\n        }\r\n        emit KeeperUnbound(msg.sender, block.number, block.timestamp, partialUnbonding[msg.sender][bonding]);\r\n        partialUnbonding[msg.sender][bonding] = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice allows governance to create a dispute for a given keeper\r\n     * @param keeper the address in dispute\r\n     */\r\n    function dispute(address keeper) external {\r\n        require(msg.sender == governance, \"dispute: !gov\");\r\n        disputes[keeper] = true;\r\n        emit KeeperDispute(keeper, block.number);\r\n    }\r\n\r\n    /**\r\n     * @notice allows governance to slash a keeper based on a dispute\r\n     * @param bonded the asset being slashed\r\n     * @param keeper the address being slashed\r\n     * @param amount the amount being slashed\r\n     */\r\n    function slash(address bonded, address keeper, uint amount) public nonReentrant {\r\n        require(msg.sender == governance, \"slash: !gov\");\r\n        if (bonded == address(this)) {\r\n            _transferTokens(address(this), governance, amount);\r\n        } else {\r\n            IERC20(bonded).safeTransfer(governance, amount);\r\n        }\r\n        _unbond(bonded, keeper, amount);\r\n        disputes[keeper] = false;\r\n        emit KeeperSlashed(keeper, msg.sender, block.number, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice blacklists a keeper from participating in the network\r\n     * @param keeper the address being slashed\r\n     */\r\n    function revoke(address keeper) external {\r\n        require(msg.sender == governance, \"slash: !gov\");\r\n        keepers[keeper] = false;\r\n        blacklist[keeper] = true;\r\n        slash(address(this), keeper, bonds[keeper][address(this)]);\r\n    }\r\n\r\n    /**\r\n     * @notice allows governance to resolve a dispute on a keeper\r\n     * @param keeper the address cleared\r\n     */\r\n    function resolve(address keeper) external {\r\n        require(msg.sender == governance, \"resolve: !gov\");\r\n        disputes[keeper] = false;\r\n        emit KeeperResolved(keeper, block.number);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n     * @param account The address of the account holding the funds\r\n     * @param spender The address of the account spending the funds\r\n     * @return The number of tokens approved\r\n     */\r\n    function allowance(address account, address spender) external view returns (uint) {\r\n        return allowances[account][spender];\r\n    }\r\n\r\n    /**\r\n     * @notice Approve `spender` to transfer up to `amount` from `src`\r\n     * @dev This will overwrite the approval amount for `spender`\r\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n     * @param spender The address of the account which may transfer tokens\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @return Whether or not the approval succeeded\r\n     */\r\n    function approve(address spender, uint amount) public returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Triggers an approval from owner to spends\r\n     * @param owner The address to approve from\r\n     * @param spender The address to be approved\r\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\r\n     * @param deadline The time at which to expire the signature\r\n     * @param v The recovery byte of the signature\r\n     * @param r Half of the ECDSA signature pair\r\n     * @param s Half of the ECDSA signature pair\r\n     */\r\n    function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAINSEPARATOR, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"permit: signature\");\r\n        require(signatory == owner, \"permit: unauthorized\");\r\n        require(now <= deadline, \"permit: expired\");\r\n\r\n        allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the number of tokens held by the `account`\r\n     * @param account The address of the account to get the balance of\r\n     * @return The number of tokens held\r\n     */\r\n    function balanceOf(address account) external view returns (uint) {\r\n        return balances[account];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transfer(address dst, uint amount) public returns (bool) {\r\n        _transferTokens(msg.sender, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Transfer `amount` tokens from `src` to `dst`\r\n     * @param src The address of the source account\r\n     * @param dst The address of the destination account\r\n     * @param amount The number of tokens to transfer\r\n     * @return Whether or not the transfer succeeded\r\n     */\r\n    function transferFrom(address src, address dst, uint amount) external returns (bool) {\r\n        address spender = msg.sender;\r\n        uint spenderAllowance = allowances[src][spender];\r\n\r\n        if (spender != src && spenderAllowance != uint(-1)) {\r\n            uint newAllowance = spenderAllowance.sub(amount, \"transferFrom: exceeds spender allowance\");\r\n            allowances[src][spender] = newAllowance;\r\n\r\n            emit Approval(src, spender, newAllowance);\r\n        }\r\n\r\n        _transferTokens(src, dst, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transferTokens(address src, address dst, uint amount) internal {\r\n        require(src != address(0), \"_transferTokens: zero address\");\r\n        require(dst != address(0), \"_transferTokens: zero address\");\r\n\r\n        balances[src] = balances[src].sub(amount, \"_transferTokens: exceeds balance\");\r\n        balances[dst] = balances[dst].add(amount, \"_transferTokens: overflows\");\r\n        emit Transfer(src, dst, amount);\r\n    }\r\n\r\n    function _getChainId() internal pure returns (uint) {\r\n        uint chainId;\r\n        assembly { chainId := chainid() }\r\n        return chainId;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_kph\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"ApplyCredit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"JobAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"JobRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperBonded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"active\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperBonding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"KeeperDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"}],\"name\":\"KeeperResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"slasher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slash\",\"type\":\"uint256\"}],\"name\":\"KeeperSlashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperUnbonding\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deactivated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"KeeperUnbound\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"KeeperWorked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"RemoveJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"SubmitJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"credit\",\"type\":\"uint256\"}],\"name\":\"UnbondJob\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAINSEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"KPRH\",\"outputs\":[{\"internalType\":\"contract IKeep3rV1Helper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITYBOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNBOND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"activate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"addCreditETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"addJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addKPRCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityToJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"applyCreditToJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"approveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bondings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"credits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"firstSeen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJobs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeepers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bond\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"isBondedKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"isMinKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"jobList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jobProposalDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jobs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keeperList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAccepted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityAmountsUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityApplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"liquidityPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partialUnbonding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingbonds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"credit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiptETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"removeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"}],\"name\":\"removeLiquidityFromJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"}],\"name\":\"revokeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IKeep3rV1Helper\",\"name\":\"_kprh\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonded\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBonded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbondLiquidityFromJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unbondings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bonding\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"workCompleted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"workReceipt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"}],\"name\":\"worked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Keep3rV1","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b41772890c8b1564c5015a12c0dc6f18b0af955e","EVMVersion":"Default","Library":"Keep3rV1Library:fc38b6eba9d47cbfc8c7b4ffffd142b78996b6f1","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://99d32823e8a2a23b2a85c8bbc6d1879b0ee2d2054f895919dac4f543a1390dc3"}]