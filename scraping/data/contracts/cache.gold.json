[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * > Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \"SafeMath: modulo by zero\");\r\n        return a % b;\r\n    }\r\n}\r\n// File: contracts/LockedGoldOracle.sol\r\n// Simple contract regulating the total supply of gold locked at any\r\n// given time so that the Cache contract can't over mint tokens\r\ncontract LockedGoldOracle is Ownable {\r\n  using SafeMath for uint256;\r\n  uint256 private _lockedGold;\r\n  address private _cacheContract;\r\n  event LockEvent(uint256 amount);\r\n  event UnlockEvent(uint256 amount);\r\n  function setCacheContract(address cacheContract) external onlyOwner {\r\n    _cacheContract = cacheContract;\r\n  }\r\n  function lockAmount(uint256 amountGrams) external onlyOwner {\r\n    _lockedGold = _lockedGold.add(amountGrams);\r\n    emit LockEvent(amountGrams);\r\n  }\r\n  // Can only unlock amount of gold if it would leave the\r\n  // total amount of locked gold greater than or equal to the\r\n  // number of tokens in circulation\r\n  function unlockAmount(uint256 amountGrams) external onlyOwner {\r\n    _lockedGold = _lockedGold.sub(amountGrams);\r\n    require(_lockedGold >= CacheGold(_cacheContract).totalCirculation());\r\n    emit UnlockEvent(amountGrams);\r\n  }\r\n  function lockedGold() external view returns(uint256) {\r\n    return _lockedGold;\r\n  }\r\n  function cacheContract() external view returns(address) {\r\n    return _cacheContract;\r\n  }\r\n}\r\n// File: contracts/CacheGold.sol\r\n/// @title The CacheGold Token Contract\r\n/// @author Cache Pte Ltd\r\ncontract CacheGold is IERC20, Ownable {\r\n  using SafeMath for uint256;\r\n  // ERC20 Detailed Info\r\n  /* solhint-disable */\r\n  string public constant name = \"CACHE Gold\";\r\n  string public constant symbol = \"CGT\";\r\n  uint8 public constant decimals = 8;\r\n  /* solhint-enable */\r\n  // 10^8 shortcut\r\n  uint256 private constant TOKEN = 10 ** uint256(decimals);\r\n  // Seconds in a day\r\n  uint256 private constant DAY = 86400;\r\n  // Days in a year\r\n  uint256 private constant YEAR = 365;\r\n  // The maximum transfer fee is 10 basis points\r\n  uint256 private constant MAX_TRANSFER_FEE_BASIS_POINTS = 10;\r\n  // Basis points means divide by 10,000 to get decimal\r\n  uint256 private constant BASIS_POINTS_MULTIPLIER = 10000;\r\n  // The storage fee of 0.25%\r\n  uint256 private constant STORAGE_FEE_DENOMINATOR = 40000000000;\r\n  // The inactive fee of 0.50%\r\n  uint256 private constant INACTIVE_FEE_DENOMINATOR = 20000000000;\r\n  // The minimum balance that would accrue a storage fee after 1 day\r\n  uint256 private constant MIN_BALANCE_FOR_FEES = 146000;\r\n  // Initial basis points for transfer fee\r\n  uint256 private _transferFeeBasisPoints = 10;\r\n  // Cap on total number of tokens that can ever be produced\r\n  uint256 public constant SUPPLY_CAP = 8133525786 * TOKEN;\r\n  // How many days need to pass before late fees can be collected (3 years)\r\n  uint256 public constant INACTIVE_THRESHOLD_DAYS = 1095;\r\n  // Token balance of each address\r\n  mapping (address => uint256) private _balances;\r\n  // Allowed transfer from address\r\n  mapping (address => mapping (address => uint256)) private _allowances;\r\n  // Last time storage fee was paid\r\n  mapping (address => uint256) private _timeStorageFeePaid;\r\n  // Last time the address produced a transaction on this contract\r\n  mapping (address => uint256) private _timeLastActivity;\r\n  // Amount of inactive fees already paid\r\n  mapping (address => uint256) private _inactiveFeePaid;\r\n  // If address doesn't have any activity for INACTIVE_THRESHOLD_DAYS\r\n  // we can start deducting chunks off the address so that\r\n  // full balance can be recouped after 200 years. This is likely\r\n  // to happen if the user loses their private key.\r\n  mapping (address => uint256) private _inactiveFeePerYear;\r\n  // Addresses not subject to transfer fees\r\n  mapping (address => bool) private _transferFeeExempt;\r\n  // Address is not subject to storage fees\r\n  mapping (address => bool) private _storageFeeExempt;\r\n  // Save grace period on storage fees for an address\r\n  mapping (address => uint256) private _storageFeeGracePeriod;\r\n  // Current total number of tokens created\r\n  uint256 private _totalSupply;\r\n  // Address where storage and transfer fees are collected\r\n  address private _feeAddress;\r\n  // The address for the \"backed treasury\". When a bar is locked into the\r\n  // vault for tokens to be minted, they are created in the backed_treasury\r\n  // and can then be sold from this address.\r\n  address private _backedTreasury;\r\n  // The address for the \"unbacked treasury\". The unbacked treasury is a\r\n  // storing address for excess tokens that are not locked in the vault\r\n  // and therefore do not correspond to any real world value. If new bars are\r\n  // locked in the vault, tokens will first be moved from the unbacked\r\n  // treasury to the backed treasury before minting new tokens.\r\n  //\r\n  // This address only accepts transfers from the _backedTreasury or _redeemAddress\r\n  // the general public should not be able to manipulate this balance.\r\n  address private _unbackedTreasury;\r\n  // The address for the LockedGoldOracle that determines the maximum number of\r\n  // tokens that can be in circulation at any given time\r\n  address private _oracle;\r\n  // A fee-exempt address that can be used to collect gold tokens in exchange\r\n  // for redemption of physical gold\r\n  address private _redeemAddress;\r\n  // An address that can force addresses with overdue storage or inactive fee to pay.\r\n  // This is separate from the contract owner, because the owner will change\r\n  // to a multisig address after deploy, and we want to be able to write\r\n  // a script that can sign \"force-pay\" transactions with a single private key\r\n  address private _feeEnforcer;\r\n  // Grace period before storage fees kick in\r\n  uint256 private _storageFeeGracePeriodDays = 0;\r\n  // When gold bars are locked, we add tokens to circulation either\r\n  // through moving them from the unbacked treasury or minting new ones,\r\n  // or some combination of both\r\n  event AddBackedGold(uint256 amount);\r\n  // Before gold bars can be unlocked (removed from circulation), they must\r\n  // be moved to the unbacked treasury, we emit an event when this happens\r\n  // to signal a change in the circulating supply\r\n  event RemoveGold(uint256 amount);\r\n  // When an account has no activity for INACTIVE_THRESHOLD_DAYS\r\n  // it will be flagged as inactive\r\n  event AccountInactive(address indexed account, uint256 feePerYear);\r\n  // If an previoulsy dormant account is reactivated\r\n  event AccountReActive(address indexed account);\r\n  /**\r\n   * @dev Contructor for the CacheGold token sets internal addresses\r\n   * @param unbackedTreasury The address of the unbacked treasury\r\n   * @param backedTreasury The address of the backed treasury\r\n   * @param feeAddress The address where fees are collected\r\n   * @param redeemAddress The address where tokens are send to redeem physical gold\r\n   * @param oracle The address of the LockedGoldOracle\r\n   */\r\n  constructor(address unbackedTreasury,\r\n              address backedTreasury,\r\n              address feeAddress,\r\n              address redeemAddress,\r\n              address oracle) public {\r\n    _unbackedTreasury = unbackedTreasury;\r\n    _backedTreasury = backedTreasury;\r\n    _feeAddress = feeAddress;\r\n    _redeemAddress = redeemAddress;\r\n    _feeEnforcer = owner();\r\n    _oracle = oracle;\r\n    setFeeExempt(_feeAddress);\r\n    setFeeExempt(_redeemAddress);\r\n    setFeeExempt(_backedTreasury);\r\n    setFeeExempt(_unbackedTreasury);\r\n    setFeeExempt(owner());\r\n  }\r\n  /**\r\n   * @dev Throws if called by any account other than THE ENFORCER\r\n   */\r\n  modifier onlyEnforcer() {\r\n    require(msg.sender == _feeEnforcer);\r\n    _;\r\n  }\r\n  /**\r\n  * @dev Transfer token for a specified address\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function transfer(address to, uint256 value) external returns (bool) {\r\n    // Update activity for the sender\r\n    _updateActivity(msg.sender);\r\n    // Can opportunistically mark an account inactive if someone\r\n    // sends money to it\r\n    if (_shouldMarkInactive(to)) {\r\n      _setInactive(to);\r\n    }\r\n    _transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n  * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n  * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n  * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n  * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n  * @param spender The address which will spend the funds.\r\n  * @param value The amount of tokens to be spent.\r\n  */\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    _updateActivity(msg.sender);\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Transfer tokens from one address to another.\r\n  * Note that while this function emits an Approval event, this is not required as per the specification,\r\n  * and other compliant implementations may not emit the event.\r\n  * Also note that even though balance requirements are not explicitly checked,\r\n  * any transfer attempt over the approved amount will automatically fail due to\r\n  * SafeMath revert when trying to subtract approval to a negative balance\r\n  * @param from address The address which you want to send tokens from\r\n  * @param to address The address which you want to transfer to\r\n  * @param value uint256 the amount of tokens to be transferred\r\n  */\r\n  function transferFrom(address from, address to, uint256 value) external returns (bool) {\r\n    _updateActivity(msg.sender);\r\n    _transfer(from, to, value);\r\n    _approve(from, msg.sender, _allowances[from][msg.sender].sub(value));\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n  * approve should be called when allowed_[_spender] == 0. To increment\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  * From MonolithDAO Token.sol\r\n  * Emits an Approval event.\r\n  * @param spender The address which will spend the funds.\r\n  * @param addedValue The amount of tokens to increase the allowance by.\r\n  */\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n    _updateActivity(msg.sender);\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n  * approve should be called when allowed_[_spender] == 0. To decrement\r\n  * allowed value is better to use this function to avoid 2 calls (and wait until\r\n  * the first transaction is mined)\r\n  * From MonolithDAO Token.sol\r\n  * Emits an Approval event.\r\n  * @param spender The address which will spend the funds.\r\n  * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n  */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n    _updateActivity(msg.sender);\r\n    _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Function to add a certain amount of backed tokens. This will first\r\n  * take any tokens from the _unbackedTreasury address and move them to the\r\n  * _backedTreasury. Any remaining tokens will actually be minted.\r\n  * This operation will fail if there is not a sufficient supply of locked gold\r\n  * as determined by the LockedGoldOracle\r\n  *\r\n  * @param value The amount of tokens to add to the backed treasury\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function addBackedTokens(uint256 value) external onlyOwner returns (bool)\r\n  {\r\n    uint256 unbackedBalance = _balances[_unbackedTreasury];\r\n    // Use oracle to check if there is actually enough gold\r\n    // in custody to validate this operation\r\n    uint256 lockedGrams =  LockedGoldOracle(_oracle).lockedGold();\r\n    // Should reject mint if it would make the total supply\r\n    // exceed the amount actually locked in vault\r\n    require(lockedGrams >= totalCirculation().add(value),\r\n            \"Insufficent grams locked in LockedGoldOracle to complete operation\");\r\n    // If we have sufficient balance, just move from the unbacked to backed\r\n    // treasury address\r\n    if (value <= unbackedBalance) {\r\n      _transfer(_unbackedTreasury, _backedTreasury, value);\r\n    } else {\r\n      if (unbackedBalance > 0) {\r\n        // There is no sufficient balance, so we have to both transfer and mint new tokens\r\n        // Transfer the remaining unbacked treasury balance to backed treasury\r\n        _transfer(_unbackedTreasury, _backedTreasury, unbackedBalance);\r\n      }\r\n      // And mint the remaining to the backed treasury\r\n      _mint(value.sub(unbackedBalance));\r\n    }\r\n    emit AddBackedGold(value);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Manually pay storage fees on senders address. Exchanges may want to\r\n  * periodically call this function to pay owed storage fees. This is a\r\n  * cheaper option than 'send to self', which would also trigger paying\r\n  * storage fees\r\n  *\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function payStorageFee() external returns (bool) {\r\n    _updateActivity(msg.sender);\r\n    _payStorageFee(msg.sender);\r\n    return true;\r\n  }\r\n  function setAccountInactive(address account) external onlyEnforcer returns (bool) {\r\n    require(_shouldMarkInactive(account), \"Account not eligible to be marked inactive\");\r\n    _setInactive(account);\r\n  }\r\n  /**\r\n  * @dev Contract allows the forcible collection of storage fees on an address\r\n  * if it is has been more than than 365 days since the last time storage fees\r\n  * were paid on this address.\r\n  *\r\n  * Alternatively inactive fees may also be collected periodically on a prorated\r\n  * basis if the account is currently marked as inactive.\r\n  *\r\n  * @param account The address to pay storage fees on\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function forcePayFees(address account) external onlyEnforcer returns(bool) {\r\n    require(account != address(0));\r\n    require(_balances[account] > 0,\r\n            \"Account has no balance, cannot force paying fees\");\r\n    // If account is inactive, pay inactive fees\r\n    if (isInactive(account)) {\r\n      uint256 paid = _payInactiveFee(account);\r\n      require(paid > 0);\r\n    } else if (_shouldMarkInactive(account)) {\r\n      // If it meets inactive threshold, but hasn't been set yet, set it.\r\n      // This will also trigger automatic payment of owed storage fees\r\n      // before starting inactive fees\r\n      _setInactive(account);\r\n    } else {\r\n      // Otherwise just force paying owed storage fees, which can only\r\n      // be called if they are more than 365 days overdue\r\n      require(daysSincePaidStorageFee(account) >= YEAR,\r\n              \"Account has paid storage fees more recently than 365 days\");\r\n      uint256 paid = _payStorageFee(account);\r\n      require(paid > 0, \"No appreciable storage fees due, will refund gas\");\r\n    }\r\n  }\r\n  /**\r\n  * @dev Set the address that can force collecting fees from users\r\n  * @param enforcer The address to force collecting fees\r\n  * @return An bool representing successfully changing enforcer address\r\n  */\r\n  function setFeeEnforcer(address enforcer) external onlyOwner returns(bool) {\r\n    require(enforcer != address(0));\r\n    _feeEnforcer = enforcer;\r\n    setFeeExempt(_feeEnforcer);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the address to collect fees\r\n  * @param newFeeAddress The address to collect storage and transfer fees\r\n  * @return An bool representing successfully changing fee address\r\n  */\r\n  function setFeeAddress(address newFeeAddress) external onlyOwner returns(bool) {\r\n    require(newFeeAddress != address(0));\r\n    require(newFeeAddress != _unbackedTreasury,\r\n            \"Cannot set fee address to unbacked treasury\");\r\n    _feeAddress = newFeeAddress;\r\n    setFeeExempt(_feeAddress);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the address to deposit tokens when redeeming for physical locked bars.\r\n  * @param newRedeemAddress The address to redeem tokens for bars\r\n  * @return An bool representing successfully changing redeem address\r\n  */\r\n  function setRedeemAddress(address newRedeemAddress) external onlyOwner returns(bool) {\r\n    require(newRedeemAddress != address(0));\r\n    require(newRedeemAddress != _unbackedTreasury,\r\n            \"Cannot set redeem address to unbacked treasury\");\r\n    _redeemAddress = newRedeemAddress;\r\n    setFeeExempt(_redeemAddress);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the address of backed treasury\r\n  * @param newBackedAddress The address of backed treasury\r\n  * @return An bool representing successfully changing backed address\r\n  */\r\n  function setBackedAddress(address newBackedAddress) external onlyOwner returns(bool) {\r\n    require(newBackedAddress != address(0));\r\n    require(newBackedAddress != _unbackedTreasury,\r\n            \"Cannot set backed address to unbacked treasury\");\r\n    _backedTreasury = newBackedAddress;\r\n    setFeeExempt(_backedTreasury);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the address to unbacked treasury\r\n  * @param newUnbackedAddress The address of unbacked treasury\r\n  * @return An bool representing successfully changing unbacked address\r\n  */\r\n  function setUnbackedAddress(address newUnbackedAddress) external onlyOwner returns(bool) {\r\n    require(newUnbackedAddress != address(0));\r\n    require(newUnbackedAddress != _backedTreasury,\r\n            \"Cannot set unbacked treasury to backed treasury\");\r\n    require(newUnbackedAddress != _feeAddress,\r\n            \"Cannot set unbacked treasury to fee address \");\r\n    require(newUnbackedAddress != _redeemAddress,\r\n            \"Cannot set unbacked treasury to fee address \");\r\n    _unbackedTreasury = newUnbackedAddress;\r\n    setFeeExempt(_unbackedTreasury);\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the LockedGoldOracle address\r\n  * @param oracleAddress The address for oracle\r\n  * @return An bool representing successfully changing oracle address\r\n  */\r\n  function setOracleAddress(address oracleAddress) external onlyOwner returns(bool) {\r\n    require(oracleAddress != address(0));\r\n    _oracle = oracleAddress;\r\n    return true;\r\n  }\r\n  /**\r\n  * @dev Set the number of days before storage fees begin accruing.\r\n  * @param daysGracePeriod The global setting for the grace period before storage\r\n  * fees begin accruing. Note that calling this will not change the grace period\r\n  * for addresses already actively inside a grace period\r\n  */\r\n  function setStorageFeeGracePeriodDays(uint256 daysGracePeriod) external onlyOwner {\r\n    _storageFeeGracePeriodDays = daysGracePeriod;\r\n  }\r\n  /**\r\n  * @dev Set this account as being exempt from transfer fees. This may be used\r\n  * in special circumstance for cold storage addresses owed by Cache, exchanges, etc.\r\n  * @param account The account to exempt from transfer fees\r\n  */\r\n  function setTransferFeeExempt(address account) external onlyOwner {\r\n    _transferFeeExempt[account] = true;\r\n  }\r\n  /**\r\n  * @dev Set this account as being exempt from storage fees. This may be used\r\n  * in special circumstance for cold storage addresses owed by Cache, exchanges, etc.\r\n  * @param account The account to exempt from storage fees\r\n  */\r\n  function setStorageFeeExempt(address account) external onlyOwner {\r\n    _storageFeeExempt[account] = true;\r\n  }\r\n  /**\r\n  * @dev Set account is no longer exempt from all fees\r\n  * @param account The account to reactivate fees\r\n  */\r\n  function unsetFeeExempt(address account) external onlyOwner {\r\n    _transferFeeExempt[account] = false;\r\n    _storageFeeExempt[account] = false;\r\n  }\r\n  /**\r\n  * @dev Set a new transfer fee in basis points, must be less than or equal to 10 basis points\r\n  * @param fee The new transfer fee in basis points\r\n  */\r\n  function setTransferFeeBasisPoints(uint256 fee) external onlyOwner {\r\n    require(fee <= MAX_TRANSFER_FEE_BASIS_POINTS,\r\n            \"Transfer fee basis points must be an integer between 0 and 10\");\r\n    _transferFeeBasisPoints = fee;\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address deducting owed fees and\r\n  * accounting for the maximum amount that could be sent including transfer fee\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount sendable by the passed address\r\n  * including transaction and storage fees\r\n  */\r\n  function balanceOf(address owner) external view returns (uint256) {\r\n    return calcSendAllBalance(owner);\r\n  }\r\n  /**\r\n  * @dev Gets the balance of the specified address not deducting owed fees.\r\n  * this returns the 'traditional' ERC-20 balance that represents the balance\r\n  * currently stored in contract storage.\r\n  * @param owner The address to query the balance of.\r\n  * @return An uint256 representing the amount stored in passed address\r\n  */\r\n  function balanceOfNoFees(address owner) external view returns (uint256) {\r\n    return _balances[owner];\r\n  }\r\n  /**\r\n  * @dev Total number of tokens in existence. This includes tokens\r\n  * in the unbacked treasury that are essentially unusable and not\r\n  * in circulation\r\n  * @return A uint256 representing the total number of minted tokens\r\n  */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n  /**\r\n  * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n  * @param owner address The address which owns the funds.\r\n  * @param spender address The address which will spend the funds.\r\n  * @return A uint256 specifying the amount of tokens still available for the spender.\r\n  */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n  /**\r\n  * @return address that can force paying overdue inactive fees\r\n  */\r\n  function feeEnforcer() external view returns(address) {\r\n    return _feeEnforcer;\r\n  }\r\n  /**\r\n   * @return address where fees are collected\r\n   */\r\n  function feeAddress() external view returns(address) {\r\n    return _feeAddress;\r\n  }\r\n  /**\r\n   * @return address for redeeming tokens for gold bars\r\n   */\r\n  function redeemAddress() external view returns(address) {\r\n    return _redeemAddress;\r\n  }\r\n  /**\r\n   * @return address for backed treasury\r\n   */\r\n  function backedTreasury() external view returns(address) {\r\n    return _backedTreasury;\r\n  }\r\n  /**\r\n  * @return address for unbacked treasury\r\n  */\r\n  function unbackedTreasury() external view returns(address) {\r\n    return _unbackedTreasury;\r\n  }\r\n  /**\r\n  * @return address for oracle contract\r\n  */\r\n  function oracleAddress() external view returns(address) {\r\n    return _oracle;\r\n  }\r\n  /**\r\n  * @return the current number of days and address is exempt\r\n  * from storage fees upon receiving tokens\r\n  */\r\n  function storageFeeGracePeriodDays() external view returns(uint256) {\r\n    return _storageFeeGracePeriodDays;\r\n  }\r\n  /**\r\n  * @return the current transfer fee in basis points [0-10]\r\n  */\r\n  function transferFeeBasisPoints() external view returns(uint256) {\r\n    return _transferFeeBasisPoints;\r\n  }\r\n  /**\r\n  * @dev Simulate the transfer from one address to another see final balances and associated fees\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  * @return See _simulateTransfer function\r\n  */\r\n  function simulateTransfer(address from, address to, uint256 value) external view returns (uint256[5] memory) {\r\n    return _simulateTransfer(from, to, value);\r\n  }\r\n  /**\r\n  * @dev Set this account as being exempt from all fees. This may be used\r\n  * in special circumstance for cold storage addresses owed by Cache, exchanges, etc.\r\n  * @param account The account to exempt from storage and transfer fees\r\n  */\r\n  function setFeeExempt(address account) public onlyOwner {\r\n    _transferFeeExempt[account] = true;\r\n    _storageFeeExempt[account] = true;\r\n  }\r\n  /**\r\n  * @dev Check if the address given is extempt from storage fees\r\n  * @param account The address to check\r\n  * @return A boolean if the address passed is exempt from storage fees\r\n  */\r\n  function isStorageFeeExempt(address account) public view returns(bool) {\r\n    return _storageFeeExempt[account];\r\n  }\r\n  /**\r\n  * @dev Check if the address given is extempt from transfer fees\r\n  * @param account The address to check\r\n  * @return A boolean if the address passed is exempt from transfer fees\r\n  */\r\n  function isTransferFeeExempt(address account) public view returns(bool) {\r\n    return _transferFeeExempt[account];\r\n  }\r\n  /**\r\n  * @dev Check if the address given is extempt from transfer fees\r\n  * @param account The address to check\r\n  * @return A boolean if the address passed is exempt from transfer fees\r\n  */\r\n  function isAllFeeExempt(address account) public view returns(bool) {\r\n    return _transferFeeExempt[account] && _storageFeeExempt[account];\r\n  }\r\n  /**\r\n  * @dev Check if the address is considered inactive for not having transacted with\r\n  * the contract for INACTIVE_THRESHOLD_DAYS\r\n  * @param account The address to check\r\n  * @return A boolean if the address passed is considered inactive\r\n  */\r\n  function isInactive(address account) public view returns(bool) {\r\n    return _inactiveFeePerYear[account] > 0;\r\n  }\r\n  /**\r\n  * @dev Total number of tokens that are actually in circulation, which is\r\n  * total tokens excluding the unbacked treasury\r\n  * @return A uint256 representing the total number of tokens in circulation\r\n  */\r\n  function totalCirculation() public view returns (uint256) {\r\n    return _totalSupply.sub(_balances[_unbackedTreasury]);\r\n  }\r\n  /**\r\n  * @dev Get the number of days since the account last paid storage fees\r\n  * @param account The address to check\r\n  * @return A uint256 representing the number of days since storage fees where last paid\r\n  */\r\n  function daysSincePaidStorageFee(address account) public view returns(uint256) {\r\n    if (isInactive(account) || _timeStorageFeePaid[account] == 0) {\r\n      return 0;\r\n    }\r\n    return block.timestamp.sub(_timeStorageFeePaid[account]).div(DAY);\r\n  }\r\n  /**\r\n  * @dev Get the days since the account last sent a transaction to the contract (activity)\r\n  * @param account The address to check\r\n  * @return A uint256 representing the number of days since the address last had activity\r\n  * with the contract\r\n  */\r\n  function daysSinceActivity(address account) public view returns(uint256) {\r\n    if (_timeLastActivity[account] == 0) {\r\n      return 0;\r\n    }\r\n    return block.timestamp.sub(_timeLastActivity[account]).div(DAY);\r\n  }\r\n  /**\r\n  * @dev Returns the total number of fees owed on a particular address\r\n  * @param account The address to check\r\n  * @return The total storage and inactive fees owed on the address\r\n  */\r\n  function calcOwedFees(address account) public view returns(uint256) {\r\n    return calcStorageFee(account).add(calcInactiveFee(account));\r\n  }\r\n  /**\r\n   * @dev Calculate the current storage fee owed for a given address\r\n   * @param account The address to check\r\n   * @return A uint256 representing current storage fees for the address\r\n   */\r\n  function calcStorageFee(address account) public view returns(uint256) {\r\n    // If an account is in an inactive state those fees take over and\r\n    // storage fees are effectively paused\r\n    uint256 balance = _balances[account];\r\n    if (isInactive(account) || isStorageFeeExempt(account) || balance == 0) {\r\n      return 0;\r\n    }\r\n    uint256 daysSinceStoragePaid = daysSincePaidStorageFee(account);\r\n    uint256 daysInactive = daysSinceActivity(account);\r\n    uint256 gracePeriod = _storageFeeGracePeriod[account];\r\n    // If there is a grace period, we can deduct it from the daysSinceStoragePaid\r\n    if (gracePeriod > 0) {\r\n      if (daysSinceStoragePaid > gracePeriod) {\r\n        daysSinceStoragePaid = daysSinceStoragePaid.sub(gracePeriod);\r\n      } else {\r\n        daysSinceStoragePaid = 0;\r\n      }\r\n    }\r\n    if (daysSinceStoragePaid == 0) {\r\n      return 0;\r\n    }\r\n    // This is an edge case where the account has not yet been marked inactive, but\r\n    // will be marked inactive whenever there is a transaction allowing it to be marked.\r\n    // Therefore we know storage fees will only be valid up to a point, and inactive\r\n    // fees will take over.\r\n    if (daysInactive >= INACTIVE_THRESHOLD_DAYS) {\r\n      // This should not be at risk of being negative, because its impossible to force paying\r\n      // storage fees without also setting the account to inactive, so if we are here it means\r\n      // the last time storage fees were paid was BEFORE the account became eligible to be inactive\r\n      // and it's always the case that daysSinceStoragePaid > daysInactive.sub(INACTIVE_THRESHOLD_DAYS)\r\n      daysSinceStoragePaid = daysSinceStoragePaid.sub(daysInactive.sub(INACTIVE_THRESHOLD_DAYS));\r\n    }\r\n    // The normal case with normal storage fees\r\n    return storageFee(balance, daysSinceStoragePaid);\r\n  }\r\n  /**\r\n   * @dev Calculate the current inactive fee for a given address\r\n   * @param account The address to check\r\n   * @return A uint256 representing current inactive fees for the address\r\n   */\r\n  function calcInactiveFee(address account) public view returns(uint256) {\r\n    uint256 balance = _balances[account];\r\n    uint256 daysInactive = daysSinceActivity(account);\r\n    // if the account is marked inactive already, can use the snapshot balance\r\n    if (isInactive(account)) {\r\n      return _calcInactiveFee(balance,\r\n                          daysInactive,\r\n                          _inactiveFeePerYear[account],\r\n                          _inactiveFeePaid[account]);\r\n    } else if (_shouldMarkInactive(account)) {\r\n      // Account has not yet been marked inactive in contract, but the inactive fees will still be due.\r\n      // Just assume snapshotBalance will be current balance after fees\r\n      uint256 snapshotBalance = balance.sub(calcStorageFee(account));\r\n      return _calcInactiveFee(snapshotBalance,                          // current balance\r\n                              daysInactive,                             // number of days inactive\r\n                              _calcInactiveFeePerYear(snapshotBalance), // the inactive fee per year based on balance\r\n                              0);                                       // fees paid already\r\n    }\r\n    return 0;\r\n  }\r\n  /**\r\n   * @dev Calculate the amount that would clear the balance from the address\r\n   * accounting for owed storage and transfer fees\r\n   * accounting for storage and transfer fees\r\n   * @param account The address to check\r\n   * @return A uint256 representing total amount an address has available to send\r\n   */\r\n  function calcSendAllBalance(address account) public view returns (uint256) {\r\n    require(account != address(0));\r\n    // Internal addresses pay no fees, so they can send their entire balance\r\n    uint256 balanceAfterStorage = _balances[account].sub(calcOwedFees(account));\r\n    if (_transferFeeBasisPoints == 0 || isTransferFeeExempt(account)) {\r\n      return balanceAfterStorage;\r\n    }\r\n    // Edge cases where remaining balance is 0.00000001, but is effectively 0\r\n    if (balanceAfterStorage <= 1) {\r\n      return 0;\r\n    }\r\n    // Calculate the send all amount including storage fee\r\n    // Send All = Balance / 1.001\r\n    // and round up 0.00000001\r\n    uint256 divisor = TOKEN.add(_transferFeeBasisPoints.mul(BASIS_POINTS_MULTIPLIER));\r\n    uint256 sendAllAmount = balanceAfterStorage.mul(TOKEN).div(divisor).add(1);\r\n    // Calc transfer fee on send all amount\r\n    uint256 transFee = sendAllAmount.mul(_transferFeeBasisPoints).div(BASIS_POINTS_MULTIPLIER);\r\n    // Fix to include rounding errors\r\n    if (sendAllAmount.add(transFee) > balanceAfterStorage) {\r\n      return sendAllAmount.sub(1);\r\n    }\r\n    return sendAllAmount;\r\n  }\r\n  /*\r\n   * @dev Calculate the transfer fee on an amount\r\n   * @param value The value being sent\r\n   * @return A uint256 representing the transfer fee on sending the value given\r\n   */\r\n  function calcTransferFee(address account, uint256 value) public view returns(uint256) {\r\n    if (isTransferFeeExempt(account)) {\r\n      return 0;\r\n    }\r\n    // Basis points -> decimal multiplier:\r\n    // f(x) = x / 10,0000 (10 basis points is 0.001)\r\n    // So transfer fee working with integers =\r\n    // f(balance, basis) = (balance * TOKEN) / (10,000 * TOKEN / basis)\r\n    return value.mul(_transferFeeBasisPoints).div(BASIS_POINTS_MULTIPLIER);\r\n  }\r\n  /*\r\n   * @dev Calculate the storage fee for a given balance after a certain number of\r\n   * days have passed since the last time fees were paid.\r\n   * @param balance The current balance of the address\r\n   * @param daysSinceStoragePaid The number days that have passed since fees where last paid\r\n   * @return A uint256 representing the storage fee owed\r\n   */\r\n  function storageFee(uint256 balance, uint256 daysSinceStoragePaid) public pure returns(uint256) {\r\n    uint256 fee = balance.mul(TOKEN).mul(daysSinceStoragePaid).div(YEAR).div(STORAGE_FEE_DENOMINATOR);\r\n    if (fee > balance) {\r\n      return balance;\r\n    }\r\n    return fee;\r\n  }\r\n  /**\r\n   * @dev Approve an address to spend another addresses' tokens.\r\n   * @param owner The address that owns the tokens.\r\n   * @param spender The address that will spend the tokens.\r\n   * @param value The number of tokens that can be spent.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(spender != address(0));\r\n    require(owner != address(0));\r\n    _allowances[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n  /**\r\n  * @dev Transfer token for a specified addresses. Transfer is modified from a\r\n  * standard ERC20 contract in that it must also process transfer and storage fees\r\n  * for the token itself. Additionally there are certain internal addresses that\r\n  * are not subject to fees.\r\n  * @param from The address to transfer from.\r\n  * @param to The address to transfer to.\r\n  * @param value The amount to be transferred.\r\n  */\r\n  function _transfer(address from, address to, uint256 value) internal {\r\n    _transferRestrictions(to, from);\r\n    // If the account was previously inactive and initiated the transfer, the\r\n    // inactive fees and storage fees have already been paid by the time we get here\r\n    // via the _updateActivity() call\r\n    uint256 storageFeeFrom = calcStorageFee(from);\r\n    uint256 storageFeeTo = 0;\r\n    uint256 allFeeFrom = storageFeeFrom;\r\n    uint256 balanceFromBefore = _balances[from];\r\n    uint256 balanceToBefore = _balances[to];\r\n    // If not sending to self can pay storage and transfer fee\r\n    if (from != to) {\r\n      // Need transfer fee and storage fee for receiver if not sending to self\r\n      allFeeFrom = allFeeFrom.add(calcTransferFee(from, value));\r\n      storageFeeTo = calcStorageFee(to);\r\n      _balances[from] = balanceFromBefore.sub(value).sub(allFeeFrom);\r\n      _balances[to] = balanceToBefore.add(value).sub(storageFeeTo);\r\n      _balances[_feeAddress] = _balances[_feeAddress].add(allFeeFrom).add(storageFeeTo);\r\n    } else {\r\n      // Only storage fee if sending to self\r\n      _balances[from] = balanceFromBefore.sub(storageFeeFrom);\r\n      _balances[_feeAddress] = _balances[_feeAddress].add(storageFeeFrom);\r\n    }\r\n    // Regular Transfer\r\n    emit Transfer(from, to, value);\r\n    // Fee transfer on `from` address\r\n    if (allFeeFrom > 0) {\r\n      emit Transfer(from, _feeAddress, allFeeFrom);\r\n      if (storageFeeFrom > 0) {\r\n        _timeStorageFeePaid[from] = block.timestamp;\r\n        _endGracePeriod(from);\r\n      }\r\n    }\r\n    // If first time receiving coins, set the grace period\r\n    // and start the the activity clock and storage fee clock\r\n    if (_timeStorageFeePaid[to] == 0) {\r\n      // We may change the grace period in the future so we want to\r\n      // preserve it per address so there is no retroactive deduction\r\n      _storageFeeGracePeriod[to] = _storageFeeGracePeriodDays;\r\n      _timeLastActivity[to] = block.timestamp;\r\n      _timeStorageFeePaid[to] = block.timestamp;\r\n    }\r\n    // Fee transfer on `to` address\r\n    if (storageFeeTo > 0) {\r\n      emit Transfer(to, _feeAddress, storageFeeTo);\r\n      _timeStorageFeePaid[to] = block.timestamp;\r\n      _endGracePeriod(to);\r\n    } else if (balanceToBefore < MIN_BALANCE_FOR_FEES) {\r\n      // MIN_BALANCE_FOR_FEES is the minimum amount in which a storage fee\r\n      // would be due after a sigle day, so if the balance is above that,\r\n      // the storage fee would always be greater than 0.\r\n      //\r\n      // This avoids the following condition:\r\n      // 1. User receives tokens\r\n      // 2. Users sends all but a tiny amount to another address\r\n      // 3. A year later, the user receives more tokens. Because\r\n      // their previous balance was super small, there were no appreciable\r\n      // storage fee, therefore the storage fee clock was not reset\r\n      // 4. User now owes storage fees on entire balance, as if they\r\n      // held tokens for 1 year, instead of resetting the clock to now.\r\n      _timeStorageFeePaid[to] = block.timestamp;\r\n    }\r\n    // If transferring to unbacked treasury, tokens are being taken from\r\n    // circulation, because gold is being 'unlocked' from the vault\r\n    if (to == _unbackedTreasury) {\r\n      emit RemoveGold(value);\r\n    }\r\n  }\r\n  /**\r\n  * @dev Function to mint tokens to backed treasury. In general this method\r\n  * will not be called on it's own, but instead will be called from\r\n  * addBackedTokens.\r\n  * @param value The amount of tokens to mint to backed treasury\r\n  * @return A boolean that indicates if the operation was successful.\r\n  */\r\n  function _mint(uint256 value) internal returns(bool) {\r\n    // Can't break supply cap\r\n    require(_totalSupply.add(value) <= SUPPLY_CAP, \"Call would exceed supply cap\");\r\n    // Can only mint if the unbacked treasury balance is 0\r\n    require(_balances[_unbackedTreasury] == 0, \"The unbacked treasury balance is not 0\");\r\n    // Can only mint to the backed treasury\r\n    _totalSupply = _totalSupply.add(value);\r\n    _balances[_backedTreasury] = _balances[_backedTreasury].add(value);\r\n    emit Transfer(address(0), _backedTreasury, value);\r\n    return true;\r\n  }\r\n  /**\r\n   * @dev Apply storage fee deduction\r\n   * @param account The account to pay storage fees\r\n   * @return A uint256 representing the storage fee paid\r\n   */\r\n  function _payStorageFee(address account) internal returns(uint256) {\r\n    uint256 storeFee = calcStorageFee(account);\r\n    if (storeFee == 0) {\r\n      return 0;\r\n    }\r\n    // Reduce account balance and add to fee address\r\n    _balances[account] = _balances[account].sub(storeFee);\r\n    _balances[_feeAddress] = _balances[_feeAddress].add(storeFee);\r\n    emit Transfer(account, _feeAddress, storeFee);\r\n    _timeStorageFeePaid[account] = block.timestamp;\r\n    _endGracePeriod(account);\r\n    return storeFee;\r\n  }\r\n  /**\r\n   * @dev Apply inactive fee deduction\r\n   * @param account The account to pay inactive fees\r\n   * @return A uint256 representing the inactive fee paid\r\n   */\r\n  function _payInactiveFee(address account) internal returns(uint256) {\r\n    uint256 fee = _calcInactiveFee(\r\n        _balances[account],\r\n        daysSinceActivity(account),\r\n        _inactiveFeePerYear[account],\r\n        _inactiveFeePaid[account]);\r\n    if (fee == 0) {\r\n      return 0;\r\n    }\r\n    _balances[account] = _balances[account].sub(fee);\r\n    _balances[_feeAddress] = _balances[_feeAddress].add(fee);\r\n    _inactiveFeePaid[account] = _inactiveFeePaid[account].add(fee);\r\n    emit Transfer(account, _feeAddress, fee);\r\n    return fee;\r\n  }\r\n  function _shouldMarkInactive(address account) internal view returns(bool) {\r\n    // Can only mark an account as inactive if\r\n    //\r\n    // 1. it's not fee exempt\r\n    // 2. it has a balance\r\n    // 3. it's been over INACTIVE_THRESHOLD_DAYS since last activity\r\n    // 4. it's not already marked inactive\r\n    // 5. the storage fees owed already consume entire balance\r\n    if (account != address(0) &&\r\n        _balances[account] > 0 &&\r\n        daysSinceActivity(account) >= INACTIVE_THRESHOLD_DAYS &&\r\n        !isInactive(account) &&\r\n        !isAllFeeExempt(account) &&\r\n        _balances[account].sub(calcStorageFee(account)) > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n  * @dev Mark an account as inactive. The function will automatically deduct\r\n  * owed storage fees and inactive fees in one go.\r\n  *\r\n  * @param account The account to mark inactive\r\n  */\r\n  function _setInactive(address account) internal {\r\n    // First get owed storage fees\r\n    uint256 storeFee = calcStorageFee(account);\r\n    uint256 snapshotBalance = _balances[account].sub(storeFee);\r\n    // all _setInactive calls are wrapped in _shouldMarkInactive, which\r\n    // already checks this, so we shouldn't hit this condition\r\n    assert(snapshotBalance > 0);\r\n    // Set the account inactive on deducted balance\r\n    _inactiveFeePerYear[account] = _calcInactiveFeePerYear(snapshotBalance);\r\n    emit AccountInactive(account, _inactiveFeePerYear[account]);\r\n    uint256 inactiveFees = _calcInactiveFee(snapshotBalance,\r\n                                            daysSinceActivity(account),\r\n                                            _inactiveFeePerYear[account],\r\n                                            0);\r\n    // Deduct owed storage and inactive fees\r\n    uint256 fees = storeFee.add(inactiveFees);\r\n    _balances[account] = _balances[account].sub(fees);\r\n    _balances[_feeAddress] = _balances[_feeAddress].add(fees);\r\n    _inactiveFeePaid[account] = _inactiveFeePaid[account].add(inactiveFees);\r\n    emit Transfer(account, _feeAddress, fees);\r\n    // Reset storage fee clock if storage fees paid\r\n    if (storeFee > 0) {\r\n      _timeStorageFeePaid[account] = block.timestamp;\r\n      _endGracePeriod(account);\r\n    }\r\n  }\r\n  /**\r\n  * @dev Update the activity clock on an account thats originated a transaction.\r\n  * If the account has previously been marked inactive or should have been\r\n  * marked inactive, it will opportunistically collect those owed fees.\r\n  *\r\n  * @param account The account to update activity\r\n  */\r\n  function _updateActivity(address account) internal {\r\n    // Cache has the ability to force collecting storage and inactivity fees,\r\n    // but in the event an address was missed, can we still detect if the\r\n    // account was inactive when they next transact\r\n    //\r\n    // Here we simply set the account as being inactive, collect the previous\r\n    // storage and inactive fees that were owed, and then reactivate the account\r\n    if (_shouldMarkInactive(account)) {\r\n      // Call will pay existing storage fees before marking inactive\r\n      _setInactive(account);\r\n    }\r\n    // Pay remaining fees and reset fee clocks\r\n    if (isInactive(account)) {\r\n      _payInactiveFee(account);\r\n      _inactiveFeePerYear[account] = 0;\r\n      _timeStorageFeePaid[account] = block.timestamp;\r\n      emit AccountReActive(account);\r\n    }\r\n    // The normal case will just hit this and update\r\n    // the activity clock for the account\r\n    _timeLastActivity[account] = block.timestamp;\r\n  }\r\n  /**\r\n   * @dev Turn off storage fee grace period for an address the first\r\n   * time storage fees are paid (after grace period has ended)\r\n   * @param account The account to turn off storage fee grace period\r\n   */\r\n  function _endGracePeriod(address account) internal {\r\n    if (_storageFeeGracePeriod[account] > 0) {\r\n      _storageFeeGracePeriod[account] = 0;\r\n    }\r\n  }\r\n  /**\r\n  * @dev Enforce the rules of which addresses can transfer to others\r\n  * @param to The sending address\r\n  * @param from The receiving address\r\n  */\r\n  function _transferRestrictions(address to, address from) internal view {\r\n    require(from != address(0));\r\n    require(to != address(0));\r\n    require(to != address(this), \"Cannot transfer tokens to the contract\");\r\n    // unbacked treasury can only transfer to backed treasury\r\n    if (from == _unbackedTreasury) {\r\n      require(to == _backedTreasury,\r\n              \"Unbacked treasury can only transfer to backed treasury\");\r\n    }\r\n    // redeem address can only transfer to unbacked or backed treasury\r\n    if (from == _redeemAddress) {\r\n      require((to == _unbackedTreasury) || (to == _backedTreasury),\r\n              \"Redeem address can only transfer to treasury\");\r\n    }\r\n    // Only the backed treasury  and redeem address\r\n    // can transfer to unbacked treasury\r\n    if (to == _unbackedTreasury) {\r\n      require((from == _backedTreasury) || (from == _redeemAddress),\r\n              \"Unbacked treasury can only receive from redeem address and backed treasury\");\r\n    }\r\n    // Only the unbacked treasury can transfer to the backed treasury\r\n    if (to == _backedTreasury) {\r\n      require((from == _unbackedTreasury) || (from == _redeemAddress),\r\n              \"Only unbacked treasury and redeem address can transfer to backed treasury\");\r\n    }\r\n  }\r\n  /**\r\n   * @dev Simulate the transfer from one address to another see final balances and associated fees\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @return a uint256 array of 5 values representing the\r\n   * [0] storage fees `from`\r\n   * [1] storage fees `to`\r\n   * [2] transfer fee `from`\r\n   * [3] final `from` balance\r\n   * [4] final `to` balance\r\n   */\r\n  function _simulateTransfer(address from, address to, uint256 value) internal view returns (uint256[5] memory) {\r\n    uint256[5] memory ret;\r\n    // Return value slots\r\n    // 0 - fees `from`\r\n    // 1 - fees `to`\r\n    // 2 - transfer fee `from`\r\n    // 3 - final `from` balance\r\n    // 4 - final `to` balance\r\n    ret[0] = calcOwedFees(from);\r\n    ret[1] = 0;\r\n    ret[2] = 0;\r\n    // Don't double charge storage fee sending to self\r\n    if (from != to) {\r\n      ret[1] = calcOwedFees(to);\r\n      ret[2] = calcTransferFee(from, value);\r\n      ret[3] = _balances[from].sub(value).sub(ret[0]).sub(ret[2]);\r\n      ret[4] = _balances[to].add(value).sub(ret[1]);\r\n    } else {\r\n      ret[3] = _balances[from].sub(ret[0]);\r\n      ret[4] = ret[3];\r\n    }\r\n    return ret;\r\n  }\r\n  /**\r\n  * @dev Calculate the amount of inactive fees due per year on the snapshot balance.\r\n  * Should return 50 basis points or 1 token minimum.\r\n  *\r\n  * @param snapshotBalance The balance of the account when marked inactive\r\n  * @return uint256 the inactive fees due each year\r\n  */\r\n  function _calcInactiveFeePerYear(uint256 snapshotBalance) internal pure returns(uint256) {\r\n    uint256 inactiveFeePerYear = snapshotBalance.mul(TOKEN).div(INACTIVE_FEE_DENOMINATOR);\r\n    if (inactiveFeePerYear < TOKEN) {\r\n      return TOKEN;\r\n    }\r\n    return inactiveFeePerYear;\r\n  }\r\n  /**\r\n  * @dev Calcuate inactive fees due on an account\r\n  * @param balance The current account balance\r\n  * @param daysInactive The number of days the account has been inactive\r\n  * @param feePerYear The inactive fee per year based on snapshot balance\r\n  * @param paidAlready The amount of inactive fees that have been paid already\r\n  * @return uint256 for inactive fees due\r\n  */\r\n  function _calcInactiveFee(uint256 balance,\r\n                        uint256 daysInactive,\r\n                        uint256 feePerYear,\r\n                        uint256 paidAlready) internal pure returns(uint256) {\r\n    uint256 daysDue = daysInactive.sub(INACTIVE_THRESHOLD_DAYS);\r\n    uint256 totalDue = feePerYear.mul(TOKEN).mul(daysDue).div(YEAR).div(TOKEN).sub(paidAlready);\r\n    // The fee per year can be off by 0.00000001 so we can collect\r\n    // the final dust after 200 years\r\n    if (totalDue > balance || balance.sub(totalDue) <= 200) {\r\n      return balance;\r\n    }\r\n    return totalDue;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unbackedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"backedTreasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"redeemAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePerYear\",\"type\":\"uint256\"}],\"name\":\"AccountInactive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountReActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddBackedGold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemoveGold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"INACTIVE_THRESHOLD_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SUPPLY_CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"addBackedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"backedTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfNoFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcInactiveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcOwedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcSendAllBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calcStorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"calcTransferFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"daysSinceActivity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"daysSincePaidStorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeEnforcer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"forcePayFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAllFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isStorageFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTransferFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"payStorageFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"redeemAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setAccountInactive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBackedAddress\",\"type\":\"address\"}],\"name\":\"setBackedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeAddress\",\"type\":\"address\"}],\"name\":\"setFeeAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"enforcer\",\"type\":\"address\"}],\"name\":\"setFeeEnforcer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setFeeExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRedeemAddress\",\"type\":\"address\"}],\"name\":\"setRedeemAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setStorageFeeExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daysGracePeriod\",\"type\":\"uint256\"}],\"name\":\"setStorageFeeGracePeriodDays\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTransferFeeBasisPoints\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"setTransferFeeExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newUnbackedAddress\",\"type\":\"address\"}],\"name\":\"setUnbackedAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"simulateTransfer\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daysSinceStoragePaid\",\"type\":\"uint256\"}],\"name\":\"storageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"storageFeeGracePeriodDays\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalCirculation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"transferFeeBasisPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"unbackedTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unsetFeeExempt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CacheGold","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d4033ea2ec53a26d6295f6f375d5c6afbe7886600000000000000000000000006522b05fe48d274f14559e0391be3675e6a1ac910000000000000000000000007ea9b52e9f8673f3e22b4eec2c4c7a7e2d1b6636000000000000000000000000c8bf2dbde1d69d174fd40581f5177f684fa26eda0000000000000000000000005b7820e62778c7317403d892f6501dd816f82730","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://372aef8637f26d411673ba0df6d4802802fddde7cb63ea1edfab40abc640faaa"}]