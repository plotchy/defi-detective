[{"SourceCode":"// Sources flattened with hardhat v2.1.2 https://hardhat.org\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT;\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by `account`.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that `spender` will be\r\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender's allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n   * allowance mechanism. `amount` is then deducted from the caller's\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n   * another (`to`).\r\n   *\r\n   * Note that `value` may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n   * a call to {approve}. `value` is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    uint256 c = a + b;\r\n    if (c < a) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b > a) return (false, 0);\r\n    return (true, a - b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) return (true, 0);\r\n    uint256 c = a * b;\r\n    if (c / a != b) return (false, 0);\r\n    return (true, c);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a / b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n   *\r\n   * _Available since v3.4._\r\n   */\r\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n    if (b == 0) return (false, 0);\r\n    return (true, a % b);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the addition of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `+` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Addition cannot overflow.\r\n   */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"SafeMath: addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"SafeMath: subtraction overflow\");\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the multiplication of two unsigned integers, reverting on\r\n   * overflow.\r\n   *\r\n   * Counterpart to Solidity's `*` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Multiplication cannot overflow.\r\n   */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) return 0;\r\n    uint256 c = a * b;\r\n    require(c / a == b, \"SafeMath: multiplication overflow\");\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: division by zero\");\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting when dividing by zero.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b > 0, \"SafeMath: modulo by zero\");\r\n    return a % b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n   * overflow (when the result is negative).\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {trySub}.\r\n   *\r\n   * Counterpart to Solidity's `-` operator.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - Subtraction cannot overflow.\r\n   */\r\n  function sub(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n   * division by zero. The result is rounded towards zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\r\n   *\r\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n   * uses an invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function div(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n   * reverting with custom message when dividing by zero.\r\n   *\r\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n   * message unnecessarily. For custom revert reasons use {tryMod}.\r\n   *\r\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n   * invalid opcode to revert (consuming all remaining gas).\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The divisor cannot be zero.\r\n   */\r\n  function mod(\r\n    uint256 a,\r\n    uint256 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint256) {\r\n    require(b > 0, errorMessage);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File contracts/access/Context.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n  function _msgSender() internal view virtual returns (address payable) {\r\n    return msg.sender;\r\n  }\r\n\r\n  function _msgData() internal view virtual returns (bytes memory) {\r\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n    return msg.data;\r\n  }\r\n}\r\n\r\n// File contracts/security/Pausable.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n  /**\r\n   * @dev Emitted when the pause is triggered by `account`.\r\n   */\r\n  event Paused(address account);\r\n\r\n  /**\r\n   * @dev Emitted when the pause is lifted by `account`.\r\n   */\r\n  event Unpaused(address account);\r\n\r\n  bool private _paused;\r\n\r\n  /**\r\n   * @dev Initializes the contract in unpaused state.\r\n   */\r\n  constructor() {\r\n    _paused = false;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the contract is paused, and false otherwise.\r\n   */\r\n  function paused() public view virtual returns (bool) {\r\n    return _paused;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused(), \"Pausable: paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused(), \"Pausable: not paused\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Triggers stopped state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must not be paused.\r\n   */\r\n  function _pause() internal virtual whenNotPaused {\r\n    _paused = true;\r\n    emit Paused(_msgSender());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns to normal state.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - The contract must be paused.\r\n   */\r\n  function _unpause() internal virtual whenPaused {\r\n    _paused = false;\r\n    emit Unpaused(_msgSender());\r\n  }\r\n}\r\n\r\n// File contracts/access/Ownable.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\nabstract contract Ownable is Pausable {\r\n  address public _owner;\r\n  address public _admin;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev Initializes the contract setting the deployer as the initial owner.\r\n   */\r\n  constructor(address ownerAddress) {\r\n    _owner = _msgSender();\r\n    _admin = ownerAddress;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyAdmin() {\r\n    require(_admin == _msgSender(), \"Ownable: caller is not the admin\");\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Leaves the contract without owner. It will not be possible to call\r\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n   *\r\n   * NOTE: Renouncing ownership will leave the contract without an owner,\r\n   * thereby removing any functionality that is only available to the owner.\r\n   */\r\n  function renounceOwnership() public onlyAdmin {\r\n    emit OwnershipTransferred(_owner, _admin);\r\n    _owner = _admin;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public virtual onlyOwner {\r\n    require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\n// File contracts/UnifarmToken.sol\r\n\r\npragma solidity ^0.7.6;\r\n\r\ncontract UnifarmToken is Ownable {\r\n  /// @notice EIP-20 token name for this token\r\n  string public constant name = \"UNIFARM Token\";\r\n\r\n  /// @notice EIP-20 token symbol for this token\r\n  string public constant symbol = \"UFARM\";\r\n\r\n  /// @notice EIP-20 token decimals for this token\r\n  uint8 public constant decimals = 18;\r\n\r\n  /// @notice Total number of tokens in circulation\r\n  uint256 public totalSupply = 1000000000e18; // 1 billion UFARM\r\n\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => mapping(address => uint256)) internal allowances;\r\n\r\n  mapping(address => uint256) internal balances;\r\n\r\n  /// @notice A record of each accounts delegate\r\n  mapping(address => address) public delegates;\r\n\r\n  /// @notice A checkpoint for marking number of votes from a given block\r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint256 votes;\r\n  }\r\n\r\n  /// @notice A record of votes checkpoints for each account, by index\r\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n  mapping(address => uint256) public lockedTokens;\r\n\r\n  /// @notice The number of checkpoints for each account\r\n  mapping(address => uint32) public numCheckpoints;\r\n\r\n  /// @notice The EIP-712 typehash for the contract's domain\r\n  bytes32 public constant DOMAIN_TYPEHASH =\r\n    keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\r\n\r\n  /// @notice The EIP-712 typehash for the permit struct used by the contract\r\n  bytes32 public constant PERMIT_TYPEHASH =\r\n    keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\r\n\r\n  /// @notice A record of states for signing / validating signatures\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /// @notice An event thats emitted when an account changes its delegate\r\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\r\n\r\n  /// @notice An event thats emitted when a delegate account's vote balance changes\r\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\r\n\r\n  /// @notice The standard EIP-20 transfer event\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  /// @notice The standard EIP-20 approval event\r\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n  /**\r\n   * @notice Construct a new UFARM token\r\n   * @param account The initial account to grant all the tokens\r\n   */\r\n  constructor(address account) Ownable(account) {\r\n    balances[account] = uint256(totalSupply);\r\n    emit Transfer(address(0), account, totalSupply);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\r\n   * @param account The address of the account holding the funds\r\n   * @param spender The address of the account spending the funds\r\n   * @return The number of tokens approved\r\n   */\r\n  function allowance(address account, address spender) external view returns (uint256) {\r\n    return allowances[account][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Approve `spender` to transfer up to `amount` from `src`\r\n   * @dev This will overwrite the approval amount for `spender`\r\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\r\n   * @param spender The address of the account which may transfer tokens\r\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n   * @return Whether or not the approval succeeded\r\n   */\r\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\r\n    require(spender != address(0), \"UFARM::approve: invalid spender address\");\r\n\r\n    uint256 amount;\r\n    if (rawAmount == uint256(-1)) {\r\n      amount = uint256(-1);\r\n    } else {\r\n      amount = rawAmount; //safe96(rawAmount, \"UFARM::approve: amount exceeds 96 bits\");\r\n    }\r\n\r\n    allowances[msg.sender][spender] = amount;\r\n\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   */\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n    require(spender != address(0), \"UFARM::approve: invalid spender address\");\r\n    uint256 newAllowance = allowances[_msgSender()][spender].add(addedValue);\r\n    allowances[_msgSender()][spender] = newAllowance;\r\n    emit Approval(msg.sender, spender, newAllowance);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n   *\r\n   * This is an alternative to {approve} that can be used as a mitigation for\r\n   * problems described in {IERC20-approve}.\r\n   *\r\n   * Emits an {Approval} event indicating the updated allowance.\r\n   *\r\n   * Requirements:\r\n   *\r\n   * - `spender` cannot be the zero address.\r\n   * - `spender` must have allowance for the caller of at least\r\n   * `subtractedValue`.\r\n   */\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n    require(spender != address(0), \"UFARM::approve: invalid spender address\");\r\n    uint256 currentAllowance = allowances[_msgSender()][spender];\r\n    require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n    allowances[_msgSender()][spender] = currentAllowance.sub(subtractedValue);\r\n    emit Approval(msg.sender, spender, currentAllowance.sub(subtractedValue));\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Triggers an approval from owner to spends\r\n   * @param owner The address to approve from\r\n   * @param spender The address to be approved\r\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\r\n   * @param deadline The time at which to expire the signature\r\n   * @param v The recovery byte of the signature\r\n   * @param r Half of the ECDSA signature pair\r\n   * @param s Half of the ECDSA signature pair\r\n   */\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 rawAmount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    uint256 amount;\r\n    if (rawAmount == uint256(-1)) {\r\n      amount = uint256(-1);\r\n    } else {\r\n      amount = rawAmount; //safe96(rawAmount, \"UFARM::permit: amount exceeds 96 bits\");\r\n    }\r\n\r\n    bytes32 domainSeparator =\r\n      keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n    bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"UFARM::permit: invalid signature\");\r\n    require(signatory == owner, \"UFARM::permit: unauthorized\");\r\n    require(block.timestamp <= deadline, \"UFARM::permit: signature expired\");\r\n\r\n    allowances[owner][spender] = amount;\r\n\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Get the number of tokens held by the `account`\r\n   * @param account The address of the account to get the balance of\r\n   * @return The number of tokens held\r\n   */\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\r\n   * @param dst The address of the destination account\r\n   * @param rawAmount The number of tokens to transfer\r\n   * @return Whether or not the transfer succeeded\r\n   */\r\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n    _transferTokens(msg.sender, dst, rawAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer `amount` tokens from `src` to `dst`\r\n   * @param src The address of the source account\r\n   * @param dst The address of the destination account\r\n   * @param rawAmount The number of tokens to transfer\r\n   * @return Whether or not the transfer succeeded\r\n   */\r\n  function transferFrom(\r\n    address src,\r\n    address dst,\r\n    uint256 rawAmount\r\n  ) external returns (bool) {\r\n    address spender = msg.sender;\r\n    uint256 spenderAllowance = allowances[src][spender];\r\n\r\n    if (spender != src && spenderAllowance != uint256(-1)) {\r\n      uint256 newAllowance = spenderAllowance.sub(rawAmount, \"UFARM::transferFrom: exceeds allowance\");\r\n      allowances[src][spender] = newAllowance;\r\n\r\n      emit Approval(src, spender, newAllowance);\r\n    }\r\n\r\n    _transferTokens(src, dst, rawAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegate votes from `msg.sender` to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   */\r\n  function delegate(address delegatee) external returns (bool) {\r\n    _delegate(msg.sender, delegatee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Delegates votes from signatory to `delegatee`\r\n   * @param delegatee The address to delegate votes to\r\n   * @param nonce The contract state required to match the signature\r\n   * @param expiry The time at which to expire the signature\r\n   * @param v The recovery byte of the signature\r\n   * @param r Half of the ECDSA signature pair\r\n   * @param s Half of the ECDSA signature pair\r\n   */\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    require(block.timestamp <= expiry, \"UFARM::delegateBySig: signature expired\");\r\n    bytes32 domainSeparator =\r\n      keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\r\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\r\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"UFARM::delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"UFARM::delegateBySig: invalid nonce\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  /**\r\n   * @notice Gets the current votes balance for `account`\r\n   * @param account The address to get votes balance\r\n   * @return The number of current votes for `account`\r\n   */\r\n  function getCurrentVotes(address account) external view returns (uint256) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  /**\r\n   * @notice Determine the prior number of votes for an account as of a block number\r\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\r\n   * @param account The address of the account to check\r\n   * @param blockNumber The block number to get the vote balance at\r\n   * @return The number of votes the account had as of the given block\r\n   */\r\n  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\r\n    require(blockNumber < block.number, \"UFARM::getPriorVotes: not yet determined\");\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n      return 0;\r\n    }\r\n\r\n    // First check most recent balance\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n      return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    // Next check implicit zero balance\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\r\n      Checkpoint memory cp = checkpoints[account][center];\r\n      if (cp.fromBlock == blockNumber) {\r\n        return cp.votes;\r\n      } else if (cp.fromBlock < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  /**\r\n   * @notice burn the token of any token holder.\r\n   * @dev balance should be greater than amount. function will revert will balance is less than amount.\r\n   * @param holder the addrress of token holder.\r\n   * @param amount number of tokens to burn.\r\n   * @return true when burnToken succeeded.\r\n   */\r\n\r\n  function burnToken(address holder, uint256 amount) external onlyOwner returns (bool) {\r\n    require(balances[holder] >= amount, \"UFARM::burnToken: Insufficient balance\");\r\n\r\n    balances[holder] = balances[holder].sub(amount);\r\n    totalSupply = totalSupply.sub(amount);\r\n    _moveDelegates(delegates[holder], delegates[address(0)], amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice lock the token of any token holder.\r\n   * @dev balance should be greater than amount. function will revert will balance is less than amount.\r\n   * @param holder the addrress of token holder.\r\n   * @param amount number of tokens to burn.\r\n   * @return true when lockToken succeeded.\r\n   */\r\n\r\n  function lockToken(address holder, uint256 amount) external onlyOwner returns (bool) {\r\n    require(balances[holder] >= amount, \"UFARM::burnToken: Insufficient balance\");\r\n\r\n    balances[holder] = balances[holder].sub(amount);\r\n    lockedTokens[holder] = lockedTokens[holder].add(amount);\r\n    _moveDelegates(delegates[holder], delegates[address(0)], amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice unLock the token of any token holder.\r\n   * @dev locked balance should be greater than amount. function will revert will locked balance is less than amount.\r\n   * @param holder the addrress of token holder.\r\n   * @param amount number of tokens to burn.\r\n   * @return true when unLockToken succeeded.\r\n   */\r\n\r\n  function unlockToken(address holder, uint256 amount) external onlyOwner returns (bool) {\r\n    require(lockedTokens[holder] >= amount, \"UFARM::unlockToken: OverflowLocked balance\");\r\n\r\n    lockedTokens[holder] = lockedTokens[holder].sub(amount);\r\n    balances[holder] = balances[holder].add(amount);\r\n    _moveDelegates(delegates[address(0)], delegates[holder], amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice set the delegatee.\r\n   * @dev delegatee address should not be zero address.\r\n   * @param delegator the addrress of token holder.\r\n   * @param delegatee number of tokens to burn.\r\n   */\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    require(delegatee != address(0), \"UFARM::_delegate: invalid delegatee address\");\r\n    address currentDelegate = delegates[delegator];\r\n    uint256 delegatorBalance = balances[delegator];\r\n    delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  /**\r\n   * @notice transfer tokens to src --> dst.\r\n   * @dev src address should be valid ethereum address.\r\n   * @dev dst address should be valid ethereum address.\r\n   * @dev amount should be greater than zero.\r\n   * @param src the source address.\r\n   * @param dst the destination address.\r\n   * @param amount number of token to transfer.\r\n   */\r\n\r\n  function _transferTokens(\r\n    address src,\r\n    address dst,\r\n    uint256 amount\r\n  ) internal {\r\n    require(src != address(0), \"UFARM::_transferTokens: cannot transfer from the zero address\");\r\n    require(dst != address(0), \"UFARM::_transferTokens: cannot transfer to the zero address\");\r\n    require(amount > 0, \"UFARM::_transferTokens: invalid amount wut??\");\r\n\r\n    balances[src] = balances[src].sub(amount, \"UFARM::_transferTokens: exceeds balance\");\r\n    balances[dst] = balances[dst].add(amount);\r\n    emit Transfer(src, dst, amount);\r\n\r\n    _moveDelegates(delegates[src], delegates[dst], amount);\r\n  }\r\n\r\n  /**\r\n   * @notice transfer the vote token.\r\n   * @dev srcRep address should be valid ethereum address.\r\n   * @dev dstRep address should be valid ethereum address.\r\n   * @dev amount should be greater than zero.\r\n   * @param srcRep the source vote address.\r\n   * @param dstRep the destination vote address.\r\n   * @param amount number of vote token to transfer.\r\n   */\r\n\r\n  function _moveDelegates(\r\n    address srcRep,\r\n    address dstRep,\r\n    uint256 amount\r\n  ) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n        uint32 srcRepNum = numCheckpoints[srcRep];\r\n        uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\r\n        uint256 srcRepNew = srcRepOld.sub(amount);\r\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n        uint32 dstRepNum = numCheckpoints[dstRep];\r\n        uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\r\n        uint256 dstRepNew = dstRepOld.add(amount);\r\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice write checkpoint for delegatee.\r\n   * @dev blocknumber should be uint32.\r\n   * @param delegatee the address of delegatee.\r\n   * @param nCheckpoints no of checkpoints.\r\n   * @param oldVotes number of old votes.\r\n   * @param newVotes number of new votes.\r\n   */\r\n\r\n  function _writeCheckpoint(\r\n    address delegatee,\r\n    uint32 nCheckpoints,\r\n    uint256 oldVotes,\r\n    uint256 newVotes\r\n  ) internal {\r\n    uint32 blockNumber = safe32(block.number, \"UFARM::_writeCheckpoint: block number exceeds 32 bits\");\r\n\r\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\r\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n      numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  /**\r\n   * @notice safe32 function using for uint32 type.\r\n   * @param n the data.\r\n   * @param errorMessage set the errorMessage.\r\n   * @return uint32 data.\r\n   */\r\n\r\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  /**\r\n   * @notice get the chainId from inline assembly.\r\n   * @return uint256 chainId of Node.\r\n   */\r\n\r\n  function getChainId() internal pure returns (uint256) {\r\n    uint256 chainId;\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n    return chainId;\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlockToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UnifarmToken","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000cbc9bf9507b55f11304678f21456e1ee3579f056","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8539a2dcc8e19a758a9e265149175977bf0bc3c1da56d5b8cb68b86bfb2efe02"}]