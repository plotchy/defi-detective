[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// prettier-ignore\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n// prettier-ignore\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for `sender`'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\r\n     *\r\n     * This is internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\r\n     * from the caller's allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address => bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \"Roles: account already has role\");\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account's access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \"Roles: account does not have role\");\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \"Roles: account is the zero address\");\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(_msgSender());\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(_msgSender()), \"MinterRole: caller does not have the Minter role\");\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(_msgSender());\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\r\n * which have permission to mint (create) new tokens as they see fit.\r\n *\r\n * At construction, the deployer of the contract is the only minter.\r\n */\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    /**\r\n     * @dev See {ERC20-_mint}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must have the {MinterRole}.\r\n     */\r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n// prettier-ignore\r\n\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is Context, ERC20 {\r\n    /**\r\n     * @dev Destroys `amount` tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// prettier-ignore\r\n\r\n\r\n\r\ncontract IGroup {\r\n\tfunction isGroup(address _addr) public view returns (bool);\r\n\r\n\tfunction addGroup(address _addr) external;\r\n\r\n\tfunction getGroupKey(address _addr) internal pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_group\", _addr));\r\n\t}\r\n}\r\n\r\n\r\ncontract AddressValidator {\r\n\tstring constant errorMessage = \"this is illegal address\";\r\n\r\n\tfunction validateIllegalAddress(address _addr) external pure {\r\n\t\trequire(_addr != address(0), errorMessage);\r\n\t}\r\n\r\n\tfunction validateGroup(address _addr, address _groupAddr) external view {\r\n\t\trequire(IGroup(_groupAddr).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\tfunction validateGroups(\r\n\t\taddress _addr,\r\n\t\taddress _groupAddr1,\r\n\t\taddress _groupAddr2\r\n\t) external view {\r\n\t\tif (IGroup(_groupAddr1).isGroup(_addr)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(IGroup(_groupAddr2).isGroup(_addr), errorMessage);\r\n\t}\r\n\r\n\tfunction validateAddress(address _addr, address _target) external pure {\r\n\t\trequire(_addr == _target, errorMessage);\r\n\t}\r\n\r\n\tfunction validateAddresses(\r\n\t\taddress _addr,\r\n\t\taddress _target1,\r\n\t\taddress _target2\r\n\t) external pure {\r\n\t\tif (_addr == _target1) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\trequire(_addr == _target2, errorMessage);\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingValidator {\r\n\tAddressValidator private _validator;\r\n\r\n\tconstructor() public {\r\n\t\t_validator = new AddressValidator();\r\n\t}\r\n\r\n\tfunction addressValidator() internal view returns (AddressValidator) {\r\n\t\treturn _validator;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\ncontract Killable {\r\n\taddress payable public _owner;\r\n\r\n\tconstructor() internal {\r\n\t\t_owner = msg.sender;\r\n\t}\r\n\r\n\tfunction kill() public {\r\n\t\trequire(msg.sender == _owner, \"only owner method\");\r\n\t\tselfdestruct(_owner);\r\n\t}\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract AddressConfig is Ownable, UsingValidator, Killable {\r\n\taddress public token = 0x98626E2C9231f03504273d55f397409deFD4a093;\r\n\taddress public allocator;\r\n\taddress public allocatorStorage;\r\n\taddress public withdraw;\r\n\taddress public withdrawStorage;\r\n\taddress public marketFactory;\r\n\taddress public marketGroup;\r\n\taddress public propertyFactory;\r\n\taddress public propertyGroup;\r\n\taddress public metricsGroup;\r\n\taddress public metricsFactory;\r\n\taddress public policy;\r\n\taddress public policyFactory;\r\n\taddress public policySet;\r\n\taddress public policyGroup;\r\n\taddress public lockup;\r\n\taddress public lockupStorage;\r\n\taddress public voteTimes;\r\n\taddress public voteTimesStorage;\r\n\taddress public voteCounter;\r\n\taddress public voteCounterStorage;\r\n\r\n\tfunction setAllocator(address _addr) external onlyOwner {\r\n\t\tallocator = _addr;\r\n\t}\r\n\r\n\tfunction setAllocatorStorage(address _addr) external onlyOwner {\r\n\t\tallocatorStorage = _addr;\r\n\t}\r\n\r\n\tfunction setWithdraw(address _addr) external onlyOwner {\r\n\t\twithdraw = _addr;\r\n\t}\r\n\r\n\tfunction setWithdrawStorage(address _addr) external onlyOwner {\r\n\t\twithdrawStorage = _addr;\r\n\t}\r\n\r\n\tfunction setMarketFactory(address _addr) external onlyOwner {\r\n\t\tmarketFactory = _addr;\r\n\t}\r\n\r\n\tfunction setMarketGroup(address _addr) external onlyOwner {\r\n\t\tmarketGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPropertyFactory(address _addr) external onlyOwner {\r\n\t\tpropertyFactory = _addr;\r\n\t}\r\n\r\n\tfunction setPropertyGroup(address _addr) external onlyOwner {\r\n\t\tpropertyGroup = _addr;\r\n\t}\r\n\r\n\tfunction setMetricsFactory(address _addr) external onlyOwner {\r\n\t\tmetricsFactory = _addr;\r\n\t}\r\n\r\n\tfunction setMetricsGroup(address _addr) external onlyOwner {\r\n\t\tmetricsGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPolicyFactory(address _addr) external onlyOwner {\r\n\t\tpolicyFactory = _addr;\r\n\t}\r\n\r\n\tfunction setPolicyGroup(address _addr) external onlyOwner {\r\n\t\tpolicyGroup = _addr;\r\n\t}\r\n\r\n\tfunction setPolicySet(address _addr) external onlyOwner {\r\n\t\tpolicySet = _addr;\r\n\t}\r\n\r\n\tfunction setPolicy(address _addr) external {\r\n\t\taddressValidator().validateAddress(msg.sender, policyFactory);\r\n\t\tpolicy = _addr;\r\n\t}\r\n\r\n\tfunction setToken(address _addr) external onlyOwner {\r\n\t\ttoken = _addr;\r\n\t}\r\n\r\n\tfunction setLockup(address _addr) external onlyOwner {\r\n\t\tlockup = _addr;\r\n\t}\r\n\r\n\tfunction setLockupStorage(address _addr) external onlyOwner {\r\n\t\tlockupStorage = _addr;\r\n\t}\r\n\r\n\tfunction setVoteTimes(address _addr) external onlyOwner {\r\n\t\tvoteTimes = _addr;\r\n\t}\r\n\r\n\tfunction setVoteTimesStorage(address _addr) external onlyOwner {\r\n\t\tvoteTimesStorage = _addr;\r\n\t}\r\n\r\n\tfunction setVoteCounter(address _addr) external onlyOwner {\r\n\t\tvoteCounter = _addr;\r\n\t}\r\n\r\n\tfunction setVoteCounterStorage(address _addr) external onlyOwner {\r\n\t\tvoteCounterStorage = _addr;\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingConfig {\r\n\tAddressConfig private _config;\r\n\r\n\tconstructor(address _addressConfig) public {\r\n\t\t_config = AddressConfig(_addressConfig);\r\n\t}\r\n\r\n\tfunction config() internal view returns (AddressConfig) {\r\n\t\treturn _config;\r\n\t}\r\n\r\n\tfunction configAddress() external view returns (address) {\r\n\t\treturn address(_config);\r\n\t}\r\n}\r\n\r\n// prettier-ignore\r\n\r\n\r\n\r\ncontract PauserRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    constructor () internal {\r\n        _addPauser(_msgSender());\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \"PauserRole: caller does not have the Pauser role\");\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Context, PauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (`account`).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (`account`).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n\r\nlibrary Decimals {\r\n\tusing SafeMath for uint256;\r\n\tuint120 private constant basisValue = 1000000000000000000;\r\n\r\n\tfunction outOf(uint256 _a, uint256 _b)\r\n\t\tinternal\r\n\t\tpure\r\n\t\treturns (uint256 result)\r\n\t{\r\n\t\tif (_a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 a = _a.mul(basisValue);\r\n\t\trequire(a > _b, \"the denominator is too big\");\r\n\t\treturn (a.div(_b));\r\n\t}\r\n\r\n\tfunction basis() external pure returns (uint120) {\r\n\t\treturn basisValue;\r\n\t}\r\n}\r\n\r\n// prettier-ignore\r\n\r\n\r\n\r\ncontract IAllocator {\r\n\tfunction allocate(address _metrics) external;\r\n\r\n\tfunction calculatedCallback(address _metrics, uint256 _value) external;\r\n\r\n\tfunction beforeBalanceChange(address _property, address _from, address _to)\r\n\t\texternal;\r\n\r\n\tfunction getRewardsAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction allocation(\r\n\t\tuint256 _blocks,\r\n\t\tuint256 _mint,\r\n\t\tuint256 _value,\r\n\t\tuint256 _marketValue,\r\n\t\tuint256 _assets,\r\n\t\tuint256 _totalAssets\r\n\t)\r\n\t\tpublic\r\n\t\tpure\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\tuint256\r\n\t\t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract EternalStorage {\r\n\taddress private currentOwner = msg.sender;\r\n\r\n\tmapping(bytes32 => uint256) private uIntStorage;\r\n\tmapping(bytes32 => string) private stringStorage;\r\n\tmapping(bytes32 => address) private addressStorage;\r\n\tmapping(bytes32 => bytes32) private bytesStorage;\r\n\tmapping(bytes32 => bool) private boolStorage;\r\n\tmapping(bytes32 => int256) private intStorage;\r\n\r\n\tmodifier onlyCurrentOwner() {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction changeOwner(address _newOwner) external {\r\n\t\trequire(msg.sender == currentOwner, \"not current owner\");\r\n\t\tcurrentOwner = _newOwner;\r\n\t}\r\n\r\n\t// *** Getter Methods ***\r\n\tfunction getUint(bytes32 _key) external view returns (uint256) {\r\n\t\treturn uIntStorage[_key];\r\n\t}\r\n\r\n\tfunction getString(bytes32 _key) external view returns (string memory) {\r\n\t\treturn stringStorage[_key];\r\n\t}\r\n\r\n\tfunction getAddress(bytes32 _key) external view returns (address) {\r\n\t\treturn addressStorage[_key];\r\n\t}\r\n\r\n\tfunction getBytes(bytes32 _key) external view returns (bytes32) {\r\n\t\treturn bytesStorage[_key];\r\n\t}\r\n\r\n\tfunction getBool(bytes32 _key) external view returns (bool) {\r\n\t\treturn boolStorage[_key];\r\n\t}\r\n\r\n\tfunction getInt(bytes32 _key) external view returns (int256) {\r\n\t\treturn intStorage[_key];\r\n\t}\r\n\r\n\t// *** Setter Methods ***\r\n\tfunction setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {\r\n\t\tuIntStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setString(bytes32 _key, string calldata _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\tstringStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setAddress(bytes32 _key, address _value)\r\n\t\texternal\r\n\t\tonlyCurrentOwner\r\n\t{\r\n\t\taddressStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {\r\n\t\tbytesStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setBool(bytes32 _key, bool _value) external onlyCurrentOwner {\r\n\t\tboolStorage[_key] = _value;\r\n\t}\r\n\r\n\tfunction setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {\r\n\t\tintStorage[_key] = _value;\r\n\t}\r\n\r\n\t// *** Delete Methods ***\r\n\tfunction deleteUint(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete uIntStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteString(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete stringStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteAddress(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete addressStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteBytes(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete bytesStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteBool(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete boolStorage[_key];\r\n\t}\r\n\r\n\tfunction deleteInt(bytes32 _key) external onlyCurrentOwner {\r\n\t\tdelete intStorage[_key];\r\n\t}\r\n}\r\n\r\n\r\ncontract UsingStorage is Ownable {\r\n\taddress private _storage;\r\n\r\n\tmodifier hasStorage() {\r\n\t\trequire(_storage != address(0), \"storage is not setted\");\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction eternalStorage()\r\n\t\tinternal\r\n\t\tview\r\n\t\thasStorage\r\n\t\treturns (EternalStorage)\r\n\t{\r\n\t\treturn EternalStorage(_storage);\r\n\t}\r\n\r\n\tfunction getStorageAddress() external view hasStorage returns (address) {\r\n\t\treturn _storage;\r\n\t}\r\n\r\n\tfunction createStorage() external onlyOwner {\r\n\t\trequire(_storage == address(0), \"storage is setted\");\r\n\t\tEternalStorage tmp = new EternalStorage();\r\n\t\t_storage = address(tmp);\r\n\t}\r\n\r\n\tfunction setStorage(address _storageAddress) external onlyOwner {\r\n\t\t_storage = _storageAddress;\r\n\t}\r\n\r\n\tfunction changeOwner(address newOwner) external onlyOwner {\r\n\t\tEternalStorage(_storage).changeOwner(newOwner);\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\ncontract VoteTimesStorage is\r\n\tUsingStorage,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t// Vote Times\r\n\tfunction getVoteTimes() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getVoteTimesKey());\r\n\t}\r\n\r\n\tfunction setVoteTimes(uint256 times) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteTimes());\r\n\r\n\t\treturn eternalStorage().setUint(getVoteTimesKey(), times);\r\n\t}\r\n\r\n\tfunction getVoteTimesKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_voteTimes\"));\r\n\t}\r\n\r\n\t//Vote Times By Property\r\n\tfunction getVoteTimesByProperty(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getVoteTimesByPropertyKey(_property));\r\n\t}\r\n\r\n\tfunction setVoteTimesByProperty(address _property, uint256 times) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteTimes());\r\n\r\n\t\treturn\r\n\t\t\teternalStorage().setUint(\r\n\t\t\t\tgetVoteTimesByPropertyKey(_property),\r\n\t\t\t\ttimes\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getVoteTimesByPropertyKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_voteTimesByProperty\", _property));\r\n\t}\r\n}\r\n\r\n\r\ncontract VoteTimes is UsingConfig, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addVoteTime() external {\r\n\t\taddressValidator().validateAddresses(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketFactory(),\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tvoteTimes = voteTimes.add(1);\r\n\t\tgetStorage().setVoteTimes(voteTimes);\r\n\t}\r\n\r\n\tfunction addVoteTimesByProperty(address _property) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\tuint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(\r\n\t\t\t_property\r\n\t\t);\r\n\t\tvoteTimesByProperty = voteTimesByProperty.add(1);\r\n\t\tgetStorage().setVoteTimesByProperty(_property, voteTimesByProperty);\r\n\t}\r\n\r\n\tfunction resetVoteTimesByProperty(address _property) external {\r\n\t\taddressValidator().validateAddresses(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().allocator(),\r\n\t\t\tconfig().propertyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tgetStorage().setVoteTimesByProperty(_property, voteTimes);\r\n\t}\r\n\r\n\tfunction getAbstentionTimes(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 voteTimes = getStorage().getVoteTimes();\r\n\t\tuint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(\r\n\t\t\t_property\r\n\t\t);\r\n\t\treturn voteTimes.sub(voteTimesByProperty);\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (VoteTimesStorage) {\r\n\t\treturn VoteTimesStorage(config().voteTimesStorage());\r\n\t}\r\n}\r\n// prettier-ignore\r\n\r\n\r\n\r\ncontract VoteCounterStorage is\r\n\tUsingStorage,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t// Already Vote Flg\r\n\tfunction setAlreadyVoteFlg(\r\n\t\taddress _user,\r\n\t\taddress _sender,\r\n\t\taddress _property\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\tbytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);\r\n\t\treturn eternalStorage().setBool(alreadyVoteKey, true);\r\n\t}\r\n\r\n\tfunction getAlreadyVoteFlg(\r\n\t\taddress _user,\r\n\t\taddress _sender,\r\n\t\taddress _property\r\n\t) external view returns (bool) {\r\n\t\tbytes32 alreadyVoteKey = getAlreadyVoteKey(_user, _sender, _property);\r\n\t\treturn eternalStorage().getBool(alreadyVoteKey);\r\n\t}\r\n\r\n\tfunction getAlreadyVoteKey(\r\n\t\taddress _sender,\r\n\t\taddress _target,\r\n\t\taddress _property\r\n\t) private pure returns (bytes32) {\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_alreadyVote\", _sender, _target, _property)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// Agree Count\r\n\tfunction getAgreeCount(address _sender) external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getAgreeVoteCountKey(_sender));\r\n\t}\r\n\r\n\tfunction setAgreeCount(address _sender, uint256 count)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\teternalStorage().setUint(getAgreeVoteCountKey(_sender), count);\r\n\t}\r\n\r\n\tfunction getAgreeVoteCountKey(address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(_sender, \"_agreeVoteCount\"));\r\n\t}\r\n\r\n\t// Opposite Count\r\n\tfunction getOppositeCount(address _sender) external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getOppositeVoteCountKey(_sender));\r\n\t}\r\n\r\n\tfunction setOppositeCount(address _sender, uint256 count)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().voteCounter());\r\n\r\n\t\teternalStorage().setUint(getOppositeVoteCountKey(_sender), count);\r\n\t}\r\n\r\n\tfunction getOppositeVoteCountKey(address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(_sender, \"_oppositeVoteCount\"));\r\n\t}\r\n}\r\n\r\n\r\ncontract VoteCounter is UsingConfig, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addVoteCount(address _user, address _property, bool _agree)\r\n\t\texternal\r\n\t{\r\n\t\taddressValidator().validateGroups(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketGroup(),\r\n\t\t\tconfig().policyGroup()\r\n\t\t);\r\n\r\n\t\tbool alreadyVote = getStorage().getAlreadyVoteFlg(\r\n\t\t\t_user,\r\n\t\t\tmsg.sender,\r\n\t\t\t_property\r\n\t\t);\r\n\t\trequire(alreadyVote == false, \"already vote\");\r\n\t\tuint256 voteCount = getVoteCount(_user, _property);\r\n\t\trequire(voteCount != 0, \"vote count is 0\");\r\n\t\tgetStorage().setAlreadyVoteFlg(_user, msg.sender, _property);\r\n\t\tif (_agree) {\r\n\t\t\taddAgreeCount(msg.sender, voteCount);\r\n\t\t} else {\r\n\t\t\taddOppositeCount(msg.sender, voteCount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction getAgreeCount(address _sender) external view returns (uint256) {\r\n\t\treturn getStorage().getAgreeCount(_sender);\r\n\t}\r\n\r\n\tfunction getOppositeCount(address _sender) external view returns (uint256) {\r\n\t\treturn getStorage().getOppositeCount(_sender);\r\n\t}\r\n\r\n\tfunction getVoteCount(address _sender, address _property)\r\n\t\tprivate\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 voteCount;\r\n\t\tif (Property(_property).author() == _sender) {\r\n\t\t\t// solium-disable-next-line operator-whitespace\r\n\t\t\tvoteCount = Lockup(config().lockup())\r\n\t\t\t\t.getPropertyValue(_property)\r\n\t\t\t\t.add(\r\n\t\t\t\tAllocator(config().allocator()).getRewardsAmount(_property)\r\n\t\t\t);\r\n\t\t\tVoteTimes(config().voteTimes()).addVoteTimesByProperty(_property);\r\n\t\t} else {\r\n\t\t\tvoteCount = Lockup(config().lockup()).getValue(_property, _sender);\r\n\t\t}\r\n\t\treturn voteCount;\r\n\t}\r\n\r\n\tfunction addAgreeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 agreeCount = getStorage().getAgreeCount(_target);\r\n\t\tagreeCount = agreeCount.add(_voteCount);\r\n\t\tgetStorage().setAgreeCount(_target, agreeCount);\r\n\t}\r\n\r\n\tfunction addOppositeCount(address _target, uint256 _voteCount) private {\r\n\t\tuint256 oppositeCount = getStorage().getOppositeCount(_target);\r\n\t\toppositeCount = oppositeCount.add(_voteCount);\r\n\t\tgetStorage().setOppositeCount(_target, oppositeCount);\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (VoteCounterStorage) {\r\n\t\treturn VoteCounterStorage(config().voteCounterStorage());\r\n\t}\r\n}\r\n\r\n\r\ncontract IMarket {\r\n\tfunction calculate(address _metrics, uint256 _start, uint256 _end)\r\n\t\texternal\r\n\t\treturns (bool);\r\n\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring memory _args1,\r\n\t\tstring memory _args2,\r\n\t\tstring memory _args3,\r\n\t\tstring memory _args4,\r\n\t\tstring memory _args5\r\n\t)\r\n\t\tpublic\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\taddress\r\n\t\t);\r\n\r\n\tfunction getAuthenticationFee(address _property)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticatedCallback(address _property, bytes32 _idHash)\r\n\t\texternal\r\n\t\treturns (address);\r\n\r\n\tfunction vote(address _property, bool _agree) external;\r\n\r\n\tfunction schema() external view returns (string memory);\r\n}\r\n\r\n\r\ncontract IMarketBehavior {\r\n\tstring public schema;\r\n\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring calldata _args1,\r\n\t\tstring calldata _args2,\r\n\t\tstring calldata _args3,\r\n\t\tstring calldata _args4,\r\n\t\tstring calldata _args5,\r\n\t\taddress market\r\n\t)\r\n\t\texternal\r\n\t\treturns (\r\n\t\t\t// solium-disable-next-line indentation\r\n\t\t\taddress\r\n\t\t);\r\n\r\n\tfunction calculate(address _metrics, uint256 _start, uint256 _end)\r\n\t\texternal\r\n\t\treturns (bool);\r\n}\r\n\r\n\r\n\r\n\r\ncontract PropertyGroup is\r\n\tUsingConfig,\r\n\tUsingStorage,\r\n\tUsingValidator,\r\n\tIGroup,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().propertyFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr) == false, \"already enabled\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) public view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n}\r\n\r\n\r\ncontract IPolicy {\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction assetValue(uint256 _value, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256);\r\n\r\n\tfunction marketApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction policyApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool);\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256);\r\n\r\n\tfunction abstentionPenalty(uint256 _count) external view returns (uint256);\r\n\r\n\tfunction lockUpBlocks() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MarketGroup is\r\n\tUsingConfig,\r\n\tUsingStorage,\r\n\tIGroup,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) UsingStorage() {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr) == false, \"already enabled\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t\taddCount();\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) public view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n\r\n\tfunction addCount() private {\r\n\t\tbytes32 key = getCountKey();\r\n\t\tuint256 number = eternalStorage().getUint(key);\r\n\t\tnumber = number.add(1);\r\n\t\teternalStorage().setUint(key, number);\r\n\t}\r\n\r\n\tfunction getCount() external view returns (uint256) {\r\n\t\tbytes32 key = getCountKey();\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getCountKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_count\"));\r\n\t}\r\n}\r\n\r\n\r\ncontract PolicySet is UsingConfig, UsingStorage, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addSet(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 index = eternalStorage().getUint(getPlicySetIndexKey());\r\n\t\tbytes32 key = getIndexKey(index);\r\n\t\teternalStorage().setAddress(key, _addr);\r\n\t\tindex = index.add(1);\r\n\t\teternalStorage().setUint(getPlicySetIndexKey(), index);\r\n\t}\r\n\r\n\tfunction deleteAll() external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\tuint256 index = eternalStorage().getUint(getPlicySetIndexKey());\r\n\t\tfor (uint256 i = 0; i < index; i++) {\r\n\t\t\tbytes32 key = getIndexKey(i);\r\n\t\t\teternalStorage().setAddress(key, address(0));\r\n\t\t}\r\n\t\teternalStorage().setUint(getPlicySetIndexKey(), 0);\r\n\t}\r\n\r\n\tfunction count() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getPlicySetIndexKey());\r\n\t}\r\n\r\n\tfunction get(uint256 _index) external view returns (address) {\r\n\t\tbytes32 key = getIndexKey(_index);\r\n\t\treturn eternalStorage().getAddress(key);\r\n\t}\r\n\r\n\tfunction getIndexKey(uint256 _index) private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_index\", _index));\r\n\t}\r\n\r\n\tfunction getPlicySetIndexKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_policySetIndex\"));\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract PolicyGroup is\r\n\tUsingConfig,\r\n\tUsingStorage,\r\n\tUsingValidator,\r\n\tIGroup,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr) == false, \"already enabled\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t}\r\n\r\n\tfunction deleteGroup(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr), \"not enabled\");\r\n\t\treturn eternalStorage().setBool(getGroupKey(_addr), false);\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) public view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n}\r\n\r\n\r\ncontract PolicyFactory is Pausable, UsingConfig, UsingValidator, Killable {\r\n\tevent Create(address indexed _from, address _policy, address _innerPolicy);\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction create(address _newPolicyAddress) external returns (address) {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateIllegalAddress(_newPolicyAddress);\r\n\r\n\t\tPolicy policy = new Policy(address(config()), _newPolicyAddress);\r\n\t\taddress policyAddress = address(policy);\r\n\t\temit Create(msg.sender, policyAddress, _newPolicyAddress);\r\n\t\tif (config().policy() == address(0)) {\r\n\t\t\tconfig().setPolicy(policyAddress);\r\n\t\t} else {\r\n\t\t\tVoteTimes(config().voteTimes()).addVoteTime();\r\n\t\t}\r\n\t\tPolicyGroup policyGroup = PolicyGroup(config().policyGroup());\r\n\t\tpolicyGroup.addGroup(policyAddress);\r\n\t\tPolicySet policySet = PolicySet(config().policySet());\r\n\t\tpolicySet.addSet(policyAddress);\r\n\t\treturn policyAddress;\r\n\t}\r\n\r\n\tfunction convergePolicy(address _currentPolicyAddress) external {\r\n\t\taddressValidator().validateGroup(msg.sender, config().policyGroup());\r\n\r\n\t\tconfig().setPolicy(_currentPolicyAddress);\r\n\t\tPolicySet policySet = PolicySet(config().policySet());\r\n\t\tPolicyGroup policyGroup = PolicyGroup(config().policyGroup());\r\n\t\tfor (uint256 i = 0; i < policySet.count(); i++) {\r\n\t\t\taddress policyAddress = policySet.get(i);\r\n\t\t\tif (policyAddress == _currentPolicyAddress) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tPolicy(policyAddress).kill();\r\n\t\t\tpolicyGroup.deleteGroup(policyAddress);\r\n\t\t}\r\n\t\tpolicySet.deleteAll();\r\n\t\tpolicySet.addSet(_currentPolicyAddress);\r\n\t}\r\n}\r\n\r\n\r\ncontract Policy is Killable, UsingConfig, UsingValidator {\r\n\tusing SafeMath for uint256;\r\n\tIPolicy private _policy;\r\n\tuint256 private _votingEndBlockNumber;\r\n\r\n\tconstructor(address _config, address _innerPolicyAddress)\r\n\t\tpublic\r\n\t\tUsingConfig(_config)\r\n\t{\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().policyFactory()\r\n\t\t);\r\n\r\n\t\t_policy = IPolicy(_innerPolicyAddress);\r\n\t\tsetVotingEndBlockNumber();\r\n\t}\r\n\r\n\tfunction voting() public view returns (bool) {\r\n\t\treturn block.number <= _votingEndBlockNumber;\r\n\t}\r\n\r\n\tfunction rewards(uint256 _lockups, uint256 _assets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _policy.rewards(_lockups, _assets);\r\n\t}\r\n\r\n\tfunction holdersShare(uint256 _amount, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _policy.holdersShare(_amount, _lockups);\r\n\t}\r\n\r\n\tfunction assetValue(uint256 _value, uint256 _lockups)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _policy.assetValue(_value, _lockups);\r\n\t}\r\n\r\n\tfunction authenticationFee(uint256 _assets, uint256 _propertyAssets)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _policy.authenticationFee(_assets, _propertyAssets);\r\n\t}\r\n\r\n\tfunction marketApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn _policy.marketApproval(_agree, _opposite);\r\n\t}\r\n\r\n\tfunction policyApproval(uint256 _agree, uint256 _opposite)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn _policy.policyApproval(_agree, _opposite);\r\n\t}\r\n\r\n\tfunction marketVotingBlocks() external view returns (uint256) {\r\n\t\treturn _policy.marketVotingBlocks();\r\n\t}\r\n\r\n\tfunction policyVotingBlocks() external view returns (uint256) {\r\n\t\treturn _policy.policyVotingBlocks();\r\n\t}\r\n\r\n\tfunction abstentionPenalty(uint256 _count) external view returns (uint256) {\r\n\t\treturn _policy.abstentionPenalty(_count);\r\n\t}\r\n\r\n\tfunction lockUpBlocks() external view returns (uint256) {\r\n\t\treturn _policy.lockUpBlocks();\r\n\t}\r\n\r\n\tfunction vote(address _property, bool _agree) external {\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\r\n\t\trequire(config().policy() != address(this), \"this policy is current\");\r\n\t\trequire(voting(), \"voting deadline is over\");\r\n\t\tVoteCounter voteCounter = VoteCounter(config().voteCounter());\r\n\t\tvoteCounter.addVoteCount(msg.sender, _property, _agree);\r\n\t\tbool result = Policy(config().policy()).policyApproval(\r\n\t\t\tvoteCounter.getAgreeCount(address(this)),\r\n\t\t\tvoteCounter.getOppositeCount(address(this))\r\n\t\t);\r\n\t\tif (result == false) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tPolicyFactory(config().policyFactory()).convergePolicy(address(this));\r\n\t\t_votingEndBlockNumber = 0;\r\n\t}\r\n\r\n\tfunction setVotingEndBlockNumber() private {\r\n\t\tif (config().policy() == address(0)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 tmp = Policy(config().policy()).policyVotingBlocks();\r\n\t\t_votingEndBlockNumber = block.number.add(tmp);\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract Metrics {\r\n\taddress public market;\r\n\taddress public property;\r\n\r\n\tconstructor(address _market, address _property) public {\r\n\t\t//Do not validate because there is no AddressConfig\r\n\t\tmarket = _market;\r\n\t\tproperty = _property;\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract MetricsGroup is\r\n\tUsingConfig,\r\n\tUsingStorage,\r\n\tUsingValidator,\r\n\tIGroup,\r\n\tKillable\r\n{\r\n\tusing SafeMath for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction addGroup(address _addr) external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\r\n\t\trequire(isGroup(_addr) == false, \"already enabled\");\r\n\t\teternalStorage().setBool(getGroupKey(_addr), true);\r\n\t\tuint256 totalCount = eternalStorage().getUint(getTotalCountKey());\r\n\t\ttotalCount = totalCount.add(1);\r\n\t\teternalStorage().setUint(getTotalCountKey(), totalCount);\r\n\t}\r\n\r\n\tfunction isGroup(address _addr) public view returns (bool) {\r\n\t\treturn eternalStorage().getBool(getGroupKey(_addr));\r\n\t}\r\n\r\n\tfunction totalIssuedMetrics() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getTotalCountKey());\r\n\t}\r\n\r\n\tfunction getTotalCountKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_totalCount\"));\r\n\t}\r\n}\r\n\r\n\r\ncontract MetricsFactory is Pausable, UsingConfig, UsingValidator, Killable {\r\n\tevent Create(address indexed _from, address _metrics);\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction create(address _property) external returns (address) {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateGroup(msg.sender, config().marketGroup());\r\n\r\n\t\tMetrics metrics = new Metrics(msg.sender, _property);\r\n\t\tMetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());\r\n\t\taddress metricsAddress = address(metrics);\r\n\t\tmetricsGroup.addGroup(metricsAddress);\r\n\t\temit Create(msg.sender, metricsAddress);\r\n\t\treturn metricsAddress;\r\n\t}\r\n}\r\n\r\n\r\ncontract Market is UsingConfig, IMarket, UsingValidator {\r\n\tusing SafeMath for uint256;\r\n\tbool public enabled;\r\n\taddress public behavior;\r\n\tuint256 private _votingEndBlockNumber;\r\n\tuint256 public issuedMetrics;\r\n\tmapping(bytes32 => bool) private idMap;\r\n\r\n\tconstructor(address _config, address _behavior)\r\n\t\tpublic\r\n\t\tUsingConfig(_config)\r\n\t{\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketFactory()\r\n\t\t);\r\n\r\n\t\tbehavior = _behavior;\r\n\t\tenabled = false;\r\n\t\tuint256 marketVotingBlocks = Policy(config().policy())\r\n\t\t\t.marketVotingBlocks();\r\n\t\t_votingEndBlockNumber = block.number.add(marketVotingBlocks);\r\n\t}\r\n\r\n\tfunction toEnable() external {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().marketFactory()\r\n\t\t);\r\n\t\tenabled = true;\r\n\t}\r\n\r\n\tfunction calculate(address _metrics, uint256 _start, uint256 _end)\r\n\t\texternal\r\n\t\treturns (bool)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\treturn IMarketBehavior(behavior).calculate(_metrics, _start, _end);\r\n\t}\r\n\r\n\tfunction authenticate(\r\n\t\taddress _prop,\r\n\t\tstring memory _args1,\r\n\t\tstring memory _args2,\r\n\t\tstring memory _args3,\r\n\t\tstring memory _args4,\r\n\t\tstring memory _args5\r\n\t) public returns (address) {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tProperty(_prop).author()\r\n\t\t);\r\n\t\trequire(enabled, \"market is not enabled\");\r\n\r\n\t\tuint256 len = bytes(_args1).length;\r\n\t\trequire(len > 0, \"id is required\");\r\n\r\n\t\treturn\r\n\t\t\tIMarketBehavior(behavior).authenticate(\r\n\t\t\t\t_prop,\r\n\t\t\t\t_args1,\r\n\t\t\t\t_args2,\r\n\t\t\t\t_args3,\r\n\t\t\t\t_args4,\r\n\t\t\t\t_args5,\r\n\t\t\t\taddress(this)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getAuthenticationFee(address _property)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 tokenValue = Lockup(config().lockup()).getPropertyValue(\r\n\t\t\t_property\r\n\t\t);\r\n\t\tPolicy policy = Policy(config().policy());\r\n\t\tMetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());\r\n\t\treturn\r\n\t\t\tpolicy.authenticationFee(\r\n\t\t\t\tmetricsGroup.totalIssuedMetrics(),\r\n\t\t\t\ttokenValue\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction authenticatedCallback(address _property, bytes32 _idHash)\r\n\t\texternal\r\n\t\treturns (address)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, behavior);\r\n\t\trequire(enabled, \"market is not enabled\");\r\n\r\n\t\trequire(idMap[_idHash] == false, \"id is duplicated\");\r\n\t\tidMap[_idHash] = true;\r\n\t\taddress sender = Property(_property).author();\r\n\t\tMetricsFactory metricsFactory = MetricsFactory(\r\n\t\t\tconfig().metricsFactory()\r\n\t\t);\r\n\t\taddress metrics = metricsFactory.create(_property);\r\n\t\tuint256 authenticationFee = getAuthenticationFee(_property);\r\n\t\trequire(\r\n\t\t\tDev(config().token()).fee(sender, authenticationFee),\r\n\t\t\t\"dev fee failed\"\r\n\t\t);\r\n\t\tissuedMetrics = issuedMetrics.add(1);\r\n\t\treturn metrics;\r\n\t}\r\n\r\n\tfunction vote(address _property, bool _agree) external {\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\t\trequire(enabled == false, \"market is already enabled\");\r\n\t\trequire(\r\n\t\t\tblock.number <= _votingEndBlockNumber,\r\n\t\t\t\"voting deadline is over\"\r\n\t\t);\r\n\r\n\t\tVoteCounter voteCounter = VoteCounter(config().voteCounter());\r\n\t\tvoteCounter.addVoteCount(msg.sender, _property, _agree);\r\n\t\tenabled = Policy(config().policy()).marketApproval(\r\n\t\t\tvoteCounter.getAgreeCount(address(this)),\r\n\t\t\tvoteCounter.getOppositeCount(address(this))\r\n\t\t);\r\n\t}\r\n\r\n\tfunction schema() external view returns (string memory) {\r\n\t\treturn IMarketBehavior(behavior).schema();\r\n\t}\r\n}\r\n\r\n// prettier-ignore\r\n\r\n\r\n\r\ncontract WithdrawStorage is\r\n\tUsingStorage,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t// RewardsAmount\r\n\tfunction setRewardsAmount(address _property, uint256 _value) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(getRewardsAmountKey(_property), _value);\r\n\t}\r\n\r\n\tfunction getRewardsAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getRewardsAmountKey(_property));\r\n\t}\r\n\r\n\tfunction getRewardsAmountKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_rewardsAmount\", _property));\r\n\t}\r\n\r\n\t// CumulativePrice\r\n\tfunction setCumulativePrice(address _property, uint256 _value)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(getCumulativePriceKey(_property), _value);\r\n\t}\r\n\r\n\tfunction getCumulativePrice(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getCumulativePriceKey(_property));\r\n\t}\r\n\r\n\tfunction getCumulativePriceKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_cumulativePrice\", _property));\r\n\t}\r\n\r\n\t// WithdrawalLimitTotal\r\n\tfunction setWithdrawalLimitTotal(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetWithdrawalLimitTotalKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getWithdrawalLimitTotal(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetWithdrawalLimitTotalKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getWithdrawalLimitTotalKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_withdrawalLimitTotal\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// WithdrawalLimitBalance\r\n\tfunction setWithdrawalLimitBalance(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetWithdrawalLimitBalanceKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getWithdrawalLimitBalance(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetWithdrawalLimitBalanceKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getWithdrawalLimitBalanceKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_withdrawalLimitBalance\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//LastWithdrawalPrice\r\n\tfunction setLastWithdrawalPrice(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetLastWithdrawalPriceKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLastWithdrawalPrice(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetLastWithdrawalPriceKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getLastWithdrawalPriceKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastWithdrawalPrice\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//PendingWithdrawal\r\n\tfunction setPendingWithdrawal(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().withdraw());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetPendingWithdrawalKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getPendingWithdrawal(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getPendingWithdrawalKey(_property, _user));\r\n\t}\r\n\r\n\tfunction getPendingWithdrawalKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(abi.encodePacked(\"_pendingWithdrawal\", _property, _user));\r\n\t}\r\n}\r\n\r\n\r\ncontract Withdraw is Pausable, UsingConfig, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\tusing Decimals for uint256;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction withdraw(address _property) external {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\r\n\t\tuint256 value = _calculateWithdrawableAmount(_property, msg.sender);\r\n\t\trequire(value != 0, \"withdraw value is 0\");\r\n\t\tuint256 price = getStorage().getCumulativePrice(_property);\r\n\t\tgetStorage().setLastWithdrawalPrice(_property, msg.sender, price);\r\n\t\tgetStorage().setPendingWithdrawal(_property, msg.sender, 0);\r\n\t\tERC20Mintable erc20 = ERC20Mintable(config().token());\r\n\t\trequire(erc20.mint(msg.sender, value), \"dev mint failed\");\r\n\t}\r\n\r\n\tfunction beforeBalanceChange(address _property, address _from, address _to)\r\n\t\texternal\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\tuint256 price = getStorage().getCumulativePrice(_property);\r\n\t\tuint256 amountFrom = _calculateAmount(_property, _from);\r\n\t\tuint256 amountTo = _calculateAmount(_property, _to);\r\n\t\tgetStorage().setLastWithdrawalPrice(_property, _from, price);\r\n\t\tgetStorage().setLastWithdrawalPrice(_property, _to, price);\r\n\t\tuint256 pendFrom = getStorage().getPendingWithdrawal(_property, _from);\r\n\t\tuint256 pendTo = getStorage().getPendingWithdrawal(_property, _to);\r\n\t\tgetStorage().setPendingWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_from,\r\n\t\t\tpendFrom.add(amountFrom)\r\n\t\t);\r\n\t\tgetStorage().setPendingWithdrawal(_property, _to, pendTo.add(amountTo));\r\n\t\tuint256 totalLimit = getStorage().getWithdrawalLimitTotal(\r\n\t\t\t_property,\r\n\t\t\t_to\r\n\t\t);\r\n\t\tuint256 total = getStorage().getRewardsAmount(_property);\r\n\t\tif (totalLimit != total) {\r\n\t\t\tgetStorage().setWithdrawalLimitTotal(_property, _to, total);\r\n\t\t\tgetStorage().setWithdrawalLimitBalance(\r\n\t\t\t\t_property,\r\n\t\t\t\t_to,\r\n\t\t\t\tERC20(_property).balanceOf(_to)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction increment(address _property, uint256 _allocationResult) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\t\tuint256 priceValue = _allocationResult.outOf(\r\n\t\t\tERC20(_property).totalSupply()\r\n\t\t);\r\n\t\tuint256 total = getStorage().getRewardsAmount(_property);\r\n\t\tgetStorage().setRewardsAmount(_property, total.add(_allocationResult));\r\n\t\tuint256 price = getStorage().getCumulativePrice(_property);\r\n\t\tgetStorage().setCumulativePrice(_property, price.add(priceValue));\r\n\t}\r\n\r\n\tfunction getRewardsAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getStorage().getRewardsAmount(_property);\r\n\t}\r\n\r\n\tfunction _calculateAmount(address _property, address _user)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 _last = getStorage().getLastWithdrawalPrice(_property, _user);\r\n\t\tuint256 totalLimit = getStorage().getWithdrawalLimitTotal(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\t\tuint256 balanceLimit = getStorage().getWithdrawalLimitBalance(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\t\tuint256 price = getStorage().getCumulativePrice(_property);\r\n\t\tuint256 priceGap = price.sub(_last);\r\n\t\tuint256 balance = ERC20(_property).balanceOf(_user);\r\n\t\tuint256 total = getStorage().getRewardsAmount(_property);\r\n\t\tif (totalLimit == total) {\r\n\t\t\tbalance = balanceLimit;\r\n\t\t}\r\n\t\tuint256 value = priceGap.mul(balance);\r\n\t\treturn value.div(Decimals.basis());\r\n\t}\r\n\r\n\tfunction calculateAmount(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _calculateAmount(_property, _user);\r\n\t}\r\n\r\n\tfunction _calculateWithdrawableAmount(address _property, address _user)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 _value = _calculateAmount(_property, _user);\r\n\t\tuint256 value = _value.add(\r\n\t\t\tgetStorage().getPendingWithdrawal(_property, _user)\r\n\t\t);\r\n\t\treturn value;\r\n\t}\r\n\r\n\tfunction calculateWithdrawableAmount(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _calculateWithdrawableAmount(_property, _user);\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (WithdrawStorage) {\r\n\t\treturn WithdrawStorage(config().withdrawStorage());\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract AllocatorStorage is\r\n\tUsingStorage,\r\n\tUsingConfig,\r\n\tUsingValidator,\r\n\tKillable\r\n{\r\n\tconstructor(address _config) public UsingConfig(_config) UsingStorage() {}\r\n\r\n\t// Last Block Number\r\n\tfunction setLastBlockNumber(address _metrics, uint256 _blocks) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setUint(getLastBlockNumberKey(_metrics), _blocks);\r\n\t}\r\n\r\n\tfunction getLastBlockNumber(address _metrics)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getLastBlockNumberKey(_metrics));\r\n\t}\r\n\r\n\tfunction getLastBlockNumberKey(address _metrics)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_lastBlockNumber\", _metrics));\r\n\t}\r\n\r\n\t// Base Block Number\r\n\tfunction setBaseBlockNumber(uint256 _blockNumber) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setUint(getBaseBlockNumberKey(), _blockNumber);\r\n\t}\r\n\r\n\tfunction getBaseBlockNumber() external view returns (uint256) {\r\n\t\treturn eternalStorage().getUint(getBaseBlockNumberKey());\r\n\t}\r\n\r\n\tfunction getBaseBlockNumberKey() private pure returns (bytes32) {\r\n\t\treturn keccak256(abi.encodePacked(\"_baseBlockNumber\"));\r\n\t}\r\n\r\n\t// PendingIncrement\r\n\tfunction setPendingIncrement(address _metrics, bool value) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setBool(getPendingIncrementKey(_metrics), value);\r\n\t}\r\n\r\n\tfunction getPendingIncrement(address _metrics)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\treturn eternalStorage().getBool(getPendingIncrementKey(_metrics));\r\n\t}\r\n\r\n\tfunction getPendingIncrementKey(address _metrics)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_pendingIncrement\", _metrics));\r\n\t}\r\n\r\n\t// LastAllocationBlockEachMetrics\r\n\tfunction setLastAllocationBlockEachMetrics(\r\n\t\taddress _metrics,\r\n\t\tuint256 blockNumber\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetLastAllocationBlockEachMetricsKey(_metrics),\r\n\t\t\tblockNumber\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLastAllocationBlockEachMetrics(address _metrics)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetLastAllocationBlockEachMetricsKey(_metrics)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getLastAllocationBlockEachMetricsKey(address _addr)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastAllocationBlockEachMetrics\", _addr)\r\n\t\t\t);\r\n\t}\r\n\r\n\t// LastAssetValueEachMetrics\r\n\tfunction setLastAssetValueEachMetrics(address _metrics, uint256 value)\r\n\t\texternal\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetLastAssetValueEachMetricsKey(_metrics),\r\n\t\t\tvalue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLastAssetValueEachMetrics(address _metrics)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getLastAssetValueEachMetricsKey(_metrics));\r\n\t}\r\n\r\n\tfunction getLastAssetValueEachMetricsKey(address _addr)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_lastAssetValueEachMetrics\", _addr));\r\n\t}\r\n\r\n\t// lastAssetValueEachMarketPerBlock\r\n\tfunction setLastAssetValueEachMarketPerBlock(address _market, uint256 value)\r\n\t\texternal\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetLastAssetValueEachMarketPerBlockKey(_market),\r\n\t\t\tvalue\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLastAssetValueEachMarketPerBlock(address _market)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetLastAssetValueEachMarketPerBlockKey(_market)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getLastAssetValueEachMarketPerBlockKey(address _addr)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastAssetValueEachMarketPerBlock\", _addr)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n\r\ncontract Allocator is\r\n\tKillable,\r\n\tOwnable,\r\n\tUsingConfig,\r\n\tIAllocator,\r\n\tUsingValidator\r\n{\r\n\tusing SafeMath for uint256;\r\n\tusing Decimals for uint256;\r\n\tevent BeforeAllocation(\r\n\t\tuint256 _blocks,\r\n\t\tuint256 _mint,\r\n\t\tuint256 _value,\r\n\t\tuint256 _marketValue,\r\n\t\tuint256 _assets,\r\n\t\tuint256 _totalAssets\r\n\t);\r\n\r\n\tuint64 public constant basis = 1000000000000000000;\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction allocate(address _metrics) external {\r\n\t\taddressValidator().validateGroup(_metrics, config().metricsGroup());\r\n\r\n\t\tvalidateTargetPeriod(_metrics);\r\n\t\taddress market = Metrics(_metrics).market();\r\n\t\tgetStorage().setPendingIncrement(_metrics, true);\r\n\t\tMarket(market).calculate(\r\n\t\t\t_metrics,\r\n\t\t\tgetLastAllocationBlockNumber(_metrics),\r\n\t\t\tblock.number\r\n\t\t);\r\n\t\tgetStorage().setLastBlockNumber(_metrics, block.number);\r\n\t}\r\n\r\n\tfunction calculatedCallback(address _metrics, uint256 _value) external {\r\n\t\taddressValidator().validateGroup(_metrics, config().metricsGroup());\r\n\r\n\t\tMetrics metrics = Metrics(_metrics);\r\n\t\tMarket market = Market(metrics.market());\r\n\t\trequire(\r\n\t\t\tmsg.sender == market.behavior(),\r\n\t\t\t\"don't call from other than market behavior\"\r\n\t\t);\r\n\t\trequire(\r\n\t\t\tgetStorage().getPendingIncrement(_metrics),\r\n\t\t\t\"not asking for an indicator\"\r\n\t\t);\r\n\t\tPolicy policy = Policy(config().policy());\r\n\t\tuint256 totalAssets = MetricsGroup(config().metricsGroup())\r\n\t\t\t.totalIssuedMetrics();\r\n\t\tuint256 lockupValue = Lockup(config().lockup()).getPropertyValue(\r\n\t\t\tmetrics.property()\r\n\t\t);\r\n\t\tuint256 blocks = block.number.sub(\r\n\t\t\tgetStorage().getLastAllocationBlockEachMetrics(_metrics)\r\n\t\t);\r\n\t\tuint256 mint = policy.rewards(lockupValue, totalAssets);\r\n\t\tuint256 value = (policy.assetValue(_value, lockupValue).mul(basis)).div(\r\n\t\t\tblocks\r\n\t\t);\r\n\t\tuint256 marketValue = getStorage()\r\n\t\t\t.getLastAssetValueEachMarketPerBlock(metrics.market())\r\n\t\t\t.sub(getStorage().getLastAssetValueEachMetrics(_metrics))\r\n\t\t\t.add(value);\r\n\t\tuint256 assets = market.issuedMetrics();\r\n\t\tgetStorage().setLastAllocationBlockEachMetrics(_metrics, block.number);\r\n\t\tgetStorage().setLastAssetValueEachMetrics(_metrics, value);\r\n\t\tgetStorage().setLastAssetValueEachMarketPerBlock(\r\n\t\t\tmetrics.market(),\r\n\t\t\tmarketValue\r\n\t\t);\r\n\t\temit BeforeAllocation(\r\n\t\t\tblocks,\r\n\t\t\tmint,\r\n\t\t\tvalue,\r\n\t\t\tmarketValue,\r\n\t\t\tassets,\r\n\t\t\ttotalAssets\r\n\t\t);\r\n\t\tuint256 result = allocation(\r\n\t\t\tblocks,\r\n\t\t\tmint,\r\n\t\t\tvalue,\r\n\t\t\tmarketValue,\r\n\t\t\tassets,\r\n\t\t\ttotalAssets\r\n\t\t);\r\n\t\tincrement(metrics.property(), result, lockupValue);\r\n\t\tgetStorage().setPendingIncrement(_metrics, false);\r\n\t}\r\n\r\n\tfunction increment(address _property, uint256 _reward, uint256 _lockup)\r\n\t\tprivate\r\n\t{\r\n\t\tuint256 holders = Policy(config().policy()).holdersShare(\r\n\t\t\t_reward,\r\n\t\t\t_lockup\r\n\t\t);\r\n\t\tuint256 interest = _reward.sub(holders);\r\n\t\tWithdraw(config().withdraw()).increment(_property, holders);\r\n\t\tLockup(config().lockup()).increment(_property, interest);\r\n\t}\r\n\r\n\tfunction beforeBalanceChange(address _property, address _from, address _to)\r\n\t\texternal\r\n\t{\r\n\t\taddressValidator().validateGroup(msg.sender, config().propertyGroup());\r\n\r\n\t\tWithdraw(config().withdraw()).beforeBalanceChange(\r\n\t\t\t_property,\r\n\t\t\t_from,\r\n\t\t\t_to\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getRewardsAmount(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn Withdraw(config().withdraw()).getRewardsAmount(_property);\r\n\t}\r\n\r\n\tfunction allocation(\r\n\t\tuint256 _blocks,\r\n\t\tuint256 _mint,\r\n\t\tuint256 _value,\r\n\t\tuint256 _marketValue,\r\n\t\tuint256 _assets,\r\n\t\tuint256 _totalAssets\r\n\t) public pure returns (uint256) {\r\n\t\tuint256 aShare = _totalAssets > 0\r\n\t\t\t? _assets.outOf(_totalAssets)\r\n\t\t\t: Decimals.basis();\r\n\t\tuint256 vShare = _marketValue > 0\r\n\t\t\t? _value.outOf(_marketValue)\r\n\t\t\t: Decimals.basis();\r\n\t\tuint256 mint = _mint.mul(_blocks);\r\n\t\treturn\r\n\t\t\tmint.mul(aShare).mul(vShare).div(Decimals.basis()).div(\r\n\t\t\t\tDecimals.basis()\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction validateTargetPeriod(address _metrics) private {\r\n\t\taddress property = Metrics(_metrics).property();\r\n\t\tVoteTimes voteTimes = VoteTimes(config().voteTimes());\r\n\t\tuint256 abstentionCount = voteTimes.getAbstentionTimes(property);\r\n\t\tuint256 notTargetPeriod = Policy(config().policy()).abstentionPenalty(\r\n\t\t\tabstentionCount\r\n\t\t);\r\n\t\tif (notTargetPeriod == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tuint256 blockNumber = getLastAllocationBlockNumber(_metrics);\r\n\t\tuint256 notTargetBlockNumber = blockNumber.add(notTargetPeriod);\r\n\t\trequire(\r\n\t\t\tnotTargetBlockNumber < block.number,\r\n\t\t\t\"outside the target period\"\r\n\t\t);\r\n\t\tgetStorage().setLastBlockNumber(_metrics, notTargetBlockNumber);\r\n\t\tvoteTimes.resetVoteTimesByProperty(property);\r\n\t}\r\n\r\n\tfunction getLastAllocationBlockNumber(address _metrics)\r\n\t\tprivate\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 blockNumber = getStorage().getLastBlockNumber(_metrics);\r\n\t\tuint256 baseBlockNumber = getStorage().getBaseBlockNumber();\r\n\t\tif (baseBlockNumber == 0) {\r\n\t\t\tgetStorage().setBaseBlockNumber(block.number);\r\n\t\t}\r\n\t\tuint256 lastAllocationBlockNumber = blockNumber > 0\r\n\t\t\t? blockNumber\r\n\t\t\t: getStorage().getBaseBlockNumber();\r\n\t\treturn lastAllocationBlockNumber;\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (AllocatorStorage) {\r\n\t\treturn AllocatorStorage(config().allocatorStorage());\r\n\t}\r\n}\r\n\r\n\r\ncontract Property is ERC20, ERC20Detailed, UsingConfig, UsingValidator {\r\n\tuint8 private constant _decimals = 18;\r\n\tuint256 private constant _supply = 10000000;\r\n\taddress public author;\r\n\r\n\tconstructor(\r\n\t\taddress _config,\r\n\t\taddress _own,\r\n\t\tstring memory _name,\r\n\t\tstring memory _symbol\r\n\t) public UsingConfig(_config) ERC20Detailed(_name, _symbol, _decimals) {\r\n\t\taddressValidator().validateAddress(\r\n\t\t\tmsg.sender,\r\n\t\t\tconfig().propertyFactory()\r\n\t\t);\r\n\r\n\t\tauthor = _own;\r\n\t\t_mint(author, _supply);\r\n\t}\r\n\r\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\r\n\t\taddressValidator().validateIllegalAddress(_to);\r\n\t\trequire(_value != 0, \"illegal transfer value\");\r\n\r\n\t\tAllocator(config().allocator()).beforeBalanceChange(\r\n\t\t\taddress(this),\r\n\t\t\tmsg.sender,\r\n\t\t\t_to\r\n\t\t);\r\n\t\t_transfer(msg.sender, _to, _value);\r\n\t}\r\n\r\n\tfunction withdraw(address _sender, uint256 _value) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\tERC20 devToken = ERC20(config().token());\r\n\t\tdevToken.transfer(_sender, _value);\r\n\t}\r\n}\r\n\r\n\r\n\r\ncontract LockupStorage is UsingConfig, UsingStorage, UsingValidator, Killable {\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\t//Value\r\n\tfunction setValue(address _property, address _sender, uint256 _value)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\tbytes32 key = getValueKey(_property, _sender);\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tbytes32 key = getValueKey(_property, _sender);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getValueKey(address _property, address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_value\", _property, _sender));\r\n\t}\r\n\r\n\t//PropertyValue\r\n\tfunction setPropertyValue(address _property, uint256 _value)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\tbytes32 key = getPropertyValueKey(_property);\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tbytes32 key = getPropertyValueKey(_property);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getPropertyValueKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_propertyValue\", _property));\r\n\t}\r\n\r\n\t//WithdrawalStatus\r\n\tfunction setWithdrawalStatus(\r\n\t\taddress _property,\r\n\t\taddress _from,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\tbytes32 key = getWithdrawalStatusKey(_property, _from);\r\n\t\teternalStorage().setUint(key, _value);\r\n\t}\r\n\r\n\tfunction getWithdrawalStatus(address _property, address _from)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tbytes32 key = getWithdrawalStatusKey(_property, _from);\r\n\t\treturn eternalStorage().getUint(key);\r\n\t}\r\n\r\n\tfunction getWithdrawalStatusKey(address _property, address _sender)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_withdrawalStatus\", _property, _sender)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//InterestPrice\r\n\tfunction setInterestPrice(address _property, uint256 _value)\r\n\t\texternal\r\n\t\treturns (uint256)\r\n\t{\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\teternalStorage().setUint(getInterestPriceKey(_property), _value);\r\n\t}\r\n\r\n\tfunction getInterestPrice(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn eternalStorage().getUint(getInterestPriceKey(_property));\r\n\t}\r\n\r\n\tfunction getInterestPriceKey(address _property)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encodePacked(\"_interestTotals\", _property));\r\n\t}\r\n\r\n\t//LastInterestPrice\r\n\tfunction setLastInterestPrice(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetLastInterestPriceKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getLastInterestPrice(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(getLastInterestPriceKey(_property, _user));\r\n\t}\r\n\r\n\tfunction getLastInterestPriceKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_lastLastInterestPrice\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\t//PendingWithdrawal\r\n\tfunction setPendingInterestWithdrawal(\r\n\t\taddress _property,\r\n\t\taddress _user,\r\n\t\tuint256 _value\r\n\t) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().lockup());\r\n\r\n\t\teternalStorage().setUint(\r\n\t\t\tgetPendingInterestWithdrawalKey(_property, _user),\r\n\t\t\t_value\r\n\t\t);\r\n\t}\r\n\r\n\tfunction getPendingInterestWithdrawal(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn\r\n\t\t\teternalStorage().getUint(\r\n\t\t\t\tgetPendingInterestWithdrawalKey(_property, _user)\r\n\t\t\t);\r\n\t}\r\n\r\n\tfunction getPendingInterestWithdrawalKey(address _property, address _user)\r\n\t\tprivate\r\n\t\tpure\r\n\t\treturns (bytes32)\r\n\t{\r\n\t\treturn\r\n\t\t\tkeccak256(\r\n\t\t\t\tabi.encodePacked(\"_pendingInterestWithdrawal\", _property, _user)\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\n\r\ncontract Lockup is Pausable, UsingConfig, UsingValidator, Killable {\r\n\tusing SafeMath for uint256;\r\n\tusing Decimals for uint256;\r\n\tevent Lockedup(address _from, address _property, uint256 _value);\r\n\r\n\t// solium-disable-next-line no-empty-blocks\r\n\tconstructor(address _config) public UsingConfig(_config) {}\r\n\r\n\tfunction lockup(address _from, address _property, uint256 _value) external {\r\n\t\trequire(paused() == false, \"You cannot use that\");\r\n\t\taddressValidator().validateAddress(msg.sender, config().token());\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\t\trequire(_value != 0, \"illegal lockup value\");\r\n\r\n\t\tbool isWaiting = getStorage().getWithdrawalStatus(_property, _from) !=\r\n\t\t\t0;\r\n\t\trequire(isWaiting == false, \"lockup is already canceled\");\r\n\t\tupdatePendingInterestWithdrawal(_property, _from);\r\n\t\taddValue(_property, _from, _value);\r\n\t\taddPropertyValue(_property, _value);\r\n\t\tgetStorage().setLastInterestPrice(\r\n\t\t\t_property,\r\n\t\t\t_from,\r\n\t\t\tgetStorage().getInterestPrice(_property)\r\n\t\t);\r\n\t\temit Lockedup(_from, _property, _value);\r\n\t}\r\n\r\n\tfunction cancel(address _property) external {\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\r\n\t\trequire(hasValue(_property, msg.sender), \"dev token is not locked\");\r\n\t\tbool isWaiting = getStorage().getWithdrawalStatus(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender\r\n\t\t) !=\r\n\t\t\t0;\r\n\t\trequire(isWaiting == false, \"lockup is already canceled\");\r\n\t\tuint256 blockNumber = Policy(config().policy()).lockUpBlocks();\r\n\t\tblockNumber = blockNumber.add(block.number);\r\n\t\tgetStorage().setWithdrawalStatus(_property, msg.sender, blockNumber);\r\n\t}\r\n\r\n\tfunction withdraw(address _property) external {\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\r\n\t\trequire(possible(_property, msg.sender), \"waiting for release\");\r\n\t\tuint256 lockupedValue = getStorage().getValue(_property, msg.sender);\r\n\t\trequire(lockupedValue != 0, \"dev token is not locked\");\r\n\t\tupdatePendingInterestWithdrawal(_property, msg.sender);\r\n\t\tProperty(_property).withdraw(msg.sender, lockupedValue);\r\n\t\tgetStorage().setValue(_property, msg.sender, 0);\r\n\t\tsubPropertyValue(_property, lockupedValue);\r\n\t\tgetStorage().setWithdrawalStatus(_property, msg.sender, 0);\r\n\t}\r\n\r\n\tfunction increment(address _property, uint256 _interestResult) external {\r\n\t\taddressValidator().validateAddress(msg.sender, config().allocator());\r\n\t\tuint256 priceValue = _interestResult.outOf(\r\n\t\t\tgetStorage().getPropertyValue(_property)\r\n\t\t);\r\n\t\tincrementInterest(_property, priceValue);\r\n\t}\r\n\r\n\tfunction _calculateInterestAmount(address _property, address _user)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\tuint256 _last = getStorage().getLastInterestPrice(_property, _user);\r\n\t\tuint256 price = getStorage().getInterestPrice(_property);\r\n\t\tuint256 priceGap = price.sub(_last);\r\n\t\tuint256 lockupedValue = getStorage().getValue(_property, _user);\r\n\t\tuint256 value = priceGap.mul(lockupedValue);\r\n\t\treturn value.div(Decimals.basis());\r\n\t}\r\n\r\n\tfunction calculateInterestAmount(address _property, address _user)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn _calculateInterestAmount(_property, _user);\r\n\t}\r\n\r\n\tfunction _calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) private view returns (uint256) {\r\n\t\tuint256 pending = getStorage().getPendingInterestWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\t\treturn _calculateInterestAmount(_property, _user).add(pending);\r\n\t}\r\n\r\n\tfunction calculateWithdrawableInterestAmount(\r\n\t\taddress _property,\r\n\t\taddress _user\r\n\t) external view returns (uint256) {\r\n\t\treturn _calculateWithdrawableInterestAmount(_property, _user);\r\n\t}\r\n\r\n\tfunction withdrawInterest(address _property) external {\r\n\t\taddressValidator().validateGroup(_property, config().propertyGroup());\r\n\r\n\t\tuint256 value = _calculateWithdrawableInterestAmount(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender\r\n\t\t);\r\n\t\trequire(value > 0, \"your interest amount is 0\");\r\n\t\tgetStorage().setLastInterestPrice(\r\n\t\t\t_property,\r\n\t\t\tmsg.sender,\r\n\t\t\tgetStorage().getInterestPrice(_property)\r\n\t\t);\r\n\t\tgetStorage().setPendingInterestWithdrawal(_property, msg.sender, 0);\r\n\t\tERC20Mintable erc20 = ERC20Mintable(config().token());\r\n\t\trequire(erc20.mint(msg.sender, value), \"dev mint failed\");\r\n\t}\r\n\r\n\tfunction getPropertyValue(address _property)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getStorage().getPropertyValue(_property);\r\n\t}\r\n\r\n\tfunction getValue(address _property, address _sender)\r\n\t\texternal\r\n\t\tview\r\n\t\treturns (uint256)\r\n\t{\r\n\t\treturn getStorage().getValue(_property, _sender);\r\n\t}\r\n\r\n\tfunction addValue(address _property, address _sender, uint256 _value)\r\n\t\tprivate\r\n\t{\r\n\t\tuint256 value = getStorage().getValue(_property, _sender);\r\n\t\tvalue = value.add(_value);\r\n\t\tgetStorage().setValue(_property, _sender, value);\r\n\t}\r\n\r\n\tfunction hasValue(address _property, address _sender)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\tuint256 value = getStorage().getValue(_property, _sender);\r\n\t\treturn value != 0;\r\n\t}\r\n\r\n\tfunction addPropertyValue(address _property, uint256 _value) private {\r\n\t\tuint256 value = getStorage().getPropertyValue(_property);\r\n\t\tvalue = value.add(_value);\r\n\t\tgetStorage().setPropertyValue(_property, value);\r\n\t}\r\n\r\n\tfunction subPropertyValue(address _property, uint256 _value) private {\r\n\t\tuint256 value = getStorage().getPropertyValue(_property);\r\n\t\tvalue = value.sub(_value);\r\n\t\tgetStorage().setPropertyValue(_property, value);\r\n\t}\r\n\r\n\tfunction incrementInterest(address _property, uint256 _priceValue) private {\r\n\t\tuint256 price = getStorage().getInterestPrice(_property);\r\n\t\tgetStorage().setInterestPrice(_property, price.add(_priceValue));\r\n\t}\r\n\r\n\tfunction updatePendingInterestWithdrawal(address _property, address _user)\r\n\t\tprivate\r\n\t{\r\n\t\tuint256 pending = getStorage().getPendingInterestWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_user\r\n\t\t);\r\n\t\tgetStorage().setPendingInterestWithdrawal(\r\n\t\t\t_property,\r\n\t\t\t_user,\r\n\t\t\t_calculateInterestAmount(_property, _user).add(pending)\r\n\t\t);\r\n\t}\r\n\r\n\tfunction possible(address _property, address _from)\r\n\t\tprivate\r\n\t\tview\r\n\t\treturns (bool)\r\n\t{\r\n\t\tuint256 blockNumber = getStorage().getWithdrawalStatus(\r\n\t\t\t_property,\r\n\t\t\t_from\r\n\t\t);\r\n\t\tif (blockNumber == 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn blockNumber <= block.number;\r\n\t}\r\n\r\n\tfunction getStorage() private view returns (LockupStorage) {\r\n\t\treturn LockupStorage(config().lockupStorage());\r\n\t}\r\n}\r\n\r\n\r\ncontract Dev is\r\n\tERC20Detailed,\r\n\tERC20Mintable,\r\n\tERC20Burnable,\r\n\tUsingConfig,\r\n\tUsingValidator\r\n{\r\n\tconstructor(address _config)\r\n\t\tpublic\r\n\t\tERC20Detailed(\"Dev\", \"DEV\", 18)\r\n\t\tUsingConfig(_config)\r\n\t{}\r\n\r\n\tfunction deposit(address _to, uint256 _amount) external returns (bool) {\r\n\t\trequire(transfer(_to, _amount), \"dev transfer failed\");\r\n\t\tlock(msg.sender, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction depositFrom(address _from, address _to, uint256 _amount)\r\n\t\texternal\r\n\t\treturns (bool)\r\n\t{\r\n\t\trequire(transferFrom(_from, _to, _amount), \"dev transferFrom failed\");\r\n\t\tlock(_from, _to, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction fee(address _from, uint256 _amount) external returns (bool) {\r\n\t\taddressValidator().validateGroup(msg.sender, config().marketGroup());\r\n\t\t_burn(_from, _amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction lock(address _from, address _to, uint256 _amount) private {\r\n\t\tLockup(config().lockup()).lockup(_from, _to, _amount);\r\n\t}\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Dev","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000001d415aa39d647834786eb9b5a333a50e9935b796","EVMVersion":"Default","Library":"","LicenseType":"MPL-2.0","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dffb01f2ba3c8bee6eb59608a87feb6af970340867d35d88ec02987eecc258ea"}]