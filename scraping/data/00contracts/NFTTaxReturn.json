[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTTaxReturns.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ╔═╗─╔╦═══╦════╗╔════╦═══╦═╗╔═╗╔═══╦═══╦═══╦══╦═══╦═══╗\\n// ║║╚╗║║╔══╣╔╗╔╗║║╔╗╔╗║╔═╗╠╗╚╝╔╝║╔═╗║╔══╣╔══╩╣╠╣╔═╗║╔══╝\\n// ║╔╗╚╝║╚══╬╝║║╚╝╚╝║║╚╣║─║║╚╗╔╝─║║─║║╚══╣╚══╗║║║║─╚╣╚══╗\\n// ║║╚╗║║╔══╝─║║────║║─║╚═╝║╔╝╚╗─║║─║║╔══╣╔══╝║║║║─╔╣╔══╝\\n// ║║─║║║║────║║────║║─║╔═╗╠╝╔╗╚╗║╚═╝║║──║║──╔╣╠╣╚═╝║╚══╗\\n// ╚╝─╚═╩╝────╚╝────╚╝─╚╝─╚╩═╝╚═╝╚═══╩╝──╚╝──╚══╩═══╩═══╝\\n// Not Financial Advice: The avoidance of taxes is the only intellectual pursuit that still carries any reward. - John Maynard Keynes\\n// NFT Tax Office is not a real tax office.\\n\\nimport \\\"./core/Yield.sol\\\";\\n\\ncontract NFTTaxReturns is Yield {\\n    constructor(\\n        address targetAddress,\\n        address rewardAddress,\\n        uint256 baseRate,\\n        uint256 rewardFrequency,\\n        uint256 initialReward,\\n        uint256 stakeMultiplier\\n    )\\n        Yield(\\n            targetAddress,\\n            rewardAddress,\\n            baseRate,\\n            rewardFrequency,\\n            initialReward,\\n            stakeMultiplier\\n        )\\n    {}\\n}\"\r\n    },\r\n    \"contracts/core/Yield.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ╔═╗─╔╦═══╦════╗╔════╦═══╦═╗╔═╗╔═══╦═══╦═══╦══╦═══╦═══╗\\n// ║║╚╗║║╔══╣╔╗╔╗║║╔╗╔╗║╔═╗╠╗╚╝╔╝║╔═╗║╔══╣╔══╩╣╠╣╔═╗║╔══╝\\n// ║╔╗╚╝║╚══╬╝║║╚╝╚╝║║╚╣║─║║╚╗╔╝─║║─║║╚══╣╚══╗║║║║─╚╣╚══╗\\n// ║║╚╗║║╔══╝─║║────║║─║╚═╝║╔╝╚╗─║║─║║╔══╣╔══╝║║║║─╔╣╔══╝\\n// ║║─║║║║────║║────║║─║╔═╗╠╝╔╗╚╗║╚═╝║║──║║──╔╣╠╣╚═╝║╚══╗\\n// ╚╝─╚═╩╝────╚╝────╚╝─╚╝─╚╩═╝╚═╝╚═══╩╝──╚╝──╚══╩═══╩═══╝\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\\nimport \\\"./Stake.sol\\\";\\nimport \\\"../common/interfaces/Iyield.sol\\\";\\nimport \\\"../common/interfaces/Icollection.sol\\\";\\nimport \\\"../common/interfaces/IIRS.sol\\\";\\n\\ncontract Yield is Iyield, Stake, Ownable {\\n    struct TokenStatus {\\n        uint128 lastClaimTime;\\n        uint128 pendingReward;\\n    }\\n\\n    bool public isStakingEnabled;\\n    bool public isClaimingEnabled;\\n\\n    address public immutable rewardAddress;\\n    uint256 public immutable rewardRate;\\n    uint256 public immutable rewardFrequency;\\n    uint256 public immutable initialReward;\\n\\n    uint256 public startTime;\\n    uint256 public finishTime;\\n\\n    mapping(uint256 => TokenStatus) public tokenStatusses;\\n\\n    constructor(\\n        address _targetAddress,\\n        address _rewardAddress,\\n        uint256 _rewardRate,\\n        uint256 _rewardFrequency,\\n        uint256 _initialReward,\\n        uint256 _stakeMultiplier\\n    ) Stake(_targetAddress, _stakeMultiplier) {\\n        rewardAddress = _rewardAddress;\\n        rewardRate = _rewardRate;\\n        rewardFrequency = _rewardFrequency;\\n        initialReward = _initialReward;\\n    }\\n\\n    // OWNER CONTROLS\\n\\n    function setStartTime(uint256 _startTime) external onlyOwner {\\n        require(startTime == 0, \\\"Error - Start time is already set\\\");\\n        startTime = _startTime;\\n    }\\n\\n /*   function start() external onlyOwner {\\n        require(startTime == 0, \\\"Error - Start time is already set\\\");\\n        startTime = block.timestamp;\\n    }\\n*/\\n    function setFinishTime(uint256 _finishTime) external onlyOwner {\\n        finishTime = _finishTime;\\n    }\\n/*\\n    function finish() external onlyOwner {\\n        finishTime = block.timestamp;\\n    }\\n*/\\n    function setIsStakingEnabled(bool _isStakingEnabled) external onlyOwner {\\n        isStakingEnabled = _isStakingEnabled;\\n    }\\n\\n    function setIsClaimingEnabled(bool _isClaimingEnabled) external onlyOwner {\\n        isClaimingEnabled = _isClaimingEnabled;\\n    }\\n\\n    // PUBLIC - CONTROLS\\n\\n    function stake(uint256[] calldata tokenIds) external override {\\n        require(isStakingEnabled, \\\"Error - Staking is not enabled\\\");\\n        if (_isRewardingStarted(startTime)) {\\n            _updatePendingRewards(msg.sender, tokenIds);\\n        }\\n        _stake(msg.sender, tokenIds);\\n    }\\n\\n    function unstake(uint256[] calldata tokenIds) external override {\\n        if (_isRewardingStarted(startTime)) {\\n            _updatePendingRewards(msg.sender, tokenIds);\\n        }\\n        _unstake(msg.sender, tokenIds);\\n    }\\n\\n    function claim(uint256[] calldata tokenIds) external override {\\n        require(isClaimingEnabled, \\\"Error - Claiming is not enabled\\\");\\n        _claim(msg.sender, tokenIds);\\n    }\\n\\n    function earned(uint256[] calldata tokenIds)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        if (!_isRewardingStarted(startTime)) {\\n            return initialReward * tokenIds.length;\\n        }\\n        return _earnedRewards(tokenIds);\\n    }\\n\\n    // PUBLIC - UTILITY\\n\\n    function lastClaimTimesOfTokens(uint256[] memory tokenIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory _lastClaimTimesOfTokens = new uint256[](\\n            tokenIds.length\\n        );\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _lastClaimTimesOfTokens[i] = tokenStatusses[tokenIds[i]]\\n                .lastClaimTime;\\n        }\\n        return _lastClaimTimesOfTokens;\\n    }\\n\\n    function isOwner(address owner, uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return _isOwner(owner, tokenId);\\n    }\\n\\n    function stakedTokensOfOwner(address owner)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        return _stakedTokensOfOwner[owner];\\n    }\\n\\n    // INTERNAL\\n\\n    function _claim(address _owner, uint256[] memory _tokenIds) internal {\\n        uint256 rewardAmount = _earnedRewards(_tokenIds);\\n        _resetPendingRewards(_owner, _tokenIds);\\n\\n        require(rewardAmount != 0, \\\"Error - No Rewards To Claim\\\");\\n\\n        emit RewardClaimed(_owner, rewardAmount);\\n        IIRS(rewardAddress).mint(_owner, rewardAmount);\\n    }\\n\\n    function _updatePendingRewards(address _owner, uint256[] memory _tokenIds)\\n        internal\\n    {\\n        uint256 _startTime = startTime;\\n        uint256 _currentTime = _fixedCurrentTime();\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(\\n                _isOwner(_owner, _tokenIds[i]),\\n                \\\"Error - You Need To Own This Token\\\"\\n            );\\n\\n            TokenStatus memory status = tokenStatusses[_tokenIds[i]];\\n            status.pendingReward += uint128(\\n                _earnedTokenReward(_tokenIds[i], _startTime, _currentTime)\\n            );\\n            status.lastClaimTime = uint128(_currentTime);\\n            tokenStatusses[_tokenIds[i]] = status;\\n        }\\n    }\\n\\n    function _resetPendingRewards(address _owner, uint256[] memory _tokenIds)\\n        internal\\n    {\\n        uint256 _currentTime = _fixedCurrentTime();\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            require(\\n                _isOwner(_owner, _tokenIds[i]),\\n                \\\"Error - You Do Not Own This Token\\\"\\n            );\\n\\n            TokenStatus memory status = tokenStatusses[_tokenIds[i]];\\n            status.pendingReward = 0;\\n            status.lastClaimTime = uint128(_currentTime);\\n            tokenStatusses[_tokenIds[i]] = status;\\n        }\\n    }\\n\\n    function _earnedRewards(uint256[] memory _tokenIds)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _startTime = startTime;\\n        uint256 _currentTime = _fixedCurrentTime();\\n        uint256 rewardAmount;\\n\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            rewardAmount += _earnedTokenReward(\\n                _tokenIds[i],\\n                _startTime,\\n                _currentTime\\n            );\\n            rewardAmount += tokenStatusses[_tokenIds[i]].pendingReward;\\n        }\\n        return rewardAmount;\\n    }\\n\\n    function _earnedTokenReward(\\n        uint256 _tokenId,\\n        uint256 _startTime,\\n        uint256 _currentTime\\n    ) internal view returns (uint256) {\\n        uint256 _lastClaimTimeOfToken = tokenStatusses[_tokenId].lastClaimTime;\\n        uint256 fixedLastClaimTimeOfToken = _fixedLastClaimTimeOfToken(\\n            _startTime,\\n            _lastClaimTimeOfToken\\n        );\\n\\n        uint256 multiplier = _stakingMultiplierForToken(_tokenId);\\n        uint256 amount = ((_currentTime - fixedLastClaimTimeOfToken) /\\n            rewardFrequency) *\\n            rewardRate *\\n            multiplier *\\n            1e18;\\n\\n        if (_lastClaimTimeOfToken == 0) {\\n            return amount + initialReward;\\n        }\\n\\n        return amount;\\n    }\\n\\n    function _isRewardingStarted(uint256 _startTime)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (_startTime != 0 && _startTime < block.timestamp) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _fixedLastClaimTimeOfToken(\\n        uint256 _startTime,\\n        uint256 _lastClaimTimeOfToken\\n    ) internal pure returns (uint256) {\\n        if (_startTime > _lastClaimTimeOfToken) {\\n            return _startTime;\\n        }\\n        return _lastClaimTimeOfToken;\\n    }\\n\\n    function _fixedCurrentTime() internal view returns (uint256) {\\n        uint256 period = (block.timestamp - startTime) / rewardFrequency;\\n        uint256 currentTime = startTime + rewardFrequency * period;\\n        if (finishTime != 0 && finishTime < currentTime) {\\n            return finishTime;\\n        }\\n        return currentTime;\\n    }\\n\\n    function _isOwner(address _owner, uint256 _tokenId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (stakedTokenOwners[_tokenId] == _owner) {\\n            return true;\\n        }\\n        return IERC721(targetAddress).ownerOf(_tokenId) == _owner;\\n    }\\n\\n    // EVENTS\\n    event RewardClaimed(address indexed user, uint256 reward);\\n}\"\r\n    },\r\n    \"contracts/common/interfaces/IIRS.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface IIRS {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n}\"\r\n    },\r\n    \"contracts/common/interfaces/Icollection.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface Icollection {\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n}\"\r\n    },\r\n    \"contracts/common/interfaces/Iyield.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\ninterface Iyield {\\n     function stake(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function unstake(\\n        uint256[] calldata tokenIds\\n    ) external;\\n\\n    function claim(uint256[] calldata tokenIds) external;\\n\\n    function earned(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function lastClaimTimesOfTokens(uint256[] memory tokenIds)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isOwner(address owner, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function stakedTokensOfOwner(address owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\"\r\n    },\r\n    \"contracts/core/Stake.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n// ╔═╗─╔╦═══╦════╗╔════╦═══╦═╗╔═╗╔═══╦═══╦═══╦══╦═══╦═══╗\\n// ║║╚╗║║╔══╣╔╗╔╗║║╔╗╔╗║╔═╗╠╗╚╝╔╝║╔═╗║╔══╣╔══╩╣╠╣╔═╗║╔══╝\\n// ║╔╗╚╝║╚══╬╝║║╚╝╚╝║║╚╣║─║║╚╗╔╝─║║─║║╚══╣╚══╗║║║║─╚╣╚══╗\\n// ║║╚╗║║╔══╝─║║────║║─║╚═╝║╔╝╚╗─║║─║║╔══╣╔══╝║║║║─╔╣╔══╝\\n// ║║─║║║║────║║────║║─║╔═╗╠╝╔╗╚╗║╚═╝║║──║║──╔╣╠╣╚═╝║╚══╗\\n// ╚╝─╚═╩╝────╚╝────╚╝─╚╝─╚╩═╝╚═╝╚═══╩╝──╚╝──╚══╩═══╩═══╝\\n// Not Financial Advice: The avoidance of taxes is the only intellectual pursuit that still carries any reward. - John Maynard Keynes\\n// NFT Tax Office is not a real tax office.\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\nimport \\\"../token/ERC721/IERC721Receiver.sol\\\";\\n\\ncontract Stake is IERC721Receiver {\\n    address public immutable targetAddress;\\n    uint256 public immutable stakeMultiplier;\\n\\n    mapping(address => uint256[]) internal _stakedTokensOfOwner;\\n    mapping(uint256 => address) public stakedTokenOwners;\\n\\n    constructor(address _targetAddress, uint256 _stakeMultiplier) {\\n        targetAddress = _targetAddress;\\n        stakeMultiplier = _stakeMultiplier;\\n    }\\n\\n    // ERC721 Receiever\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) public pure override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    // INTERNAL\\n\\n    function _stake(address _owner, uint256[] calldata tokenIds) internal {\\n        IERC721 target = IERC721(targetAddress);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            stakedTokenOwners[tokenId] = _owner;\\n            _stakedTokensOfOwner[_owner].push(tokenId);\\n            target.safeTransferFrom(_owner, address(this), tokenId);\\n        }\\n\\n        emit Staked(_owner, tokenIds);\\n    }\\n\\n    function _unstake(address _owner, uint256[] calldata tokenIds) internal {\\n        IERC721 target = IERC721(targetAddress);\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            uint256 tokenId = tokenIds[i];\\n            require(\\n                stakedTokenOwners[tokenId] == _owner,\\n                \\\"Error - You must own the token.\\\"\\n            );\\n\\n            stakedTokenOwners[tokenId] = address(0);\\n\\n            // Remove tokenId from the user staked tokenId list\\n            uint256[] memory newStakedTokensOfOwner = _stakedTokensOfOwner[\\n                _owner\\n            ];\\n            for (uint256 q = 0; q < newStakedTokensOfOwner.length; q++) {\\n                if (newStakedTokensOfOwner[q] == tokenId) {\\n                    newStakedTokensOfOwner[q] = newStakedTokensOfOwner[\\n                        newStakedTokensOfOwner.length - 1\\n                    ];\\n                }\\n            }\\n\\n            _stakedTokensOfOwner[_owner] = newStakedTokensOfOwner;\\n            _stakedTokensOfOwner[_owner].pop();\\n\\n            target.safeTransferFrom(address(this), _owner, tokenId);\\n        }\\n\\n        emit Unstaked(_owner, tokenIds);\\n    }\\n\\n    function _stakingMultiplierForToken(uint256 _tokenId)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return stakedTokenOwners[_tokenId] != address(0) ? stakeMultiplier : 1;\\n    }\\n\\n    // EVENTS\\n\\n    event Staked(address indexed user, uint256[] tokenIds);\\n    event Unstaked(address indexed user, uint256[] tokenIds);\\n}\"\r\n    },\r\n    \"contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\"\r\n    },\r\n    \"contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"targetAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardFrequency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeMultiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"lastClaimTimesOfTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finishTime\",\"type\":\"uint256\"}],\"name\":\"setFinishTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isClaimingEnabled\",\"type\":\"bool\"}],\"name\":\"setIsClaimingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isStakingEnabled\",\"type\":\"bool\"}],\"name\":\"setIsStakingEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakedTokenOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"stakedTokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenStatusses\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"lastClaimTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"pendingReward\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"NFTTaxReturns","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000b1644d64352ec7eac4eaaf1657aac625ad45cd0b000000000000000000000000f8d261c679e3c07dc492007ac0fd9dcc6360f83b000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000e","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]