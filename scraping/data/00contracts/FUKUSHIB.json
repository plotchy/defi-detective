[{"SourceCode":"/*\r\nThey said 2021 is the worst of year\r\n\r\n2022: HOLD MY BEER \r\n\r\nWhile the Ukrainian are struggling to survive and fighting against the terrible aggressor Russian,\r\na powerful 7.3-magnitude earthquake struck off the coast of Fukushima in northern Japan.\r\nThe earthquake briefly triggered a tsunami advisory and plunged more than 2 million homes in the Tokyo area into darkness. \r\n\r\nThis token is designed to gather our blessing and send it to those suffering from either human or natural disaster.\r\n A portion of tax from this project will be donated to the Japan Red Cross Society and we are creating a DONATION website at the same time. \r\n\r\n“あなたのために祈る” Let’s Pray for JAPAN. \r\n\r\nTG@FukuShiba\r\nTG@FukuShiba\r\nTG@FukuShiba \r\n\r\n\r\n*/\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner() {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner() {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract FUKUSHIBA is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isBot;\r\n\r\n    uint256 private constant _MAX = ~uint256(0);\r\n    uint256 private constant _tTotal = 1e10 * 10**18;\r\n    uint256 private _rTotal = (_MAX - (_MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    \r\n    string private constant _name = \"FUKUSHIBA\";\r\n    string private constant _symbol = \"FUKUSHIBA\";\r\n    \r\n    uint private constant _decimals = 18;\r\n    uint256 private _teamFee = 10;\r\n    uint256 private _previousteamFee = _teamFee;\r\n    uint256 private _maxTxnAmount = 4;\r\n    address payable private _feeAddress;\r\n\r\n    IUniswapV2Router02 private _uniswapV2Router;\r\n    address private _uniswapV2Pair;\r\n\r\n    bool private _initialized = false;\r\n    bool private _noTaxMode = false;\r\n    bool private _inSwap = false;\r\n    bool private _tradingOpen = false;\r\n    uint256 private _launchTime;\r\n    bool private _txnLimit = false;\r\n    modifier lockTheSwap() {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n\r\n    modifier handleFees(bool takeFee) {\r\n        if (!takeFee) _removeAllFees();\r\n        _;\r\n        if (!takeFee) _restoreAllFees();\r\n    }\r\n    \r\n    constructor () {\r\n        _rOwned[_msgSender()] = _rTotal;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[payable(0x000000000000000000000000000000000000dEaD)] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _removeAllFees() private {\r\n        require(_teamFee > 0);\r\n\r\n        _previousteamFee = _teamFee;\r\n        _teamFee = 0;\r\n    }\r\n    \r\n    function _restoreAllFees() private {\r\n        _teamFee = _previousteamFee;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBot[from]);\r\n        \r\n        bool takeFee = false;\r\n        if (\r\n            !_isExcludedFromFee[from] \r\n            && !_isExcludedFromFee[to] \r\n            && !_noTaxMode \r\n            && (from == _uniswapV2Pair || to == _uniswapV2Pair)\r\n        ) {\r\n            require(_tradingOpen, 'Trading has not yet been opened.');\r\n            takeFee = true;\r\n\r\n            if (from == _uniswapV2Pair && to != address(_uniswapV2Router) && _txnLimit) {\r\n                uint walletBalance = balanceOf(address(to));\r\n                require(amount.add(walletBalance) <= _tTotal.mul(_maxTxnAmount).div(100));\r\n            }\r\n\r\n            if (block.timestamp == _launchTime) _isBot[to] = true;\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_inSwap && from != _uniswapV2Pair) {\r\n                if (contractTokenBalance > 0) {\r\n                    if (contractTokenBalance > balanceOf(_uniswapV2Pair).mul(10).div(100))\r\n                        contractTokenBalance = balanceOf(_uniswapV2Pair).mul(10).div(100);\r\n                    _swapTokensForEth(contractTokenBalance);\r\n                }\r\n            }\r\n        }\r\n                \r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n\r\n\r\n    function _swapTokensForEth(uint256 tokenAmount) private lockTheSwap() {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapV2Router.WETH();\r\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\r\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, bool takeFee) private handleFees(takeFee) {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tTeam) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n\r\n        _takeTeam(tTeam);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tTeam) = _getTValues(tAmount, _teamFee);\r\n        uint256 currentRate =  _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tTeam, currentRate);\r\n        return (rAmount, rTransferAmount, tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 TeamFee) private pure returns (uint256, uint256) {\r\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tTeam);\r\n        return (tTransferAmount, tTeam);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rTeam);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rTeam = tTeam.mul(currentRate);\r\n\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n    }\r\n    \r\n    function initNewPair(address payable feeAddress) external onlyOwner() {\r\n        require(!_initialized,\"Contract has already been initialized\");\r\n        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        _uniswapV2Router = uniswapV2Router;\r\n\r\n        _feeAddress = feeAddress;\r\n        _isExcludedFromFee[_feeAddress] = true;\r\n\r\n        _initialized = true;\r\n    }\r\n\r\n    function startTrading() external onlyOwner() {\r\n        require(_initialized);\r\n        _tradingOpen = true;\r\n        _launchTime = block.timestamp;\r\n        _txnLimit = true;\r\n    }\r\n\r\n    function setFeeWallet(address payable feeWalletAddress) external onlyOwner() {\r\n        _isExcludedFromFee[_feeAddress] = false;\r\n        _feeAddress = feeWalletAddress;\r\n        _isExcludedFromFee[_feeAddress] = true;\r\n    }\r\n\r\n    function excludeFromFee(address payable ad) external onlyOwner() {\r\n        _isExcludedFromFee[ad] = true;\r\n    }\r\n    \r\n    function includeToFee(address payable ad) external onlyOwner() {\r\n        _isExcludedFromFee[ad] = false;\r\n    }\r\n   \r\n   function removeTxLimit (bool onoff) external onlyOwner() {\r\n       _txnLimit = onoff;\r\n   }\r\n    \r\n    function setTeamFee(uint256 fee) external onlyOwner() {\r\n        require(fee < 10);\r\n        _teamFee = fee;\r\n    }\r\n\r\n    function setMaxTxn(uint256 max) external onlyOwner(){\r\n        require(max>2);\r\n        _maxTxnAmount = max;\r\n    }\r\n    \r\n    function setBots(address[] memory bots_) public onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            if (bots_[i] != _uniswapV2Pair && bots_[i] != address(_uniswapV2Router)) {\r\n                _isBot[bots_[i]] = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function delBots(address[] memory bots_) public onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            _isBot[bots_[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function isBot(address ad) public view returns (bool) {\r\n        return _isBot[ad];\r\n    }\r\n\r\n    function isExcludedFromFee(address ad) public view returns (bool) {\r\n        return _isExcludedFromFee[ad];\r\n    }\r\n    \r\n    function swapFeesManual() external onlyOwner() {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        _swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function withdrawFees() external {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        _feeAddress.transfer(contractETHBalance);\r\n    }\r\n\r\n    receive() external payable {}\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"includeToFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeAddress\",\"type\":\"address\"}],\"name\":\"initNewPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"removeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeWalletAddress\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"setMaxTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setTeamFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFeesManual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"FUKUSHIBA","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://83a0b941e371f13b7dd97c0835af55d5a911f0f324bf3c29a47975f21582b2d0"}]