[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/wrapper/WrapAndUnWrapSushi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../proxyLib/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/token/IWETH.sol\\\";\\nimport \\\"../interfaces/token/ILPERC20.sol\\\";\\nimport \\\"../interfaces/sushiswap/ISushiV2.sol\\\";\\nimport \\\"../interfaces/sushiswap/ISushiSwapFactory.sol\\\";\\n\\n/// @title Plexus LP Wrapper Contract - SushiSwap\\n/// @author Team Plexus\\ncontract WrapAndUnWrapSushi is OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Contract state variables\\n    address public WETH_TOKEN_ADDRESS; // Contract address for WETH tokens\\n    bool public changeRecpientIsOwner;\\n    address private sushiAddress;\\n    address private sushiFactoryAddress;\\n    uint256 public fee;\\n    uint256 public maxfee;\\n    mapping(address => address[]) public lpTokenAddressToPairs;\\n    mapping(string => address) public stablecoins;\\n    mapping(address => mapping(address => address[])) public presetPaths;\\n    event WrapSushi(address lpTokenPairAddress, uint256 amount);\\n    event UnWrapSushi(uint256 amount);\\n    event RemixUnwrap(uint256 amount);\\n    event RemixWrap(address lpTokenPairAddress, uint256 amount);\\n    ISushiV2 private sushiExchange;\\n    ISushiSwapFactory private factory;\\n\\n    constructor() payable {}\\n\\n    /**\\n     * @notice Initialize the Sushi Wrapper contract\\n     * @param _weth Address to the WETH token contract\\n     * @param _sushiAddress Address to the SushiSwap contract\\n     * @param _sushiFactoryAddress Address to the SushiV2 factory contract\\n     */\\n    function initialize(\\n        address _weth,\\n        address _sushiAddress,\\n        address _sushiFactoryAddress\\n    )\\n        public\\n        initializeOnceOnly\\n    {\\n        WETH_TOKEN_ADDRESS = _weth;\\n        sushiAddress = _sushiAddress;\\n        sushiExchange = ISushiV2(sushiAddress);\\n        sushiFactoryAddress = _sushiFactoryAddress;\\n        factory = ISushiSwapFactory(sushiFactoryAddress);\\n        fee = 0;\\n        maxfee = 0;\\n        changeRecpientIsOwner = false;\\n    }\\n\\n    /**\\n     * @notice Modifier check to ensure that a function is executed only if it\\n     * was called with a non-zero amount value\\n     * @param amount Amount value\\n     */\\n    modifier nonZeroAmount(uint256 amount) {\\n        require(amount > 0, \\\"Amount specified is zero\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Executed on a call to the contract if none of the other\\n     * functions match the given function signature, or if no data was\\n     * supplied at all and there is no receive Ether function\\n     */\\n    fallback() external payable {}\\n\\n     /**\\n     * @notice Function executed on plain ether transfers and on a call to the\\n     * contract with empty calldata\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Allow owner to collect a small fee from trade imbalances on\\n     * LP conversions\\n     * @param changeRecpientIsOwnerBool If set to true, allows owner to collect\\n     * fees from pair imbalances\\n     */\\n    function updateChangeRecipientBool(bool changeRecpientIsOwnerBool)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        changeRecpientIsOwner = changeRecpientIsOwnerBool;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the SushiSwap exchange contract address\\n     * @param newAddress SushiSwap exchange contract address to be updated\\n     */\\n    function updateSushiExchange(address newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        sushiExchange = ISushiV2(newAddress);\\n        sushiAddress = newAddress;\\n        return true;\\n    }\\n\\n     /**\\n     * @notice Update the Uniswap factory contract address\\n     * @param newAddress Uniswap factory contract address to be updated\\n     */\\n    function updateSushiSwapFactory(address newAddress)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        factory = ISushiSwapFactory(newAddress);\\n        sushiFactoryAddress = newAddress;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Retrieve the LP token address for a given pair of tokens\\n     * @param token1 Address to the first token in the LP pair\\n     * @param token2 Address to the second token in the LP pair\\n     * @return lpAddr Address to the LP token contract composed of the given\\n     * token pair\\n     */\\n    function getLPTokenByPair(\\n        address token1,\\n        address token2\\n    )\\n        external\\n        view\\n        returns (address lpAddr)\\n    {\\n        address thisPairAddress = factory.getPair(token1, token2);\\n        return thisPairAddress;\\n    }\\n\\n    /**\\n     * @notice Retrieve the balance of a given token for a specified user\\n     * @param userAddress Address to the user's wallet\\n     * @param tokenAddress Address to the token for which the balance is to be\\n     * retrieved\\n     * @return Balance of the given token in the specified user wallet\\n     */\\n    function getUserTokenBalance(\\n        address userAddress,\\n        address tokenAddress\\n    )\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        IERC20 token = IERC20(tokenAddress);\\n        return token.balanceOf(userAddress);\\n    }\\n\\n    /**\\n    * @notice Allow admins to withdraw accidentally deposited tokens\\n    * @param token Address to the token to be withdrawn\\n    * @param amount Amount of specified token to be withdrawn\\n    * @param destination Address where the withdrawn tokens should be\\n    * transferred\\n    */\\n    function adminEmergencyWithdrawTokens(\\n        address token,\\n        uint256 amount,\\n        address payable destination\\n    )\\n        public\\n        onlyOwner\\n        returns (bool)\\n    {\\n        if (address(token) == address(0x0)) {\\n            destination.transfer(amount);\\n        } else {\\n            IERC20 token_ = IERC20(token);\\n            token_.safeTransfer(destination, amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Update the protocol fee rate\\n     * @param newFee Updated fee rate to be charged\\n     */\\n    function setFee(uint256 newFee) public onlyOwner returns (bool) {\\n        require(\\n            newFee <= maxfee,\\n            \\\"Admin cannot set the fee higher than the current maxfee\\\"\\n        );\\n        fee = newFee;\\n        return true;\\n    }\\n\\n     /**\\n     * @notice Set the max protocol fee rate\\n     * @param newMax Updated maximum fee rate value\\n     */\\n    function setMaxFee(uint256 newMax) public onlyOwner returns (bool) {\\n        require(maxfee == 0, \\\"Admin can only set max fee once and it is perm\\\");\\n        maxfee = newMax;\\n        return true;\\n    }\\n\\n    function swap(\\n        address sourceToken,\\n        address destinationToken,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    ) private returns (uint256) {\\n        if (sourceToken != address(0x0)) {\\n            IERC20(sourceToken).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n        conductSushiSwap(sourceToken, destinationToken, path, amount, userSlippageTolerance, deadline);\\n        uint256 thisBalance = IERC20(destinationToken).balanceOf(address(this));\\n        IERC20(destinationToken).safeTransfer(msg.sender, thisBalance);\\n        return thisBalance;\\n    }\\n\\n    function createWrap(\\n        address sourceToken,\\n        address[] memory destinationTokens,\\n        address[][] memory paths,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline,\\n        bool remixing\\n    ) private returns (address, uint256) {\\n        if (sourceToken == address(0x0)) {\\n            IWETH(WETH_TOKEN_ADDRESS).deposit{value: msg.value}();\\n            amount = msg.value;\\n        } else {\\n            if(!remixing) { // only transfer when not remixing\\n                IERC20(sourceToken).safeTransferFrom(msg.sender, address(this), amount);\\n            }\\n            \\n        }\\n\\n        if (destinationTokens[0] == address(0x0)) {\\n            destinationTokens[0] = WETH_TOKEN_ADDRESS;\\n        }\\n        if (destinationTokens[1] == address(0x0)) {\\n            destinationTokens[1] = WETH_TOKEN_ADDRESS;\\n        }\\n\\n        if (sourceToken != destinationTokens[0]) {\\n            conductSushiSwap(\\n                sourceToken,\\n                destinationTokens[0],\\n                paths[0],\\n                amount.div(2),\\n                userSlippageTolerance,\\n                deadline\\n            );\\n        }\\n        if (sourceToken != destinationTokens[1]) {\\n             conductSushiSwap(\\n                sourceToken,\\n                destinationTokens[1],\\n                paths[1],\\n                amount.div(2),\\n                userSlippageTolerance,\\n                deadline\\n            );\\n        }\\n\\n        IERC20 dToken1 = IERC20(destinationTokens[0]);\\n        IERC20 dToken2 = IERC20(destinationTokens[1]);\\n        uint256 dTokenBalance1 = dToken1.balanceOf(address(this));\\n        uint256 dTokenBalance2 = dToken2.balanceOf(address(this));\\n\\n        if (dToken1.allowance(address(this), sushiAddress) < dTokenBalance1.mul(2)) {\\n            dToken1.safeIncreaseAllowance(sushiAddress, dTokenBalance1.mul(3));\\n        }\\n\\n        if (dToken2.allowance(address(this), sushiAddress) < dTokenBalance2.mul(2)) {\\n            dToken2.safeIncreaseAllowance(sushiAddress, dTokenBalance2.mul(3));\\n        }\\n\\n        sushiExchange.addLiquidity(\\n            destinationTokens[0],\\n            destinationTokens[1],\\n            dTokenBalance1,\\n            dTokenBalance2,\\n            1,\\n            1,\\n            address(this),\\n            1000000000000000000000000000\\n        );\\n\\n        address thisPairAddress =\\n            factory.getPair(destinationTokens[0], destinationTokens[1]);\\n        IERC20 lpToken = IERC20(thisPairAddress);\\n        uint256 thisBalance = lpToken.balanceOf(address(this));\\n\\n        if (fee > 0) {\\n            uint256 totalFee = (thisBalance.mul(fee)).div(10000);\\n            if (totalFee > 0) {\\n                lpToken.safeTransfer(owner(), totalFee);\\n            }\\n            thisBalance = lpToken.balanceOf(address(this));\\n            lpToken.safeTransfer(msg.sender, thisBalance);\\n        } else {\\n            lpToken.safeTransfer(msg.sender, thisBalance);\\n        }\\n\\n        // Transfer any change to changeRecipient\\n        // (from a pair imbalance. Should never be more than a few basis points)\\n        address changeRecipient = msg.sender;\\n        if (changeRecpientIsOwner == true) {\\n            changeRecipient = owner();\\n        }\\n        if (dToken1.balanceOf(address(this)) > 0) {\\n            dToken1.safeTransfer(changeRecipient, dToken1.balanceOf(address(this)));\\n        }\\n        if (dToken2.balanceOf(address(this)) > 0) {\\n            dToken2.safeTransfer(changeRecipient, dToken2.balanceOf(address(this)));\\n        }\\n        return (thisPairAddress, thisBalance);\\n    }\\n\\n    /**\\n     * @notice Wrap a source token based on the specified\\n     * destination token(s)\\n     * @param sourceToken Address to the source token contract\\n     * @param destinationTokens Array describing the token(s) which the source\\n     * @param paths Paths for uniswap\\n     * token will be wrapped into\\n     * @param amount Amount of source token to be wrapped\\n     * @param userSlippageTolerance Maximum permissible user slippage tolerance\\n     * @return Address to the token contract for the destination token and the\\n     * amount of wrapped tokens\\n     */\\n    function wrap(\\n        address sourceToken,\\n        address[] memory destinationTokens,\\n        address[][] memory paths,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    )\\n        public\\n        payable\\n        returns (address, uint256)\\n    {\\n        if (destinationTokens.length == 1) {\\n            uint256 swapAmount = swap(sourceToken, destinationTokens[0], paths[0], amount, userSlippageTolerance, deadline);\\n            return (destinationTokens[0], swapAmount);\\n        } else {\\n            bool remixing = false;\\n            (address lpTokenPairAddress, uint256 lpTokenAmount) = createWrap(sourceToken, destinationTokens, paths, amount, userSlippageTolerance, deadline, remixing);\\n            emit WrapSushi(lpTokenPairAddress, lpTokenAmount);\\n            return (lpTokenPairAddress, lpTokenAmount);\\n        }\\n    }\\n\\n    function removeWrap(\\n        address sourceToken,\\n        address destinationToken,\\n        address[][] memory paths,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline,\\n        bool remixing\\n    )\\n        private\\n        returns (uint256)\\n    {\\n        address originalDestinationToken = destinationToken;\\n      \\n        IERC20 sToken = IERC20(sourceToken);\\n        if (destinationToken == address(0x0)) {\\n            destinationToken = WETH_TOKEN_ADDRESS;\\n        }\\n\\n        if (sourceToken != address(0x0)) {\\n            sToken.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        ILPERC20 thisLpInfo = ILPERC20(sourceToken);\\n        address token0 = thisLpInfo.token0();\\n        address token1 = thisLpInfo.token1();\\n\\n        if (sToken.allowance(address(this), sushiAddress) < amount.mul(2)) {\\n            sToken.safeIncreaseAllowance(sushiAddress, amount.mul(3));\\n        }\\n\\n        sushiExchange.removeLiquidity(\\n            token0,\\n            token1,\\n            amount,\\n            0,\\n            0,\\n            address(this),\\n            1000000000000000000000000000\\n        );\\n\\n        uint256 pTokenBalance = IERC20(token0).balanceOf(address(this));\\n        uint256 pTokenBalance2 = IERC20(token1).balanceOf(address(this));\\n\\n        if (token0 != destinationToken) {\\n            conductSushiSwap(\\n                token0,\\n                destinationToken,\\n                paths[0],\\n                pTokenBalance,\\n                userSlippageTolerance,\\n                deadline\\n            );\\n        }\\n\\n        if (token1 != destinationToken) {\\n            conductSushiSwap(\\n                token1,\\n                destinationToken,\\n                paths[1],\\n                pTokenBalance2,\\n                userSlippageTolerance,\\n                deadline\\n            );\\n        }\\n\\n        IERC20 dToken = IERC20(destinationToken);\\n        uint256 destinationTokenBalance = dToken.balanceOf(address(this));\\n    \\n        if (remixing) {\\n            \\n            emit RemixUnwrap(destinationTokenBalance);\\n        }\\n        else { // we only transfer the tokens to the user when not remixing\\n            if (originalDestinationToken == address(0x0)) {\\n                IWETH(WETH_TOKEN_ADDRESS).withdraw(destinationTokenBalance);\\n                if (fee > 0) {\\n                    uint256 totalFee = (address(this).balance.mul(fee)).div(10000);\\n                    if (totalFee > 0) {\\n                        payable(owner()).transfer(totalFee);\\n                    }\\n                        payable(msg.sender).transfer(address(this).balance);\\n                } else {\\n                    payable(msg.sender).transfer(address(this).balance);\\n                }\\n            } else {\\n                if (fee > 0) {\\n                    uint256 totalFee = (destinationTokenBalance.mul(fee)).div(10000);\\n                    if (totalFee > 0) {\\n                        dToken.safeTransfer(owner(), totalFee);\\n                    }\\n                    destinationTokenBalance = dToken.balanceOf(address(this));\\n                    dToken.safeTransfer(msg.sender, destinationTokenBalance);\\n                } else {\\n                    dToken.safeTransfer(msg.sender, destinationTokenBalance);\\n                }\\n            }\\n\\n        }\\n       \\n        return destinationTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Unwrap a source token based to the specified destination token\\n     * @param sourceToken Address to the source token contract\\n     * @param destinationToken Address to the destination token contract\\n     * @param paths Paths for uniswap\\n     * @param lpTokenPairAddress address for lp token\\n     * @param amount Amount of source token to be unwrapped\\n     * @param userSlippageTolerance Maximum permissible user slippage tolerance\\n     * @return Amount of the destination token returned from unwrapping the\\n     * source token\\n     */\\n    function unwrap(\\n        address sourceToken,\\n        address destinationToken,\\n        address lpTokenPairAddress,\\n        address[][] calldata paths,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    )\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n\\n        if (lpTokenPairAddress == address(0x0)) {\\n            return swap(sourceToken, destinationToken, paths[0], amount, userSlippageTolerance, deadline);\\n        } else {\\n            bool remixing = false; //flag indicates whether we're remixing or not\\n            uint256 destAmount = removeWrap(lpTokenPairAddress, destinationToken, paths, amount, userSlippageTolerance, deadline, remixing);\\n            emit UnWrapSushi(destAmount);\\n            return destAmount;\\n        }\\n    }\\n\\n     /**\\n     * @notice Unwrap a source token and wrap it into a different destination token \\n     * @param lpTokenPairAddress Address for the LP pair to remix\\n     * @param unwrapOutputToken Address for the initial output token of remix\\n     * @param destinationTokens Address to the destination tokens to be remixed to\\n     * @param unwrapPaths Paths best sushi trade paths for doing the unwrapping\\n     * @param wrapPaths Paths best sushi trade paths for doing the wrapping to the new LP token\\n     * @param amount Amount of LP Token to be remixed\\n     * @param userSlippageTolerance Maximum permissible user slippage tolerance\\n     * @return Amount of the destination token returned from unwrapping the\\n     * source LP token\\n     */\\n    function remix(\\n        address lpTokenPairAddress,\\n        address unwrapOutputToken,\\n        address[] memory destinationTokens,\\n        address[][] calldata unwrapPaths,\\n        address[][] calldata wrapPaths,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    )\\n        public\\n        payable\\n        returns (uint256)\\n    {\\n        bool remixing = true; //flag indicates whether we're remixing or not\\n        uint256 destAmount = removeWrap(lpTokenPairAddress, unwrapOutputToken, unwrapPaths, amount, userSlippageTolerance, deadline, remixing);\\n\\n        IERC20 dToken = IERC20(unwrapOutputToken);\\n        uint256 destinationTokenBalance = dToken.balanceOf(address(this));\\n\\n        require(destAmount == destinationTokenBalance, \\\"Error: Remix output balance not correct\\\");\\n       \\n        // then now we create the new LP token\\n        address outputToken = unwrapOutputToken;\\n        address [] memory dTokens = destinationTokens;\\n        address [][] calldata paths = wrapPaths;\\n        uint256 slippageTolerance = userSlippageTolerance;\\n        uint256 timeout = deadline;\\n        bool remixingToken = true; //flag indicates whether we're remixing or not\\n\\n        (address remixedLpTokenPairAddress, uint256 lpTokenAmount) = createWrap(outputToken, dTokens, paths, destinationTokenBalance, slippageTolerance, timeout, remixingToken);\\n                                                                \\n        emit RemixWrap(remixedLpTokenPairAddress, lpTokenAmount);\\n        return lpTokenAmount;\\n        \\n    }\\n\\n\\n    /**\\n     * @notice Given an input asset amount and an array of token addresses,\\n     * calculates all subsequent maximum output token amounts for each pair of\\n     * token addresses in the path using SushiSwap\\n     * @param theAddresses Array of addresses that form the Routing swap path\\n     * @param amount Amount of input asset token\\n     * @return amounts1 Array with maximum output token amounts for all token\\n     * pairs in the swap path\\n     */\\n    function getPriceFromSushiswap(\\n        address[] memory theAddresses,\\n        uint256 amount\\n    )\\n        public\\n        view\\n        returns (uint256[] memory amounts1)\\n    {\\n        try sushiExchange.getAmountsOut(\\n            amount,\\n            theAddresses\\n        ) returns (uint256[] memory amounts) {\\n            return amounts;\\n        } catch {\\n            uint256[] memory amounts2 = new uint256[](2);\\n            amounts2[0] = 0;\\n            amounts2[1] = 0;\\n            return amounts2;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieve minimum output amount required based on uniswap routing\\n     * path and maximum permissible slippage\\n     * @param theAddresses Array list describing the SushiSwap swap path\\n     * @param amount Amount of input tokens to be swapped\\n     * @param userSlippageTolerance Maximum permissible user slippage tolerance\\n     * @return Minimum amount of output tokens the input token can be swapped\\n     * for, based on the Uniswap prices and Slippage tolerance thresholds\\n     */\\n    function getAmountOutMin(\\n        address[] memory theAddresses,\\n        uint256 amount,\\n        uint256 userSlippageTolerance\\n    )\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256[] memory assetAmounts = getPriceFromSushiswap(\\n            theAddresses,\\n            amount\\n        );\\n        require(\\n            userSlippageTolerance <= 100,\\n            \\\"userSlippageTolerance can not be larger than 100\\\"\\n        );\\n\\n          // this is the index of the output token we're swapping to based on the paths\\n        uint outputTokenIndex = assetAmounts.length - 1;\\n        return\\n            SafeMath.div(\\n                SafeMath.mul(assetAmounts[outputTokenIndex], (100 - userSlippageTolerance)),\\n                100\\n            );\\n    }\\n\\n     /**\\n     * @notice Perform a SushiSwap transaction to swap between a given pair of\\n     * tokens of the specified amount\\n     * @param sellToken Address to the token being sold as part of the swap\\n     * @param buyToken Address to the token being bought as part of the swap\\n     * @param amount Transaction amount denoted in terms of the token sold\\n     * @param userSlippageTolerance Maximum permissible slippage limit\\n     * @return amounts1 Tokens received once the swap is completed\\n     */\\n    function conductSushiSwap(\\n        address sellToken,\\n        address buyToken,\\n        address[] memory path,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256 amounts1)\\n    {\\n        if (sellToken == address(0x0) && buyToken == WETH_TOKEN_ADDRESS) {\\n            IWETH(buyToken).deposit{value: msg.value}();\\n            return amount;\\n        }\\n\\n        if (sellToken == address(0x0)) {\\n            // addresses[0] = WETH_TOKEN_ADDRESS;\\n            // addresses[1] = buyToken;\\n            uint256 amountOutMin = getAmountOutMin(path, amount, userSlippageTolerance);\\n            sushiExchange.swapExactETHForTokens{value: msg.value}(\\n                amountOutMin,\\n                path,\\n                address(this),\\n                deadline\\n            );\\n        } else {\\n            IERC20 sToken = IERC20(sellToken);\\n            if (sToken.allowance(address(this), sushiAddress) < amount.mul(2)) {\\n                sToken.safeIncreaseAllowance(sushiAddress, amount.mul(3));\\n            }\\n\\n            uint256[] memory amounts = conductSushiSwapT4T(\\n                path,\\n                amount,\\n                userSlippageTolerance,\\n                deadline\\n            );\\n            uint256 resultingTokens = amounts[amounts.length - 1];\\n            return resultingTokens;\\n        }\\n    }\\n\\n    /**\\n     * @notice Using SushiSwap, exchange an exact amount of input tokens for as\\n     * many output tokens as possible, along the route determined by the path.\\n     * @param theAddresses Array of addresses representing the path where the\\n     * first address is the input token and the last address is the output\\n     * token\\n     * @param amount Amount of input tokens to be swapped\\n     * @param userSlippageTolerance Maximum permissible slippage tolerance\\n     * @return amounts1 The input token amount and all subsequent output token\\n     * amounts\\n     */\\n    function conductSushiSwapT4T(\\n        address[] memory theAddresses,\\n        uint256 amount,\\n        uint256 userSlippageTolerance,\\n        uint256 deadline\\n    )\\n        internal\\n        returns (uint256[] memory amounts1)\\n    {\\n        uint256 amountOutMin = getAmountOutMin(\\n            theAddresses,\\n            amount,\\n            userSlippageTolerance\\n        );\\n        uint256[] memory amounts = sushiExchange.swapExactTokensForTokens(\\n            amount,\\n            amountOutMin,\\n            theAddresses,\\n            address(this),\\n            deadline\\n        );\\n        return amounts;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxyLib/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport './OwnableProxied.sol';\\n\\ncontract OwnableUpgradeable is OwnableProxied {\\n    /*\\n     * @notice Modifier to make body of function only execute if the contract has not already been initialized.\\n     */\\n    address payable public proxy;\\n    modifier initializeOnceOnly() {\\n         if(!initialized[target]) {\\n             initialized[target] = true;\\n             emit EventInitialized(target);\\n             _;\\n         } else revert();\\n     }\\n\\n    modifier onlyProxy() {\\n        require(msg.sender == proxy);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Will always fail if called. This is used as a placeholder for the contract ABI.\\n     * @dev This is code is never executed by the Proxy using delegate call\\n     */\\n    function upgradeTo(address) public pure override {\\n        assert(false);\\n    }\\n\\n    /**\\n     * @notice Initialize any state variables that would normally be set in the contructor.\\n     * @dev Initialization functionality MUST be implemented in inherited upgradeable contract if the child contract requires\\n     * variable initialization on creation. This is because the contructor of the child contract will not execute\\n     * and set any state when the Proxy contract targets it.\\n     * This function MUST be called stright after the Upgradeable contract is set as the target of the Proxy. This method\\n     * can be overwridden so that it may have arguments. Make sure that the initializeOnceOnly() modifier is used to protect\\n     * from being initialized more than once.\\n     * If a contract is upgraded twice, pay special attention that the state variables are not initialized again\\n     */\\n    /*function initialize() public initializeOnceOnly {\\n        // initialize contract state variables here\\n    }*/\\n\\n    function setProxy(address payable theAddress) public onlyOwner {\\n        proxy = theAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/token/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/token/ILPERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ILPERC20 {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/sushiswap/ISushiV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ISushiV2 {\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n    \\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\"\r\n    },\r\n    \"contracts/interfaces/sushiswap/ISushiSwapFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface ISushiSwapFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proxyLib/OwnableProxied.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/*\\n * @title Proxied v0.5\\n * @author Jack Tanner\\n * @notice The Proxied contract acts as the parent contract to Proxy and Upgradeable with and creates space for\\n * state variables, functions and events that will be used in the upgraeable system.\\n *\\n * @dev Both the Proxy and Upgradeable need to hae the target and initialized state variables stored in the exact\\n * same storage location, which is why they must both inherit from Proxied. Defining them in the saparate contracts\\n * does not work.\\n *\\n * @param target - This stores the current address of the target Upgradeable contract, which can be modified by\\n * calling upgradeTo()\\n *\\n * @param initialized - This mapping records which targets have been initialized with the Upgradeable.initialize()\\n * function. Target Upgradeable contracts can only be intitialed once.\\n */\\nabstract contract OwnableProxied is Ownable {\\n    address public target;\\n    mapping(address => bool) public initialized;\\n\\n    event EventUpgrade(\\n        address indexed newTarget,\\n        address indexed oldTarget,\\n        address indexed admin\\n    );\\n    event EventInitialized(address indexed target);\\n\\n    function upgradeTo(address _target) public virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/proxyLib/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function changeOwner(address newOwner) public onlyOwner returns (bool) {\\n        _owner = newOwner;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"EventInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTarget\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"EventUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemixUnwrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RemixWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnWrapSushi\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WrapSushi\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"WETH_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"adminEmergencyWithdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"changeRecpientIsOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSlippageTolerance\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"getLPTokenByPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lpAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"theAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPriceFromSushiswap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts1\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiFactoryAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokenAddressToPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxfee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presetPaths\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrapOutputToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"destinationTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"unwrapPaths\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"wrapPaths\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"remix\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"theAddress\",\"type\":\"address\"}],\"name\":\"setProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"stablecoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpTokenPairAddress\",\"type\":\"address\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"changeRecpientIsOwnerBool\",\"type\":\"bool\"}],\"name\":\"updateChangeRecipientBool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateSushiExchange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateSushiSwapFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"destinationTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"paths\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"WrapAndUnWrapSushi","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]