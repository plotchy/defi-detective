[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\n// Enjin ICO group buyer\r\n// Avtor: Janez\r\n\r\n// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\r\ncontract ERC20 {\r\n  function transfer(address _to, uint256 _value) returns (bool success);\r\n  function balanceOf(address _owner) constant returns (uint256 balance);\r\n}\r\n\r\ncontract EnjinBuyer {\r\n  mapping (address => uint256) public balances;\r\n  mapping (address => uint256) public balances_after_buy;\r\n  bool public bought_tokens;\r\n  bool public token_set;\r\n  bool public refunded;\r\n  uint256 public contract_eth_value;\r\n  bool public kill_switch;\r\n  bytes32 password_hash = 0x8bf0720c6e610aace867eba51b03ab8ca908b665898b10faddc95a96e829539d;\r\n  address public developer = 0x0639C169D9265Ca4B4DEce693764CdA8ea5F3882;\r\n  address public sale = 0xc4740f71323129669424d1Ae06c42AEE99da30e2;\r\n  ERC20 public token;\r\n  uint256 public eth_minimum = 3235 ether;\r\n\r\n  function set_token(address _token) {\r\n    require(msg.sender == developer);\r\n    token = ERC20(_token);\r\n    token_set = true;\r\n  }\r\n\r\n  // This function should only be called in the unfortunate case that Enjin should refund from a different address.\r\n  function set_refunded(bool _refunded) {\r\n    require(msg.sender == developer);\r\n    refunded = _refunded;\r\n  }\r\n  \r\n  function activate_kill_switch(string password) {\r\n    require(msg.sender == developer || sha3(password) == password_hash);\r\n    kill_switch = true;\r\n  }\r\n  \r\n  function personal_withdraw(){\r\n    if (balances_after_buy[msg.sender]>0 && msg.sender != sale) {\r\n        uint256 eth_to_withdraw_after_buy = balances_after_buy[msg.sender];\r\n        balances_after_buy[msg.sender] = 0;\r\n        msg.sender.transfer(eth_to_withdraw_after_buy);\r\n    }\r\n    if (balances[msg.sender] == 0) return;\r\n    require(msg.sender != sale);\r\n    if (!bought_tokens || refunded) {\r\n      uint256 eth_to_withdraw = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      msg.sender.transfer(eth_to_withdraw);\r\n    }\r\n    else {\r\n      require(token_set);\r\n      uint256 contract_token_balance = token.balanceOf(address(this));\r\n      require(contract_token_balance != 0);\r\n      uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      contract_eth_value -= balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      require(token.transfer(developer, fee));\r\n      require(token.transfer(msg.sender, tokens_to_withdraw - fee));\r\n    }\r\n  }\r\n\r\n\r\n  // Use with caution - use this withdraw function if you do not trust the\r\n  // contract's token setting. You can only use this once, so if you\r\n  // put in the wrong token address you will burn the Enjin on the contract.\r\n  function withdraw_token(address _token){\r\n    ERC20 myToken = ERC20(_token);\r\n    if (balances_after_buy[msg.sender]>0 && msg.sender != sale) {\r\n        uint256 eth_to_withdraw_after_buy = balances_after_buy[msg.sender];\r\n        balances_after_buy[msg.sender] = 0;\r\n        msg.sender.transfer(eth_to_withdraw_after_buy);\r\n    }\r\n    if (balances[msg.sender] == 0) return;\r\n    require(msg.sender != sale);\r\n    if (!bought_tokens || refunded) {\r\n      uint256 eth_to_withdraw = balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      msg.sender.transfer(eth_to_withdraw);\r\n    }\r\n    else {\r\n      uint256 contract_token_balance = myToken.balanceOf(address(this));\r\n      require(contract_token_balance != 0);\r\n      uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\r\n      contract_eth_value -= balances[msg.sender];\r\n      balances[msg.sender] = 0;\r\n      uint256 fee = tokens_to_withdraw / 100;\r\n      require(myToken.transfer(developer, fee));\r\n      require(myToken.transfer(msg.sender, tokens_to_withdraw - fee));\r\n    }\r\n  }\r\n\r\n  function purchase_tokens() {\r\n    require(msg.sender == developer);\r\n    if (this.balance < eth_minimum) return;\r\n    if (kill_switch) return;\r\n    require(sale != 0x0);\r\n    bought_tokens = true;\r\n    contract_eth_value = this.balance;\r\n    require(sale.call.value(contract_eth_value)());\r\n    require(this.balance==0);\r\n  }\r\n  \r\n  function () payable {\r\n    if (!bought_tokens) {\r\n      balances[msg.sender] += msg.value;\r\n      if (this.balance < eth_minimum) return;\r\n      if (kill_switch) return;\r\n      require(sale != 0x0);\r\n      bought_tokens = true;\r\n      contract_eth_value = this.balance;\r\n      require(sale.call.value(contract_eth_value)());\r\n      require(this.balance==0);\r\n    } else {\r\n      // We might be getting a refund from Enjin's multisig wallet.\r\n      // It could also be someone who has missed the buy, so we keep\r\n      // track of this as well so that he can safely withdraw.\r\n      // We might get the Enjin refund from another wallet, so this\r\n      // is why we allow this behavior.\r\n      balances_after_buy[msg.sender] += msg.value;\r\n      if (msg.sender == sale && this.balance >= contract_eth_value) {\r\n        refunded = true;\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[],\"name\":\"purchase_tokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"refunded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bought_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sale\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token_set\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances_after_buy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw_token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kill_switch\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"eth_minimum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"personal_withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contract_eth_value\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"developer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"set_token\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_refunded\",\"type\":\"bool\"}],\"name\":\"set_refunded\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"password\",\"type\":\"string\"}],\"name\":\"activate_kill_switch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"EnjinBuyer","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://63d39507d7ec45212cdb40fb59d8f7363fc6e1e918c1018ec84d5953261cd0c9"}]