[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Muny.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\n\\nimport \\\"./libraries/Packed64.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract Muny is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Packed64 for uint256;\\n\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    mapping(address => uint256) public _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint16 public fee;\\n    uint256 public burnedSupply;\\n    address public treasuryDao;\\n    address public fedDAO;\\n\\n    mapping(address => uint256) public tvote;\\n    mapping(address => address) public tvotedaddrs;\\n    mapping(address => uint256) public tvoted;\\n\\n    mapping(address => uint256) public fvote;\\n    mapping(address => address) public fvotedaddrs;\\n    mapping(address => uint256) public fvoted;\\n\\n    uint256 public prop;\\n    uint256 public tlock;\\n    uint256 public lockxp;\\n\\n    struct Proposal {\\n        address proposer;\\n        uint256 lock;\\n        uint16 pfee;\\n        uint256 mintam;\\n        uint256 inflate;\\n        uint256 lockmin;\\n        uint256 lockx;\\n        address burnaddress;\\n        uint256 burnamount;\\n        bool executed;\\n    }\\n\\n    mapping(address => bool) public Frozen;\\n    mapping(uint256 => Proposal) public proposals;\\n\\n    event NewTreasury(address indexed treasuryad);\\n    event NewFed(address indexed fedad);\\n    event Newproposal(uint256 indexed prop);\\n    event Proposalexecuted(uint256 indexed prop);\\n    event Proposalcanceled(uint256 indexed prop);\\n    event DividendClaim(address indexed owner, uint256 amount);\\n    event Disbursal(uint256 amount);\\n    event Memo(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed value,\\n        string memo\\n    );\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 8.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address fed,\\n        address treasury\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 8;\\n        treasuryDao = treasury;\\n        fedDAO = fed;\\n\\n\\n\\n\\n        _totalSupply = 10000000000000000; // 100,000,000\\n        _balances[treasury] = 10000000000000000;\\n        emit Transfer(address(0), treasury, 10000000000000000);\\n        tlock = 3 days;\\n        lockxp = 14 days;\\n        fee = 500;\\n    }\\n\\n    /* ============= Abflation ============= */\\n\\n    function _abVal(uint256 amt) internal view returns (uint256) {\\n        return amt.mul(_totalSupply.sub(burnedSupply)).div(_totalSupply);\\n    }\\n\\n    function _burn(uint256 amount) internal {\\n        burnedSupply = burnedSupply + amount;\\n    }\\n\\n    /* ============= Dividends ============= */\\n\\n    uint256 internal constant POINT_MULTIPLIER = 1e8;\\n    uint256 public totalDisbursals;\\n    mapping(uint256 => uint256) public packedDisbursals;\\n    mapping(address => uint256) public lastDisbursalIndex;\\n\\n    function _disburse(uint256 amount) internal {\\n        uint256 newDividendPoints = amount.mul(POINT_MULTIPLIER).div(\\n            _totalSupply.sub(burnedSupply)\\n        );\\n        require(\\n            newDividendPoints < uint64(-1),\\n            \\\"Error: Disbursal points do not fit in a uint64.\\\"\\n        );\\n        uint256 total = totalDisbursals;\\n        uint256 packedIndex = total / 4;\\n        uint256 relIndex = total % 4;\\n        uint256 packedPoints = packedDisbursals[packedIndex];\\n        packedDisbursals[packedIndex] = packedPoints.write64(\\n            relIndex,\\n            uint64(newDividendPoints)\\n        );\\n        totalDisbursals = total + 1;\\n        _mint(amount);\\n        emit Disbursal(amount);\\n    }\\n\\n    function getDividendsOwed(address account, uint256 until)\\n    public\\n    view\\n    returns (uint256)\\n    {\\n        uint256 lastDividendsClaimed = lastDisbursalIndex[account];\\n        if (until == lastDividendsClaimed) return 0;\\n        uint256 originalBalance = _balances[account];\\n        if (originalBalance == 0) return 0;\\n        require(until > lastDividendsClaimed, \\\"Dividends already claimed.\\\");\\n        require(\\n            until <= totalDisbursals,\\n            \\\"Can not claim dividends that have not been disbursed.\\\"\\n        );\\n        uint256 packedIndexStop = until / 4;\\n        uint256 relIndexStop = until % 4;\\n        uint256 packedIndexNext = lastDividendsClaimed / 4;\\n        uint256 relIndexNext = lastDividendsClaimed % 4;\\n        uint256 compoundBalance = originalBalance;\\n        uint256 packedPoints = packedDisbursals[packedIndexNext];\\n        while (packedIndexNext < packedIndexStop) {\\n            for (; relIndexNext < 4; relIndexNext++) {\\n                compoundBalance = compoundBalance.add(\\n                    compoundBalance.mul(packedPoints.read64(relIndexNext)).div(\\n                        POINT_MULTIPLIER\\n                    )\\n                );\\n            }\\n            relIndexNext = 0;\\n            packedPoints = packedDisbursals[++packedIndexNext];\\n        }\\n        while (relIndexNext < relIndexStop) {\\n            compoundBalance = compoundBalance.add(\\n                compoundBalance.mul(packedPoints.read64(relIndexNext++)).div(\\n                    POINT_MULTIPLIER\\n                )\\n            );\\n        }\\n        return compoundBalance.sub(originalBalance);\\n    }\\n\\n    function getDividendsOwed(address account) public view returns (uint256) {\\n        return getDividendsOwed(account, totalDisbursals);\\n    }\\n\\n    function claimDividends(address account, uint256 until) public {\\n        uint256 owed = getDividendsOwed(account, until);\\n        if (owed > 0) {\\n            _balances[account] = _balances[account].add(owed);\\n        }\\n        lastDisbursalIndex[account] = until;\\n    }\\n\\n    function claimDividends(address account) public {\\n        claimDividends(account, totalDisbursals);\\n    }\\n\\n    modifier updatesDividends(address account) {\\n        claimDividends(account);\\n        _;\\n    }\\n\\n    /* ============= ERC20 Views ============= */\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        uint256 owed = getDividendsOwed(account);\\n        uint256 balance = _balances[account].add(owed);\\n        return balance.mul(_totalSupply).div(_totalSupply.sub(burnedSupply));\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /* ============= ERC20 Mutative ============= */\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n    {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n    public\\n    virtual\\n    returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n    public\\n    virtual\\n    returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount)\\n    public\\n    virtual\\n    override\\n    returns (bool)\\n    {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function transferx(\\n        address[] memory to,\\n        uint256[] memory tokens,\\n        string[] memory memo\\n    ) public returns (bool success) {\\n        require(to.length == tokens.length && tokens.length == memo.length);\\n        for (uint256 i = 0; i < to.length; i++) {\\n            require(transfer(to[i], tokens[i]));\\n            emit Memo(msg.sender, to[i], tokens[i], memo[i]);\\n        }\\n        return true;\\n    }\\n\\n    function freeze(address account) public returns (bool) {\\n        require (msg.sender == fedDAO);\\n        Frozen[account] = true;\\n    }\\n    function unfreeze(address account) public returns (bool) {\\n        require (msg.sender == fedDAO);\\n        Frozen[account] = false;\\n    }\\n\\n    modifier cfrozen(address account) {\\n        if (Frozen[account]  ==  true)\\n            revert();\\n        _;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amountt\\n    ) internal cfrozen(sender) {\\n        uint256 total = totalDisbursals;\\n        claimDividends(sender, total);\\n        claimDividends(recipient, total);\\n        claimDividends(treasuryDao, total);\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 amount = _abVal(amountt);\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(\\n            uint256((amount * (99500 - fee)) / 100000)\\n        );\\n\\n        _updateVotes(sender, amountt);\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, recipient, amountt);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(uint256 amount) internal virtual {\\n        require(msg.sender == fedDAO, \\\"not fedDAO\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /* ============= Governance ============= */\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n\\n    function newproposal(\\n        uint256 fnd,\\n        uint16 fam,\\n        uint256 mint,\\n        uint256 lockmn,\\n        address burntarget,\\n        uint256 burnam,\\n        uint256 lockxp_\\n    ) public {\\n        require(lockxp_ >= 6 hours ||lockxp_ == 0);\\n        require(lockmn >= 3 days || lockmn == 0);\\n        require(msg.sender == fedDAO);\\n\\n        prop += 1;\\n        uint256 proposal = prop;\\n\\n        proposals[proposal].proposer = msg.sender;\\n        proposals[proposal].lock = now + tlock;\\n        proposals[proposal].pfee = fam;\\n        proposals[proposal].burnaddress = burntarget;\\n        proposals[proposal].burnamount = burnam;\\n        proposals[proposal].mintam = fnd;\\n        proposals[proposal].inflate = mint;\\n        proposals[proposal].lockmin = lockmn;\\n        proposals[proposal].lockx = lockxp_;\\n        emit Newproposal(proposal);\\n    }\\n\\n    function cancelproposal(uint256 proposal)\\n    public\\n    {\\n        require(proposals[proposal].executed == false);\\n        require(msg.sender == fedDAO);\\n\\n        proposals[proposal].executed = true;\\n        emit Proposalcanceled(proposal);\\n    }\\n\\n    function executeproposal(uint256 proposal)\\n    public\\n    updatesDividends(treasuryDao)\\n    {\\n        require(now >= proposals[proposal].lock && proposals[proposal].lock + lockxp >= now);\\n        require(proposals[proposal].executed == false);\\n        require(msg.sender == fedDAO);\\n        require(msg.sender == proposals[proposal].proposer);\\n\\n        if (proposals[proposal].mintam != 0) {\\n            _mint(proposals[proposal].mintam);\\n            _balances[treasuryDao] = _balances[treasuryDao].add(\\n                proposals[proposal].mintam\\n            );\\n        }\\n\\n        if (proposals[proposal].burnaddress != address(0)) {\\n            burnfed(proposals[proposal].burnaddress, proposals[proposal].burnamount);\\n        }\\n\\n        if (2500 >= proposals[proposal].pfee) {\\n            fee = proposals[proposal].pfee;\\n        }\\n\\n        if (proposals[proposal].inflate != 0) {\\n            _disburse(proposals[proposal].inflate);\\n        }\\n\\n        if (proposals[proposal].lockmin != 0) {\\n            tlock = proposals[proposal].lockmin;\\n        }\\n        if (proposals[proposal].lockx != 0) {\\n            lockxp = proposals[proposal].lockx;\\n        }\\n\\n        proposals[proposal].executed = true;\\n        emit Proposalexecuted(proposal);\\n    }\\n\\n    function setNewTDao(address treasury) public returns (bool) {\\n        require(\\n            tvote[treasury] > uint256((_totalSupply * 51) / 100),\\n            \\\"Muny: setNewTDao requires majority approval\\\"\\n        );\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Muny: setNewTDao requires non contract\\\"\\n        );\\n        treasuryDao = treasury;\\n        emit NewTreasury(treasury);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\\n     *      Voted sender vote amount.\\n     */\\n    function updatetreasuryVote(address treasury)\\n    public\\n    updatesDividends(msg.sender)\\n    returns (bool)\\n    {\\n        tvote[tvotedaddrs[msg.sender]] -= tvoted[msg.sender];\\n        tvote[treasury] += uint256(balanceOf(msg.sender));\\n        tvotedaddrs[msg.sender] = treasury;\\n        tvoted[msg.sender] = uint256(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function setNewfedDao(address fed) public returns (bool) {\\n        require(\\n            fvote[fed] > uint256((_totalSupply * 51) / 100),\\n            \\\"setNewfedDao requires majority approval\\\"\\n        );\\n        require(msg.sender == tx.origin, \\\"setNewfedDao requires non contract\\\");\\n        fedDAO = fed;\\n        emit NewFed(fed);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Update votes. Votedad voted address by sender. Votet treasury address votes.\\n     *      Voted sender vote amount.\\n     */\\n    function updatefedVote(address fed)\\n    public\\n    updatesDividends(msg.sender)\\n    returns (bool)\\n    {\\n        fvote[fvotedaddrs[msg.sender]] -= fvoted[msg.sender];\\n        fvote[fed] += uint256(balanceOf(msg.sender));\\n        fvotedaddrs[msg.sender] = fed;\\n        fvoted[msg.sender] = uint256(balanceOf(msg.sender));\\n        return true;\\n    }\\n\\n    function _updateVotes(address sender, uint256 amountt) internal {\\n        if (fvoted[sender] > 0) {\\n            address votedAddr = fvotedaddrs[sender];\\n            if (fvoted[sender] > amountt) {\\n                fvote[votedAddr] = fvote[votedAddr] - amountt;\\n                fvoted[sender] = fvoted[sender] - amountt;\\n            } else {\\n                fvote[votedAddr] -= fvoted[sender];\\n                fvoted[sender] = 0;\\n            }\\n        }\\n\\n        if (tvoted[sender] > 0) {\\n            address votedAddr = tvotedaddrs[sender];\\n            if (tvoted[sender] > amountt) {\\n                tvote[votedAddr] = tvote[votedAddr] - amountt;\\n                tvoted[sender] = tvoted[sender] - amountt;\\n            } else {\\n                tvote[votedAddr] -= tvoted[sender];\\n                tvoted[sender] = 0;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function burnfed(address target, uint256 amountt)\\n    internal\\n    returns (bool success)\\n    {\\n        uint256 total = totalDisbursals;\\n        claimDividends(target, total);\\n        claimDividends(treasuryDao, total);\\n        address sender = target;\\n        uint256 amount;\\n        require(msg.sender == fedDAO, \\\"transfer from nonfed address\\\");\\n        amount = uint256(\\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\\n        );\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        _updateVotes(sender, amountt);\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256((amount * (99500 - fee)) / 100000));\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, address(0), amount);\\n        return true;\\n    }\\n\\n    function burnt(uint256 amountt)\\n    public\\n    updatesDividends(msg.sender)\\n    updatesDividends(treasuryDao)\\n    returns (bool success)\\n    {\\n        address sender = msg.sender;\\n        uint256 amount;\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        amount = uint256(\\n            (amountt * (_totalSupply - burnedSupply)) / _totalSupply\\n        );\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        _updateVotes(sender, amountt);\\n\\n        _balances[treasuryDao] = _balances[treasuryDao].add(\\n            uint256((amount * fee) / 100000)\\n        );\\n        _burn(uint256((amount * (99500 - fee)) / 100000));\\n        _burn(uint256(amount / 200));\\n        emit Transfer(sender, address(0), amount);\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/GSN/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\"\r\n    },\r\n    \"contracts/libraries/Packed64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.0;\\n\\nlibrary Packed64 {\\n    function read64(uint256 packed, uint256 index)\\n    internal\\n    pure\\n    returns (uint64 value)\\n    {\\n        assembly {\\n            value := shl(mul(index, 64), packed)\\n            value := shr(192, value)\\n        }\\n    }\\n\\n    function write64(\\n        uint256 packed,\\n        uint256 index,\\n        uint64 newValue\\n    ) internal pure returns (uint256 newPacked) {\\n        assembly {\\n            let shiftedValue := shl(mul(sub(3, index), 64), newValue)\\n            newPacked := or(shiftedValue, packed)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Disbursal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"Memo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fedad\",\"type\":\"address\"}],\"name\":\"NewFed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasuryad\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prop\",\"type\":\"uint256\"}],\"name\":\"Newproposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prop\",\"type\":\"uint256\"}],\"name\":\"Proposalcanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"prop\",\"type\":\"uint256\"}],\"name\":\"Proposalexecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Frozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnedSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountt\",\"type\":\"uint256\"}],\"name\":\"burnt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"cancelproposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposal\",\"type\":\"uint256\"}],\"name\":\"executeproposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fedDAO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"fvotedaddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"getDividendsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDividendsOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDisbursalIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockxp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fnd\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fam\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockmn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burntarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockxp_\",\"type\":\"uint256\"}],\"name\":\"newproposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"packedDisbursals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lock\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"pfee\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"mintam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockmin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnaddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnamount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"setNewTDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"}],\"name\":\"setNewfedDao\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDisbursals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"memo\",\"type\":\"string[]\"}],\"name\":\"transferx\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tvotedaddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fed\",\"type\":\"address\"}],\"name\":\"updatefedVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"updatetreasuryVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Muny","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000002dca1464cc90a4f642713963e69bd826b1b94b12000000000000000000000000221d1fa137929981220d6b4144f2929e9a2bf7f500000000000000000000000000000000000000000000000000000000000000044d756e790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d554e5900000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]