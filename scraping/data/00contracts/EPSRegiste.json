[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/EPS FOR VERIFICATION/EPSRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\nimport \\\"./IERC721DelegateRegister.sol\\\";\\nimport \\\"./IERC1155DelegateRegister.sol\\\";\\nimport \\\"./IERC20DelegateRegister.sol\\\";\\nimport \\\"./ProxyRegister.sol\\\";\\nimport \\\"./ENSReverseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n *\\n * @dev The EPS Register contract, implementing the proxy and deligate registers\\n *\\n */\\ncontract EPSRegister is ProxyRegister {\\n  using SafeERC20 for IERC20;\\n\\n  struct MigratedRecord {\\n    address hot;\\n    address cold;\\n    address delivery;\\n  }\\n\\n  // Record migration complete:\\n  bool public migrationComplete;\\n\\n  ENSReverseRegistrar public ensReverseRegistrar;\\n\\n  // EPS treasury address:\\n  address public treasury;\\n\\n  // EPS ERC721 delegation register\\n  IERC721DelegateRegister public erc721DelegationRegister;\\n  bool public erc721DelegationRegisterAddressLocked;\\n\\n  // EPS ERC1155 delegation register\\n  IERC1155DelegateRegister public erc1155DelegationRegister;\\n  bool public erc1155DelegationRegisterAddressLocked;\\n\\n  // EPS ERC20 delegation register\\n  IERC20DelegateRegister public erc20DelegationRegister;\\n  bool public erc20DelegationRegisterAddressLocked;\\n\\n  // Count of active ETH addresses for total supply\\n  uint256 public activeEthAddresses = 1;\\n\\n  // 'Air drop' of EPSAPI to every address\\n  uint256 public epsAPIBalance = 10000 * (10**decimals());\\n\\n  error ColdWalletCannotInteractUseHot();\\n  error EthWithdrawFailed();\\n  error UnknownAmount();\\n  error RegisterAddressLocked();\\n  error MigrationIsAllowedOnceOnly();\\n\\n  event ERC20FeeUpdated(address erc20, uint256 erc20Fee_);\\n  event MigrationComplete();\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event ENSReverseRegistrarSet(address ensReverseRegistrarAddress);\\n\\n  /**\\n   * @dev Constructor - change ownership\\n   */\\n  constructor() {\\n    _transferOwnership(0x9F0773aF2b1d3f7cC7030304548A823B4E6b13bB);\\n  }\\n\\n  // ======================================================\\n  // VIEW METHODS\\n  // ======================================================\\n\\n  /**\\n   * @dev beneficiaryOf: Returns the beneficiary of the `tokenId` token for an ERC721\\n   */\\n  function beneficiaryOf(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 rightsIndex_\\n  ) external view returns (address beneficiary_) {\\n    // 1 Check for an active delegation. We need a concept of a 'senior right', which\\n    // we have elected to be airdrop rights, being the right of the holder to receive\\n    // free benefits associated with being a beneficiary. If we are looking for a beneficiary\\n    // rights index out of bounds default to an airdrop rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    beneficiary_ = erc721DelegationRegister.getBeneficiaryByRight(\\n      tokenContract_,\\n      tokenId_,\\n      rightsIndex_\\n    );\\n\\n    if (beneficiary_ == address(0)) {\\n      // 2 No delegation. Get the owner:\\n      beneficiary_ = IERC721(tokenContract_).ownerOf(tokenId_);\\n\\n      // 3 Check if this is a proxied benefit\\n      if (coldIsLive(beneficiary_)) {\\n        beneficiary_ = coldToHot[beneficiary_];\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev beneficiaryBalance: Returns the beneficiary balance of ETH.\\n   */\\n  function beneficiaryBalance(address queryAddress_)\\n    external\\n    view\\n    returns (uint256 balance_)\\n  {\\n    // Get any balances held at a nominated cold address\\n    if (hotIsLive(queryAddress_)) {\\n      // This is a hot address with a current record - include the balance\\n      // held natively by this address and the cold:\\n      balance_ += queryAddress_.balance;\\n\\n      balance_ += hotToRecord[queryAddress_].cold.balance;\\n    } else {\\n      // Check if this is cold wallet on an active record. If so do not include balance as that is absorbed into the proxy\\n      if (!coldIsLive(queryAddress_)) {\\n        balance_ += queryAddress_.balance;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev beneficiaryBalanceOf: Returns the beneficiary balance for an ERC721\\n   */\\n  function beneficiaryBalanceOf(\\n    address queryAddress_,\\n    address tokenContract_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256 balance_) {\\n    // 1a If this is a delegation container the balance is always 0, as the balance associated\\n    // will be for the benefit of either the original asset owner or the delegate, depending\\n    // on the delegation parameters:\\n    if (erc721DelegationRegister.containerToDelegationId(queryAddress_) != 0) {\\n      return (0);\\n    }\\n\\n    // 1b We need a concept of a 'senior right', which we have elected to be airdrop rights,\\n    // being the right of the holder to receive free benefits associated with being a beneficiary.\\n    // If we are looking for a beneficiary rights index out of bounds default to an airdrop\\n    // rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    // 2 Get delegated balances:\\n    balance_ = erc721DelegationRegister.getBalanceByRight(\\n      tokenContract_,\\n      queryAddress_,\\n      rightsIndex_\\n    );\\n\\n    // 3 Add any balances held at a nominated cold address\\n    if (hotIsLive(queryAddress_)) {\\n      // This is a hot address with a current record - add on the balances\\n      // held natively by this address and the cold:\\n      balance_ += (IERC721(tokenContract_).balanceOf(queryAddress_));\\n\\n      address cold = hotToRecord[queryAddress_].cold;\\n\\n      balance_ += IERC721(tokenContract_).balanceOf(cold);\\n    } else {\\n      // Check if this is cold wallet on an active record. If so do not include balance as that is absorbed into the proxy\\n      if (!coldIsLive(queryAddress_)) {\\n        balance_ += IERC721(tokenContract_).balanceOf(queryAddress_);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev beneficiaryBalanceOf1155: Returns the beneficiary balance for an ERC1155.\\n   */\\n  function beneficiaryBalanceOf1155(\\n    address queryAddress_,\\n    address tokenContract_,\\n    uint256 id_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256 balance_) {\\n    // 1a If this is a delegation container the balance is always 0, as the balance associated\\n    // will be for the benefit of either the original asset owner or the delegate, depending\\n    // on the delegation parameters:\\n    if (erc1155DelegationRegister.containerToDelegationId(queryAddress_) != 0) {\\n      return (0);\\n    }\\n\\n    // 1b We need a concept of a 'senior right', which we have elected to be airdrop rights,\\n    // being the right of the holder to receive free benefits associated with being a beneficiary.\\n    // If we are looking for a beneficiary rights index out of bounds default to an airdrop\\n    // rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    // 2 Get delegated balances:\\n    balance_ = erc1155DelegationRegister.getBalanceByRight(\\n      tokenContract_,\\n      id_,\\n      queryAddress_,\\n      rightsIndex_\\n    );\\n\\n    // Add any balances held at a nominated cold address\\n    if (hotIsLive(queryAddress_)) {\\n      // This is a hot address with a current record - add on the balances\\n      // held natively by this address and the cold:\\n      balance_ += (IERC1155(tokenContract_).balanceOf(queryAddress_, id_));\\n\\n      address cold = hotToRecord[queryAddress_].cold;\\n\\n      balance_ += IERC1155(tokenContract_).balanceOf(cold, id_);\\n    } else {\\n      // Check if this is cold wallet on an active record. If so do not include balance as that is absorbed into the proxy\\n      if (!coldIsLive(queryAddress_)) {\\n        balance_ += IERC1155(tokenContract_).balanceOf(queryAddress_, id_);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev beneficiaryBalanceOf20: Returns the beneficiary balance for an ERC20 or ERC777\\n   */\\n  function beneficiaryBalanceOf20(\\n    address queryAddress_,\\n    address tokenContract_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256 balance_) {\\n    // 1a If this is a delegation container the balance is always 0, as the balance associated\\n    // will be for the benefit of either the original asset owner or the delegate, depending\\n    // on the delegation parameters:\\n    if (erc20DelegationRegister.containerToDelegationId(queryAddress_) != 0) {\\n      return (0);\\n    }\\n\\n    // 1b We need a concept of a 'senior right', which we have elected to be airdrop rights,\\n    // being the right of the holder to receive free benefits associated with being a beneficiary.\\n    // If we are looking for a beneficiary rights index out of bounds default to an airdrop\\n    // rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    // 2 Get delegated balances:\\n    balance_ = erc20DelegationRegister.getBalanceByRight(\\n      tokenContract_,\\n      queryAddress_,\\n      rightsIndex_\\n    );\\n\\n    // 3 Add any balances held at a nominated cold address\\n    if (hotIsLive(queryAddress_)) {\\n      // This is a hot address with a current record - add on the balances\\n      // held natively by this address and the cold:\\n      balance_ += (IERC20(tokenContract_).balanceOf(queryAddress_));\\n\\n      address cold = hotToRecord[queryAddress_].cold;\\n\\n      balance_ += IERC20(tokenContract_).balanceOf(cold);\\n    } else {\\n      // Check if this is cold wallet on an active record. If so do not include balance as that is absorbed into the proxy\\n      if (!coldIsLive(queryAddress_)) {\\n        balance_ += IERC20(tokenContract_).balanceOf(queryAddress_);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev getAddresses721: Returns the register addresses for the passed address and rights index for ERC721\\n   *\\n     Possible scenarios are:\\n   \\n      1) The receivedAddress_ is NOT on the proxy register and is NOT on the delegate register\\n         In this instance the return values will be:\\n          - proxyAddresses_: \\n            - The recievedAddress_ at index 0\\n          - the receivedAddress_ as the delivery address\\n   \\n      2) The receivedAddress_ is a HOT address on the proxy register and is NOT on the delegate register\\n         In this instance the return values will be:\\n          - proxyAddresses_:\\n            - The receivedAddress_ at index 0\\n            - The COLD address at index 1\\n          - DELIVERY address as the delivery address\\n\\n      3) The receivedAddress_ is a COLD address on the proxy register (whether it  has entries on the \\n           delegate register or not)\\n          - proxyAddresses_:\\n            - NOTHING (i.e. empty array)\\n          - the receivedAddress_ as the delivery address \\n\\n      4) The receivedAddress_ is NOT on the proxy register BUT it DOES have entries on the delegate register\\n         In this instance the return values will be:\\n          - proxyAddresses_: \\n            - The recievedAddress_ at index 0\\n            - The delegate register entries at index 1 to n\\n          - the receivedAddress_ as the delivery address\\n\\n      5) The receivedAddress_ IS on the proxy register AND has entries on the delegate register\\n         In this instance the return values will be:\\n          - proxyAddresses_: \\n            - The recievedAddress_ at index 0\\n            - The COLD address at index 1\\n            - The delegate register entries at index 2 to n\\n           - DELIVERY address as the delivery address\\n\\n      Some points to note:\\n        * Index 0 in the returned address array will ALWAYS be the receivedAddress_ address UNLESS it's the address\\n          is a COLD wallet, in which case the array is empty. This enforces that a COLD wallet has no\\n          rights in its own right WITHOUT us needing to revert and have the caller handle the situation\\n        * Therefore if you wish to IGNORE the hot address, start any iteration over the returned list from index 1\\n          onwards. Index 1 (if it exists) will always either be the COLD address or the first entry from the delegate register.\\n\\n   *\\n   */\\n  function getAddresses721(address receivedAddress_, uint256 rightsIndex_)\\n    public\\n    view\\n    returns (address[] memory proxyAddresses_, address delivery_)\\n  {\\n    // We need a concept of a 'senior right', which\\n    // we have elected to be airdrop rights, being the right of the holder to receive\\n    // free benefits associated with being a beneficiary. If we are looking for a beneficiary\\n    // rights index out of bounds default to an airdrop rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    address cold;\\n    delivery_ = receivedAddress_;\\n\\n    if (coldIsLive(receivedAddress_)) {\\n      return (proxyAddresses_, receivedAddress_);\\n    }\\n\\n    if (hotIsLive(receivedAddress_)) {\\n      cold = hotToRecord[receivedAddress_].cold;\\n      delivery_ = hotToRecord[receivedAddress_].delivery;\\n    }\\n\\n    return (\\n      erc721DelegationRegister.getAllAddressesByRightsIndex(\\n        receivedAddress_,\\n        rightsIndex_,\\n        cold,\\n        true\\n      ),\\n      delivery_\\n    );\\n  }\\n\\n  /**\\n   * @dev getAddresses1155: Returns the register addresses for the passed address and rights index for ERC1155\\n   *\\n   */\\n  function getAddresses1155(address receivedAddress_, uint256 rightsIndex_)\\n    public\\n    view\\n    returns (address[] memory proxyAddresses_, address delivery_)\\n  {\\n    // We need a concept of a 'senior right', which\\n    // we have elected to be airdrop rights, being the right of the holder to receive\\n    // free benefits associated with being a beneficiary. If we are looking for a beneficiary\\n    // rights index out of bounds default to an airdrop rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    address cold;\\n    delivery_ = receivedAddress_;\\n\\n    if (coldIsLive(receivedAddress_)) {\\n      return (proxyAddresses_, receivedAddress_);\\n    }\\n\\n    if (hotIsLive(receivedAddress_)) {\\n      cold = hotToRecord[receivedAddress_].cold;\\n      delivery_ = hotToRecord[receivedAddress_].delivery;\\n    }\\n\\n    return (\\n      erc1155DelegationRegister.getAllAddressesByRightsIndex(\\n        receivedAddress_,\\n        rightsIndex_,\\n        cold,\\n        true\\n      ),\\n      delivery_\\n    );\\n  }\\n\\n  /**\\n   * @dev getAddresses20: Returns the register addresses for the passed address and rights index for ERC20 and 777\\n   *\\n   */\\n  function getAddresses20(address receivedAddress_, uint256 rightsIndex_)\\n    public\\n    view\\n    returns (address[] memory proxyAddresses_, address delivery_)\\n  {\\n    // We need a concept of a 'senior right', which\\n    // we have elected to be airdrop rights, being the right of the holder to receive\\n    // free benefits associated with being a beneficiary. If we are looking for a beneficiary\\n    // rights index out of bounds default to an airdrop rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    address cold;\\n    delivery_ = receivedAddress_;\\n\\n    if (coldIsLive(receivedAddress_)) {\\n      return (proxyAddresses_, receivedAddress_);\\n    }\\n\\n    if (hotIsLive(receivedAddress_)) {\\n      cold = hotToRecord[receivedAddress_].cold;\\n      delivery_ = hotToRecord[receivedAddress_].delivery;\\n    }\\n\\n    return (\\n      erc20DelegationRegister.getAllAddressesByRightsIndex(\\n        receivedAddress_,\\n        rightsIndex_,\\n        cold,\\n        true\\n      ),\\n      delivery_\\n    );\\n  }\\n\\n  /**\\n   * @dev getAllAddresses: Returns ALL register addresses for the passed address and rights index\\n   *\\n   */\\n  function getAllAddresses(address receivedAddress_, uint256 rightsIndex_)\\n    public\\n    view\\n    returns (\\n      address[] memory erc721Addresses_,\\n      address[] memory erc1155Addresses_,\\n      address[] memory erc20Addresses_,\\n      address delivery_\\n    )\\n  {\\n    // We need a concept of a 'senior right', which\\n    // we have elected to be airdrop rights, being the right of the holder to receive\\n    // free benefits associated with being a beneficiary. If we are looking for a beneficiary\\n    // rights index out of bounds default to an airdrop rights query (rights index position 1)\\n    if (rightsIndex_ == 0 || rightsIndex_ > 15) {\\n      rightsIndex_ = 1;\\n    }\\n\\n    address cold;\\n    delivery_ = receivedAddress_;\\n\\n    if (coldIsLive(receivedAddress_)) {\\n      return (\\n        erc721Addresses_,\\n        erc1155Addresses_,\\n        erc20Addresses_,\\n        receivedAddress_\\n      );\\n    }\\n\\n    if (hotIsLive(receivedAddress_)) {\\n      cold = hotToRecord[receivedAddress_].cold;\\n      delivery_ = hotToRecord[receivedAddress_].delivery;\\n    }\\n\\n    if (\\n      address(erc721DelegationRegister) == address(0) &&\\n      address(erc1155DelegationRegister) == address(0) &&\\n      address(erc20DelegationRegister) == address(0)\\n    ) {\\n      // This is unexpected, but theoretically possible. In this case, return\\n      // the base addresses in the first return array:\\n      uint256 addIndexes;\\n      if (cold != address(0)) {\\n        addIndexes = 2;\\n      } else {\\n        addIndexes = 1;\\n      }\\n\\n      address[] memory baseAddresses = new address[](addIndexes);\\n\\n      baseAddresses[0] = receivedAddress_;\\n      if (cold != address(0)) {\\n        baseAddresses[1] = cold;\\n      }\\n      return (baseAddresses, erc1155Addresses_, erc20Addresses_, delivery_);\\n    } else {\\n      bool includeBaseAddresses = true;\\n\\n      if (address(erc721DelegationRegister) != address(0)) {\\n        erc721Addresses_ = erc721DelegationRegister\\n          .getAllAddressesByRightsIndex(\\n            receivedAddress_,\\n            rightsIndex_,\\n            cold,\\n            includeBaseAddresses\\n          );\\n        includeBaseAddresses = false;\\n      }\\n\\n      if (address(erc1155DelegationRegister) != address(0)) {\\n        erc1155Addresses_ = erc1155DelegationRegister\\n          .getAllAddressesByRightsIndex(\\n            receivedAddress_,\\n            rightsIndex_,\\n            cold,\\n            includeBaseAddresses\\n          );\\n        includeBaseAddresses = false;\\n      }\\n\\n      if (address(erc20DelegationRegister) != address(0)) {\\n        erc20Addresses_ = erc20DelegationRegister.getAllAddressesByRightsIndex(\\n          receivedAddress_,\\n          rightsIndex_,\\n          cold,\\n          includeBaseAddresses\\n        );\\n        includeBaseAddresses = false;\\n      }\\n    }\\n    return (erc721Addresses_, erc1155Addresses_, erc20Addresses_, delivery_);\\n  }\\n\\n  /**\\n   * @dev getColdAndDeliveryAddresses: Returns the register address details (cold and delivery address) for a passed hot address\\n   */\\n  function getColdAndDeliveryAddresses(address _receivedAddress)\\n    public\\n    view\\n    returns (\\n      address cold,\\n      address delivery,\\n      bool isProxied\\n    )\\n  {\\n    if (coldIsLive(_receivedAddress)) revert ColdWalletCannotInteractUseHot();\\n\\n    if (hotIsLive(_receivedAddress)) {\\n      return (\\n        hotToRecord[_receivedAddress].cold,\\n        hotToRecord[_receivedAddress].delivery,\\n        true\\n      );\\n    } else {\\n      return (_receivedAddress, _receivedAddress, false);\\n    }\\n  }\\n\\n  // ======================================================\\n  // ADMIN FUNCTIONS\\n  // ======================================================\\n\\n  /**\\n   * @dev setRegisterFee: set the fee for accepting a registration:\\n   */\\n  function setRegisterFee(uint256 registerFee_) external onlyOwner {\\n    proxyRegisterFee = registerFee_;\\n  }\\n\\n  /**\\n   * @dev setDeletionNominalEth: set the nominal ETH transfer that represents an address ending a proxy\\n   */\\n  function setDeletionNominalEth(uint256 deleteNominalEth_) external onlyOwner {\\n    deletionNominalEth = deleteNominalEth_;\\n  }\\n\\n  /**\\n   *\\n   * @dev setRewardToken\\n   *\\n   */\\n  function setRewardToken(address rewardToken_) external onlyOwner {\\n    rewardToken = IOAT(rewardToken_);\\n    emit RewardTokenUpdated(rewardToken_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setRewardRate\\n   *\\n   */\\n  function setRewardRate(uint88 rewardRate_) external onlyOwner {\\n    if (rewardRateLocked) {\\n      revert RewardRateIsLocked();\\n    }\\n    rewardRate = rewardRate_;\\n    emit RewardRateUpdated(rewardRate_);\\n  }\\n\\n  /**\\n   *\\n   * @dev lockRewardRate\\n   *\\n   */\\n  function lockRewardRate() external onlyOwner {\\n    rewardRateLocked = true;\\n    emit RewardRateLocked();\\n  }\\n\\n  /**\\n   *\\n   * @dev setENSName (used to set reverse record so interactions with this contract are easy to\\n   * identify)\\n   *\\n   */\\n  function setENSName(string memory ensName_) external onlyOwner {\\n    ensReverseRegistrar.setName(ensName_);\\n  }\\n\\n  /**\\n   * @dev setTreasuryAddress: set the treasury address:\\n   */\\n  function setTreasuryAddress(address treasuryAddress_) public onlyOwner {\\n    treasury = treasuryAddress_;\\n  }\\n\\n  /**\\n   * @dev setERC721DelegationRegister: set the delegation register address:\\n   */\\n  function setERC721DelegationRegister(address erc721DelegationRegister_)\\n    public\\n    onlyOwner\\n  {\\n    if (erc721DelegationRegisterAddressLocked) {\\n      revert RegisterAddressLocked();\\n    }\\n    erc721DelegationRegister = IERC721DelegateRegister(\\n      erc721DelegationRegister_\\n    );\\n  }\\n\\n  /**\\n   * @dev lockERC721DelegationRegisterAddress\\n   */\\n  function lockERC721DelegationRegisterAddress() public onlyOwner {\\n    erc721DelegationRegisterAddressLocked = true;\\n  }\\n\\n  /**\\n   * @dev setERC1155DelegationRegister: set the delegation register address:\\n   */\\n  function setERC1155DelegationRegister(address erc1155DelegationRegister_)\\n    public\\n    onlyOwner\\n  {\\n    if (erc1155DelegationRegisterAddressLocked) {\\n      revert RegisterAddressLocked();\\n    }\\n    erc1155DelegationRegister = IERC1155DelegateRegister(\\n      erc1155DelegationRegister_\\n    );\\n  }\\n\\n  /**\\n   * @dev lockERC1155DelegationRegisterAddress\\n   */\\n  function lockERC1155DelegationRegisterAddress() public onlyOwner {\\n    erc1155DelegationRegisterAddressLocked = true;\\n  }\\n\\n  /**\\n   * @dev setERC20DelegationRegister: set the delegation register address:\\n   */\\n  function setERC20DelegationRegister(address erc20DelegationRegister_)\\n    public\\n    onlyOwner\\n  {\\n    if (erc20DelegationRegisterAddressLocked) {\\n      revert RegisterAddressLocked();\\n    }\\n    erc20DelegationRegister = IERC20DelegateRegister(erc20DelegationRegister_);\\n  }\\n\\n  /**\\n   * @dev lockERC20DelegationRegisterAddress\\n   */\\n  function lockERC20DelegationRegisterAddress() public onlyOwner {\\n    erc20DelegationRegisterAddressLocked = true;\\n  }\\n\\n  /**\\n   * @dev setActiveEthAddresses: used in the psuedo total supply calc:\\n   */\\n  function setNNumberOfEthAddressesAndAirdropAmount(\\n    uint256 count_,\\n    uint256 air_\\n  ) public onlyOwner {\\n    activeEthAddresses = count_;\\n    epsAPIBalance = air_;\\n  }\\n\\n  /**\\n   * @dev withdrawETH: withdraw eth to the treasury:\\n   */\\n  function withdrawETH(uint256 amount_) external onlyOwner {\\n    (bool success, ) = treasury.call{value: amount_}(\\\"\\\");\\n\\n    if (!success) revert EthWithdrawFailed();\\n  }\\n\\n  /**\\n   * @dev withdrawERC20: Allow any ERC20s to be withdrawn Note, this is provided to enable the\\n   * withdrawal of payments using valid ERC20s. Assets sent here in error are retrieved with\\n   * rescueERC20\\n   */\\n  function withdrawERC20(IERC20 token_, uint256 amount_) external onlyOwner {\\n    token_.safeTransfer(treasury, amount_);\\n  }\\n\\n  /**\\n   * @dev rescueERC20: Allow any ERC20s to be rescued. Note, this is provided to enable the\\n   * withdrawal assets sent here in error. ERC20 fee payments are withdrawn to the treasury.\\n   * in withDrawERC1155\\n   */\\n  function rescueERC20(IERC20 token_, uint256 amount_) external onlyOwner {\\n    token_.safeTransfer(owner(), amount_);\\n  }\\n\\n  /**\\n   * @dev rescueERC721: Allow any ERC721s to be rescued. Note, all delegated ERC721s are in their\\n   * own contract, NOT on this contract. This is provided to enable the withdrawal of\\n   * any assets sent here in error using transferFrom not safeTransferFrom.\\n   */\\n\\n  function rescueERC721(IERC721 token_, uint256 tokenId_) external onlyOwner {\\n    token_.transferFrom(address(this), owner(), tokenId_);\\n  }\\n\\n  /**\\n   * @dev rescueERC1155: Allow any ERC1155s to be rescued. Note, all delegated ERC1155s are in their\\n   * own contract, NOT on this contract. This is provided to enable the withdrawal of\\n   * any assets sent here in error using transferFrom not safeTransferFrom.\\n   */\\n\\n  function rescueERC1155(IERC1155 token_, uint256 tokenId_) external onlyOwner {\\n    token_.safeTransferFrom(\\n      address(this),\\n      owner(),\\n      tokenId_,\\n      token_.balanceOf(address(this), tokenId_),\\n      \\\"\\\"\\n    );\\n  }\\n\\n  /**\\n   *\\n   * @dev setERC20Fee\\n   *\\n   */\\n  function setERC20Fee(address erc20_, uint256 erc20Fee_) external onlyOwner {\\n    erc20PerTransactionFee[erc20_] = erc20Fee_;\\n    emit ERC20FeeUpdated(erc20_, erc20Fee_);\\n  }\\n\\n  /**\\n   *\\n   * @dev setENSReverseRegistrar\\n   *\\n   */\\n  function setENSReverseRegistrar(address ensReverseRegistrar_)\\n    external\\n    onlyOwner\\n  {\\n    ensReverseRegistrar = ENSReverseRegistrar(ensReverseRegistrar_);\\n    emit ENSReverseRegistrarSet(ensReverseRegistrar_);\\n  }\\n\\n  /**\\n   * @dev One-off migration routine to bring in register details from a previous version\\n   */\\n  function migration(MigratedRecord[] memory migratedRecords_)\\n    external\\n    onlyOwner\\n  {\\n    if (migrationComplete) {\\n      revert MigrationIsAllowedOnceOnly();\\n    }\\n\\n    for (uint256 i = 0; i < migratedRecords_.length; ) {\\n      MigratedRecord memory currentRecord = migratedRecords_[i];\\n\\n      _processNomination(\\n        currentRecord.hot,\\n        currentRecord.cold,\\n        currentRecord.delivery,\\n        true,\\n        0\\n      );\\n\\n      _acceptNomination(currentRecord.hot, currentRecord.cold, 0, 0);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    migrationComplete = true;\\n\\n    emit MigrationComplete();\\n  }\\n\\n  // ======================================================\\n  // ETH CALL ENTRY POINT\\n  // ======================================================\\n\\n  /**\\n   *\\n   * @dev receive: Wallets need never connect directly to add to EPS register, rather they can\\n   * interact through ETH or ERC20 transfers. This 'air gaps' your wallet(s) from\\n   * EPS. ETH transfers can be used to pay the fee or delete a record (sent from either\\n   * the hot or the cold wallet).\\n   *\\n   */\\n  receive() external payable {\\n    if (\\n      msg.value != proxyRegisterFee &&\\n      msg.value != deletionNominalEth &&\\n      erc721DelegationRegister.containerToDelegationId(msg.sender) == 0 &&\\n      erc1155DelegationRegister.containerToDelegationId(msg.sender) == 0 &&\\n      erc20DelegationRegister.containerToDelegationId(msg.sender) == 0 &&\\n      msg.sender != owner()\\n    ) revert UnknownAmount();\\n\\n    if (msg.value == proxyRegisterFee) {\\n      _payFee(msg.sender);\\n    } else if (msg.value == deletionNominalEth) {\\n      // Either hot or cold requesting a deletion:\\n      _deleteRecord(msg.sender, 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev _payFee: process receipt of payment\\n   */\\n  function _payFee(address from_) internal {\\n    // 1) If our from address is a hot address and the proxy is pending payment we\\n    // can record this as paid and put the record live:\\n    if (hotToRecord[from_].status == ProxyStatus.PendingPayment) {\\n      _recordLive(\\n        from_,\\n        hotToRecord[from_].cold,\\n        hotToRecord[from_].delivery,\\n        hotToRecord[from_].provider\\n      );\\n    } else if (\\n      // 2) If our from address is a cold address and the proxy is pending payment we\\n      // can record this as paid and put the record live:\\n      hotToRecord[coldToHot[from_]].status == ProxyStatus.PendingPayment\\n    ) {\\n      _recordLive(\\n        coldToHot[from_],\\n        from_,\\n        hotToRecord[coldToHot[from_]].delivery,\\n        hotToRecord[coldToHot[from_]].provider\\n      );\\n    } else revert NoPaymentPendingForAddress();\\n  }\\n\\n  // ======================================================\\n  // ERC20 METHODS (to expose API)\\n  // ======================================================\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public pure returns (string memory) {\\n    return \\\"EPS API\\\";\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public pure returns (string memory) {\\n    return \\\"EPSAPI\\\";\\n  }\\n\\n  function balanceOf(address) public view returns (uint256) {\\n    return epsAPIBalance;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view returns (uint256) {\\n    return activeEthAddresses * epsAPIBalance;\\n  }\\n\\n  /**\\n   * @dev Doesn't move tokens at all. There was no spoon and there are no tokens.\\n   * Rather the quantity being 'sent' denotes the action the user is taking\\n   * on the EPS register, and the address they are 'sent' to is the address that is\\n   * being referenced by this request.\\n   */\\n  function transfer(address to, uint256 amount) public returns (bool) {\\n    _tokenAPICall(msg.sender, to, amount);\\n\\n    emit Transfer(msg.sender, to, 0);\\n\\n    return (true);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/ENSReverseRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\n\\nabstract contract ENSReverseRegistrar {\\n  function setName(string memory name) public virtual returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/ProxyRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IEPSProxyRegister.sol\\\";\\nimport \\\"./IOAT.sol\\\";\\nimport \\\"./IERCOmnReceiver.sol\\\";\\n\\n/**\\n *\\n * @dev The EPS Proxy Register contract. This contract implements a trustless proof of proxy between\\n * two addresses, allowing the hot address to operate with the same rights as a cold address, and\\n * for new assets to be delivered to a configurable delivery address.\\n *\\n */\\ncontract ProxyRegister is IEPSProxyRegister, IERCOmnReceiver, Ownable {\\n  // ======================================================\\n  // CONSTANTS\\n  // ======================================================\\n\\n  // Constants denoting the API access types:\\n  uint256 constant HOT_NOMINATE_COLD = 1;\\n  uint256 constant COLD_ACCEPT_HOT = 2;\\n  uint256 constant CHANGE_DELIVERY = 3;\\n  uint256 constant DELETE_RECORD = 4;\\n\\n  // ======================================================\\n  // STORAGE\\n  // ======================================================\\n\\n  // Fee to add a live proxy record to the register. This must be sent by the cold or hot wallet\\n  // address to the contract AFTER the hot wallet has nominated the cold wallet and the cold\\n  // wallet has accepted. If a fee is payable the record will remain in paymentPending status\\n  // until it is paid. If no fee is being charged the record is live after the cold wallet has\\n  // accepted the nomination.\\n  uint256 public proxyRegisterFee;\\n\\n  // Cold wallet addresses need never call methods on EPS. All functionality is provided through\\n  // an ERC20 interface API, as well as traditional contract methods. To allow a cold wallet to delete\\n  // a proxy record without even using the ERC20 API, for example when the owner has lost access to\\n  // the hot wallet, we provide a nominal ETH payment, that if received from a cold wallet on a live\\n  // proxy will delete that proxy record.\\n  uint256 public deletionNominalEth;\\n\\n  // Reward token details:\\n  IOAT public rewardToken;\\n  uint88 public rewardRate;\\n  bool public rewardRateLocked;\\n\\n  // ======================================================\\n  // MAPPINGS\\n  // ======================================================\\n\\n  // Mapping between the hot wallet and the proxy record, the proxy record holding all the details of\\n  // the proxy relationship\\n  mapping(address => Record) public hotToRecord;\\n\\n  // Mapping from a cold address to the associated hot address\\n  mapping(address => address) public coldToHot;\\n\\n  mapping(address => uint256) public erc20PerTransactionFee;\\n\\n  /**\\n   * @dev Constructor - nothing required\\n   */\\n  constructor() {}\\n\\n  // ======================================================\\n  // VIEW METHODS\\n  // ======================================================\\n\\n  function decimals() public pure returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev isValidAddresses: Check the validity of sent addresses\\n   */\\n  function isValidAddresses(\\n    address hot_,\\n    address cold_,\\n    address delivery_\\n  ) public pure {\\n    if (cold_ == address(0)) revert ColdIsAddressZero();\\n    if (cold_ == hot_) revert ColdAddressCannotBeTheSameAsHot();\\n    if (delivery_ == address(0)) revert DeliveryIsAddressZero();\\n  }\\n\\n  /**\\n   * @dev addressIsAvailable: Return if an address isn't, as either hot or cold:\\n   * 1) live\\n   * 2) pending acceptance (unless we are checking as a cold address, which can be at pendingAcceptance infinite times)\\n   * 3) pending payment\\n   */\\n  function addressIsAvailable(address queryAddress_, bool checkingHot_)\\n    public\\n    view\\n    returns (bool)\\n  {\\n    // Check as cold:\\n    ProxyStatus currentStatus = hotToRecord[coldToHot[queryAddress_]].status;\\n\\n    if (\\n      currentStatus == ProxyStatus.Live ||\\n      currentStatus == ProxyStatus.PendingPayment ||\\n      // Cold addresses CAN be pending acceptance as many times as they like,\\n      // in fact it is vital that they can be, so we only check this for the hot\\n      // address:\\n      (checkingHot_ && currentStatus == ProxyStatus.PendingAcceptance)\\n    ) {\\n      return false;\\n    }\\n\\n    // Check as hot:\\n    currentStatus = hotToRecord[queryAddress_].status;\\n\\n    if (\\n      currentStatus == ProxyStatus.Live ||\\n      currentStatus == ProxyStatus.PendingPayment ||\\n      // Neither cold or hot can be a hot address, at any status\\n      currentStatus == ProxyStatus.PendingAcceptance\\n    ) {\\n      return false;\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev coldIsLive: Return if a cold wallet is live\\n   */\\n  function coldIsLive(address cold_) public view returns (bool) {\\n    return (hotToRecord[coldToHot[cold_]].status == ProxyStatus.Live);\\n  }\\n\\n  /**\\n   * @dev hotIsLive: Return if a hot wallet is live\\n   */\\n  function hotIsLive(address hot_) public view returns (bool) {\\n    return (hotToRecord[hot_].status == ProxyStatus.Live);\\n  }\\n\\n  /**\\n   * @dev coldIsActiveOnRegister: Return if a cold wallet is active\\n   */\\n  function coldIsActiveOnRegister(address cold_) public view returns (bool) {\\n    ProxyStatus currentStatus = hotToRecord[coldToHot[cold_]].status;\\n    return (currentStatus == ProxyStatus.Live ||\\n      currentStatus == ProxyStatus.PendingPayment);\\n  }\\n\\n  /**\\n   * @dev hotIsActiveOnRegister: Return if a hot wallet is active\\n   */\\n  function hotIsActiveOnRegister(address hot_) public view returns (bool) {\\n    ProxyStatus currentStatus = hotToRecord[hot_].status;\\n    return (currentStatus != ProxyStatus.None);\\n  }\\n\\n  /**\\n   * @dev getProxyRecordForHot: Get proxy details for a hot address\\n   */\\n  function getProxyRecordForHot(address hot_)\\n    public\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    )\\n  {\\n    Record memory currentItem = hotToRecord[hot_];\\n    return (\\n      currentItem.status,\\n      hot_,\\n      currentItem.cold,\\n      currentItem.delivery,\\n      currentItem.provider,\\n      currentItem.feePaid\\n    );\\n  }\\n\\n  /**\\n   * @dev getProxyRecordForCold: Get proxy details for a cold address\\n   */\\n  function getProxyRecordForCold(address cold_)\\n    public\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    )\\n  {\\n    address currentHot = coldToHot[cold_];\\n    Record memory currentItem = hotToRecord[currentHot];\\n    return (\\n      currentItem.status,\\n      currentHot,\\n      currentItem.cold,\\n      currentItem.delivery,\\n      currentItem.provider,\\n      currentItem.feePaid\\n    );\\n  }\\n\\n  /**\\n   * @dev Get proxy details for an address, checking cold and hot\\n   */\\n  function getProxyRecordForAddress(address queryAddress_)\\n    external\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    )\\n  {\\n    // Check as cold:\\n    ProxyStatus currentStatus = hotToRecord[coldToHot[queryAddress_]].status;\\n\\n    if (\\n      currentStatus == ProxyStatus.Live ||\\n      currentStatus == ProxyStatus.PendingPayment ||\\n      (currentStatus == ProxyStatus.PendingAcceptance)\\n    ) {\\n      return getProxyRecordForCold(queryAddress_);\\n    }\\n\\n    // Check as hot:\\n    currentStatus = hotToRecord[queryAddress_].status;\\n\\n    if (\\n      currentStatus == ProxyStatus.Live ||\\n      currentStatus == ProxyStatus.PendingPayment ||\\n      (currentStatus == ProxyStatus.PendingAcceptance)\\n    ) {\\n      return (getProxyRecordForHot(queryAddress_));\\n    }\\n\\n    // Address not found\\n    return (ProxyStatus.None, address(0), address(0), address(0), 0, false);\\n  }\\n\\n  // ======================================================\\n  // LIFECYCLE - NOMINATION\\n  // ======================================================\\n\\n  /**\\n   * @dev nominate: Hot Nominates cold, direct contract call\\n   */\\n  function nominate(\\n    address cold_,\\n    address delivery_,\\n    uint64 provider_\\n  ) external payable {\\n    if (msg.value != proxyRegisterFee) revert IncorrectProxyRegisterFee();\\n    _processNomination(\\n      msg.sender,\\n      cold_,\\n      delivery_,\\n      msg.value == proxyRegisterFee,\\n      provider_\\n    );\\n  }\\n\\n  /**\\n   * @dev _processNomination: Process the nomination\\n   */\\n  // The hot wallet cannot be on any record, live or pending, as either a hot or cold wallet.\\n  // The cold wallet cannot be currently live or pending payment, but can be 'pending' on multiple records. It can\\n  // only accept one of those pending records (at at time - others can be accepted if it cancels the existing proxy)\\n  function _processNomination(\\n    address hot_,\\n    address cold_,\\n    address delivery_,\\n    bool feePaid_,\\n    uint64 provider_\\n  ) internal {\\n    isValidAddresses(hot_, cold_, delivery_);\\n\\n    if (!addressIsAvailable(hot_, true) || !addressIsAvailable(cold_, false))\\n      revert AlreadyProxied();\\n\\n    // Record the mapping from the hot address to the record. This is pending until accepted by the cold address.\\n    hotToRecord[hot_] = Record(\\n      provider_,\\n      ProxyStatus.PendingAcceptance,\\n      feePaid_,\\n      cold_,\\n      delivery_\\n    );\\n\\n    emit NominationMade(hot_, cold_, delivery_, provider_);\\n  }\\n\\n  /**\\n   * @dev acceptNomination: Cold accepts nomination, direct contract call\\n   * (though it is anticipated that most will use an ERC20 transfer)\\n   */\\n  function acceptNomination(address hot_, uint64 provider_) external payable {\\n    _acceptNominationValidation(hot_, msg.sender);\\n\\n    if (!hotToRecord[hot_].feePaid && msg.value != proxyRegisterFee)\\n      revert ProxyRegisterFeeRequired();\\n\\n    _acceptNomination(hot_, msg.sender, msg.value, provider_);\\n  }\\n\\n  /**\\n   * @dev _acceptNominationValidation: validate passed parameters\\n   */\\n  function _acceptNominationValidation(address hot_, address cold_)\\n    internal\\n    view\\n  {\\n    // Check that the address passed in matches a pending record for the hot address:\\n\\n    if (\\n      hotToRecord[hot_].cold != cold_ ||\\n      hotToRecord[hot_].status != ProxyStatus.PendingAcceptance\\n    ) revert AddressMismatch();\\n\\n    // Check that the cold address isn't live or pending payment anywhere on the register:\\n    if (!addressIsAvailable(cold_, false)) revert AlreadyProxied();\\n  }\\n\\n  /**\\n   * @dev _acceptNomination: Cold wallet accepts nomination\\n   */\\n  function _acceptNomination(\\n    address hot_,\\n    address cold_,\\n    uint256 feePaid_,\\n    uint64 providerCode_\\n  ) internal {\\n    // Record the mapping from the cold to the hot address:\\n    coldToHot[cold_] = hot_;\\n\\n    emit NominationAccepted(\\n      hot_,\\n      cold_,\\n      hotToRecord[hot_].delivery,\\n      providerCode_\\n    );\\n\\n    if (hotToRecord[hot_].feePaid || feePaid_ == proxyRegisterFee) {\\n      _recordLive(\\n        hot_,\\n        cold_,\\n        hotToRecord[hot_].delivery,\\n        hotToRecord[hot_].provider\\n      );\\n    } else {\\n      hotToRecord[hot_].status = ProxyStatus.PendingPayment;\\n    }\\n  }\\n\\n  /**\\n   * @dev _recordLive: put a proxy record live\\n   */\\n  function _recordLive(\\n    address hot_,\\n    address cold_,\\n    address delivery_,\\n    uint64 provider_\\n  ) internal {\\n    hotToRecord[hot_].feePaid = true;\\n    hotToRecord[hot_].status = ProxyStatus.Live;\\n\\n    if (address(rewardToken) != address(0)) {\\n      _performReward(delivery_);\\n    }\\n\\n    emit ProxyRecordLive(hot_, cold_, delivery_, provider_);\\n  }\\n\\n  // ======================================================\\n  // LIFECYCLE - CHANGING DELIVERY ADDRESS\\n  // ======================================================\\n\\n  /**\\n   * @dev updateDeliveryAddress: Change delivery address on an existing proxy record.\\n   */\\n  function updateDeliveryAddress(address delivery_, uint256 provider_)\\n    external\\n  {\\n    _updateDeliveryAddress(msg.sender, delivery_, provider_);\\n  }\\n\\n  /**\\n   * @dev _updateDeliveryAddress: unified delivery address update processing\\n   */\\n  function _updateDeliveryAddress(\\n    address caller_,\\n    address delivery_,\\n    uint256 provider_\\n  ) internal {\\n    if (delivery_ == address(0)) revert DeliveryCannotBeTheZeroAddress();\\n\\n    // Only hot can change delivery address:\\n    if (hotIsActiveOnRegister(caller_)) {\\n      // Hot is requesting the change of address.\\n      // Get the associated hot address and process the address change\\n      _processUpdateDeliveryAddress(caller_, delivery_, provider_);\\n      //\\n    } else if (coldIsActiveOnRegister(caller_)) {\\n      // Cold is requesting the change of address. Cold cannot perform this operation:\\n      revert OnlyHotAddressCanChangeAddress();\\n      //\\n    } else {\\n      // Address not found, revert\\n      revert NoRecordFoundForAddress();\\n    }\\n  }\\n\\n  /**\\n   * @dev _processUpdateDeliveryAddress: Process the update of the delivery address\\n   */\\n  function _processUpdateDeliveryAddress(\\n    address hot_,\\n    address delivery_,\\n    uint256 provider_\\n  ) internal {\\n    Record memory priorItem = hotToRecord[hot_];\\n\\n    hotToRecord[hot_].delivery = delivery_;\\n    emit DeliveryUpdated(\\n      hot_,\\n      priorItem.cold,\\n      delivery_,\\n      priorItem.delivery,\\n      provider_\\n    );\\n  }\\n\\n  // ======================================================\\n  // LIFECYCLE - DELETING A RECORD\\n  // ======================================================\\n\\n  /**\\n   * @dev deleteRecord: Delete a proxy record, if found\\n   */\\n  function deleteRecord(uint256 provider_) external {\\n    _deleteRecord(msg.sender, provider_);\\n  }\\n\\n  /**\\n   * @dev _deleteRecord: unified delete record processing\\n   */\\n  function _deleteRecord(address caller_, uint256 provider_) internal {\\n    // Hot can delete any entry that exists for it:\\n    if (hotIsActiveOnRegister(caller_)) {\\n      // Hot is requesting the deletion.\\n      // Get the associated cold address and process the deletion.\\n      _processDeleteRecord(\\n        caller_,\\n        hotToRecord[caller_].cold,\\n        Participant.Hot,\\n        provider_\\n      );\\n      // Cold can only delete a record that it has accepted. This means a record\\n      // at either pendingPayment or live\\n    } else if (coldIsActiveOnRegister(caller_)) {\\n      // Cold is requesting the deletion.\\n      // Get the associated hot address and process the deletion\\n      _processDeleteRecord(\\n        coldToHot[caller_],\\n        caller_,\\n        Participant.Cold,\\n        provider_\\n      );\\n    } else {\\n      // Address not found, revert\\n      revert NoRecordFoundForAddress();\\n    }\\n  }\\n\\n  /**\\n   * @dev _processDeleteRecord: process record deletion\\n   */\\n  function _processDeleteRecord(\\n    address hot_,\\n    address cold_,\\n    Participant initiator_,\\n    uint256 provider_\\n  ) internal {\\n    // Delete the register entry\\n    delete hotToRecord[hot_];\\n\\n    // Delete the cold to hot mapping:\\n    delete coldToHot[cold_];\\n\\n    emit RecordDeleted(initiator_, cold_, hot_, provider_);\\n  }\\n\\n  // ======================================================\\n  // ERC20 CALL ENTRY POINT\\n  // ======================================================\\n\\n  /**\\n   * @dev tokenAPICall: receive a token API call\\n   */\\n  function _tokenAPICall(\\n    address from_,\\n    address to_,\\n    uint256 amount_\\n  ) internal {\\n    // The final digit of the amount are the action code, the\\n    // rest of the amount is the provider code\\n\\n    // All processing is on whole amounts, no decimals\\n\\n    uint256 actionCode = (amount_ / 10**decimals()) % 10;\\n\\n    if (actionCode == 0 || actionCode > 4) revert UnrecognisedEPSAPIAmount();\\n\\n    uint64 providerCode = uint64((amount_ / 10**decimals()) / 10);\\n\\n    if (actionCode == HOT_NOMINATE_COLD)\\n      _processNomination(\\n        from_,\\n        to_,\\n        from_,\\n        proxyRegisterFee == 0,\\n        providerCode\\n      );\\n    else if (actionCode == COLD_ACCEPT_HOT) {\\n      _acceptNominationValidation(to_, from_);\\n      _acceptNomination(to_, from_, 0, providerCode);\\n    } else if (actionCode == CHANGE_DELIVERY)\\n      _updateDeliveryAddress(from_, to_, providerCode);\\n    else if (actionCode == DELETE_RECORD) _deleteRecord(from_, providerCode);\\n  }\\n\\n  /**\\n   *\\n   * @dev _performReward: mint reward tokens.\\n   *\\n   */\\n  function _performReward(address account) internal {\\n    rewardToken.emitToken(account, rewardRate);\\n  }\\n\\n  /**\\n   *\\n   * @dev onTokenTransfer: call relayed via an ERCOmni payable token type.\\n   *\\n   */\\n  function onTokenTransfer(\\n    address sender_,\\n    uint256 erc20Value_,\\n    bytes memory data_\\n  ) external payable {\\n    // Check valid token relay origin:\\n    uint256 erc20Fee = erc20PerTransactionFee[msg.sender];\\n    require(erc20Fee != 0, \\\"Invalid ERC20\\\");\\n\\n    // Decode instructions:\\n    (address cold, address delivery, uint64 provider) = abi.decode(\\n      data_,\\n      (address, address, uint64)\\n    );\\n\\n    if (erc20Value_ != erc20Fee) revert IncorrectProxyRegisterFee();\\n    _processNomination(sender_, cold, delivery, true, provider);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IERC20DelegateRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the EPS ERC20 Delegation register interface.\\n *\\n */\\ninterface IERC20DelegateRegister {\\n  function getBeneficiaryByRight(address tokenContract_, uint256 rightsIndex_)\\n    external\\n    view\\n    returns (address);\\n\\n  function getBalanceByRight(\\n    address tokenContract_,\\n    address queryAddress_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256);\\n\\n  function getAllAddressesByRightsIndex(\\n    address receivedAddress_,\\n    uint256 rightsIndex_,\\n    address coldAddress_,\\n    bool includeReceivedAndCold_\\n  ) external view returns (address[] memory containers_);\\n\\n  function containerToDelegationId(address container_)\\n    external\\n    view\\n    returns (uint64 delegationId_);\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IERC1155DelegateRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the EPS ERC1155 Delegation register interface.\\n *\\n */\\ninterface IERC1155DelegateRegister {\\n  function getBeneficiaryByRight(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 rightsIndex_\\n  ) external view returns (address);\\n\\n  function getBalanceByRight(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    address queryAddress_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256);\\n\\n  function getAllAddressesByRightsIndex(\\n    address receivedAddress_,\\n    uint256 rightsIndex_,\\n    address coldAddress_,\\n    bool includeReceivedAndCold_\\n  ) external view returns (address[] memory containers_);\\n\\n  function containerToDelegationId(address container_)\\n    external\\n    view\\n    returns (uint64 delegationId_);\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IERC721DelegateRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the EPS Delegation register interface.\\n *\\n */\\ninterface IERC721DelegateRegister {\\n  // ======================================================\\n  // EVENTS\\n  // ======================================================\\n\\n  struct DelegationRecord {\\n    // The unique identifier for every delegation. Note that this is stamped on each delegation container. This doesn't mean\\n    // that every delegation Id will make it to the register, as this might be a proposed delegation that is not taken\\n    // up by anyone.\\n    uint64 delegationId; // 64\\n    // The owner of the asset that is being containerised for delegation.\\n    address owner; // 160\\n    // The end time for this delegation. After the end time the owner can remove the asset.\\n    uint64 endTime; // 64\\n    // The address of the delegate for this delegation\\n    address delegate; // 160\\n    // Delegate rights integer:\\n    uint256 delegateRightsInteger;\\n  }\\n\\n  struct DelegationParameters {\\n    // The provider who has originated this delegation.\\n    uint64 provider; // 64\\n    // The address proposed as deletage. The owner of an asset can specify a particular address OR they can leave\\n    // this as address 0 if they will accept any delegate, subject to payment of the fee (if any)\\n    address delegate; // 160\\n    // The duration of the delegation.\\n    uint24 duration; // 24\\n    // The fee that the delegate must pay for this delegation to go live.\\n    uint96 fee; // 96\\n    // Owner rights integer:\\n    uint256 ownerRightsInteger;\\n    // Delegate rights integer:\\n    uint256 delegateRightsInteger;\\n    // URI\\n    string URI;\\n    // Offer ID, passed if this is accepting an offer, otherwise will be 0:\\n    uint64 offerId;\\n  }\\n\\n  struct Offer {\\n    // Slot 1 160 + 24 + 32 + 8 = 224\\n    // The address that is making the offer\\n    address offerMaker; // 160\\n    // The delegation duration time in days for this offer.\\n    uint24 delegationDuration; //24\\n    // When this offer expires\\n    uint32 expiry; // 32\\n    // Boolean to note a collection offer\\n    bool collectionOffer; // 8\\n    // Slot 2 160 + 96 = 256\\n    // The collection the offer is for\\n    address collection;\\n    // Offer amount (in provided ERC)\\n    uint96 offerAmount;\\n    // Slot 3 = 256\\n    // TokenId, (is ignored for collection offers)\\n    uint256 tokenId;\\n    // Slot 4 = 256\\n    // Delegate rights integer that they are requesting:\\n    uint256 delegateRightsInteger;\\n    // ERC20 that they are paying in:\\n    address paymentERC20;\\n  }\\n\\n  // Configurable payment options for offers:\\n  struct ERC20PaymentOptions {\\n    bool isValid;\\n    uint96 registerFee;\\n  }\\n\\n  // Emitted when a delegation container is created:\\n  event DelegationCreated(\\n    uint64 indexed provider,\\n    uint64 indexed delegationId,\\n    address indexed containerAddress,\\n    address owner,\\n    address delegate,\\n    uint96 fee,\\n    uint24 durationInDays,\\n    address tokenContract,\\n    uint256 tokenId,\\n    uint256 delegateRightsInteger,\\n    string URI\\n  );\\n\\n  // Emitted when the delegation is accepted:\\n  event DelegationAccepted(\\n    uint64 indexed provider,\\n    uint64 indexed delegationId,\\n    address container,\\n    address tokenContract,\\n    uint256 tokenId,\\n    address owner,\\n    address delegate,\\n    uint64 endTime,\\n    uint256 delegateRightsInteger,\\n    uint256 epsFee,\\n    string URI\\n  );\\n\\n  // Emitted when a delegation is complete:\\n  event DelegationComplete(uint64 indexed delegationId);\\n\\n  // Emitted when the delegation owner changes:\\n  event DelegationOwnerChanged(\\n    uint64 indexed provider,\\n    uint64 indexed delegationId,\\n    address indexed newOwner,\\n    uint256 epsFee\\n  );\\n\\n  // Emitted when the delegation delegate changes:\\n  event DelegationDelegateChanged(\\n    uint64 indexed provider,\\n    uint64 indexed delegationId,\\n    address indexed newDelegate,\\n    uint256 epsFee\\n  );\\n\\n  event ContainerListedForSale(\\n    uint64 provider,\\n    uint64 delegationId,\\n    address container,\\n    uint96 salePrice\\n  );\\n\\n  event DelegationListedForSale(\\n    uint64 provider,\\n    uint64 delegationId,\\n    uint96 salePrice\\n  );\\n\\n  event OfferMade(\\n    uint64 provider,\\n    uint64 offerId,\\n    address collection,\\n    bool collectionOffer,\\n    uint256 tokenId,\\n    uint24 duration,\\n    uint32 expiry,\\n    uint96 offerAmount,\\n    uint256 delegateRightsRequested,\\n    address offerer\\n  );\\n\\n  event OfferAccepted(\\n    uint64 provider,\\n    uint64 offerId,\\n    uint256 epsFee,\\n    address epsFeeToken\\n  );\\n\\n  event OfferDeleted(uint64 provider, uint64 offerId);\\n\\n  event OfferChanged(\\n    uint64 provider,\\n    uint64 offerId,\\n    uint24 duration,\\n    uint32 offerExpiry,\\n    uint96 offerAmount,\\n    uint256 delegateRightsInteger\\n  );\\n\\n  event TransferRights(\\n    address indexed from,\\n    address indexed to,\\n    address indexed tokenContract,\\n    uint256 tokenId,\\n    uint256 rightsInteger\\n  );\\n\\n  event ContainerDetailsUpdated(\\n    uint64 provider,\\n    uint64 delegationId,\\n    address container,\\n    address delegate,\\n    uint256 fee,\\n    uint256 duration,\\n    uint256 delegateRightsInteger\\n  );\\n\\n  event SundryEvent(\\n    uint64 provider,\\n    uint64 delegationId,\\n    address address1,\\n    address address2,\\n    uint256 integer1,\\n    uint256 integer2,\\n    uint256 integer3,\\n    uint256 integer4\\n  );\\n\\n  // ======================================================\\n  // ERRORS\\n  // ======================================================\\n\\n  error TemplateContainerLocked();\\n  error InvalidContainer();\\n  error InvalidERC20();\\n  error DoNoMintToThisAddress();\\n  error InvalidRights();\\n  error OwnerCannotBeDelegate();\\n  error CallerIsNotOfferMaker();\\n  error InvalidOffer();\\n  error MarketPlacePaused();\\n\\n  // ======================================================\\n  // FUNCTIONS\\n  // ======================================================\\n\\n  function getFeeDetails()\\n    external\\n    view\\n    returns (uint96 delegationRegisterFee_, uint32 delegationFeePercentage_);\\n\\n  function getAllAddressesByRightsIndex(\\n    address receivedAddress_,\\n    uint256 rightsIndex_,\\n    address coldAddress_,\\n    bool includeReceivedAndCold_\\n  ) external view returns (address[] memory containers_);\\n\\n  function getBeneficiaryByRight(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 rightsIndex_\\n  ) external view returns (address);\\n\\n  function getBalanceByRight(\\n    address tokenContract_,\\n    address queryAddress_,\\n    uint256 rightsIndex_\\n  ) external view returns (uint256);\\n\\n  function containeriseForDelegation(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    DelegationParameters memory delegationData_\\n  ) external;\\n\\n  function saveDelegationRecord(\\n    uint64 provider_,\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    address owner_,\\n    address delegate_,\\n    uint64 endTime_,\\n    uint256 delegateRightsInteger_,\\n    string memory containerURI_\\n  ) external payable;\\n\\n  function changeAssetOwner(\\n    uint64 provider_,\\n    address newOwner_,\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 epsFee\\n  ) external;\\n\\n  function changeDelegate(\\n    uint64 provider_,\\n    address newDelegate_,\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 epsFee_\\n  ) external;\\n\\n  function deleteEntry(\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    address owner_,\\n    address delegate_\\n  ) external;\\n\\n  function containerListedForSale(uint64 provider_, uint96 salePrice_) external;\\n\\n  function delegationListedForSale(uint64 provider_, uint96 salePrice_)\\n    external;\\n\\n  function containerToDelegationId(address container_)\\n    external\\n    view\\n    returns (uint64 delegationId_);\\n\\n  function delegationRegisterFee() external view returns (uint96);\\n\\n  function delegationFeePercentage() external view returns (uint32);\\n\\n  function relistEntry(\\n    uint64 provider_,\\n    address owner_,\\n    address oldDelegate_,\\n    address delegate_,\\n    uint96 fee_,\\n    uint24 durationInDays_,\\n    address tokenContract_,\\n    uint256 tokenId_,\\n    uint256 delegateRightsInteger_,\\n    string memory containerURI_\\n  ) external;\\n\\n  function acceptOfferAfterDelegationCompleted(\\n    uint64 provider_,\\n    address owner_,\\n    address oldDelegate_,\\n    address newDelegate_,\\n    uint24 duration_,\\n    uint96 fee_,\\n    uint256 delegateRightsInteger_,\\n    uint64 offerId_,\\n    address tokenContract_,\\n    uint256 tokenId_\\n  ) external payable;\\n\\n  function containerDetailsUpdated(\\n    uint64 provider_,\\n    address delegate_,\\n    uint256 fee_,\\n    uint256 duration_,\\n    uint256 delegateRightsInteger_\\n  ) external;\\n\\n  function acceptOfferPriorToCommencement(\\n    uint64 provider_,\\n    address owner_,\\n    address delegate_,\\n    uint24 duration_,\\n    uint96 fee_,\\n    uint256 delegateRightsInteger_,\\n    uint64 offerId_,\\n    address tokenContract_,\\n    uint256 tokenId_\\n  ) external;\\n\\n  function sundryEvent(\\n    uint64 provider_,\\n    address address1_,\\n    address address2_,\\n    uint256 int1_,\\n    uint256 int2_,\\n    uint256 int3_,\\n    uint256 int4_\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IERCOmnReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERCOmnReceiver {\\n  function onTokenTransfer(\\n    address sender,\\n    uint256 value,\\n    bytes memory data\\n  ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IOAT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOAT.sol\\\";\\n\\n/**\\n * @dev OAT interface\\n */\\ninterface IOAT is IERC20 {\\n  /**\\n   *\\n   * @dev emitToken\\n   *\\n   */\\n  function emitToken(address receiver_, uint256 amount_) external;\\n\\n  /**\\n   *\\n   * @dev addEmitter\\n   *\\n   */\\n  function addEmitter(address emitter_) external;\\n\\n  /**\\n   *\\n   * @dev removeEmitter\\n   *\\n   */\\n  function removeEmitter(address emitter_) external;\\n\\n  /**\\n   *\\n   * @dev setTreasury\\n   *\\n   */\\n  function setTreasury(address treasury_) external;\\n}\\n\"\r\n    },\r\n    \"contracts/EPS FOR VERIFICATION/IEPSProxyRegister.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// EPS Contracts v2.0.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n *\\n * @dev Implementation of the EPS proxy register interface.\\n *\\n */\\ninterface IEPSProxyRegister {\\n  // ======================================================\\n  // ENUMS\\n  // ======================================================\\n  // enum for available proxy statuses\\n  enum ProxyStatus {\\n    None,\\n    PendingAcceptance,\\n    PendingPayment,\\n    Live\\n  }\\n\\n  // enum for participant\\n  enum Participant {\\n    Hot,\\n    Cold\\n  }\\n\\n  // ======================================================\\n  // STRUCTS\\n  // ======================================================\\n\\n  // Full proxy record\\n  struct Record {\\n    // Slot 1: 64 + 8 + 8 + 160 = 240\\n    uint64 provider;\\n    ProxyStatus status;\\n    bool feePaid;\\n    address cold;\\n    // Slot 2: 160\\n    address delivery;\\n  }\\n\\n  // ======================================================\\n  // EVENTS\\n  // ======================================================\\n\\n  // Emitted when a hot address nominates a cold address:\\n  event NominationMade(\\n    address indexed hot,\\n    address indexed cold,\\n    address delivery,\\n    uint256 provider\\n  );\\n\\n  // Emitted when a cold accepts a nomination from a hot address:\\n  event NominationAccepted(\\n    address indexed hot,\\n    address indexed cold,\\n    address delivery,\\n    uint64 indexed provider\\n  );\\n\\n  // Emitted when a proxy goes live\\n  event ProxyRecordLive(\\n    address indexed hot,\\n    address indexed cold,\\n    address delivery,\\n    uint64 indexed provider\\n  );\\n\\n  // Emitted when the delivery address is updated on a record:\\n  event DeliveryUpdated(\\n    address indexed hot,\\n    address indexed cold,\\n    address indexed delivery,\\n    address oldDelivery,\\n    uint256 provider\\n  );\\n\\n  // Emitted when a register record is deleted. initiator 0 = cold, 1 = hot:\\n  event RecordDeleted(\\n    Participant initiator,\\n    address indexed hot,\\n    address indexed cold,\\n    uint256 provider\\n  );\\n\\n  // Reward token events:\\n  event RewardTokenUpdated(address newToken);\\n  event RewardRateLocked();\\n  event RewardRateUpdated(uint96 rewardRate);\\n\\n  // ======================================================\\n  // ERRORS\\n  // ======================================================\\n\\n  error NoPaymentPendingForAddress();\\n  error NoRecordFoundForAddress();\\n  error OnlyHotAddressCanChangeAddress();\\n  error ColdIsAddressZero();\\n  error ColdAddressCannotBeTheSameAsHot();\\n  error DeliveryIsAddressZero();\\n  error IncorrectProxyRegisterFee();\\n  error AlreadyProxied();\\n  error ProxyRegisterFeeRequired();\\n  error AddressMismatch();\\n  error DeliveryCannotBeTheZeroAddress();\\n  error UnrecognisedEPSAPIAmount();\\n  error RewardRateIsLocked();\\n\\n  // ======================================================\\n  // VIEW METHODS\\n  // ======================================================\\n\\n  /**\\n   * @dev Return if a cold wallet is live\\n   */\\n  function coldIsLive(address cold_) external view returns (bool);\\n\\n  /**\\n   * @dev Return if a hot wallet is live\\n   */\\n  function hotIsLive(address hot_) external view returns (bool);\\n\\n  /**\\n   * @dev Get proxy details for a hot address\\n   */\\n  function getProxyRecordForHot(address hot_)\\n    external\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    );\\n\\n  /**\\n   * @dev Get proxy details for a cold address\\n   */\\n  function getProxyRecordForCold(address cold_)\\n    external\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    );\\n\\n  /**\\n   * @dev Get proxy details for a passed address (could be hot or cold)\\n   */\\n  function getProxyRecordForAddress(address queryAddress_)\\n    external\\n    view\\n    returns (\\n      ProxyStatus status,\\n      address hot,\\n      address cold,\\n      address delivery,\\n      uint64 provider_,\\n      bool feePaid\\n    );\\n\\n  // ======================================================\\n  // LIFECYCLE - NOMINATION\\n  // ======================================================\\n\\n  /**\\n   * @dev nominate: Hot Nominates cold, direct contract call\\n   */\\n  function nominate(\\n    address cold_,\\n    address delivery_,\\n    uint64 provider_\\n  ) external payable;\\n\\n  /**\\n   * @dev acceptNomination: Cold accepts nomination, direct contract call\\n   * (though it is anticipated that most will use an ERC20 transfer)\\n   */\\n  function acceptNomination(address hot_, uint64 provider_) external payable;\\n\\n  // ======================================================\\n  // LIFECYCLE - CHANGING DELIVERY ADDRESS\\n  // ======================================================\\n\\n  /**\\n   * @dev updateDeliveryAddress: Change delivery address on an existing proxy record.\\n   */\\n  function updateDeliveryAddress(address delivery_, uint256 provider_) external;\\n\\n  // ======================================================\\n  // LIFECYCLE - DELETING A RECORD\\n  // ======================================================\\n\\n  /**\\n   * @dev deleteRecord: Delete a proxy record, if found\\n   */\\n  function deleteRecord(uint256 provider_) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyProxied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ColdAddressCannotBeTheSameAsHot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ColdIsAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ColdWalletCannotInteractUseHot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeliveryCannotBeTheZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeliveryIsAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthWithdrawFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectProxyRegisterFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MigrationIsAllowedOnceOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPaymentPendingForAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRecordFoundForAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyHotAddressCanChangeAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyRegisterFeeRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegisterAddressLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardRateIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnrecognisedEPSAPIAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDelivery\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"provider\",\"type\":\"uint256\"}],\"name\":\"DeliveryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ensReverseRegistrarAddress\",\"type\":\"address\"}],\"name\":\"ENSReverseRegistrarSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"erc20Fee_\",\"type\":\"uint256\"}],\"name\":\"ERC20FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MigrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"provider\",\"type\":\"uint64\"}],\"name\":\"NominationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"provider\",\"type\":\"uint256\"}],\"name\":\"NominationMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"provider\",\"type\":\"uint64\"}],\"name\":\"ProxyRecordLive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum IEPSProxyRegister.Participant\",\"name\":\"initiator\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"provider\",\"type\":\"uint256\"}],\"name\":\"RecordDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RewardRateLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"rewardRate\",\"type\":\"uint96\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"RewardTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hot_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"provider_\",\"type\":\"uint64\"}],\"name\":\"acceptNomination\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeEthAddresses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"checkingHot_\",\"type\":\"bool\"}],\"name\":\"addressIsAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"beneficiaryBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"beneficiaryBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"beneficiaryBalanceOf1155\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"beneficiaryBalanceOf20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"beneficiaryOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cold_\",\"type\":\"address\"}],\"name\":\"coldIsActiveOnRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cold_\",\"type\":\"address\"}],\"name\":\"coldIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"coldToHot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"provider_\",\"type\":\"uint256\"}],\"name\":\"deleteRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deletionNominalEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ensReverseRegistrar\",\"outputs\":[{\"internalType\":\"contract ENSReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epsAPIBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155DelegationRegister\",\"outputs\":[{\"internalType\":\"contract IERC1155DelegateRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc1155DelegationRegisterAddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20DelegationRegister\",\"outputs\":[{\"internalType\":\"contract IERC20DelegateRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20DelegationRegisterAddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20PerTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721DelegationRegister\",\"outputs\":[{\"internalType\":\"contract IERC721DelegateRegister\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721DelegationRegisterAddressLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"getAddresses1155\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"proxyAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"getAddresses20\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"proxyAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"getAddresses721\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"proxyAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rightsIndex_\",\"type\":\"uint256\"}],\"name\":\"getAllAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"erc721Addresses_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc1155Addresses_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"erc20Addresses_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivedAddress\",\"type\":\"address\"}],\"name\":\"getColdAndDeliveryAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProxied\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"queryAddress_\",\"type\":\"address\"}],\"name\":\"getProxyRecordForAddress\",\"outputs\":[{\"internalType\":\"enum IEPSProxyRegister.ProxyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"provider_\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"feePaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cold_\",\"type\":\"address\"}],\"name\":\"getProxyRecordForCold\",\"outputs\":[{\"internalType\":\"enum IEPSProxyRegister.ProxyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"provider_\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"feePaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hot_\",\"type\":\"address\"}],\"name\":\"getProxyRecordForHot\",\"outputs\":[{\"internalType\":\"enum IEPSProxyRegister.ProxyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"provider_\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"feePaid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hot_\",\"type\":\"address\"}],\"name\":\"hotIsActiveOnRegister\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hot_\",\"type\":\"address\"}],\"name\":\"hotIsLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hotToRecord\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"provider\",\"type\":\"uint64\"},{\"internalType\":\"enum IEPSProxyRegister.ProxyStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"feePaid\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cold_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"}],\"name\":\"isValidAddresses\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockERC1155DelegationRegisterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockERC20DelegationRegisterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockERC721DelegationRegisterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cold\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery\",\"type\":\"address\"}],\"internalType\":\"struct EPSRegister.MigratedRecord[]\",\"name\":\"migratedRecords_\",\"type\":\"tuple[]\"}],\"name\":\"migration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cold_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"provider_\",\"type\":\"uint64\"}],\"name\":\"nominate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Value_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxyRegisterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"rescueERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"}],\"name\":\"rescueERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint88\",\"name\":\"\",\"type\":\"uint88\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRateLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IOAT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deleteNominalEth_\",\"type\":\"uint256\"}],\"name\":\"setDeletionNominalEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensName_\",\"type\":\"string\"}],\"name\":\"setENSName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensReverseRegistrar_\",\"type\":\"address\"}],\"name\":\"setENSReverseRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc1155DelegationRegister_\",\"type\":\"address\"}],\"name\":\"setERC1155DelegationRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20DelegationRegister_\",\"type\":\"address\"}],\"name\":\"setERC20DelegationRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"erc20Fee_\",\"type\":\"uint256\"}],\"name\":\"setERC20Fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc721DelegationRegister_\",\"type\":\"address\"}],\"name\":\"setERC721DelegationRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"air_\",\"type\":\"uint256\"}],\"name\":\"setNNumberOfEthAddressesAndAirdropAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"registerFee_\",\"type\":\"uint256\"}],\"name\":\"setRegisterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint88\",\"name\":\"rewardRate_\",\"type\":\"uint88\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAddress_\",\"type\":\"address\"}],\"name\":\"setTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delivery_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"provider_\",\"type\":\"uint256\"}],\"name\":\"updateDeliveryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"EPSRegister","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]