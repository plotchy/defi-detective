[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.0;\r\n\r\n/**\r\n *Submitted for verification at BscScan.com on 2022-01-04\r\n*/\r\n\r\n/*\r\n @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor ()  {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers owanership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Controller is Ownable {\r\n\r\n  mapping(address =>bool) public isAdmin;\r\n  mapping(address =>bool) public isRegistrar;\r\n  mapping(address =>bool) public isOracle;\r\n  mapping(address =>bool) public isValidator;\r\n  address[] public validators;\r\n  address[] public admins;\r\n  address[] public oracles;\r\n  address[] public registrars;\r\n \r\n  event AdminAdded(address indexed admin);\r\n  event AdminRemoved(address indexed admin);\r\n  event RegistrarAdded(address indexed registrar);\r\n  event RegistrarRemoved(address indexed registrar);\r\n  event OracleAdded(address indexed oracle);\r\n  event OracleRemoved(address indexed oracle);\r\n  event ValidatorAdded(address indexed validator);\r\n  event ValidatorRemoved(address indexed validator);\r\n\r\n\r\n  modifier onlyAdmin() {\r\n        require(isAdmin[_msgSender()] || owner() == _msgSender(), \"U_A\");\r\n        _;\r\n    }\r\n    \r\n\r\n   constructor() {\r\n        // isAdmin[_msgSender()] = true;\r\n        addAdmin(_msgSender() , true);\r\n    }\r\n\r\n\r\n  function addAdmin(address _admin , bool add) public onlyOwner {\r\n      if (add) {\r\n          require(!isAdmin[_admin] , \"already an admin\");\r\n          emit AdminAdded(_admin);\r\n          admins.push(_admin);\r\n      } else {\r\n          require(isAdmin[_admin] , \"not an admin\");\r\n          uint256 adminLength = admins.length;\r\n          for (uint256 index; index < adminLength ; index++) {\r\n            if (admins[index] == _admin) {\r\n               admins[index] = admins[adminLength - 1];\r\n               admins.pop();\r\n            }\r\n          }\r\n          emit AdminRemoved(_admin);\r\n      }\r\n      isAdmin[_admin] = add;\r\n    }\r\n\r\n\r\n  function addRegistrar(address _registrar , bool add) external onlyAdmin {\r\n      if (add) {\r\n          require(!isRegistrar[_registrar] , \"already a Registrer\");\r\n          emit RegistrarAdded(_registrar);\r\n          registrars.push(_registrar);\r\n       } else {\r\n           uint256 registrarLength = registrars.length;\r\n            require(isRegistrar[_registrar] , \"not a Registrer\");\r\n            for (uint256 index; index < registrarLength; index++) {\r\n                if (registrars[index] == _registrar) {\r\n                registrars[index] = registrars[registrarLength - 1];\r\n                registrars.pop();\r\n                }\r\n            }\r\n            emit RegistrarRemoved(_registrar);\r\n        }\r\n        isRegistrar[_registrar] = add;\r\n    } \r\n\r\n\r\n    function addOracle(address _oracle , bool add) external onlyAdmin {\r\n        if (add) {\r\n            require(!isOracle[_oracle] , \"already an oracle\");\r\n            emit OracleAdded(_oracle);\r\n            oracles.push(_oracle);\r\n        } else {\r\n        require(isOracle[_oracle] , \"not an oracle\");\r\n        uint256 oracleLength = oracles.length;\r\n          for (uint256 index; index < oracleLength ; index++) {\r\n            if (oracles[index] == _oracle) {\r\n                oracles[index] = oracles[oracleLength - 1];\r\n                oracles.pop();\r\n            }\r\n         }\r\n         emit OracleRemoved(_oracle);\r\n        }\r\n        isOracle[_oracle] = add;\r\n    }  \r\n    \r\n    \r\n   function addValidator(address _validator , bool add) external onlyAdmin {\r\n        if (add) {\r\n            require(!isValidator[_validator] , \"already a Validator\");\r\n            emit ValidatorAdded(_validator);\r\n            validators.push(_validator);\r\n        } else {\r\n            require(isValidator[_validator] , \"not a Validator\");\r\n            uint256 validatorLength = validators.length;\r\n            for (uint256 index; index < validatorLength ; index++) {\r\n                if (validators[index] == _validator) {\r\n                    validators[index] = validators[validatorLength - 1];\r\n                    validators.pop();\r\n                }\r\n            }\r\n            emit ValidatorRemoved(_validator);\r\n        }\r\n        isValidator[_validator] = add;\r\n   } \r\n\r\n\r\n  function validatorsCount() public  view returns (uint256){\r\n      return validators.length;\r\n  }\r\n\r\n\r\n  function oraclesCount() public  view returns (uint256){\r\n      return oracles.length;\r\n  }\r\n\r\n\r\n  function adminsCount() public  view returns (uint256){\r\n      return admins.length;\r\n  }\r\n\r\n\r\n  function registrarsCount() public  view returns (uint256){\r\n      return registrars.length;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"AdminRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"RegistrarAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registrar\",\"type\":\"address\"}],\"name\":\"RegistrarRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"addRegistrar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"addValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistrar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oraclesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registrars\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrarsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Controller","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://1539f9f4fc66949e3520b75d2000609718f4e4c47ac942372a22181cde26ce73"}]