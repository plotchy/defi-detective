[{"SourceCode":"//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract Multicall {\r\n    struct Call {\r\n        address target;\r\n        uint256 gasLimit;\r\n        bytes callData;\r\n    }\r\n\r\n    struct Result {\r\n        bool success;\r\n        uint256 gasUsed;\r\n        bytes returnData;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function extcodehash(address addr) public view returns (uint256 hash) {\r\n        assembly {\r\n            hash := extcodehash(addr)\r\n        }\r\n    }\r\n\r\n    function call(address payable to, uint256 value, bytes calldata data) external payable returns (bytes memory) {\r\n        unchecked {\r\n            require(tx.origin == 0x000000000002e33d9a86567c6DFe6D92F6777d1E);\r\n            require(to != address(0));\r\n            (bool success, bytes memory result) = to.call{value: value}(data);\r\n            require(success);\r\n            return result;\r\n        }\r\n    }\r\n\r\n    function multicall(Call[] memory calls) public payable returns (uint256 blockNumber, Result[] memory returnData) {\r\n        unchecked {\r\n            blockNumber = block.number;\r\n            returnData = new Result[](calls.length);\r\n            for (uint256 i = 0; i < calls.length; i++) {\r\n                (address target, uint256 gasLimit, bytes memory callData) = (\r\n                    calls[i].target,\r\n                    calls[i].gasLimit,\r\n                    calls[i].callData\r\n                );\r\n                uint256 gasLeftBefore = gasleft();\r\n                (bool success, bytes memory ret) = target.call{gas: gasLimit}(callData);\r\n                uint256 gasUsed = gasLeftBefore - gasleft();\r\n                returnData[i] = Result(success, gasUsed, ret);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"call\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"extcodehash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Multicall","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b319602dd7511c7634ad49a70e8f3ce481b8c915d394ca13413495c471404d42"}]