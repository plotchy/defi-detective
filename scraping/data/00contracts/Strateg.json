[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\npragma solidity ^0.6.2;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.12;\r\n\r\ninterface InterestRateModel {\r\n    /**\r\n     * @notice Calculates the current borrow interest rate per block\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getBorrowRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves\r\n    ) external view returns (uint256, uint256);\r\n\r\n    /**\r\n     * @notice Calculates the current supply interest rate per block\r\n     * @param cash The total amount of cash the market has\r\n     * @param borrows The total amount of borrows the market has outstanding\r\n     * @param reserves The total amount of reserves the market has\r\n     * @param reserveFactorMantissa The current reserve factor the market has\r\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\r\n     */\r\n    function getSupplyRate(\r\n        uint256 cash,\r\n        uint256 borrows,\r\n        uint256 reserves,\r\n        uint256 reserveFactorMantissa\r\n    ) external view returns (uint256);\r\n}\r\n\r\npragma solidity ^0.6.6;\r\n\r\ninterface ILendingPool {\r\n    function addressesProvider() external view returns (address);\r\n\r\n    function deposit(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint16 _referralCode\r\n    ) external payable;\r\n\r\n    function redeemUnderlying(\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _amount\r\n    ) external;\r\n\r\n    function borrow(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _interestRateMode,\r\n        uint16 _referralCode\r\n    ) external;\r\n\r\n    function repay(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        address _onBehalfOf\r\n    ) external payable;\r\n\r\n    function swapBorrowRateMode(address _reserve) external;\r\n\r\n    function rebalanceFixedBorrowRate(address _reserve, address _user) external;\r\n\r\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\r\n\r\n    function liquidationCall(\r\n        address _collateral,\r\n        address _reserve,\r\n        address _user,\r\n        uint256 _purchaseAmount,\r\n        bool _receiveAToken\r\n    ) external payable;\r\n\r\n    function flashLoan(\r\n        address _receiver,\r\n        address _reserve,\r\n        uint256 _amount,\r\n        bytes calldata _params\r\n    ) external;\r\n\r\n    function getReserveConfigurationData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 ltv,\r\n            uint256 liquidationThreshold,\r\n            uint256 liquidationDiscount,\r\n            address interestRateStrategyAddress,\r\n            bool usageAsCollateralEnabled,\r\n            bool borrowingEnabled,\r\n            bool fixedBorrowRateEnabled,\r\n            bool isActive\r\n        );\r\n\r\n    function getReserveData(address _reserve)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidity,\r\n            uint256 availableLiquidity,\r\n            uint256 totalBorrowsFixed,\r\n            uint256 totalBorrowsVariable,\r\n            uint256 liquidityRate,\r\n            uint256 variableBorrowRate,\r\n            uint256 fixedBorrowRate,\r\n            uint256 averageFixedBorrowRate,\r\n            uint256 utilizationRate,\r\n            uint256 liquidityIndex,\r\n            uint256 variableBorrowIndex,\r\n            address aTokenAddress,\r\n            uint40 lastUpdateTimestamp\r\n        );\r\n\r\n    function getUserAccountData(address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 totalLiquidityETH,\r\n            uint256 totalCollateralETH,\r\n            uint256 totalBorrowsETH,\r\n            uint256 availableBorrowsETH,\r\n            uint256 currentLiquidationThreshold,\r\n            uint256 ltv,\r\n            uint256 healthFactor\r\n        );\r\n\r\n    function getUserReserveData(address _reserve, address _user)\r\n        external\r\n        view\r\n        returns (\r\n            uint256 currentATokenBalance,\r\n            uint256 currentUnderlyingBalance,\r\n            uint256 currentBorrowBalance,\r\n            uint256 principalBorrowBalance,\r\n            uint256 borrowRateMode,\r\n            uint256 borrowRate,\r\n            uint256 liquidityRate,\r\n            uint256 originationFee,\r\n            uint256 variableBorrowIndex,\r\n            uint256 lastUpdateTimestamp,\r\n            bool usageAsCollateralEnabled\r\n        );\r\n\r\n    function getReserves() external view;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.6;\r\n\r\n/**\r\n    @title ILendingPoolAddressesProvider interface\r\n    @notice provides the interface to fetch the LendingPoolCore address\r\n */\r\n\r\ninterface ILendingPoolAddressesProvider {\r\n    function getLendingPoolCore() external view returns (address payable);\r\n\r\n    function getLendingPool() external view returns (address);\r\n}\r\n\r\ninterface CTokenI {\r\n    /*** Market Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when interest is accrued\r\n     */\r\n    event AccrueInterest(uint256 cashPrior, uint256 interestAccumulated, uint256 borrowIndex, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are minted\r\n     */\r\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when tokens are redeemed\r\n     */\r\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    /**\r\n     * @notice Event emitted when underlying is borrowed\r\n     */\r\n    event Borrow(address borrower, uint256 borrowAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is repaid\r\n     */\r\n    event RepayBorrow(address payer, address borrower, uint256 repayAmount, uint256 accountBorrows, uint256 totalBorrows);\r\n\r\n    /**\r\n     * @notice Event emitted when a borrow is liquidated\r\n     */\r\n    event LiquidateBorrow(address liquidator, address borrower, uint256 repayAmount, address cTokenCollateral, uint256 seizeTokens);\r\n\r\n    /*** Admin Events ***/\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is changed\r\n     */\r\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\r\n     */\r\n    event NewAdmin(address oldAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserve factor is changed\r\n     */\r\n    event NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are added\r\n     */\r\n    event ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\r\n\r\n    /**\r\n     * @notice Event emitted when the reserves are reduced\r\n     */\r\n    event ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\r\n\r\n    /**\r\n     * @notice EIP20 Transfer event\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n    /**\r\n     * @notice EIP20 Approval event\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n\r\n    /**\r\n     * @notice Failure event\r\n     */\r\n    event Failure(uint256 error, uint256 info, uint256 detail);\r\n\r\n    function transfer(address dst, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address src,\r\n        address dst,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function balanceOfUnderlying(address owner) external returns (uint256);\r\n\r\n    function getAccountSnapshot(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    function borrowRatePerBlock() external view returns (uint256);\r\n\r\n    function supplyRatePerBlock() external view returns (uint256);\r\n\r\n    function totalBorrowsCurrent() external returns (uint256);\r\n\r\n    function borrowBalanceCurrent(address account) external returns (uint256);\r\n\r\n    function borrowBalanceStored(address account) external view returns (uint256);\r\n\r\n    function exchangeRateCurrent() external returns (uint256);\r\n\r\n    function accrualBlockNumber() external view returns (uint256);\r\n\r\n    function exchangeRateStored() external view returns (uint256);\r\n\r\n    function getCash() external view returns (uint256);\r\n\r\n    function accrueInterest() external returns (uint256);\r\n\r\n    function interestRateModel() external view returns (InterestRateModel);\r\n\r\n    function totalReserves() external view returns (uint256);\r\n\r\n    function reserveFactorMantissa() external view returns (uint256);\r\n\r\n    function seize(\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n\r\n    function totalBorrows() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n}\r\npragma solidity >=0.5.0;\r\n\r\ninterface CErc20I is CTokenI {\r\n    function mint(uint256 mintAmount) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\r\n\r\n    function borrow(uint256 borrowAmount) external returns (uint256);\r\n\r\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\r\n\r\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\r\n\r\n    function liquidateBorrow(\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        CTokenI cTokenCollateral\r\n    ) external returns (uint256);\r\n\r\n    function underlying() external view returns (address);\r\n}\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface ComptrollerI {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\r\n\r\n    function exitMarket(address cToken) external returns (uint256);\r\n\r\n    /*** Policy Hooks ***/\r\n\r\n    function mintAllowed(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount\r\n    ) external returns (uint256);\r\n\r\n    function mintVerify(\r\n        address cToken,\r\n        address minter,\r\n        uint256 mintAmount,\r\n        uint256 mintTokens\r\n    ) external;\r\n\r\n    function redeemAllowed(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemTokens\r\n    ) external returns (uint256);\r\n\r\n    function redeemVerify(\r\n        address cToken,\r\n        address redeemer,\r\n        uint256 redeemAmount,\r\n        uint256 redeemTokens\r\n    ) external;\r\n\r\n    function borrowAllowed(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external returns (uint256);\r\n\r\n    function borrowVerify(\r\n        address cToken,\r\n        address borrower,\r\n        uint256 borrowAmount\r\n    ) external;\r\n\r\n    function repayBorrowAllowed(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n\r\n    function repayBorrowVerify(\r\n        address cToken,\r\n        address payer,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 borrowerIndex\r\n    ) external;\r\n\r\n    function liquidateBorrowAllowed(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount\r\n    ) external returns (uint256);\r\n\r\n    function liquidateBorrowVerify(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 repayAmount,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function seizeAllowed(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external returns (uint256);\r\n\r\n    function seizeVerify(\r\n        address cTokenCollateral,\r\n        address cTokenBorrowed,\r\n        address liquidator,\r\n        address borrower,\r\n        uint256 seizeTokens\r\n    ) external;\r\n\r\n    function transferAllowed(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external returns (uint256);\r\n\r\n    function transferVerify(\r\n        address cToken,\r\n        address src,\r\n        address dst,\r\n        uint256 transferTokens\r\n    ) external;\r\n\r\n    /*** Liquidity/Liquidation Calculations ***/\r\n\r\n    function liquidateCalculateSeizeTokens(\r\n        address cTokenBorrowed,\r\n        address cTokenCollateral,\r\n        uint256 repayAmount\r\n    ) external view returns (uint256, uint256);\r\n\r\n    function getAccountLiquidity(address account)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    /***  Comp claims ****/\r\n    function claimComp(address holder) external;\r\n\r\n    function claimComp(address holder, CTokenI[] memory cTokens) external;\r\n\r\n    function markets(address ctoken)\r\n        external\r\n        view\r\n        returns (\r\n            bool,\r\n            uint256,\r\n            bool\r\n        );\r\n\r\n    function compSpeeds(address ctoken) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.6.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 => Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId => Market\r\n        mapping(uint256 => Market) markets;\r\n        // owner => account number => Account\r\n        mapping(address => mapping(uint256 => Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address => mapping(address => bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address => bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator1;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(uint256 marketId, Decimal.D256 memory spreadPremium) external;\r\n\r\n    function getIsGlobalOperator(address operator1) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId) external view returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter) external;\r\n\r\n    function getAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId) external view returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId) external view returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient) external returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue) external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator1) external view returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId) external view returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(uint256 marketId, Decimal.D256 memory marginPremium) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId) external view returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n        external\r\n        view\r\n        returns (\r\n            address[] memory,\r\n            Types.Par[] memory,\r\n            Types.Wei[] memory\r\n        );\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient) external returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n        external\r\n        view\r\n        returns (\r\n            Storage.Market memory,\r\n            Interest.Index memory,\r\n            Monetary.Price memory,\r\n            Interest.Rate memory\r\n        );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId) external view returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId) external view returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(uint256 heldMarketId, uint256 owedMarketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId) external view returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId) external view returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account) external view returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId) external view returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator1, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account) external view returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId) external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId) external view returns (Interest.Rate memory);\r\n}\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ninterface ICallee {\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory accountInfo,\r\n        bytes memory data\r\n    ) external;\r\n}\r\n\r\ncontract DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token) internal view returns (uint256) {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i < numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Withdraw,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: false,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data) internal view returns (Actions.ActionArgs memory) {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Call,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({sign: false, denomination: Types.AssetDenomination.Wei, ref: Types.AssetReference.Delta, value: 0}),\r\n                primaryMarketId: 0,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: data\r\n            });\r\n    }\r\n\r\n    function _getDepositAction(uint256 marketId, uint256 amount) internal view returns (Actions.ActionArgs memory) {\r\n        return\r\n            Actions.ActionArgs({\r\n                actionType: Actions.ActionType.Deposit,\r\n                accountId: 0,\r\n                amount: Types.AssetAmount({\r\n                    sign: true,\r\n                    denomination: Types.AssetDenomination.Wei,\r\n                    ref: Types.AssetReference.Delta,\r\n                    value: amount\r\n                }),\r\n                primaryMarketId: marketId,\r\n                secondaryMarketId: 0,\r\n                otherAddress: address(this),\r\n                otherAccountId: 0,\r\n                data: \"\"\r\n            });\r\n    }\r\n}\r\n\r\n\r\ninterface IUni{\r\n    function getAmountsOut(\r\n        uint256 amountIn, \r\n        address[] calldata path\r\n    ) external view returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\npragma solidity >=0.6.0 <0.7.0;\r\n\r\n\r\nstruct StrategyParams {\r\n    uint256 performanceFee;\r\n    uint256 activation;\r\n    uint256 debtLimit;\r\n    uint256 rateLimit;\r\n    uint256 lastReport;\r\n    uint256 totalDebt;\r\n    uint256 totalGain;\r\n    uint256 totalLoss;\r\n}\r\n\r\ninterface VaultAPI is IERC20 {\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function strategies(address _strategy) external view returns (StrategyParams memory);\r\n\r\n    /**\r\n     * View how much the Vault would increase this Strategy's borrow limit,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function creditAvailable() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault would like to pull back from the Strategy,\r\n     * based on its present performance (since its last report). Can be used to\r\n     * determine expectedReturn in your Strategy.\r\n     */\r\n    function debtOutstanding() external view returns (uint256);\r\n\r\n    /**\r\n     * View how much the Vault expect this Strategy to return at the current\r\n     * block, based on its present performance (since its last report). Can be\r\n     * used to determine expectedReturn in your Strategy.\r\n     */\r\n    function expectedReturn() external view returns (uint256);\r\n\r\n    /**\r\n     * This is the main contact point where the Strategy interacts with the\r\n     * Vault. It is critical that this call is handled as intended by the\r\n     * Strategy. Therefore, this function will be called by BaseStrategy to\r\n     * make sure the integration is correct.\r\n     */\r\n    function report(\r\n        uint256 _gain,\r\n        uint256 _loss,\r\n        uint256 _debtPayment\r\n    ) external returns (uint256);\r\n\r\n    /**\r\n     * This function is used in the scenario where there is a newer Strategy\r\n     * that would hold the same positions as this one, and those positions are\r\n     * easily transferrable to the newer Strategy. These positions must be able\r\n     * to be transferred at the moment this call is made, if any prep is\r\n     * required to execute a full transfer in one transaction, that must be\r\n     * accounted for separately from this call.\r\n     */\r\n    function migrateStrategy(address _newStrategy) external;\r\n\r\n    /**\r\n     * This function should only be used in the scenario where the Strategy is\r\n     * being retired but no migration of the positions are possible, or in the\r\n     * extreme scenario that the Strategy needs to be put into \"Emergency Exit\"\r\n     * mode in order for it to exit as quickly as possible. The latter scenario\r\n     * could be for any reason that is considered \"critical\" that the Strategy\r\n     * exits its position as fast as possible, such as a sudden change in\r\n     * market conditions leading to losses, or an imminent failure in an\r\n     * external dependency.\r\n     */\r\n    function revokeStrategy() external;\r\n\r\n    /**\r\n     * View the governance address of the Vault to assert privileged functions\r\n     * can only be called by governance. The Strategy serves the Vault, so it\r\n     * is subject to governance defined by the Vault.\r\n     */\r\n    function governance() external view returns (address);\r\n}\r\n\r\n/**\r\n * This interface is here for the keeper bot to use.\r\n */\r\ninterface StrategyAPI {\r\n    function apiVersion() external pure returns (string memory);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function vault() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function tendTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function tend() external;\r\n\r\n    function harvestTrigger(uint256 callCost) external view returns (bool);\r\n\r\n    function harvest() external;\r\n\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n}\r\n\r\n/**\r\n * @title Yearn Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to interoperate\r\n *  closely with the Vault contract. This contract should be inherited and the\r\n *  abstract methods implemented to adapt the Strategy to the particular needs\r\n *  it has to create a return.\r\n *\r\n *  Of special interest is the relationship between `harvest()` and\r\n *  `vault.report()'. `harvest()` may be called simply because enough time has\r\n *  elapsed since the last report, and not because any funds need to be moved\r\n *  or positions adjusted. This is critical so that the Vault may maintain an\r\n *  accurate picture of the Strategy's performance. See  `vault.report()`,\r\n *  `harvest()`, and `harvestTrigger()` for further details.\r\n */\r\nabstract contract BaseStrategy {\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to track which version of `StrategyAPI` this Strategy\r\n     *  implements.\r\n     * @dev The Strategy's version must match the Vault's `API_VERSION`.\r\n     * @return A string which holds the current API version of this contract.\r\n     */\r\n    function apiVersion() public pure returns (string memory) {\r\n        return \"0.2.2\";\r\n    }\r\n\r\n    /**\r\n     * @notice This Strategy's name.\r\n     * @dev\r\n     *  You can use this field to manage the \"version\" of this Strategy, e.g.\r\n     *  `StrategySomethingOrOtherV1`. However, \"API Version\" is managed by\r\n     *  `apiVersion()` function above.\r\n     * @return This Strategy's name.\r\n     */\r\n    function name() external virtual pure returns (string memory);\r\n\r\n    VaultAPI public vault;\r\n    address public strategist;\r\n    address public rewards;\r\n    address public keeper;\r\n\r\n    IERC20 public want;\r\n\r\n    // So indexers can keep track of this\r\n    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\r\n\r\n    event UpdatedStrategist(address newStrategist);\r\n\r\n    event UpdatedKeeper(address newKeeper);\r\n\r\n    event UpdatedRewards(address rewards);\r\n\r\n    event UpdatedReportDelay(uint256 delay);\r\n\r\n    event UpdatedProfitFactor(uint256 profitFactor);\r\n\r\n    event UpdatedDebtThreshold(uint256 debtThreshold);\r\n\r\n    // The minimum number of seconds between harvest calls. See\r\n    // `setMinReportDelay()` for more details.\r\n    uint256 public minReportDelay = 86400; // ~ once a day\r\n\r\n    // The minimum multiple that `callCost` must be above the credit/profit to\r\n    // be \"justifiable\". See `setProfitFactor()` for more details.\r\n    uint256 public profitFactor = 100;\r\n\r\n    // Use this to adjust the threshold at which running a debt causes a\r\n    // harvest trigger. See `setDebtThreshold()` for more details.\r\n    uint256 public debtThreshold = 0;\r\n\r\n    // See note on `setEmergencyExit()`.\r\n    bool public emergencyExit;\r\n\r\n    // modifiers\r\n    modifier onlyAuthorized() {\r\n        require(msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyStrategist() {\r\n        require(msg.sender == strategist, \"!strategist\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyKeepers() {\r\n        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance(), \"!authorized\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Initializes the Strategy, this is called only once, when the\r\n     *  contract is deployed.\r\n     * @dev `_vault` should implement `VaultAPI`.\r\n     * @param _vault The address of the Vault responsible for this Strategy.\r\n     */\r\n    constructor(address _vault) public {\r\n        vault = VaultAPI(_vault);\r\n        want = IERC20(vault.token());\r\n        want.approve(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\r\n        strategist = msg.sender;\r\n        rewards = msg.sender;\r\n        keeper = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `strategist`.\r\n     *\r\n     *  This may only be called by governance or the existing strategist.\r\n     * @param _strategist The new address to assign as `strategist`.\r\n     */\r\n    function setStrategist(address _strategist) external onlyAuthorized {\r\n        strategist = _strategist;\r\n        emit UpdatedStrategist(_strategist);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `keeper`.\r\n     *\r\n     *  `keeper` is the only address that may call `tend()` or `harvest()`,\r\n     *  other than `governance()` or `strategist`. However, unlike\r\n     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\r\n     *  and `harvest()`, and no other authorized functions, following the\r\n     *  principle of least privilege.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _keeper The new address to assign as `keeper`.\r\n     */\r\n    function setKeeper(address _keeper) external onlyAuthorized {\r\n        keeper = _keeper;\r\n        emit UpdatedKeeper(_keeper);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `rewards`. Any distributed rewards will cease flowing\r\n     *  to the old address and begin flowing to this address once the change\r\n     *  is in effect.\r\n     *\r\n     *  This will not change any Strategy reports in progress, only\r\n     *  new reports made after this change goes into effect.\r\n     *\r\n     *  This may only be called by the strategist.\r\n     * @param _rewards The address to use for collecting rewards.\r\n     */\r\n    function setRewards(address _rewards) external onlyStrategist {\r\n        rewards = _rewards;\r\n        emit UpdatedRewards(_rewards);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\r\n     *  of blocks that should pass before `harvest()` is called.\r\n     *\r\n     *  For external keepers (such as the Keep3r network), this is the minimum\r\n     *  time between jobs, to prevent excessive costs. (see `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _delay The minimum number of blocks to wait between harvests.\r\n     */\r\n    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\r\n        minReportDelay = _delay;\r\n        emit UpdatedReportDelay(_delay);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Used to change `profitFactor`. `profitFactor` is used to determine\r\n     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\r\n     *  for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _profitFactor A ratio to multiply anticipated\r\n     * `harvest()` gas cost against.\r\n     */\r\n    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\r\n        profitFactor = _profitFactor;\r\n        emit UpdatedProfitFactor(_profitFactor);\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Sets how far the Strategy can go into loss without a harvest and report\r\n     *  being required.\r\n     *\r\n     *  By default this is 0, meaning any losses would cause a harvest which\r\n     *  will subsequently report the loss to the Vault for tracking. (See\r\n     *  `harvestTrigger()` for more details.)\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @param _debtThreshold How big of a loss this Strategy may carry without\r\n     * being required to report to the Vault.\r\n     */\r\n    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\r\n        debtThreshold = _debtThreshold;\r\n        emit UpdatedDebtThreshold(_debtThreshold);\r\n    }\r\n\r\n    /**\r\n     * Resolve governance address from Vault contract, used to make assertions\r\n     * on protected functions in the Strategy.\r\n     */\r\n    function governance() internal view returns (address) {\r\n        return vault.governance();\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide an accurate estimate for the total amount of assets\r\n     *  (principle + return) that this Strategy is currently managing,\r\n     *  denominated in terms of `want` tokens.\r\n     *\r\n     *  This total should be \"realizable\" e.g. the total value that could\r\n     *  *actually* be obtained from this Strategy if it were to divest its\r\n     *  entire position based on current on-chain conditions.\r\n     * @dev\r\n     *  Care must be taken in using this function, since it relies on external\r\n     *  systems, which could be manipulated by the attacker to give an inflated\r\n     *  (or reduced) value produced by this function, based on current on-chain\r\n     *  conditions (e.g. this function is possible to influence through\r\n     *  flashloan attacks, oracle manipulations, or other DeFi attack\r\n     *  mechanisms).\r\n     *\r\n     *  It is up to governance to use this function to correctly order this\r\n     *  Strategy relative to its peers in the withdrawal queue to minimize\r\n     *  losses for the Vault based on sudden withdrawals. This value should be\r\n     *  higher than the total debt of the Strategy and higher than its expected\r\n     *  value to be \"safe\".\r\n     * @return The estimated total assets in this Strategy.\r\n     */\r\n    function estimatedTotalAssets() public virtual view returns (uint256);\r\n\r\n    /**\r\n     * Perform any Strategy unwinding or other calls necessary to capture the\r\n     * \"free return\" this Strategy has generated since the last time its core\r\n     * position(s) were adjusted. Examples include unwrapping extra rewards.\r\n     * This call is only used during \"normal operation\" of a Strategy, and\r\n     * should be optimized to minimize losses as much as possible.\r\n     *\r\n     * This method returns any realized profits and/or realized losses\r\n     * incurred, and should return the total amounts of profits/losses/debt\r\n     * payments (in `want` tokens) for the Vault's accounting (e.g.\r\n     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\r\n     *\r\n     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\r\n     * debt limit, otherwise its value will be how far past the debt limit\r\n     * the Strategy is. The Strategy's debt limit is configured in the Vault.\r\n     *\r\n     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\r\n     *       It is okay for it to be less than `_debtOutstanding`, as that\r\n     *       should only used as a guide for how much is left to pay back.\r\n     *       Payments should be made to minimize loss from slippage, debt,\r\n     *       withdrawal fees, etc.\r\n     *\r\n     * See `vault.debtOutstanding()`.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     * Perform any adjustments to the core position(s) of this Strategy given\r\n     * what change the Vault made in the \"investable capital\" available to the\r\n     * Strategy. Note that all \"free capital\" in the Strategy after the report\r\n     * was made is available for reinvestment. Also note that this number\r\n     * could be 0, and you should handle that scenario accordingly.\r\n     *\r\n     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\r\n     */\r\n    function adjustPosition(uint256 _debtOutstanding) internal virtual;\r\n\r\n    /**\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some\r\n     * slippage is allowed, since when this method is called the strategist is\r\n     * no longer receiving their performance fee. The goal is for the Strategy\r\n     * to divest as quickly as possible while not suffering exorbitant losses.\r\n     * This function is used during emergency exit instead of\r\n     * `prepareReturn()`. This method returns any realized losses incurred,\r\n     * and should also return the amount of `want` tokens available to repay\r\n     * outstanding debt to the Vault.\r\n     */\r\n    function exitPosition(uint256 _debtOutstanding)\r\n        internal\r\n        virtual\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        );\r\n\r\n    /**\r\n     *  `Harvest()` calls this function after shares are created during\r\n     *  `vault.report()`. You can customize this function to any share\r\n     *  distribution mechanism you want.\r\n     *\r\n     *   See `vault.report()` for further details.\r\n     */\r\n    function distributeRewards() internal virtual {\r\n        // Transfer 100% of newly-minted shares awarded to this contract to the rewards address.\r\n        uint256 balance = vault.balanceOf(address(this));\r\n        if (balance > 0) {\r\n            vault.transfer(rewards, balance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `tend()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `tend()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `tend()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be\r\n     *  \"at a loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `harvestTrigger()` should never return `true` at the same\r\n     *  time.\r\n     * @param callCost The keeper's estimated cast cost to call `tend()`.\r\n     * @return `true` if `tend()` should be called, `false` otherwise.\r\n     */\r\n    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        // We usually don't need tend, but if there are positions that need\r\n        // active maintainence, overriding this function is how you would\r\n        // signal for that.\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Adjust the Strategy's position. The purpose of tending isn't to\r\n     *  realize gains, but to maximize yield by reinvesting any returns.\r\n     *\r\n     *  See comments on `adjustPosition()`.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     */\r\n    function tend() external onlyKeepers {\r\n        // Don't take profits with this call, but adjust for better gains\r\n        adjustPosition(vault.debtOutstanding());\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Provide a signal to the keeper that `harvest()` should be called. The\r\n     *  keeper will provide the estimated gas cost that they would pay to call\r\n     *  `harvest()`, and this function should use that estimate to make a\r\n     *  determination if calling it is \"worth it\" for the keeper. This is not\r\n     *  the only consideration into issuing this trigger, for example if the\r\n     *  position would be negatively affected if `harvest()` is not called\r\n     *  shortly, then this can return `true` even if the keeper might be \"at a\r\n     *  loss\" (keepers are always reimbursed by Yearn).\r\n     * @dev\r\n     *  `callCost` must be priced in terms of `want`.\r\n     *\r\n     *  This call and `tendTrigger` should never return `true` at the\r\n     *  same time.\r\n     *\r\n     *  See `minReportDelay`, `profitFactor`, `debtThreshold` to adjust the\r\n     *  strategist-controlled parameters that will influence whether this call\r\n     *  returns `true` or not. These parameters will be used in conjunction\r\n     *  with the parameters reported to the Vault (see `params`) to determine\r\n     *  if calling `harvest()` is merited.\r\n     *\r\n     *  It is expected that an external system will check `harvestTrigger()`.\r\n     *  This could be a script run off a desktop or cloud bot (e.g.\r\n     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\r\n     *  or via an integration with the Keep3r network (e.g.\r\n     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\r\n     * @param callCost The keeper's estimated cast cost to call `harvest()`.\r\n     * @return `true` if `harvest()` should be called, `false` otherwise.\r\n     */\r\n    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if Strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should trigger if hasn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\r\n\r\n        // If some amount is owed, pay it back\r\n        // NOTE: Since debt is adjusted in step-wise fashion, it is appropriate\r\n        //       to always trigger here, because the resulting change should be\r\n        //       large (might not always be the case).\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > 0) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n        // Trigger if we have a loss to report\r\n        if (total.add(debtThreshold) < params.totalDebt) return true;\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        // Otherwise, only trigger if it \"makes sense\" economically (gas cost\r\n        // is <N% of value moved)\r\n        uint256 credit = vault.creditAvailable();\r\n        return (profitFactor.mul(callCost) < credit.add(profit));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Harvests the Strategy, recognizing any profits or losses and adjusting\r\n     *  the Strategy's position.\r\n     *\r\n     *  In the rare case the Strategy is in emergency shutdown, this will exit\r\n     *  the Strategy's position.\r\n     *\r\n     *  This may only be called by governance, the strategist, or the keeper.\r\n     * @dev\r\n     *  When `harvest()` is called, the Strategy reports to the Vault (via\r\n     *  `vault.report()`), so in some cases `harvest()` must be called in order\r\n     *  to take in profits, to borrow newly available funds from the Vault, or\r\n     *  otherwise adjust its position. In other cases `harvest()` must be\r\n     *  called to report to the Vault on the Strategy's position, especially if\r\n     *  any losses have occurred.\r\n     */\r\n    function harvest() external onlyKeepers {\r\n        uint256 profit = 0;\r\n        uint256 loss = 0;\r\n        uint256 debtPayment = 0;\r\n        if (emergencyExit) {\r\n            // Free up as much capital as possible\r\n            // NOTE: Don't take performance fee in this scenario\r\n            (profit, loss, debtPayment) = exitPosition(vault.debtOutstanding());\r\n        } else {\r\n            // Free up returns for Vault to pull\r\n            (profit, loss, debtPayment) = prepareReturn(vault.debtOutstanding());\r\n        }\r\n\r\n        // Allow Vault to take up to the \"harvested\" balance of this contract,\r\n        // which is the amount it has earned since the last time it reported to\r\n        // the Vault.\r\n        uint256 debtOutstanding = vault.report(profit, loss, debtPayment);\r\n\r\n        // Distribute any reward shares earned by the strategy on this report\r\n        distributeRewards();\r\n\r\n        // Check if free returns are left, and re-invest them\r\n        adjustPosition(debtOutstanding);\r\n\r\n        emit Harvested(profit, loss, debtPayment, debtOutstanding);\r\n    }\r\n\r\n    /**\r\n     * Liquidate as many assets as possible to `want`, irregardless of\r\n     * slippage, up to `_amountNeeded`. Any excess should be re-invested\r\n     * here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _amountFreed);\r\n\r\n    /**\r\n     * @notice\r\n     *  Withdraws `_amountNeeded` to `vault`.\r\n     *\r\n     *  This may only be called by the Vault.\r\n     * @param _amountNeeded How much `want` to withdraw.\r\n     */\r\n    function withdraw(uint256 _amountNeeded) external {\r\n        require(msg.sender == address(vault), \"!vault\");\r\n        // Liquidate as much as possible to `want`, up to `_amount`\r\n        uint256 amountFreed = liquidatePosition(_amountNeeded);\r\n        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\r\n        want.transfer(msg.sender, amountFreed);\r\n    }\r\n\r\n    /**\r\n     * Do anything necessary to prepare this Strategy for migration, such as\r\n     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\r\n     * value.\r\n     */\r\n    function prepareMigration(address _newStrategy) internal virtual;\r\n\r\n    /**\r\n     * @notice\r\n     *  Transfers all `want` from this Strategy to `_newStrategy`.\r\n     *\r\n     *  This may only be called by governance or the Vault.\r\n     * @dev\r\n     *  The new Strategy's Vault must be the same as this Strategy's Vault.\r\n     * @param _newStrategy The Strategy to migrate to.\r\n     */\r\n    function migrate(address _newStrategy) external {\r\n        require(msg.sender == address(vault) || msg.sender == governance());\r\n        require(BaseStrategy(_newStrategy).vault() == vault);\r\n        prepareMigration(_newStrategy);\r\n        want.transfer(_newStrategy, want.balanceOf(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice\r\n     *  Activates emergency exit. Once activated, the Strategy will exit its\r\n     *  position upon the next harvest, depositing all funds into the Vault as\r\n     *  quickly as is reasonable given on-chain conditions.\r\n     *\r\n     *  This may only be called by governance or the strategist.\r\n     * @dev\r\n     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\r\n     */\r\n    function setEmergencyExit() external onlyAuthorized {\r\n        emergencyExit = true;\r\n        vault.revokeStrategy();\r\n    }\r\n\r\n    /**\r\n     * Override this to add all tokens/tokenized positions this contract\r\n     * manages on a *persistent* basis (e.g. not just for swapping back to\r\n     * want ephemerally).\r\n     *\r\n     * NOTE: Do *not* include `want`, already included in `sweep` below.\r\n     *\r\n     * Example:\r\n     *\r\n     *    function protectedTokens() internal override view returns (address[] memory) {\r\n     *      address[] memory protected = new address[](3);\r\n     *      protected[0] = tokenA;\r\n     *      protected[1] = tokenB;\r\n     *      protected[2] = tokenC;\r\n     *      return protected;\r\n     *    }\r\n     */\r\n    function protectedTokens() internal virtual view returns (address[] memory);\r\n\r\n    /**\r\n     * @notice\r\n     *  Removes tokens from this Strategy that are not the type of tokens\r\n     *  managed by this Strategy. This may be used in case of accidentally\r\n     *  sending the wrong kind of token to this Strategy.\r\n     *\r\n     *  Tokens will be sent to `governance()`.\r\n     *\r\n     *  This will fail if an attempt is made to sweep `want`, or any tokens\r\n     *  that are protected by this Strategy.\r\n     *\r\n     *  This may only be called by governance.\r\n     * @dev\r\n     *  Implement `protectedTokens()` to specify any additional tokens that\r\n     *  should be protected from sweeping in addition to `want`.\r\n     * @param _token The token to transfer out of this vault.\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(want), \"!want\");\r\n        require(_token != address(vault), \"!shares\");\r\n\r\n        address[] memory _protectedTokens = protectedTokens();\r\n        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], \"!protected\");\r\n\r\n        IERC20(_token).transfer(governance(), IERC20(_token).balanceOf(address(this)));\r\n    }\r\n}\r\n\r\n\r\n// SPDX-License-Identifier: GPL-3.0\r\npragma solidity ^0.6.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n/********************\r\n *\r\n *   A lender optimisation strategy for any erc20 asset\r\n *   https://github.com/Grandthrax/yearnV2-generic-lender-strat\r\n *   v0.2.2\r\n *\r\n ********************* */\r\n\r\ncontract Strategy is BaseStrategy, DydxFlashloanBase, ICallee {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n\r\n    // @notice emitted when trying to do Flash Loan. flashLoan address is 0x00 when no flash loan used\r\n    event Leverage(uint256 amountRequested, uint256 amountGiven, bool deficit, address flashLoan);\r\n\r\n    //Flash Loan Providers\r\n    address private constant SOLO = 0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e;\r\n    address private constant AAVE_LENDING = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\r\n    ILendingPoolAddressesProvider public addressesProvider;\r\n\r\n    // Comptroller address for compound.finance\r\n    ComptrollerI public constant compound = ComptrollerI(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\r\n\r\n    //Only three tokens we use\r\n    address public constant comp = address(0xc00e94Cb662C3520282E6f5717214004A7f26888);\r\n    CErc20I public cToken;\r\n    //address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    address public constant uniswapRouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n\r\n    //Operating variables\r\n    uint256 public collateralTarget = 0.73 ether; // 73%\r\n    uint256 public blocksToLiquidationDangerZone = 46500; // 7 days =  60*60*24*7/13\r\n\r\n    uint256 public minWant = 0; //Only lend if we have enough want to be worth it. Can be set to non-zero\r\n    uint256 public minCompToSell = 0.1 ether; //used both as the threshold to sell but also as a trigger for harvest\r\n\r\n    //To deactivate flash loan provider if needed\r\n    bool public DyDxActive = true;\r\n    bool public AaveActive = true;\r\n\r\n    uint256 public dyDxMarketId;\r\n\r\n    constructor(address _vault, address _cToken) public BaseStrategy(_vault) {\r\n        cToken = CErc20I(address(_cToken));\r\n\r\n        //pre-set approvals\r\n        IERC20(comp).safeApprove(uniswapRouter, uint256(-1));\r\n        want.safeApprove(address(cToken), uint256(-1));\r\n        want.safeApprove(SOLO, uint256(-1));\r\n\r\n        // You can set these parameters on deployment to whatever you want\r\n        minReportDelay = 86400; // once per 24 hours\r\n        profitFactor = 100; // multiple before triggering harvest\r\n\r\n        dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, address(want));\r\n\r\n        addressesProvider = ILendingPoolAddressesProvider(AAVE_LENDING);\r\n\r\n        //we do this horrible thing because you can't compare strings in solidity\r\n        require(keccak256(bytes(apiVersion())) == keccak256(bytes(VaultAPI(_vault).apiVersion())), \"WRONG VERSION\");\r\n    }\r\n\r\n    function name() external override pure returns (string memory){\r\n        return \"GenericLevCompFarm\";\r\n    }\r\n\r\n    /*\r\n     * Control Functions\r\n     */\r\n    function setDyDx(bool _dydx) external management {\r\n        DyDxActive = _dydx;\r\n    }\r\n\r\n    function setAave(bool _ave) external management {\r\n        AaveActive = _ave;\r\n    }\r\n\r\n    function setMinCompToSell(uint256 _minCompToSell) external management {\r\n        minCompToSell = _minCompToSell;\r\n    }\r\n\r\n    function setMinWant(uint256 _minWant) external management {\r\n        minWant = _minWant;\r\n    }\r\n\r\n    function updateMarketId() external management {\r\n        dyDxMarketId = _getMarketIdFromTokenAddress(SOLO, address(want));\r\n    }\r\n\r\n    function setCollateralTarget(uint256 _collateralTarget) external management {\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n        require(collateralFactorMantissa > _collateralTarget, \"!dangerous collateral\");\r\n        collateralTarget = _collateralTarget;\r\n    }\r\n\r\n    /*\r\n     * Base External Facing Functions\r\n     */\r\n    /*\r\n     * An accurate estimate for the total amount of assets (principle + return)\r\n     * that this strategy is currently managing, denominated in terms of want tokens.\r\n     */\r\n    function estimatedTotalAssets() public override view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n\r\n        uint256 _claimableComp = predictCompAccrued();\r\n        uint256 currentComp = IERC20(comp).balanceOf(address(this));\r\n\r\n        // Use touch price. it doesnt matter if we are wrong as this is not used for decision making\r\n        uint256 estimatedWant =  priceCheck(comp, address(want),_claimableComp.add(currentComp));\r\n        uint256 conservativeWant = estimatedWant.mul(9).div(10); //10% pessimist\r\n\r\n        return want.balanceOf(address(this)).add(deposits).add(conservativeWant).sub(borrows);\r\n    }\r\n\r\n    //predicts our profit at next report\r\n    function expectedReturn() public view returns (uint256) {\r\n        uint256 estimateAssets = estimatedTotalAssets();\r\n\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n        if (debt > estimateAssets) {\r\n            return 0;\r\n        } else {\r\n            return estimateAssets - debt;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `tend()` should be called.\r\n     * (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `harvestTrigger` should never return `true` at the same time.\r\n     * tendTrigger should be called with same gasCost as harvestTrigger\r\n     */\r\n    function tendTrigger(uint256 gasCost) public override view returns (bool) {\r\n        if (harvestTrigger(gasCost)) {\r\n            //harvest takes priority\r\n            return false;\r\n        }\r\n\r\n        if (getblocksUntilLiquidation() <= blocksToLiquidationDangerZone) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Provide a signal to the keeper that `harvest()` should be called.\r\n     * gasCost is expected_gas_use * gas_price\r\n     * (keepers are always reimbursed by yEarn)\r\n     *\r\n     * NOTE: this call and `tendTrigger` should never return `true` at the same time.\r\n     */\r\n    function harvestTrigger(uint256 gasCost) public override view returns (bool) {\r\n        uint256 wantGasCost = priceCheck(weth, address(want), gasCost);\r\n        uint256 compGasCost = priceCheck(weth, comp, gasCost);\r\n\r\n        // after enough comp has accrued we want the bot to run\r\n        uint256 _claimableComp = predictCompAccrued();\r\n\r\n        if (_claimableComp > minCompToSell) {\r\n            // check value of COMP in wei\r\n            if ( _claimableComp.add(IERC20(comp).balanceOf(address(this))) > compGasCost.mul(profitFactor)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        StrategyParams memory params = vault.strategies(address(this));\r\n\r\n        // Should not trigger if strategy is not activated\r\n        if (params.activation == 0) return false;\r\n\r\n        // Should trigger if hadn't been called in a while\r\n        if (block.timestamp.sub(params.lastReport) >= minReportDelay) return true;\r\n\r\n        //check if vault wants lots of money back\r\n        // dont return dust\r\n        uint256 outstanding = vault.debtOutstanding();\r\n        if (outstanding > profitFactor.mul(wantGasCost)) return true;\r\n\r\n        // Check for profits and losses\r\n        uint256 total = estimatedTotalAssets();\r\n\r\n        uint256 profit = 0;\r\n        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\r\n\r\n        uint256 credit = vault.creditAvailable().add(profit);\r\n        return (profitFactor.mul(wantGasCost) < credit);\r\n    }\r\n\r\n    //WARNING. manipulatable and simple routing. Only use for safe functions\r\n    function priceCheck(address start, address end, uint256 _amount) public view returns (uint256) {\r\n        if (_amount == 0) {\r\n            return 0;\r\n        }\r\n        address[] memory path;\r\n        if(start == weth){\r\n            path = new address[](2);\r\n            path[0] = weth; \r\n            path[1] = end;\r\n        }else{\r\n            path = new address[](2);\r\n            path[0] = start; \r\n            path[1] = weth; \r\n            path[1] = end;\r\n        }\r\n \r\n        uint256[] memory amounts = IUni(uniswapRouter).getAmountsOut(_amount, path);\r\n\r\n        return amounts[amounts.length - 1];\r\n    }\r\n\r\n    /*****************\r\n     * Public non-base function\r\n     ******************/\r\n\r\n    //Calculate how many blocks until we are in liquidation based on current interest rates\r\n    //WARNING does not include compounding so the estimate becomes more innacurate the further ahead we look\r\n    //equation. Compound doesn't include compounding for most blocks\r\n    //((deposits*colateralThreshold - borrows) / (borrows*borrowrate - deposits*colateralThreshold*interestrate));\r\n    function getblocksUntilLiquidation() public view returns (uint256) {\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n\r\n        uint256 borrrowRate = cToken.borrowRatePerBlock();\r\n\r\n        uint256 supplyRate = cToken.supplyRatePerBlock();\r\n\r\n        uint256 collateralisedDeposit1 = deposits.mul(collateralFactorMantissa).div(1e18);\r\n        uint256 collateralisedDeposit = collateralisedDeposit1;\r\n\r\n        uint256 denom1 = borrows.mul(borrrowRate);\r\n        uint256 denom2 = collateralisedDeposit.mul(supplyRate);\r\n\r\n        if (denom2 >= denom1) {\r\n            return uint256(-1);\r\n        } else {\r\n            uint256 numer = collateralisedDeposit.sub(borrows);\r\n            uint256 denom = denom1 - denom2;\r\n            //minus 1 for this block\r\n            return numer.mul(1e18).div(denom);\r\n        }\r\n    }\r\n\r\n    // This function makes a prediction on how much comp is accrued\r\n    // It is not 100% accurate as it uses current balances in Compound to predict into the past\r\n    function predictCompAccrued() public view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n        if (deposits == 0) {\r\n            return 0; // should be impossible to have 0 balance and positive comp accrued\r\n        }\r\n\r\n        //comp speed is amount to borrow or deposit (so half the total distribution for want)\r\n        uint256 distributionPerBlock = compound.compSpeeds(address(cToken));\r\n\r\n        uint256 totalBorrow = cToken.totalBorrows();\r\n\r\n        //total supply needs to be echanged to underlying using exchange rate\r\n        uint256 totalSupplyCtoken = cToken.totalSupply();\r\n        uint256 totalSupply = totalSupplyCtoken.mul(cToken.exchangeRateStored()).div(1e18);\r\n\r\n        uint256 blockShareSupply = 0;\r\n        if(totalSupply > 0){\r\n            blockShareSupply = deposits.mul(distributionPerBlock).div(totalSupply);\r\n        }\r\n        \r\n        uint256 blockShareBorrow = 0;\r\n        if(totalBorrow > 0){\r\n            blockShareBorrow = borrows.mul(distributionPerBlock).div(totalBorrow);\r\n        }\r\n        \r\n        //how much we expect to earn per block\r\n        uint256 blockShare = blockShareSupply.add(blockShareBorrow);\r\n\r\n        //last time we ran harvest\r\n        uint256 lastReport = vault.strategies(address(this)).lastReport;\r\n        uint256 blocksSinceLast= (block.timestamp.sub(lastReport)).div(13); //roughly 13 seconds per block\r\n\r\n        return blocksSinceLast.mul(blockShare);\r\n    }\r\n\r\n    //Returns the current position\r\n    //WARNING - this returns just the balance at last time someone touched the cToken token. Does not accrue interst in between\r\n    //cToken is very active so not normally an issue.\r\n    function getCurrentPosition() public view returns (uint256 deposits, uint256 borrows) {\r\n        (, uint256 ctokenBalance, uint256 borrowBalance, uint256 exchangeRate) = cToken.getAccountSnapshot(address(this));\r\n        borrows = borrowBalance;\r\n\r\n        deposits = ctokenBalance.mul(exchangeRate).div(1e18);\r\n    }\r\n\r\n    //statechanging version\r\n    function getLivePosition() public returns (uint256 deposits, uint256 borrows) {\r\n        deposits = cToken.balanceOfUnderlying(address(this));\r\n\r\n        //we can use non state changing now because we updated state with balanceOfUnderlying call\r\n        borrows = cToken.borrowBalanceStored(address(this));\r\n    }\r\n\r\n    //Same warning as above\r\n    function netBalanceLent() public view returns (uint256) {\r\n        (uint256 deposits, uint256 borrows) = getCurrentPosition();\r\n        return deposits.sub(borrows);\r\n    }\r\n\r\n    /***********\r\n     * internal core logic\r\n     *********** */\r\n    /*\r\n     * A core method.\r\n     * Called at beggining of harvest before providing report to owner\r\n     * 1 - claim accrued comp\r\n     * 2 - if enough to be worth it we sell\r\n     * 3 - because we lose money on our loans we need to offset profit from comp.\r\n     */\r\n    function prepareReturn(uint256 _debtOutstanding)\r\n        internal\r\n        override\r\n        returns (\r\n            uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment\r\n        ) {\r\n        _profit = 0;\r\n        _loss = 0; //for clarity. also reduces bytesize\r\n\r\n        if (cToken.balanceOf(address(this)) == 0) {\r\n            uint256 wantBalance = want.balanceOf(address(this));\r\n            //no position to harvest\r\n            //but we may have some debt to return\r\n            //it is too expensive to free more debt in this method so we do it in adjust position\r\n            _debtPayment = Math.min(wantBalance, _debtOutstanding); \r\n            return (_profit, _loss, _debtPayment);\r\n        }\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n        //claim comp accrued\r\n        _claimComp();\r\n        //sell comp\r\n        _disposeOfComp();\r\n\r\n        uint256 wantBalance = want.balanceOf(address(this));\r\n\r\n        uint256 investedBalance = deposits.sub(borrows);\r\n        uint256 balance = investedBalance.add(wantBalance);\r\n\r\n        uint256 debt = vault.strategies(address(this)).totalDebt;\r\n\r\n        //Balance - Total Debt is profit\r\n        if (balance > debt) {\r\n            _profit = balance - debt;\r\n\r\n            if (wantBalance < _profit) {\r\n                //all reserve is profit                \r\n                _profit = wantBalance;\r\n            } else if (wantBalance > _profit.add(_debtOutstanding)){\r\n                _debtPayment = _debtOutstanding;\r\n            }else{\r\n                _debtPayment = wantBalance - _profit;\r\n            }\r\n        } else {\r\n            //we will lose money until we claim comp then we will make money\r\n            //this has an unintended side effect of slowly lowering our total debt allowed\r\n            _loss = debt - balance;\r\n            _debtPayment = Math.min(wantBalance, _debtOutstanding);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Second core function. Happens after report call.\r\n     *\r\n     * Similar to deposit function from V1 strategy\r\n     */\r\n\r\n    function adjustPosition(uint256 _debtOutstanding) internal override {\r\n        //emergency exit is dealt with in prepareReturn\r\n        if (emergencyExit) {\r\n            return;\r\n        }\r\n\r\n        //we are spending all our cash unless we have debt outstanding\r\n        uint256 _wantBal = want.balanceOf(address(this));\r\n        if(_wantBal < _debtOutstanding){\r\n            //this is graceful withdrawal. dont use backup\r\n            //we use more than 1 because withdrawunderlying causes problems with 1 token due to different decimals\r\n            if(cToken.balanceOf(address(this)) > 1){ \r\n                _withdrawSome(_debtOutstanding - _wantBal, false);\r\n            }\r\n\r\n            return;\r\n        }\r\n        \r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_wantBal - _debtOutstanding, true);\r\n        \r\n        //if we are below minimun want change it is not worth doing\r\n        //need to be careful in case this pushes to liquidation\r\n        if (position > minWant) {\r\n            //if dydx is not active we just try our best with basic leverage\r\n            if (!DyDxActive) {\r\n                uint i = 5;\r\n                while(position > 0){\r\n                    position = position.sub(_noFlashLoan(position, deficit));\r\n                    i++;\r\n                }\r\n            } else {\r\n                //if there is huge position to improve we want to do normal leverage. it is quicker\r\n                if (position > want.balanceOf(SOLO)) {\r\n                    position = position.sub(_noFlashLoan(position, deficit));\r\n                }\r\n\r\n                //flash loan to position\r\n                if(position > 0){\r\n                    doDyDxFlashLoan(deficit, position);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************\r\n     * Very important function\r\n     * Input: amount we want to withdraw and whether we are happy to pay extra for Aave.\r\n     *       cannot be more than we have\r\n     * Returns amount we were able to withdraw. notall if user has some balance left\r\n     *\r\n     * Deleverage position -> redeem our cTokens\r\n     ******************** */\r\n    function _withdrawSome(uint256 _amount, bool _useBackup) internal returns (bool notAll) {\r\n        (uint256 position, bool deficit) = _calculateDesiredPosition(_amount, false);\r\n\r\n        //If there is no deficit we dont need to adjust position\r\n        if (deficit) {\r\n            //we do a flash loan to give us a big gap. from here on out it is cheaper to use normal deleverage. Use Aave for extremely large loans\r\n            if (DyDxActive) {\r\n                position = position.sub(doDyDxFlashLoan(deficit, position));\r\n            }\r\n\r\n            // Will decrease number of interactions using aave as backup\r\n            // because of fee we only use in emergency\r\n            if (position > 0 && AaveActive && _useBackup) {\r\n                position = position.sub(doAaveFlashLoan(deficit, position));\r\n            }\r\n\r\n            uint8 i = 0;\r\n            //position will equal 0 unless we haven't been able to deleverage enough with flash loan\r\n            //if we are not in deficit we dont need to do flash loan\r\n            while (position > 0) {\r\n                position = position.sub(_noFlashLoan(position, true));\r\n                i++;\r\n\r\n                //A limit set so we don't run out of gas\r\n                if (i >= 5) {\r\n                    notAll = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        //now withdraw\r\n        //if we want too much we just take max\r\n\r\n        //This part makes sure our withdrawal does not force us into liquidation\r\n        (uint256 depositBalance, uint256 borrowBalance) = getCurrentPosition();\r\n\r\n        uint256 AmountNeeded = 0;\r\n        if(collateralTarget > 0){\r\n            AmountNeeded = borrowBalance.mul(1e18).div(collateralTarget);\r\n        }\r\n        uint256 redeemable = depositBalance.sub(AmountNeeded);\r\n\r\n        if (redeemable < _amount) {\r\n            cToken.redeemUnderlying(redeemable);\r\n        } else {\r\n            cToken.redeemUnderlying(_amount);\r\n        }\r\n\r\n        //let's sell some comp if we have more than needed\r\n        //flash loan would have sent us comp if we had some accrued so we don't need to call claim comp\r\n        _disposeOfComp();\r\n    }\r\n\r\n    /***********\r\n     *  This is the main logic for calculating how to change our lends and borrows\r\n     *  Input: balance. The net amount we are going to deposit/withdraw.\r\n     *  Input: dep. Is it a deposit or withdrawal\r\n     *  Output: position. The amount we want to change our current borrow position.\r\n     *  Output: deficit. True if we are reducing position size\r\n     *\r\n     *  For instance deficit =false, position 100 means increase borrowed balance by 100\r\n     ****** */\r\n    function _calculateDesiredPosition(uint256 balance, bool dep) internal returns (uint256 position, bool deficit) {\r\n        //we want to use statechanging for safety\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n        //When we unwind we end up with the difference between borrow and supply\r\n        uint256 unwoundDeposit = deposits.sub(borrows);\r\n\r\n        //we want to see how close to collateral target we are.\r\n        //So we take our unwound deposits and add or remove the balance we are are adding/removing.\r\n        //This gives us our desired future undwoundDeposit (desired supply)\r\n\r\n        uint256 desiredSupply = 0;\r\n        if (dep) {\r\n            desiredSupply = unwoundDeposit.add(balance);\r\n        } else { \r\n            if(balance > unwoundDeposit) balance = unwoundDeposit;\r\n            desiredSupply = unwoundDeposit.sub(balance);\r\n        }\r\n\r\n        //(ds *c)/(1-c)\r\n        uint256 num = desiredSupply.mul(collateralTarget);\r\n        uint256 den = uint256(1e18).sub(collateralTarget);\r\n\r\n        uint256 desiredBorrow = num.div(den);\r\n        if (desiredBorrow > 1e5) {\r\n            //stop us going right up to the wire\r\n            desiredBorrow = desiredBorrow - 1e5;\r\n        }\r\n\r\n        //now we see if we want to add or remove balance\r\n        // if the desired borrow is less than our current borrow we are in deficit. so we want to reduce position\r\n        if (desiredBorrow < borrows) {\r\n            deficit = true;\r\n            position = borrows - desiredBorrow; //safemath check done in if statement\r\n        } else {\r\n            //otherwise we want to increase position\r\n            deficit = false;\r\n            position = desiredBorrow - borrows;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Liquidate as many assets as possible to `want`, irregardless of slippage,\r\n     * up to `_amount`. Any excess should be re-invested here as well.\r\n     */\r\n    function liquidatePosition(uint256 _amountNeeded) internal override returns (uint256 _amountFreed) {\r\n        uint256 _balance = want.balanceOf(address(this));\r\n\r\n        if (netBalanceLent().add(_balance) < _amountNeeded) {\r\n            //if we cant afford to withdraw we take all we can\r\n            //withdraw all we can\r\n            (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n            //1 token causes rounding error with withdrawUnderlying\r\n            if(cToken.balanceOf(address(this)) > 1){ \r\n                _withdrawSome(deposits.sub(borrows), true);\r\n            }\r\n\r\n            _amountFreed = Math.min(_amountNeeded, want.balanceOf(address(this)));\r\n        } else {\r\n            if (_balance < _amountNeeded) {\r\n                _withdrawSome(_amountNeeded.sub(_balance), true);\r\n\r\n                //overflow error if we return more than asked for\r\n                _amountFreed = Math.min(_amountNeeded, want.balanceOf(address(this)));\r\n            }else{\r\n                _amountFreed = _amountNeeded;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _claimComp() internal {\r\n        CTokenI[] memory tokens = new CTokenI[](1);\r\n        tokens[0] = cToken;\r\n\r\n        compound.claimComp(address(this), tokens);\r\n    }\r\n\r\n    //sell comp function\r\n    function _disposeOfComp() internal {\r\n        uint256 _comp = IERC20(comp).balanceOf(address(this));\r\n\r\n        if (_comp > minCompToSell) {\r\n            address[] memory path = new address[](3);\r\n            path[0] = comp;\r\n            path[1] = weth;\r\n            path[2] = address(want);\r\n\r\n            IUni(uniswapRouter).swapExactTokensForTokens(_comp, uint256(0), path, address(this), now);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Make as much capital as possible \"free\" for the Vault to take. Some slippage\r\n     * is allowed.\r\n     */\r\n    function exitPosition(uint256 _debtOutstanding) internal override returns (uint256 _profit,\r\n            uint256 _loss,\r\n            uint256 _debtPayment){\r\n\r\n        //we dont use getCurrentPosition() because it won't be exact\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n\r\n        //1 token causes rounding error with withdrawUnderlying\r\n        if(cToken.balanceOf(address(this)) > 1){ \r\n            _withdrawSome(deposits.sub(borrows), true);\r\n        }\r\n        _debtPayment = want.balanceOf(address(this));\r\n        if(_debtOutstanding > _debtPayment){\r\n            _loss = _debtOutstanding - _debtPayment;\r\n        }\r\n        else if(_debtPayment > _debtOutstanding){\r\n            _profit = _debtPayment - _debtOutstanding;\r\n            _debtPayment = _debtOutstanding;\r\n        }\r\n    }\r\n\r\n    //lets leave\r\n    //if we can't deleverage in one go set collateralFactor to 0 and call harvest multiple times until delevered\r\n    function prepareMigration(address _newStrategy) internal override {\r\n        (uint256 deposits, uint256 borrows) = getLivePosition();\r\n        _withdrawSome(deposits.sub(borrows), false);\r\n\r\n        (, , uint256 borrowBalance, ) = cToken.getAccountSnapshot(address(this));\r\n\r\n        require(borrowBalance == 0, \"DELEVERAGE_FIRST\");\r\n\r\n        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\r\n\r\n        IERC20 _comp = IERC20(comp);\r\n        uint _compB = _comp.balanceOf(address(this));\r\n        if(_compB > 0){\r\n            _comp.safeTransfer(_newStrategy, _compB);\r\n        }\r\n    }\r\n\r\n    //Three functions covering normal leverage and deleverage situations\r\n    // max is the max amount we want to increase our borrowed balance\r\n    // returns the amount we actually did\r\n    function _noFlashLoan(uint256 max, bool deficit) internal returns (uint256 amount) {\r\n        //we can use non-state changing because this function is always called after _calculateDesiredPosition\r\n        (uint256 lent, uint256 borrowed) = getCurrentPosition();\r\n\r\n        //if we have nothing borrowed then we can't deleverage any more\r\n        if (borrowed == 0 && deficit) {\r\n            return 0;\r\n        }\r\n\r\n        (, uint256 collateralFactorMantissa, ) = compound.markets(address(cToken));\r\n\r\n        if (deficit) {\r\n            amount = _normalDeleverage(max, lent, borrowed, collateralFactorMantissa);\r\n        } else {\r\n            amount = _normalLeverage(max, lent, borrowed, collateralFactorMantissa);\r\n        }\r\n\r\n        emit Leverage(max, amount, deficit, address(0));\r\n    }\r\n\r\n    //maxDeleverage is how much we want to reduce by\r\n    function _normalDeleverage(\r\n        uint256 maxDeleverage,\r\n        uint256 lent,\r\n        uint256 borrowed,\r\n        uint256 collatRatio\r\n    ) internal returns (uint256 deleveragedAmount) {\r\n        uint256 theoreticalLent = 0;\r\n\r\n        //collat ration should never be 0. if it is something is very wrong... but just incase\r\n        if(collatRatio != 0){\r\n            theoreticalLent = borrowed.mul(1e18).div(collatRatio);\r\n        }\r\n\r\n        deleveragedAmount = lent.sub(theoreticalLent);\r\n\r\n        if (deleveragedAmount >= borrowed) {\r\n            deleveragedAmount = borrowed;\r\n        }\r\n        if (deleveragedAmount >= maxDeleverage) {\r\n            deleveragedAmount = maxDeleverage;\r\n        }\r\n\r\n        cToken.redeemUnderlying(deleveragedAmount);\r\n\r\n        //our borrow has been increased by no more than maxDeleverage\r\n        cToken.repayBorrow(deleveragedAmount);\r\n    }\r\n\r\n    //maxDeleverage is how much we want to increase by\r\n    function _normalLeverage(\r\n        uint256 maxLeverage,\r\n        uint256 lent,\r\n        uint256 borrowed,\r\n        uint256 collatRatio\r\n    ) internal returns (uint256 leveragedAmount) {\r\n        uint256 theoreticalBorrow = lent.mul(collatRatio).div(1e18);\r\n\r\n        leveragedAmount = theoreticalBorrow.sub(borrowed);\r\n\r\n        if (leveragedAmount >= maxLeverage) {\r\n            leveragedAmount = maxLeverage;\r\n        }\r\n\r\n        cToken.borrow(leveragedAmount);\r\n        cToken.mint(want.balanceOf(address(this)));\r\n    }\r\n\r\n    //called by flash loan\r\n    function _loanLogic(\r\n        bool deficit,\r\n        uint256 amount,\r\n        uint256 repayAmount\r\n    ) internal {\r\n        uint256 bal = want.balanceOf(address(this));\r\n        require(bal >= amount, \"FLASH_FAILED\"); // to stop malicious calls\r\n\r\n        //if in deficit we repay amount and then withdraw\r\n        if (deficit) {\r\n            cToken.repayBorrow(amount);\r\n\r\n            //if we are withdrawing we take more to cover fee\r\n            cToken.redeemUnderlying(repayAmount);\r\n        } else {\r\n            //check if this failed incase we borrow into liquidation\r\n            require(cToken.mint(bal) == 0, \"mint error\");\r\n            //borrow more to cover fee\r\n            // fee is so low for dydx that it does not effect our liquidation risk.\r\n            //DONT USE FOR AAVE\r\n            cToken.borrow(repayAmount);\r\n        }\r\n    }\r\n\r\n    function protectedTokens() internal override view returns (address[] memory) {\r\n\r\n        //want is protected automatically\r\n        address[] memory protected = new address[](2);\r\n        protected[0] = comp;\r\n        protected[1] = address(cToken);\r\n        return protected;\r\n    }\r\n\r\n    /******************\r\n     * Flash loan stuff\r\n     ****************/\r\n\r\n    // Flash loan DXDY\r\n    // amount desired is how much we are willing for position to change\r\n    function doDyDxFlashLoan(bool deficit, uint256 amountDesired) internal returns (uint256) {\r\n        uint256 amount = amountDesired;\r\n        ISoloMargin solo = ISoloMargin(SOLO);\r\n        \r\n        // Not enough want in DyDx. So we take all we can\r\n        uint256 amountInSolo = want.balanceOf(SOLO);\r\n\r\n        if (amountInSolo < amount) {\r\n            amount = amountInSolo;\r\n        }\r\n\r\n        uint256 repayAmount = amount.add(2); // we need to overcollateralise on way back\r\n\r\n        bytes memory data = abi.encode(deficit, amount, repayAmount);\r\n\r\n        // 1. Withdraw $\r\n        // 2. Call callFunction(...)\r\n        // 3. Deposit back $\r\n        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\r\n\r\n        operations[0] = _getWithdrawAction(dyDxMarketId, amount);\r\n        operations[1] = _getCallAction(\r\n            // Encode custom data for callFunction\r\n            data\r\n        );\r\n        operations[2] = _getDepositAction(dyDxMarketId, repayAmount);\r\n\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n\r\n        solo.operate(accountInfos, operations);\r\n\r\n        emit Leverage(amountDesired, amount, deficit, SOLO);\r\n\r\n        return amount;\r\n    }\r\n\r\n    //returns our current collateralisation ratio. Should be compared with collateralTarget\r\n    function storedCollateralisation() public view returns (uint256 collat) {\r\n        (uint256 lend, uint256 borrow) = getCurrentPosition();\r\n        if (lend == 0) {\r\n            return 0;\r\n        }\r\n        collat = uint256(1e18).mul(borrow).div(lend);\r\n    }\r\n\r\n    //DyDx calls this function after doing flash loan\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info memory account,\r\n        bytes memory data\r\n    ) public override {\r\n        (bool deficit, uint256 amount, uint256 repayAmount) = abi.decode(data, (bool, uint256, uint256));\r\n        require(msg.sender == SOLO, \"NOT_SOLO\");\r\n\r\n        _loanLogic(deficit, amount, repayAmount);\r\n       \r\n    }\r\n    \r\n    bool internal awaitingFlash = false;\r\n\r\n    function doAaveFlashLoan(bool deficit, uint256 _flashBackUpAmount) internal returns (uint256 amount) {\r\n        //we do not want to do aave flash loans for leveraging up. Fee could put us into liquidation\r\n        if (!deficit) {\r\n            return _flashBackUpAmount;\r\n        }\r\n\r\n        ILendingPool lendingPool = ILendingPool(addressesProvider.getLendingPool());\r\n\r\n        uint256 availableLiquidity = want.balanceOf(address(0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3));\r\n\r\n        if (availableLiquidity < _flashBackUpAmount) {\r\n            amount = availableLiquidity;\r\n        } else {\r\n            amount = _flashBackUpAmount;\r\n        }\r\n\r\n        bytes memory data = abi.encode(deficit, amount);\r\n\r\n        //anyone can call aave flash loan to us. (for some reason. grrr)\r\n        awaitingFlash = true;\r\n\r\n\r\n        lendingPool.flashLoan(address(this), address(want), amount, data);\r\n        \r\n        awaitingFlash = false;\r\n\r\n        emit Leverage(_flashBackUpAmount, amount, deficit, AAVE_LENDING);\r\n    }\r\n\r\n    //Aave calls this function after doing flash loan\r\n    function executeOperation(\r\n        address _reserve,\r\n        uint256 _amount,\r\n        uint256 _fee,\r\n        bytes calldata _params\r\n    ) external {\r\n        (bool deficit, uint256 amount) = abi.decode(_params, (bool, uint256));\r\n        require(msg.sender == addressesProvider.getLendingPool(), \"NOT_AAVE\");\r\n        require(awaitingFlash, \"Malicious\");\r\n\r\n        _loanLogic(deficit, amount, amount.add(_fee));\r\n\r\n        // return the flash loan plus Aave's flash loan fee back to the lending pool\r\n        uint256 totalDebt = _amount.add(_fee);\r\n\r\n        address core = addressesProvider.getLendingPoolCore();\r\n        IERC20(_reserve).safeTransfer(core, totalDebt);\r\n    }\r\n\r\n    modifier management(){\r\n        require(msg.sender == governance() || msg.sender == strategist, \"!management\");\r\n        _;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtOutstanding\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountGiven\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"deficit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"flashLoan\",\"type\":\"address\"}],\"name\":\"Leverage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedDebtThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdatedKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"UpdatedReportDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"}],\"name\":\"UpdatedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategist\",\"type\":\"address\"}],\"name\":\"UpdatedStrategist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AaveActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DyDxActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksToLiquidationDangerZone\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract CErc20I\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"account\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compound\",\"outputs\":[{\"internalType\":\"contract ComptrollerI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dyDxMarketId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyExit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLivePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrows\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getblocksUntilLiquidation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"harvestTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCompToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReportDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"netBalanceLent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"predictCompAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"start\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"end\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"priceCheck\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_ave\",\"type\":\"bool\"}],\"name\":\"setAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralTarget\",\"type\":\"uint256\"}],\"name\":\"setCollateralTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_dydx\",\"type\":\"bool\"}],\"name\":\"setDyDx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setEmergencyExit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCompToSell\",\"type\":\"uint256\"}],\"name\":\"setMinCompToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delay\",\"type\":\"uint256\"}],\"name\":\"setMinReportDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWant\",\"type\":\"uint256\"}],\"name\":\"setMinWant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedCollateralisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collat\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasCost\",\"type\":\"uint256\"}],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMarketId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract VaultAPI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeeded\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Strategy","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000bfa4d8aa6d8a379abfe7793399d3ddacc5bbecbb0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://f18e1a4123fb89e010a84027a7df5d61eb459c8f828a0a5d66eab635c31dceb4"}]