[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SaleManager.sol\": {\r\n      \"content\": \"pragma solidity >=0.8.0 <0.9.0;\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract SaleManager is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  AggregatorV3Interface priceOracle;\\n  IERC20 public immutable paymentToken;\\n  uint8 public immutable paymentTokenDecimals;\\n\\n  struct Sale {\\n    address payable seller; // the address that will receive sale proceeds\\n    bytes32 merkleRoot; // the merkle root used for proving access\\n    address claimManager; // address where purchased tokens can be claimed (optional)\\n    uint256 saleBuyLimit;  // max tokens that can be spent in total\\n    uint256 userBuyLimit;  // max tokens that can be spent per user\\n    uint startTime; // the time at which the sale starts\\n    uint endTime; // the time at which the sale will end, regardless of tokens raised\\n    string name; // the name of the asset being sold, e.g. \\\"New Crypto Token\\\"\\n    string symbol; // the symbol of the asset being sold, e.g. \\\"NCT\\\"\\n    uint256 price; // the price of the asset (eg if 1.0 NCT == $1.23 of USDC: 1230000)\\n    uint8 decimals; // the number of decimals in the asset being sold, e.g. 18\\n    uint256 totalSpent; // total purchases denominated in payment token\\n    uint256 maxQueueTime; // what is the maximum length of time a user could wait in the queue after the sale starts?\\n    uint160 randomValue; // reasonably random value: xor of merkle root and blockhash for transaction setting merkle root\\n    mapping(address => uint256) spent;\\n  }\\n\\n  mapping (bytes32 => Sale) public sales;\\n\\n  // global metrics\\n  uint256 public saleCount = 0;\\n  uint256 public totalSpent = 0;\\n\\n  event NewSale(\\n    bytes32 indexed saleId,\\n    bytes32 indexed merkleRoot,\\n    address indexed seller,\\n    uint256 saleBuyLimit,\\n    uint256 userBuyLimit,\\n    uint256 maxQueueTime,\\n    uint startTime,\\n    uint endTime,\\n    string name,\\n    string symbol,\\n    uint256 price,\\n    uint8 decimals\\n  );\\n\\n  event UpdateStart(bytes32 indexed saleId, uint startTime);\\n  event UpdateEnd(bytes32 indexed saleId, uint endTime);\\n  event UpdateMerkleRoot(bytes32 indexed saleId, bytes32 merkleRoot);\\n  event UpdateMaxQueueTime(bytes32 indexed saleId, uint256 maxQueueTime);\\n  event Buy(bytes32 indexed saleId, address indexed buyer, uint256 value, bool native, bytes32[] proof);\\n  event RegisterClaimManager(bytes32 indexed saleId, address indexed claimManager);\\n\\n  constructor(\\n    address _paymentToken,\\n    uint8 _paymentTokenDecimals,\\n    address _priceOracle\\n  ) {\\n    paymentToken = IERC20(_paymentToken);\\n    paymentTokenDecimals = _paymentTokenDecimals;\\n    priceOracle = AggregatorV3Interface(_priceOracle);\\n  }\\n\\n  modifier validSale (bytes32 saleId) {\\n    // if the seller is address(0) there is no sale struct at this saleId\\n    require(\\n      sales[saleId].seller != address(0),\\n      \\\"invalid sale id\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier isSeller(bytes32 saleId) {\\n    // msg.sender is never address(0) so this handles uninitialized sales\\n    require(\\n      sales[saleId].seller == msg.sender,\\n      \\\"must be seller\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier canAccessSale(bytes32 saleId, bytes32[] calldata proof) {\\n    // make sure the buyer is an EOA\\n    require((msg.sender == tx.origin), \\\"Must buy with an EOA\\\");\\n\\n    // If the merkle root is non-zero this is a private sale and requires a valid proof\\n    if (sales[saleId].merkleRoot != bytes32(0)) {\\n      require(\\n        this._isAllowed(\\n          sales[saleId].merkleRoot,\\n          msg.sender,\\n          proof\\n        ) == true,\\n        \\\"bad merkle proof for sale\\\"\\n      );\\n    }\\n\\n    // Reduce congestion by randomly assigning each user a delay time in a virtual queue based on comparing their address and a random value\\n    // if sale.maxQueueTime == 0 the delay is 0\\n    require(block.timestamp - sales[saleId].startTime > getFairQueueTime(saleId, msg.sender), \\\"not your turn yet\\\");\\n\\n    _;\\n  }\\n\\n  modifier requireOpen(bytes32 saleId) {\\n    require(block.timestamp > sales[saleId].startTime, \\\"sale not started yet\\\");\\n    require(block.timestamp < sales[saleId].endTime, \\\"sale ended\\\");\\n    require(sales[saleId].totalSpent < sales[saleId].saleBuyLimit, \\\"sale over\\\");\\n    _;\\n  }\\n\\n  // Get current price from chainlink oracle\\n  function getLatestPrice() public view returns (uint) {\\n    (\\n        uint80 roundID,\\n        int price,\\n        uint startedAt,\\n        uint timeStamp,\\n        uint80 answeredInRound\\n    ) = priceOracle.latestRoundData();\\n\\n    require(price > 0, \\\"negative price\\\");\\n    return uint(price);\\n  }\\n\\n  // Accessor functions\\n  function getSeller(bytes32 saleId) public validSale(saleId) view returns(address) {\\n    return(sales[saleId].seller);\\n  }\\n\\n  function getMerkleRoot(bytes32 saleId) public validSale(saleId) view returns(bytes32) {\\n    return(sales[saleId].merkleRoot);\\n  }\\n\\n  function getPriceOracle() public view returns(address) {\\n    return address(priceOracle);\\n  }\\n\\n  function getClaimManager(bytes32 saleId) public validSale(saleId) view returns(address) {\\n    return (sales[saleId].claimManager);\\n  }\\n\\n\\n  function getSaleBuyLimit(bytes32 saleId) public validSale(saleId) view returns(uint256) {\\n    return(sales[saleId].saleBuyLimit);\\n  }\\n\\n  function getUserBuyLimit(bytes32 saleId) public validSale(saleId) view returns(uint256) {\\n    return(sales[saleId].userBuyLimit);\\n  }\\n\\n  function getStartTime(bytes32 saleId) public validSale(saleId) view returns(uint) {\\n    return(sales[saleId].startTime);\\n  }\\n\\n  function getEndTime(bytes32 saleId) public validSale(saleId) view returns(uint) {\\n    return(sales[saleId].endTime);\\n  }\\n\\n  function getName(bytes32 saleId) public validSale(saleId) view returns(string memory) {\\n    return(sales[saleId].name);\\n  }\\n\\n  function getSymbol(bytes32 saleId) public validSale(saleId) view returns(string memory) {\\n    return(sales[saleId].symbol);\\n  }\\n\\n  function getPrice(bytes32 saleId) public validSale(saleId) view returns(uint) {\\n    return(sales[saleId].price);\\n  }\\n\\n  function getDecimals(bytes32 saleId) public validSale(saleId) view returns(uint256) {\\n    return (sales[saleId].decimals);\\n  }\\n\\n  function getTotalSpent(bytes32 saleId) public validSale(saleId) view returns(uint256) {\\n    return (sales[saleId].totalSpent);\\n  }\\n\\n  function getRandomValue(bytes32 saleId) public validSale(saleId) view returns(uint160) {\\n    return sales[saleId].randomValue;\\n  }\\n\\n  function getMaxQueueTime(bytes32 saleId) public validSale(saleId) view returns(uint256) {\\n    return sales[saleId].maxQueueTime;\\n  }\\n\\n  function generateRandomishValue(bytes32 merkleRoot) public view returns(uint160) {\\n    /**\\n      This is not a truly random value:\\n      - miners can alter the block hash\\n      - sellers can repeatedly call setMerkleRoot()\\n    */\\n    return uint160(uint256(blockhash(0))) ^ uint160(uint256(merkleRoot));\\n  }\\n\\n  function getFairQueueTime(bytes32 saleId, address buyer) public validSale(saleId) view returns(uint) {\\n    /**\\n      Get the delay in seconds that a specific buyer must wait after the sale begins in order to buy tokens in the sale\\n\\n      Buyers cannot exploit the fair queue when:\\n      - The sale is private (merkle root != bytes32(0))\\n      - Each eligible buyer gets exactly one address in the merkle root\\n\\n      Although miners and sellers can minimize the delay for an arbitrary address, these are not significant threats\\n      - the economic opportunity to miners is zero or relatively small (only specific addresses can participate in private sales, and a better queue postion does not imply high returns)\\n      - sellers can repeatedly set merkle roots (but sellers already control the tokens being sold!)\\n\\n    */\\n    if (sales[saleId].maxQueueTime == 0) {\\n      // there is no delay: all addresses may participate immediately\\n      return 0;\\n    }\\n\\n    // calculate a distance between the random value and the user's address using the XOR distance metric (c.f. Kademlia)\\n    uint160 distance = uint160(buyer) ^ sales[saleId].randomValue;\\n\\n    // calculate a speed at which the queue is exhausted such that all users complete the queue by sale.maxQueueTime\\n    uint160 distancePerSecond = type(uint160).max / uint160(sales[saleId].maxQueueTime);\\n    // return the delay (seconds)\\n    return distance / distancePerSecond;\\n  }\\n\\n  function spentToBought(bytes32 saleId, uint256 spent) public view returns (uint256) {\\n    // Convert tokens spent (e.g. 10,000,000 USDC = $10) to tokens bought (e.g. 8.13e18) at a price of $1.23/NCT\\n    // convert an integer value of tokens spent to an integer value of tokens bought\\n    return (spent * 10 ** sales[saleId].decimals ) / (sales[saleId].price);\\n  }\\n\\n  function nativeToPaymentToken(uint256 nativeValue) public view returns (uint256) {\\n    // convert a payment in the native token (eg ETH) to an integer value of the payment token\\n    return (nativeValue * getLatestPrice() * 10 ** paymentTokenDecimals) / (10 ** (priceOracle.decimals() + 18));\\n  }\\n\\n  function getSpent(\\n      bytes32 saleId,\\n      address userAddress\\n    ) public validSale(saleId) view returns(uint256) {\\n    // returns the amount spent by this user in paymentToken\\n    return(sales[saleId].spent[userAddress]);\\n  }\\n\\n  function getBought(\\n      bytes32 saleId,\\n      address userAddress\\n    ) public validSale(saleId) view returns(uint256) {\\n    // returns the amount bought by this user in the new token being sold\\n    return(spentToBought(saleId, sales[saleId].spent[userAddress]));\\n  }\\n\\n  function isOpen(bytes32 saleId) public validSale(saleId) view returns(bool) {\\n    // is the sale currently open?\\n    return(\\n      block.timestamp > sales[saleId].startTime\\n      && block.timestamp < sales[saleId].endTime\\n      && sales[saleId].totalSpent < sales[saleId].saleBuyLimit\\n    );\\n  }\\n\\n  function isOver(bytes32 saleId) public validSale(saleId) view returns(bool) {\\n    // is the sale permanently over?\\n    return(\\n      block.timestamp >= sales[saleId].endTime || sales[saleId].totalSpent >= sales[saleId].saleBuyLimit\\n    );\\n  }\\n\\n  /**\\n  sale setup and config\\n  - the address calling this method is the seller: all payments are sent to this address\\n  - only the seller can change sale configuration\\n  */\\n  function newSale(\\n    bytes32 merkleRoot,\\n    uint256 saleBuyLimit,\\n    uint256 userBuyLimit,\\n    uint startTime,\\n    uint endTime,\\n    uint160 maxQueueTime,\\n    string calldata name,\\n    string calldata symbol,\\n    uint256 price,\\n    uint8 decimals\\n  ) public returns(bytes32) {\\n    require(startTime <= 4102444800, \\\"max: 4102444800 (Jan 1 2100)\\\");\\n    require(endTime <= 4102444800, \\\"max: 4102444800 (Jan 1 2100)\\\");\\n    require(startTime < endTime, \\\"sale must start before it ends\\\");\\n    require(endTime > block.timestamp, \\\"sale must end in future\\\");\\n    require(userBuyLimit <= saleBuyLimit, \\\"userBuyLimit cannot exceed saleBuyLimit\\\");\\n    require(userBuyLimit > 0, \\\"userBuyLimit must be > 0\\\");\\n    require(saleBuyLimit > 0, \\\"saleBuyLimit must be > 0\\\");\\n    require(endTime - startTime > maxQueueTime, \\\"sale must be open for longer than max queue time\\\");\\n\\n    // Generate a reorg-resistant sale ID\\n    bytes32 saleId = keccak256(abi.encodePacked(\\n      merkleRoot,\\n      msg.sender,\\n      saleBuyLimit,\\n      userBuyLimit,\\n      startTime,\\n      endTime,\\n      name,\\n      symbol,\\n      price,\\n      decimals\\n    ));\\n\\n    // This ensures the Sale struct wasn't already created (msg.sender will never be the zero address)\\n    require(sales[saleId].seller == address(0), \\\"a sale with these parameters already exists\\\");\\n\\n    Sale storage s = sales[saleId];\\n\\n    s.merkleRoot = merkleRoot;\\n    s.seller = payable(msg.sender);\\n    s.saleBuyLimit = saleBuyLimit;\\n    s.userBuyLimit = userBuyLimit;\\n    s.startTime = startTime;\\n    s.endTime = endTime;\\n    s.name = name;\\n    s.symbol = symbol;\\n    s.price = price;\\n    s.decimals = decimals;\\n    s.maxQueueTime = maxQueueTime;\\n    s.randomValue = generateRandomishValue(merkleRoot);\\n\\n    saleCount++;\\n\\n    emit NewSale(saleId,\\n      s.merkleRoot,\\n      s.seller,\\n      s.saleBuyLimit,\\n      s.userBuyLimit,\\n      s.maxQueueTime,\\n      s.startTime,\\n      s.endTime,\\n      s.name,\\n      s.symbol,\\n      s.price,\\n      s.decimals\\n    );\\n\\n    return saleId;\\n  }\\n\\n  function setStart(bytes32 saleId, uint startTime) public validSale(saleId) isSeller(saleId) {\\n    // seller can update start time until the sale starts\\n    require(block.timestamp < sales[saleId].endTime, \\\"disabled after sale close\\\");\\n    require(startTime < sales[saleId].endTime, \\\"sale start must precede end\\\");\\n    require(startTime <= 4102444800, \\\"max: 4102444800 (Jan 1 2100)\\\");\\n    require(sales[saleId].endTime - startTime > sales[saleId].maxQueueTime, \\\"sale must be open for longer than max queue time\\\");\\n\\n    sales[saleId].startTime = startTime;\\n    emit UpdateStart(saleId, startTime);\\n  }\\n\\n  function setEnd(bytes32 saleId, uint endTime) public validSale(saleId) isSeller(saleId){\\n    // seller can update end time until the sale ends\\n    require(block.timestamp < sales[saleId].endTime, \\\"disabled after sale closes\\\");\\n    require(endTime > block.timestamp, \\\"sale must end in future\\\");\\n    require(endTime <= 4102444800, \\\"max: 4102444800 (Jan 1 2100)\\\");\\n    require(sales[saleId].startTime < endTime, \\\"sale must start before it ends\\\");\\n    require(endTime - sales[saleId].startTime > sales[saleId].maxQueueTime, \\\"sale must be open for longer than max queue time\\\");\\n\\n    sales[saleId].endTime = endTime;\\n    emit UpdateEnd(saleId, endTime);\\n  }\\n\\n  function setMerkleRoot(bytes32 saleId, bytes32 merkleRoot) public validSale(saleId) isSeller(saleId){\\n    require(!isOpen(saleId) && !isOver(saleId), \\\"cannot set merkle root once sale opens\\\");\\n    sales[saleId].merkleRoot = merkleRoot;\\n    sales[saleId].randomValue = generateRandomishValue(merkleRoot);\\n    emit UpdateMerkleRoot(saleId, merkleRoot);\\n  }\\n\\n  function setMaxQueueTime(bytes32 saleId, uint160 maxQueueTime) public validSale(saleId) isSeller(saleId) {\\n    // the queue time may be adjusted after the sale begins\\n    require(sales[saleId].endTime > block.timestamp, \\\"cannot adjust max queue time after sale ends\\\");\\n    sales[saleId].maxQueueTime = maxQueueTime;\\n    emit UpdateMaxQueueTime(saleId, maxQueueTime);\\n  }\\n\\n  function _isAllowed(\\n      bytes32 root,\\n      address account,\\n      bytes32[] calldata proof\\n  ) external pure returns (bool) {\\n    // check if the account is in the merkle tree\\n    bytes32 leaf = keccak256(abi.encodePacked(account));\\n    if (MerkleProof.verify(proof, root, leaf)) {\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  // pay with the payment token (eg USDC)\\n  function buy(\\n    bytes32 saleId,\\n    uint256 tokenQuantity,\\n    bytes32[] calldata proof\\n  ) public validSale(saleId) requireOpen(saleId) canAccessSale(saleId, proof) nonReentrant {\\n    // make sure the purchase would not break any sale limits\\n    require(\\n      tokenQuantity + sales[saleId].spent[msg.sender] <= sales[saleId].userBuyLimit,\\n      \\\"purchase exceeds your limit\\\"\\n    );\\n\\n    require(\\n      tokenQuantity + sales[saleId].totalSpent <= sales[saleId].saleBuyLimit,\\n      \\\"purchase exceeds sale limit\\\"\\n    );\\n\\n    require(paymentToken.allowance(msg.sender, address(this)) >= tokenQuantity, \\\"allowance too low\\\");\\n\\n    // move the funds\\n    paymentToken.safeTransferFrom(msg.sender, sales[saleId].seller, tokenQuantity);\\n\\n    // effects after interaction: we need a reentrancy guard\\n    sales[saleId].spent[msg.sender] += tokenQuantity;\\n    sales[saleId].totalSpent += tokenQuantity;\\n    totalSpent += tokenQuantity;\\n\\n    emit Buy(saleId, msg.sender, tokenQuantity, false, proof);\\n  }\\n\\n  // pay with the native token\\n  function buy(\\n    bytes32 saleId,\\n    bytes32[] calldata proof\\n  ) public payable validSale(saleId) requireOpen(saleId) canAccessSale(saleId, proof) nonReentrant {\\n    // convert to the equivalent payment token value from wei\\n    uint256 tokenQuantity = nativeToPaymentToken(msg.value);\\n\\n    // make sure the purchase would not break any sale limits\\n    require(\\n      tokenQuantity + sales[saleId].spent[msg.sender] <= sales[saleId].userBuyLimit,\\n      \\\"purchase exceeds your limit\\\"\\n    );\\n\\n    require(\\n      tokenQuantity + sales[saleId].totalSpent <= sales[saleId].saleBuyLimit,\\n      \\\"purchase exceeds sale limit\\\"\\n    );\\n\\n    // forward the eth to the seller\\n    sales[saleId].seller.transfer(msg.value);\\n\\n    // account for the purchase in equivalent payment token value\\n    sales[saleId].spent[msg.sender] += tokenQuantity;\\n    sales[saleId].totalSpent += tokenQuantity;\\n    totalSpent += tokenQuantity;\\n\\n    // flag this payment as using the native token\\n    emit Buy(saleId, msg.sender, tokenQuantity, true, proof);\\n  }\\n\\n  // Tell users where they can claim tokens\\n  function registerClaimManager(bytes32 saleId, address claimManager) public validSale(saleId) isSeller(saleId) {\\n    require(claimManager != address(0), \\\"Claim manager must be a non-zero address\\\");\\n    sales[saleId].claimManager = claimManager;\\n    emit RegisterClaimManager(saleId, claimManager);\\n  }\\n\\n  function recoverERC20(bytes32 saleId, address tokenAddress, uint256 tokenAmount) public isSeller(saleId) {\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n  }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_paymentTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"native\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"saleBuyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userBuyLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxQueueTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimManager\",\"type\":\"address\"}],\"name\":\"RegisterClaimManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateEnd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxQueueTime\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxQueueTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"UpdateMerkleRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"UpdateStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"_isAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenQuantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"generateRandomishValue\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getClaimManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"getFairQueueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getMaxQueueTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getRandomValue\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getSaleBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getSeller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getTotalSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"getUserBuyLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"}],\"name\":\"isOver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeValue\",\"type\":\"uint256\"}],\"name\":\"nativeToPaymentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"saleBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"maxQueueTime\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"newSale\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimManager\",\"type\":\"address\"}],\"name\":\"registerClaimManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"claimManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"saleBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userBuyLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSpent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxQueueTime\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"randomValue\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint160\",\"name\":\"maxQueueTime\",\"type\":\"uint160\"}],\"name\":\"setMaxQueueTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"setStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"saleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"spent\",\"type\":\"uint256\"}],\"name\":\"spentToBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSpent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SaleManager","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000000060000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]