[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\n/**\r\n * @title ConduitCaptainInterface\r\n * @author 0age\r\n * @notice ConduitCaptainInterface contains function endpoints, events, and error\r\n *         declarations for the ConduitCaptain contract.\r\n */\r\ninterface ConduitCaptainInterface {\r\n    /**\r\n     * @dev Emit an event whenever a revoker role is updated by the owner.\r\n     *\r\n     * @param revoker The address of the new revoker role.\r\n     */\r\n    event RevokerUpdated(address revoker);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to set a conduit controller\r\n     *      that does not contain contract code.\r\n     */\r\n    error InvalidConduitController(address conduitController);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to call closeChannel from an\r\n     *      account that does not currently hold the revoker role.\r\n     */\r\n    error InvalidRevoker();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a revoker and\r\n     *      supplying the null address.\r\n     */\r\n    error RevokerIsNullAddress();\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Only callable by the owner.\r\n     *\r\n     * @param conduit           The conduit for which to initiate ownership\r\n     *                          transfer.\r\n     * @param newPotentialOwner The new potential owner to set.\r\n     */\r\n    function transferConduitOwnership(\r\n        address conduit,\r\n        address newPotentialOwner\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only callable by the owner.\r\n     *\r\n     * @param conduit The conduit for which to cancel ownership transfer.\r\n     */\r\n    function cancelConduitOwnershipTransfer(address conduit) external;\r\n\r\n    /**\r\n     * @notice Accept ownership of a given conduit once this contract has been\r\n     *         set as the current potential owner. Only callable by the owner.\r\n     *\r\n     * @param conduit The conduit for which to accept ownership transfer.\r\n     */\r\n    function acceptConduitOwnership(address conduit) external;\r\n\r\n    /**\r\n     * @notice Open or close a channel on a given conduit, thereby allowing the\r\n     *         specified account to execute transfers against that conduit.\r\n     *         Extreme care must be taken when updating channels, as malicious\r\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\r\n     *         tokens where the token holder has granted the conduit approval.\r\n     *         Only the owner may call this function.\r\n     *\r\n     * @param conduit The conduit for which to open or close the channel.\r\n     * @param channel The channel to open or close on the conduit.\r\n     * @param isOpen  A boolean indicating whether to open or close the channel.\r\n     */\r\n    function updateChannel(\r\n        address conduit,\r\n        address channel,\r\n        bool isOpen\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Close a channel on a given conduit, thereby preventing the\r\n     *         specified account from executing transfers against that conduit.\r\n     *         Only the designated revoker may call this function.\r\n     *\r\n     * @param conduit The conduit for which to close the channel.\r\n     * @param channel The channel to close on the conduit.\r\n     */\r\n    function closeChannel(address conduit, address channel) external;\r\n\r\n    /**\r\n     * @notice Set a revoker role that can close channels. Only the owner may\r\n     *         call this function.\r\n     *\r\n     * @param revoker The account to set as the revoker.\r\n     */\r\n    function updateRevoker(address revoker) external;\r\n\r\n    /**\r\n     * @notice External view function to retrieve the address of the revoker\r\n     *         role that can close channels.\r\n     *\r\n     * @return revoker The account set as the revoker.\r\n     */\r\n    function getRevoker() external view returns (address revoker);\r\n\r\n    /**\r\n     * @notice External view function to retrieve the address of the\r\n     *         ConduitController referenced by the contract\r\n     *\r\n     * @return conduitController The address of the ConduitController.\r\n     */\r\n    function getConduitController()\r\n        external\r\n        view\r\n        returns (address conduitController);\r\n}\r\n\r\n\r\n/**\r\n * @title ConduitControllerInterface\r\n * @author 0age\r\n * @notice ConduitControllerInterface contains relevant external function\r\n *         interfaces for a conduit controller contract.\r\n */\r\ninterface ConduitControllerInterface {\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Once set, the new potential owner\r\n     *         may call `acceptOwnership` to claim ownership of the conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to initiate ownership transfer.\r\n     */\r\n    function transferOwnership(address conduit, address newPotentialOwner)\r\n        external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to cancel ownership transfer.\r\n     */\r\n    function cancelOwnershipTransfer(address conduit) external;\r\n\r\n    /**\r\n     * @notice Accept ownership of a supplied conduit. Only accounts that the\r\n     *         current owner has set as the new potential owner may call this\r\n     *         function.\r\n     *\r\n     * @param conduit The conduit for which to accept ownership.\r\n     */\r\n    function acceptOwnership(address conduit) external;\r\n\r\n    /**\r\n     * @notice Open or close a channel on a given conduit, thereby allowing the\r\n     *         specified account to execute transfers against that conduit.\r\n     *         Extreme care must be taken when updating channels, as malicious\r\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\r\n     *         tokens where the token holder has granted the conduit approval.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to open or close the channel.\r\n     * @param channel The channel to open or close on the conduit.\r\n     * @param isOpen  A boolean indicating whether to open or close the channel.\r\n     */\r\n    function updateChannel(\r\n        address conduit,\r\n        address channel,\r\n        bool isOpen\r\n    ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title   TwoStepOwnableInterface\r\n * @author  OpenSea Protocol\r\n * @notice  TwoStepOwnableInterface contains all external function interfaces,\r\n *          events and errors for the TwoStepOwnable contract.\r\n */\r\ninterface TwoStepOwnableInterface {\r\n    /**\r\n     * @dev Emit an event whenever the contract owner registers a new potential\r\n     *      owner.\r\n     *\r\n     * @param newPotentialOwner The new potential owner of the contract.\r\n     */\r\n    event PotentialOwnerUpdated(address newPotentialOwner);\r\n\r\n    /**\r\n     * @dev Emit an event whenever contract ownership is transferred.\r\n     *\r\n     * @param previousOwner The previous owner of the contract.\r\n     * @param newOwner      The new owner of the contract.\r\n     */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to set an initial owner when\r\n     *      one has already been set.\r\n     */\r\n    error OwnerAlreadySet(address currentOwner);\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to call a function with the\r\n     *      onlyOwner modifier from an account other than that of the owner.\r\n     */\r\n    error CallerIsNotOwner();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register an initial owner\r\n     *      and supplying the null address.\r\n     */\r\n    error InitialOwnerIsNullAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to register a new potential\r\n     *      owner and supplying the null address.\r\n     */\r\n    error NewPotentialOwnerIsNullAddress();\r\n\r\n    /**\r\n     * @dev Revert with an error when attempting to claim ownership of the\r\n     *      contract with a caller that is not the current potential owner.\r\n     */\r\n    error CallerIsNotNewPotentialOwner();\r\n\r\n    /**\r\n     * @notice Initiate ownership transfer by assigning a new potential owner\r\n     *         to this contract. Once set, the new potential owner may call\r\n     *         `acceptOwnership` to claim ownership. Only the owner may call\r\n     *         this function.\r\n     *\r\n     * @param newPotentialOwner The address for which to initiate ownership\r\n     *                          transfer to.\r\n     */\r\n    function transferOwnership(address newPotentialOwner) external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any. Only the owner\r\n     *         of this contract may call this function.\r\n     */\r\n    function cancelOwnershipTransfer() external;\r\n\r\n    /**\r\n     * @notice Accept ownership of this contract. Only the account that the\r\n     *         current owner has set as the new potential owner may call this\r\n     *         function.\r\n     */\r\n    function acceptOwnership() external;\r\n\r\n    /**\r\n     * @notice An external view function that returns the potential owner.\r\n     *\r\n     * @return The address of the potential owner.\r\n     */\r\n    function potentialOwner() external view returns (address);\r\n\r\n    /**\r\n     * @notice An external view function that returns the owner.\r\n     *\r\n     * @return The address of the owner.\r\n     */\r\n    function owner() external view returns (address);\r\n}\r\n\r\n\r\n/**\r\n * @title   TwoStepOwnable\r\n * @author  OpenSea Protocol Team\r\n * @notice  TwoStepOwnable provides access control for inheriting contracts,\r\n *          where the ownership of the contract can be exchanged via a two step\r\n *          process. A potential owner is set by the current owner by calling\r\n *          `transferOwnership`, then accepted by the new potential owner by\r\n *          calling `acceptOwnership`.\r\n */\r\nabstract contract TwoStepOwnable is TwoStepOwnableInterface {\r\n    // The address of the owner.\r\n    address private _owner;\r\n\r\n    // The address of the new potential owner.\r\n    address private _potentialOwner;\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        // Ensure that the caller is the owner.\r\n        if (msg.sender != _owner) {\r\n            revert CallerIsNotOwner();\r\n        }\r\n\r\n        // Continue with function execution.\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate ownership transfer by assigning a new potential owner\r\n     *         to this contract. Once set, the new potential owner may call\r\n     *         `acceptOwnership` to claim ownership. Only the owner may call\r\n     *         this function.\r\n     *\r\n     * @param newPotentialOwner The address for which to initiate ownership\r\n     *                          transfer to.\r\n     */\r\n    function transferOwnership(address newPotentialOwner)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        // Ensure the new potential owner is not an invalid address.\r\n        if (newPotentialOwner == address(0)) {\r\n            revert NewPotentialOwnerIsNullAddress();\r\n        }\r\n\r\n        // Emit an event indicating that the potential owner has been updated.\r\n        emit PotentialOwnerUpdated(newPotentialOwner);\r\n\r\n        // Set the new potential owner as the potential owner.\r\n        _potentialOwner = newPotentialOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any. Only the owner\r\n     *         of this contract may call this function.\r\n     */\r\n    function cancelOwnershipTransfer() external override onlyOwner {\r\n        // Emit an event indicating that the potential owner has been cleared.\r\n        emit PotentialOwnerUpdated(address(0));\r\n\r\n        // Clear the current new potential owner.\r\n        delete _potentialOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice Accept ownership of this contract. Only the account that the\r\n     *         current owner has set as the new potential owner may call this\r\n     *         function.\r\n     */\r\n    function acceptOwnership() external override {\r\n        // Ensure the caller is the potential owner.\r\n        if (msg.sender != _potentialOwner) {\r\n            // Revert, indicating that caller is not current potential owner.\r\n            revert CallerIsNotNewPotentialOwner();\r\n        }\r\n\r\n        // Emit an event indicating that the potential owner has been cleared.\r\n        emit PotentialOwnerUpdated(address(0));\r\n\r\n        // Clear the current new potential owner.\r\n        delete _potentialOwner;\r\n\r\n        // Set the caller as the owner of this contract.\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice An external view function that returns the potential owner.\r\n     *\r\n     * @return The address of the potential owner.\r\n     */\r\n    function potentialOwner() external view override returns (address) {\r\n        return _potentialOwner;\r\n    }\r\n\r\n    /**\r\n     * @notice A public view function that returns the owner.\r\n     *\r\n     * @return The address of the owner.\r\n     */\r\n    function owner() public view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function that sets the inital owner of the base\r\n     *         contract. The initial owner must not already be set.\r\n     *         To be called in the constructor or when initializing a proxy.\r\n     *\r\n     * @param initialOwner The address to set for initial ownership.\r\n     */\r\n    function _setInitialOwner(address initialOwner) internal {\r\n        // Ensure that an initial owner has been supplied.\r\n        if (initialOwner == address(0)) {\r\n            revert InitialOwnerIsNullAddress();\r\n        }\r\n\r\n        // Ensure that the owner has not already been set.\r\n        if (_owner != address(0)) {\r\n            revert OwnerAlreadySet(_owner);\r\n        }\r\n\r\n        // Set the initial owner.\r\n        _setOwner(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Private function that sets a new owner and emits a corresponding\r\n     *         event.\r\n     *\r\n     * @param newOwner The address to assign as the new owner.\r\n     */\r\n    function _setOwner(address newOwner) private {\r\n        // Emit an event indicating that the new owner has been set.\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n\r\n        // Set the new owner.\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title ConduitCaptain\r\n * @author 0age\r\n * @notice ConduitCaptain is an owned contract where the owner can in turn update\r\n *         conduits that are owned by the contract. It allows for designating an\r\n *         account that may revoke channels from conduits.\r\n */\r\ncontract ConduitCaptain is TwoStepOwnable, ConduitCaptainInterface {\r\n    // Set the conduit controller as an immutable argument.\r\n    ConduitControllerInterface private immutable _CONDUIT_CONTROLLER;\r\n\r\n    // Designate a storage variable for the revoker role.\r\n    address private _revoker;\r\n\r\n    /**\r\n     * @dev Initialize contract by setting the conduit controller, the initial\r\n     *      owner, and the initial revoker role.\r\n     */\r\n    constructor(\r\n        address conduitController,\r\n        address initialOwner,\r\n        address initialRevoker\r\n    ) {\r\n        // Ensure that a contract is deployed to the given conduit controller.\r\n        if (conduitController.code.length == 0) {\r\n            revert InvalidConduitController(conduitController);\r\n        }\r\n\r\n        // Set the conduit controller as an immutable argument.\r\n        _CONDUIT_CONTROLLER = ConduitControllerInterface(conduitController);\r\n\r\n        // Set the initial owner.\r\n        _setInitialOwner(initialOwner);\r\n\r\n        // Set the initial revoker.\r\n        _setRevoker(initialRevoker);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Only callable by the owner.\r\n     *\r\n     * @param conduit           The conduit for which to initiate ownership\r\n     *                          transfer.\r\n     * @param newPotentialOwner The new potential owner to set.\r\n     */\r\n    function transferConduitOwnership(\r\n        address conduit,\r\n        address newPotentialOwner\r\n    ) external override onlyOwner {\r\n        // Call the conduit controller to transfer conduit ownership.\r\n        _CONDUIT_CONTROLLER.transferOwnership(conduit, newPotentialOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only callable by the owner.\r\n     *\r\n     * @param conduit The conduit for which to cancel ownership transfer.\r\n     */\r\n    function cancelConduitOwnershipTransfer(address conduit)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        // Call the conduit controller to cancel conduit ownership transfer.\r\n        _CONDUIT_CONTROLLER.cancelOwnershipTransfer(conduit);\r\n    }\r\n\r\n    /**\r\n     * @notice Accept ownership of a given conduit once this contract has been\r\n     *         set as the current potential owner. Only callable by the owner.\r\n     *\r\n     * @param conduit The conduit for which to accept ownership transfer.\r\n     */\r\n    function acceptConduitOwnership(address conduit)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        // Call the conduit controller to accept conduit ownership.\r\n        _CONDUIT_CONTROLLER.acceptOwnership(conduit);\r\n    }\r\n\r\n    /**\r\n     * @notice Open or close a channel on a given conduit, thereby allowing the\r\n     *         specified account to execute transfers against that conduit.\r\n     *         Extreme care must be taken when updating channels, as malicious\r\n     *         or vulnerable channels can transfer any ERC20, ERC721 and ERC1155\r\n     *         tokens where the token holder has granted the conduit approval.\r\n     *         Only the owner may call this function.\r\n     *\r\n     * @param conduit The conduit for which to open or close the channel.\r\n     * @param channel The channel to open or close on the conduit.\r\n     * @param isOpen  A boolean indicating whether to open or close the channel.\r\n     */\r\n    function updateChannel(\r\n        address conduit,\r\n        address channel,\r\n        bool isOpen\r\n    ) external override onlyOwner {\r\n        // Call the conduit controller to update channel status on the conduit.\r\n        _CONDUIT_CONTROLLER.updateChannel(conduit, channel, isOpen);\r\n    }\r\n\r\n    /**\r\n     * @notice Close a channel on a given conduit, thereby preventing the\r\n     *         specified account from executing transfers against that conduit.\r\n     *         Only the designated revoker may call this function.\r\n     *\r\n     * @param conduit The conduit for which to close the channel.\r\n     * @param channel The channel to close on the conduit.\r\n     */\r\n    function closeChannel(address conduit, address channel) external override {\r\n        // Revert if the caller is not the revoker.\r\n        if (msg.sender != _revoker) {\r\n            revert InvalidRevoker();\r\n        }\r\n\r\n        // Call the conduit controller to close the channel on the conduit.\r\n        _CONDUIT_CONTROLLER.updateChannel(conduit, channel, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Set a revoker role that can close channels. Only the owner may\r\n     *         call this function.\r\n     *\r\n     * @param revoker The account to set as the revoker.\r\n     */\r\n    function updateRevoker(address revoker) external override onlyOwner {\r\n        // Assign the new revoker role.\r\n        _setRevoker(revoker);\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to retrieve the address of the revoker\r\n     *         role that can close channels.\r\n     *\r\n     * @return revoker The account set as the revoker.\r\n     */\r\n    function getRevoker() external view override returns (address revoker) {\r\n        return _revoker;\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to retrieve the address of the\r\n     *         ConduitController referenced by the contract\r\n     *\r\n     * @return conduitController The address of the ConduitController.\r\n     */\r\n    function getConduitController()\r\n        external\r\n        view\r\n        override\r\n        returns (address conduitController)\r\n    {\r\n        return address(_CONDUIT_CONTROLLER);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to set a revoker role that can close channels.\r\n     *\r\n     * @param revoker The account to set as the revoker.\r\n     */\r\n    function _setRevoker(address revoker) internal {\r\n        // Revert if no address is supplied for the revoker role.\r\n        if (revoker == address(0)) {\r\n            revert RevokerIsNullAddress();\r\n        }\r\n\r\n        // Assign the new revoker role.\r\n        _revoker = revoker;\r\n        emit RevokerUpdated(revoker);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialRevoker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"}],\"name\":\"InvalidConduitController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRevoker\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RevokerIsNullAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"name\":\"RevokerUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"acceptConduitOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"cancelConduitOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"}],\"name\":\"closeChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConduitController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduitController\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevoker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferConduitOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"channel\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"updateChannel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"revoker\",\"type\":\"address\"}],\"name\":\"updateRevoker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConduitCaptain","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000f9490004c11cef243f5400493c00ad63000000000000000000000000939c8d89ebc11fa45e576215e2353673ad0ba18a000000000000000000000000939c8d89ebc11fa45e576215e2353673ad0ba18a","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7240b240728dd6b724a39b8d7d9bf8f2ef40fc1eaf27821ac8ed2a76cd09fdc8"}]