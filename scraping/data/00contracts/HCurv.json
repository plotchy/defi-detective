[{"SourceCode":"// File: contracts/handlers/curve/ICurveHandler.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface ICurveHandler {\r\n    function get_dy(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function get_dy(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function exchange(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function exchange(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy,\r\n        bool boolean // use_eth\r\n    ) external payable;\r\n\r\n    function get_dy_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function get_dy_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx\r\n    ) external view returns (uint256);\r\n\r\n    function exchange_underlying(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function exchange_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy\r\n    ) external payable;\r\n\r\n    function exchange_underlying(\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 dx,\r\n        uint256 min_dy,\r\n        bool boolean // use_eth\r\n    ) external payable;\r\n\r\n    // Curve add liquidity function only support static array\r\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\r\n        external\r\n        payable;\r\n\r\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\r\n        external\r\n        payable;\r\n\r\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\r\n        external\r\n        payable;\r\n\r\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount)\r\n        external\r\n        payable;\r\n\r\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount)\r\n        external\r\n        payable;\r\n\r\n    // Curve add liquidity underlying\r\n    function add_liquidity(\r\n        uint256[2] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool boolean // use_underlying\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool boolean // use_underlying\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool boolean // use_underlying\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[5] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool boolean // use_underlying\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        uint256[6] calldata amounts,\r\n        uint256 min_mint_amount,\r\n        bool boolean // use_underlying\r\n    ) external payable;\r\n\r\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[5] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_token_amount(uint256[6] calldata amounts, bool deposit)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Curve add liquidity factory metapool deposit zap\r\n    function add_liquidity(\r\n        address pool,\r\n        uint256[3] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        address pool,\r\n        uint256[4] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        address pool,\r\n        uint256[5] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function add_liquidity(\r\n        address pool,\r\n        uint256[6] calldata amounts,\r\n        uint256 min_mint_amount\r\n    ) external payable;\r\n\r\n    function calc_token_amount(\r\n        address pool,\r\n        uint256[3] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(\r\n        address pool,\r\n        uint256[4] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(\r\n        address pool,\r\n        uint256[5] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    function calc_token_amount(\r\n        address pool,\r\n        uint256[6] calldata amounts,\r\n        bool deposit\r\n    ) external view returns (uint256);\r\n\r\n    // Curve remove liquidity\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        uint256 i,\r\n        uint256 min_amount\r\n    ) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_uamount,\r\n        bool boolean // donate_dust or use_underlying\r\n    ) external;\r\n\r\n    function remove_liquidity_one_coin(\r\n        uint256 _token_amount,\r\n        uint256 i,\r\n        uint256 min_uamount,\r\n        bool boolean\r\n    ) external;\r\n\r\n    // Curve remove liquidity factory metapool deposit zap\r\n    function remove_liquidity_one_coin(\r\n        address pool,\r\n        uint256 _token_amount,\r\n        int128 i,\r\n        uint256 min_amount\r\n    ) external;\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    // Curve factory metapool deposit zap\r\n    function calc_withdraw_one_coin(\r\n        address pool,\r\n        uint256 _token_amount,\r\n        int128 i\r\n    ) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/lib/LibStack.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\nlibrary LibStack {\r\n    function setAddress(bytes32[] storage _stack, address _input) internal {\r\n        _stack.push(bytes32(uint256(uint160(_input))));\r\n    }\r\n\r\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\r\n        _stack.push(_input);\r\n    }\r\n\r\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\r\n        internal\r\n    {\r\n        _stack.push(bytes12(uint96(_input)));\r\n    }\r\n\r\n    function getAddress(bytes32[] storage _stack)\r\n        internal\r\n        returns (address ret)\r\n    {\r\n        ret = address(uint160(uint256(peek(_stack))));\r\n        _stack.pop();\r\n    }\r\n\r\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\r\n        ret = bytes4(peek(_stack));\r\n        _stack.pop();\r\n    }\r\n\r\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\r\n        ret = peek(_stack);\r\n        _stack.pop();\r\n    }\r\n\r\n    function peek(bytes32[] storage _stack)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        require(_stack.length > 0, \"stack empty\");\r\n        ret = _stack[_stack.length - 1];\r\n    }\r\n}\r\n\r\n// File: contracts/lib/LibCache.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\nlibrary LibCache {\r\n    function set(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        bytes32 _value\r\n    ) internal {\r\n        _cache[_key] = _value;\r\n    }\r\n\r\n    function setAddress(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        address _value\r\n    ) internal {\r\n        _cache[_key] = bytes32(uint256(uint160(_value)));\r\n    }\r\n\r\n    function setUint256(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key,\r\n        uint256 _value\r\n    ) internal {\r\n        _cache[_key] = bytes32(_value);\r\n    }\r\n\r\n    function getAddress(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key\r\n    ) internal view returns (address ret) {\r\n        ret = address(uint160(uint256(_cache[_key])));\r\n    }\r\n\r\n    function getUint256(\r\n        mapping(bytes32 => bytes32) storage _cache,\r\n        bytes32 _key\r\n    ) internal view returns (uint256 ret) {\r\n        ret = uint256(_cache[_key]);\r\n    }\r\n\r\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\r\n        internal\r\n        view\r\n        returns (bytes32 ret)\r\n    {\r\n        ret = _cache[_key];\r\n    }\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n/// @notice A cache structure composed by a bytes32 array\r\ncontract Storage {\r\n    using LibCache for mapping(bytes32 => bytes32);\r\n    using LibStack for bytes32[];\r\n\r\n    bytes32[] public stack;\r\n    mapping(bytes32 => bytes32) public cache;\r\n\r\n    // keccak256 hash of \"msg.sender\"\r\n    // prettier-ignore\r\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\r\n\r\n    // keccak256 hash of \"cube.counter\"\r\n    // prettier-ignore\r\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\r\n\r\n    modifier isStackEmpty() {\r\n        require(stack.length == 0, \"Stack not empty\");\r\n        _;\r\n    }\r\n\r\n    modifier isCubeCounterZero() {\r\n        require(_getCubeCounter() == 0, \"Cube counter not zero\");\r\n        _;\r\n    }\r\n\r\n    modifier isInitialized() {\r\n        require(_getSender() != address(0), \"Sender is not initialized\");\r\n        _;\r\n    }\r\n\r\n    modifier isNotInitialized() {\r\n        require(_getSender() == address(0), \"Sender is initialized\");\r\n        _;\r\n    }\r\n\r\n    function _setSender() internal isNotInitialized {\r\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\r\n    }\r\n\r\n    function _resetSender() internal {\r\n        cache.setAddress(MSG_SENDER_KEY, address(0));\r\n    }\r\n\r\n    function _getSender() internal view returns (address) {\r\n        return cache.getAddress(MSG_SENDER_KEY);\r\n    }\r\n\r\n    function _addCubeCounter() internal {\r\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\r\n    }\r\n\r\n    function _resetCubeCounter() internal {\r\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\r\n    }\r\n\r\n    function _getCubeCounter() internal view returns (uint256) {\r\n        return cache.getUint256(CUBE_COUNTER_KEY);\r\n    }\r\n}\r\n\r\n// File: contracts/Config.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ncontract Config {\r\n    // function signature of \"postProcess()\"\r\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\r\n\r\n    // The base amount of percentage function\r\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\r\n\r\n    // Handler post-process type. Others should not happen now.\r\n    enum HandlerType {Token, Custom, Others}\r\n}\r\n\r\n// File: contracts/interface/IERC20Usdt.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\ninterface IERC20Usdt {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external;\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/handlers/HandlerBase.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\nabstract contract HandlerBase is Storage, Config {\r\n    using SafeERC20 for IERC20;\r\n\r\n    function postProcess() external payable virtual {\r\n        revert(\"Invalid post process\");\r\n        /* Implementation template\r\n        bytes4 sig = stack.getSig();\r\n        if (sig == bytes4(keccak256(bytes(\"handlerFunction_1()\")))) {\r\n            // Do something\r\n        } else if (sig == bytes4(keccak256(bytes(\"handlerFunction_2()\")))) {\r\n            bytes32 temp = stack.get();\r\n            // Do something\r\n        } else revert(\"Invalid post process\");\r\n        */\r\n    }\r\n\r\n    function _updateToken(address token) internal {\r\n        stack.setAddress(token);\r\n        // Ignore token type to fit old handlers\r\n        // stack.setHandlerType(uint256(HandlerType.Token));\r\n    }\r\n\r\n    function _updatePostProcess(bytes32[] memory params) internal {\r\n        for (uint256 i = params.length; i > 0; i--) {\r\n            stack.set(params[i - 1]);\r\n        }\r\n        stack.set(msg.sig);\r\n        stack.setHandlerType(HandlerType.Custom);\r\n    }\r\n\r\n    function getContractName() public pure virtual returns (string memory);\r\n\r\n    function _revertMsg(string memory functionName, string memory reason)\r\n        internal\r\n        view\r\n    {\r\n        revert(\r\n            string(\r\n                abi.encodePacked(\r\n                    _uint2String(_getCubeCounter()),\r\n                    \"_\",\r\n                    getContractName(),\r\n                    \"_\",\r\n                    functionName,\r\n                    \": \",\r\n                    reason\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    function _revertMsg(string memory functionName) internal view {\r\n        _revertMsg(functionName, \"Unspecified\");\r\n    }\r\n\r\n    function _uint2String(uint256 n) internal pure returns (string memory) {\r\n        if (n == 0) {\r\n            return \"0\";\r\n        } else {\r\n            uint256 len = 0;\r\n            for (uint256 temp = n; temp > 0; temp /= 10) {\r\n                len++;\r\n            }\r\n            bytes memory str = new bytes(len);\r\n            for (uint256 i = len; i > 0; i--) {\r\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\r\n                n /= 10;\r\n            }\r\n            return string(str);\r\n        }\r\n    }\r\n\r\n    function _getBalance(address token, uint256 amount)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (amount != uint256(-1)) {\r\n            return amount;\r\n        }\r\n\r\n        // ETH case\r\n        if (\r\n            token == address(0) ||\r\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\r\n        ) {\r\n            return address(this).balance;\r\n        }\r\n        // ERC20 token case\r\n        return IERC20(token).balanceOf(address(this));\r\n    }\r\n\r\n    function _tokenApprove(\r\n        address token,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\r\n            IERC20(token).safeApprove(spender, 0);\r\n            IERC20(token).safeApprove(spender, amount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.2 <0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/handlers/curve/HCurve.sol\r\n\r\npragma solidity ^0.6.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract HCurve is HandlerBase {\r\n    using SafeERC20 for IERC20;\r\n    using SafeMath for uint256;\r\n\r\n    function getContractName() public pure override returns (string memory) {\r\n        return \"HCurve\";\r\n    }\r\n\r\n    // prettier-ignore\r\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /// @notice Curve exchange\r\n    function exchange(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        int128 i,\r\n        int128 j,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\r\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\r\n        try\r\n            ICurveHandler(handler).exchange{value: ethAmount}(\r\n                i,\r\n                j,\r\n                _amount,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"exchange\", reason);\r\n        } catch {\r\n            _revertMsg(\"exchange\");\r\n        }\r\n\r\n        return _exchangeAfter(tokenJ, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve exchange with uint256 ij\r\n    function exchangeUint256(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\r\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\r\n        try\r\n            ICurveHandler(handler).exchange{value: ethAmount}(\r\n                i,\r\n                j,\r\n                _amount,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"exchangeUint256\", reason);\r\n        } catch {\r\n            _revertMsg(\"exchangeUint256\");\r\n        }\r\n\r\n        return _exchangeAfter(tokenJ, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve exchange with uint256 ij and ether flag\r\n    function exchangeUint256Ether(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\r\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\r\n        try\r\n            ICurveHandler(handler).exchange{value: ethAmount}(\r\n                i,\r\n                j,\r\n                _amount,\r\n                minAmount,\r\n                true\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"exchangeUint256Ether\", reason);\r\n        } catch {\r\n            _revertMsg(\"exchangeUint256Ether\");\r\n        }\r\n\r\n        return _exchangeAfter(tokenJ, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve exchange underlying\r\n    function exchangeUnderlying(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        int128 i,\r\n        int128 j,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\r\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\r\n        try\r\n            ICurveHandler(handler).exchange_underlying{value: ethAmount}(\r\n                i,\r\n                j,\r\n                _amount,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"exchangeUnderlying\", reason);\r\n        } catch {\r\n            _revertMsg(\"exchangeUnderlying\");\r\n        }\r\n\r\n        return _exchangeAfter(tokenJ, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve exchange underlying with uint256 ij\r\n    function exchangeUnderlyingUint256(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        uint256 i,\r\n        uint256 j,\r\n        uint256 amount,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\r\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\r\n        try\r\n            ICurveHandler(handler).exchange_underlying{value: ethAmount}(\r\n                i,\r\n                j,\r\n                _amount,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"exchangeUnderlyingUint256\", reason);\r\n        } catch {\r\n            _revertMsg(\"exchangeUnderlyingUint256\");\r\n        }\r\n\r\n        return _exchangeAfter(tokenJ, balanceBefore);\r\n    }\r\n\r\n    function _exchangeBefore(\r\n        address handler,\r\n        address tokenI,\r\n        address tokenJ,\r\n        uint256 amount\r\n    )\r\n        internal\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        amount = _getBalance(tokenI, amount);\r\n        uint256 balanceBefore = _getBalance(tokenJ, type(uint256).max);\r\n\r\n        // Approve erc20 token or set eth amount\r\n        uint256 ethAmount;\r\n        if (tokenI != ETH_ADDRESS) {\r\n            _tokenApprove(tokenI, handler, amount);\r\n        } else {\r\n            ethAmount = amount;\r\n        }\r\n\r\n        return (amount, balanceBefore, ethAmount);\r\n    }\r\n\r\n    function _exchangeAfter(address tokenJ, uint256 balanceBefore)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = _getBalance(tokenJ, type(uint256).max);\r\n        if (balance <= balanceBefore) {\r\n            _revertMsg(\"_exchangeAfter\", \"after <= before\");\r\n        }\r\n\r\n        if (tokenJ != ETH_ADDRESS) _updateToken(tokenJ);\r\n\r\n        return balance.sub(balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve add liquidity\r\n    function addLiquidity(\r\n        address handler,\r\n        address pool,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256 minPoolAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\r\n            _addLiquidityBefore(handler, pool, tokens, amounts);\r\n\r\n        // Execute add_liquidity according to amount array size\r\n        if (_amounts.length == 2) {\r\n            uint256[2] memory amts = [_amounts[0], _amounts[1]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidity\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidity\");\r\n            }\r\n        } else if (_amounts.length == 3) {\r\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidity\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidity\");\r\n            }\r\n        } else if (_amounts.length == 4) {\r\n            uint256[4] memory amts =\r\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidity\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidity\");\r\n            }\r\n        } else if (_amounts.length == 5) {\r\n            uint256[5] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidity\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidity\");\r\n            }\r\n        } else if (_amounts.length == 6) {\r\n            uint256[6] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4],\r\n                    _amounts[5]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidity\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidity\");\r\n            }\r\n        } else {\r\n            _revertMsg(\"addLiquidity\", \"invalid amount[] size\");\r\n        }\r\n\r\n        return _addLiquidityAfter(pool, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve add liquidity with underlying true flag\r\n    function addLiquidityUnderlying(\r\n        address handler,\r\n        address pool,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256 minPoolAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\r\n            _addLiquidityBefore(handler, pool, tokens, amounts);\r\n\r\n        // Execute add_liquidity according to amount array size\r\n        if (_amounts.length == 2) {\r\n            uint256[2] memory amts = [_amounts[0], _amounts[1]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount,\r\n                    true\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityUnderlying\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityUnderlying\");\r\n            }\r\n        } else if (_amounts.length == 3) {\r\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount,\r\n                    true\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityUnderlying\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityUnderlying\");\r\n            }\r\n        } else if (_amounts.length == 4) {\r\n            uint256[4] memory amts =\r\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount,\r\n                    true\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityUnderlying\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityUnderlying\");\r\n            }\r\n        } else if (_amounts.length == 5) {\r\n            uint256[5] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount,\r\n                    true\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityUnderlying\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityUnderlying\");\r\n            }\r\n        } else if (_amounts.length == 6) {\r\n            uint256[6] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4],\r\n                    _amounts[5]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    amts,\r\n                    minPoolAmount,\r\n                    true\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityUnderlying\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityUnderlying\");\r\n            }\r\n        } else {\r\n            _revertMsg(\"addLiquidityUnderlying\", \"invalid amount[] size\");\r\n        }\r\n\r\n        return _addLiquidityAfter(pool, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve add liquidity with factory zap\r\n    function addLiquidityFactoryZap(\r\n        address handler,\r\n        address pool,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts,\r\n        uint256 minPoolAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\r\n            _addLiquidityBefore(handler, pool, tokens, amounts);\r\n\r\n        // Execute add_liquidity according to amount array size\r\n        if (_amounts.length == 3) {\r\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    pool,\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityFactoryZap\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityFactoryZap\");\r\n            }\r\n        } else if (_amounts.length == 4) {\r\n            uint256[4] memory amts =\r\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    pool,\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityFactoryZap\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityFactoryZap\");\r\n            }\r\n        } else if (_amounts.length == 5) {\r\n            uint256[5] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    pool,\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityFactoryZap\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityFactoryZap\");\r\n            }\r\n        } else if (_amounts.length == 6) {\r\n            uint256[6] memory amts =\r\n                [\r\n                    _amounts[0],\r\n                    _amounts[1],\r\n                    _amounts[2],\r\n                    _amounts[3],\r\n                    _amounts[4],\r\n                    _amounts[5]\r\n                ];\r\n            try\r\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\r\n                    pool,\r\n                    amts,\r\n                    minPoolAmount\r\n                )\r\n            {} catch Error(string memory reason) {\r\n                _revertMsg(\"addLiquidityFactoryZap\", reason);\r\n            } catch {\r\n                _revertMsg(\"addLiquidityFactoryZap\");\r\n            }\r\n        } else {\r\n            _revertMsg(\"addLiquidityFactoryZap\", \"invalid amount[] size\");\r\n        }\r\n\r\n        return _addLiquidityAfter(pool, balanceBefore);\r\n    }\r\n\r\n    function _addLiquidityBefore(\r\n        address handler,\r\n        address pool,\r\n        address[] memory tokens,\r\n        uint256[] memory amounts\r\n    )\r\n        internal\r\n        returns (\r\n            uint256[] memory,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 balanceBefore = IERC20(pool).balanceOf(address(this));\r\n\r\n        // Approve non-zero amount erc20 token and set eth amount\r\n        uint256 ethAmount;\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            if (amounts[i] == 0) continue;\r\n            if (tokens[i] == ETH_ADDRESS) {\r\n                ethAmount = amounts[i];\r\n                continue;\r\n            }\r\n            amounts[i] = _getBalance(tokens[i], amounts[i]);\r\n            _tokenApprove(tokens[i], handler, amounts[i]);\r\n        }\r\n\r\n        return (amounts, balanceBefore, ethAmount);\r\n    }\r\n\r\n    function _addLiquidityAfter(address pool, uint256 balanceBefore)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        uint256 balance = IERC20(pool).balanceOf(address(this));\r\n        if (balance <= balanceBefore) {\r\n            _revertMsg(\"_addLiquidityAfter\", \"after <= before\");\r\n        }\r\n\r\n        // Update post process\r\n        _updateToken(address(pool));\r\n\r\n        return balance.sub(balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve remove liquidity one coin\r\n    function removeLiquidityOneCoin(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount,\r\n        int128 i,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _poolAmount, uint256 balanceBefore) =\r\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\r\n        try\r\n            ICurveHandler(handler).remove_liquidity_one_coin(\r\n                _poolAmount,\r\n                i,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"removeLiquidityOneCoin\", reason);\r\n        } catch {\r\n            _revertMsg(\"removeLiquidityOneCoin\");\r\n        }\r\n\r\n        return\r\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve remove liquidity one coin with uint256 i\r\n    function removeLiquidityOneCoinUint256(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount,\r\n        uint256 i,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _poolAmount, uint256 balanceBefore) =\r\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\r\n        try\r\n            ICurveHandler(handler).remove_liquidity_one_coin(\r\n                _poolAmount,\r\n                i,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"removeLiquidityOneCoinUint256\", reason);\r\n        } catch {\r\n            _revertMsg(\"removeLiquidityOneCoinUint256\");\r\n        }\r\n\r\n        return\r\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve remove liquidity one coin underlying\r\n    function removeLiquidityOneCoinUnderlying(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount,\r\n        int128 i,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _poolAmount, uint256 balanceBefore) =\r\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\r\n        try\r\n            ICurveHandler(handler).remove_liquidity_one_coin(\r\n                _poolAmount,\r\n                i,\r\n                minAmount,\r\n                true\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"removeLiquidityOneCoinUnderlying\", reason);\r\n        } catch {\r\n            _revertMsg(\"removeLiquidityOneCoinUnderlying\");\r\n        }\r\n\r\n        return\r\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve remove liquidity one coin underlying with uint256 i\r\n    function removeLiquidityOneCoinUnderlyingUint256(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount,\r\n        uint256 i,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _poolAmount, uint256 balanceBefore) =\r\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\r\n        try\r\n            ICurveHandler(handler).remove_liquidity_one_coin(\r\n                _poolAmount,\r\n                i,\r\n                minAmount,\r\n                true\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"removeLiquidityOneCoinUnderlyingUint256\", reason);\r\n        } catch {\r\n            _revertMsg(\"removeLiquidityOneCoinUnderlyingUint256\");\r\n        }\r\n\r\n        return\r\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\r\n    }\r\n\r\n    /// @notice Curve remove liquidity one coin with with factory zap\r\n    function removeLiquidityOneCoinFactoryZap(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount,\r\n        int128 i,\r\n        uint256 minAmount\r\n    ) external payable returns (uint256) {\r\n        (uint256 _poolAmount, uint256 balanceBefore) =\r\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\r\n        try\r\n            ICurveHandler(handler).remove_liquidity_one_coin(\r\n                pool,\r\n                _poolAmount,\r\n                i,\r\n                minAmount\r\n            )\r\n        {} catch Error(string memory reason) {\r\n            _revertMsg(\"removeLiquidityOneCoinFactoryZap\", reason);\r\n        } catch {\r\n            _revertMsg(\"removeLiquidityOneCoinFactoryZap\");\r\n        }\r\n\r\n        return\r\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\r\n    }\r\n\r\n    function _removeLiquidityOneCoinBefore(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 poolAmount\r\n    ) internal returns (uint256, uint256) {\r\n        uint256 balanceBefore = _getBalance(tokenI, type(uint256).max);\r\n        poolAmount = _getBalance(pool, poolAmount);\r\n        _tokenApprove(pool, handler, poolAmount);\r\n\r\n        return (poolAmount, balanceBefore);\r\n    }\r\n\r\n    function _removeLiquidityOneCoinAfter(\r\n        address handler,\r\n        address pool,\r\n        address tokenI,\r\n        uint256 balanceBefore\r\n    ) internal returns (uint256) {\r\n        // Some curve non-underlying pools like 3pool won't consume pool token\r\n        // allowance since pool token was issued by the pool that don't need to\r\n        // call transferFrom(). So set approval to 0 here.\r\n        IERC20(pool).safeApprove(handler, 0);\r\n        uint256 balance = _getBalance(tokenI, type(uint256).max);\r\n        if (balance <= balanceBefore) {\r\n            _revertMsg(\"_removeLiquidityOneCoinAfter\", \"after <= before\");\r\n        }\r\n\r\n        // Update post process\r\n        if (tokenI != ETH_ADDRESS) _updateToken(tokenI);\r\n\r\n        return balance.sub(balanceBefore);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFactoryZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUint256Ether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUnderlyingUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinFactoryZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUnderlyingUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"HCurve","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8df57b7badbd02733ff7c1b1c639669a82e8ec008383e9dc7e996f5794678baa"}]