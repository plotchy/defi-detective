[{"SourceCode":"pragma solidity ^0.7.0;    \r\npragma experimental ABIEncoderV2;\r\n\r\n\r\nabstract contract IDFSRegistry {\r\n \r\n    function getAddr(bytes32 _id) public view virtual returns (address);\r\n\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public virtual;\r\n\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\r\n\r\n    function approveContractChange(bytes32 _id) public virtual;\r\n\r\n    function cancelContractChange(bytes32 _id) public virtual;\r\n\r\n    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\r\n}    \r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    function decimals() external view returns (uint256 digits);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}    \r\n\r\n\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}    \r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {ERC20-approve}, and its usage is discouraged.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}    \r\n\r\n\r\n\r\ncontract AdminVault {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        require(admin == msg.sender, \"msg.sender not admin\");\r\n        admin = _admin;\r\n    }\r\n\r\n}    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title AdminAuth Handles owner/admin priviligies over smart contracts\r\ncontract AdminAuth {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\r\n\r\n    modifier onlyOwner() {\r\n        require(adminVault.owner() == msg.sender, \"msg.sender not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(adminVault.admin() == msg.sender, \"msg.sender not admin\");\r\n        _;\r\n    }\r\n\r\n    /// @notice  withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n\r\n    /// @notice Changes the admin vault that is currently used\r\n    /// @param _newAdminVault Address of the new Admin Vault contract\r\n    function changeAdminVault(address _newAdminVault) public onlyAdmin {\r\n        adminVault = AdminVault(_newAdminVault);\r\n    }\r\n}    \r\n\r\n\r\n\r\ncontract DefisaverLogger {\r\n    event LogEvent(\r\n        address indexed contractAddress,\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function Log(\r\n        address _contract,\r\n        address _caller,\r\n        string memory _logName,\r\n        bytes memory _data\r\n    ) public {\r\n        emit LogEvent(_contract, _caller, _logName, _data);\r\n    }\r\n}    \r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Stores all the important DFS addresses and can be changed (timelock)\r\ncontract DFSRegistry is AdminAuth {\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_ENTRY_ALREADY_EXISTS = \"Entry id already exists\";\r\n    string public constant ERR_ENTRY_NON_EXISTENT = \"Entry id doesn't exists\";\r\n    string public constant ERR_ENTRY_NOT_IN_CHANGE = \"Entry not in change process\";\r\n    string public constant ERR_WAIT_PERIOD_SHORTER = \"New wait period must be bigger\";\r\n    string public constant ERR_CHANGE_NOT_READY = \"Change not ready yet\";\r\n    string public constant ERR_EMPTY_PREV_ADDR = \"Previous addr is 0\";\r\n    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = \"Already in contract change\";\r\n    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = \"Already in wait period change\";\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes32 => Entry) public entries;\r\n    mapping(bytes32 => address) public previousAddresses;\r\n\r\n    mapping(bytes32 => address) public pendingAddresses;\r\n    mapping(bytes32 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registred address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes32 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registred\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes32 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes32 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        // Remember tha address so we can revert back to old addr if needed\r\n        previousAddresses[_id] = _contractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"AddNewContract\",\r\n            abi.encode(_id, _contractAddr, _waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Revertes to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"RevertToPreviousAddress\",\r\n            abi.encode(_id, currentAddr, previousAddresses[_id])\r\n        );\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartContractChange\",\r\n            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelContractChange\",\r\n            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\r\n        );\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"StartWaitPeriodChange\",\r\n            abi.encode(_id, _newWaitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n        require(\r\n            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\r\n            ERR_CHANGE_NOT_READY\r\n        );\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"ApproveWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\r\n        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\r\n        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        logger.Log(\r\n            address(this),\r\n            msg.sender,\r\n            \"CancelWaitPeriodChange\",\r\n            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\r\n        );\r\n    }\r\n}    \r\n\r\n\r\n\r\n\r\n/// @title Implements Action interface and common helpers for pasing inputs\r\nabstract contract ActionBase {\r\n    address public constant REGISTRY_ADDR = 0x5FbDB2315678afecb367f032d93F642f64180aa3;\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\r\n    );\r\n\r\n    string public constant ERR_SUB_INDEX_VALUE = \"Wrong sub index value\";\r\n    string public constant ERR_RETURN_INDEX_VALUE = \"Wrong return index value\";\r\n\r\n    /// @dev Subscription params index range [128, 255]\r\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\r\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\r\n\r\n    /// @dev Return params index range [1, 127]\r\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\r\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\r\n\r\n    /// @dev If the input value should not be replaced\r\n    uint8 public constant NO_PARAM_MAPPING = 0;\r\n\r\n    /// @dev We need to parse Flash loan actions in a different way\r\n    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\r\n\r\n    /// @notice Parses inputs and runs the implemented action through a proxy\r\n    /// @dev Is called by the TaskExecutor chaining actions together\r\n    /// @param _callData Array of input values each value encoded as bytes\r\n    /// @param _subData Array of subscribed vales, replaces input values if specified\r\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\r\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\r\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\r\n    function executeAction(\r\n        bytes[] memory _callData,\r\n        bytes[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual returns (bytes32);\r\n\r\n    /// @notice Parses inputs and runs the single implemented action through a proxy\r\n    /// @dev Used to save gas when executing a single action directly\r\n    function executeActionDirect(bytes[] memory _callData) public virtual payable;\r\n\r\n    /// @notice Returns the type of action we are implementing\r\n    function actionType() public pure virtual returns (uint8);\r\n\r\n\r\n    //////////////////////////// HELPER METHODS ////////////////////////////\r\n\r\n    /// @notice Given an uint256 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamUint(\r\n        uint _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (uint) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n\r\n    /// @notice Given an addr input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamAddr(\r\n        address _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (address) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Given an bytes32 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can repacle the input value with\r\n    /// @param _returnValues Array of subscription data we can repacle the input value with\r\n    function _parseParamABytes32(\r\n        bytes32 _param,\r\n        uint8 _mapType,\r\n        bytes[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (bytes32) {\r\n        if (isReplacable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = (_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\r\n    /// @param _type Indicated the type of the input\r\n    function isReplacable(uint8 _type) internal pure returns (bool) {\r\n        return _type != NO_PARAM_MAPPING;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value is in the return value range\r\n    /// @param _type Indicated the type of the input\r\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\r\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in return array value\r\n    /// @param _type Indicated the type of the input\r\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\r\n\r\n        return (_type - RETURN_MIN_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in sub array value\r\n    /// @param _type Indicated the type of the input\r\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\r\n        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\r\n\r\n        return (_type - SUB_MIN_INDEX_VALUE);\r\n    }\r\n}    \r\n\r\n\r\n\r\n\r\n/// @title Helper action to sum up 2 inputs/return values\r\ncontract SumInputs is ActionBase {\r\n\r\n    /// @inheritdoc ActionBase\r\n    function executeAction(\r\n        bytes[] memory _callData,\r\n        bytes[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public virtual override payable returns (bytes32) {\r\n        uint a = abi.decode(_callData[0], (uint));\r\n        uint b = abi.decode(_callData[1], (uint));\r\n\r\n        a = _parseParamUint(a, _paramMapping[0], _subData, _returnValues);\r\n        b = _parseParamUint(b, _paramMapping[1], _subData, _returnValues);\r\n\r\n        return bytes32(_sumInputs(a, b));\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    function executeActionDirect(bytes[] memory _callData) public override payable {}\r\n\r\n    /// @inheritdoc ActionBase\r\n    function actionType() public virtual override pure returns (uint8) {\r\n        return uint8(ActionType.STANDARD_ACTION);\r\n    }\r\n\r\n    //////////////////////////// ACTION LOGIC ////////////////////////////\r\n\r\n    function _sumInputs(uint _a, uint _b) internal pure returns (uint) {\r\n        return _a + _b;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"name\":\"ERR_RETURN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ERR_SUB_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REGISTRY_ADDR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_subData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_callData\",\"type\":\"bytes[]\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"SumInputs","CompilerVersion":"v0.7.5+commit.eb77ed08","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://5fefa5cccfcb073813f2e9eb71755d3de85d9d2db11d75a81b363cb1e3f5cf6a"}]