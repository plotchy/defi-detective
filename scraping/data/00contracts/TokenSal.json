[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/TokenSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./helpers/Whitelist.sol\\\";\\nimport \\\"./interfaces/IUniswapRouterV2.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ncontract TokenSale is Ownable, Whitelist {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    IUniswapV2Router public swapRouter; // swap router\\n\\n    struct TokenSaleRound {\\n        uint256 startTime; // tokenSale round start time timestamp\\n        uint256 endTime; // tokenSale round end time timestamp\\n        uint256 duration; // tokenSale round duration\\n        uint256 minAmount; // min purchase amount\\n        uint256 purchasePrice; // purchase price\\n        uint256 tokensSold; // number of tokens sold\\n        uint256 totalPurchaseAmount; // number of tokens on sale\\n        uint256 tokenSaleType; // 0 - pre_sale; 1 - main_sale; 2 - private_sale\\n        bool isPublic; // if true then round is public, else is private\\n        bool isEnded; // active tokenSale if true, if false vesting is end\\n    }\\n\\n    address public usdtToken; // usdt or busd token address\\n    address[] public path; // path for get price eth or bnb\\n    address public treasury; // treasury address\\n    uint256 public roundsCounter; // quantity of tokeSale rounds\\n    uint256 public immutable PRECISSION = 1000; // 10000; // precission for math operation\\n\\n    mapping(uint256 => TokenSaleRound) public rounds; // 0 pre_sale; 1 main_sale; 2 private_sale;\\n    mapping(address => mapping(uint256 => uint256)) public userBalance; // return user balance of planetex token\\n    mapping(address => mapping(uint256 => uint256)) public userSpentFunds; // return user spent funds in token sale\\n\\n    //// @errors\\n\\n    //// @dev - unequal length of arrays\\n    error InvalidArrayLengths(string err);\\n    /// @dev - address to the zero;\\n    error ZeroAddress(string err);\\n    /// @dev - user not in the whitelist\\n    error NotInTheWhitelist(string err);\\n    /// @dev - round not started\\n    error RoundNotStarted(string err);\\n    /// @dev - round is started\\n    error RoundIsStarted(string err);\\n    /// @dev - amount more or less than min or max\\n    error MinMaxPurchase(string err);\\n    /// @dev - tokens not enough\\n    error TokensNotEnough(string err);\\n    /// @dev - msg.value cannot be zero\\n    error ZeroMsgValue(string err);\\n    /// @dev - round with rhis id not found\\n    error RoundNotFound(string err);\\n    /// @dev - round is ended\\n    error RoundNotEnd(string err);\\n\\n    ////@notice emitted when the user purchase token\\n    event PurchasePlanetexToken(\\n        address user,\\n        uint256 spentAmount,\\n        uint256 receivedAmount\\n    );\\n    ////@notice emitted when the owner withdraw unsold tokens\\n    event WithdrawUnsoldTokens(\\n        uint256 roundId,\\n        address recipient,\\n        uint256 amount\\n    );\\n    ////@notice emitted when the owner update round start time\\n    event UpdateRoundStartTime(\\n        uint256 roundId,\\n        uint256 startTime,\\n        uint256 endTime\\n    );\\n\\n    constructor(\\n        uint256[] memory _purchasePercents, // array of round purchase percents\\n        uint256[] memory _minAmounts, // array of round min purchase amounts\\n        uint256[] memory _durations, // array of round durations in seconds\\n        uint256[] memory _purchasePrices, // array of round purchase prices\\n        uint256[] memory _startTimes, // array of round start time timestamps\\n        bool[] memory _isPublic, // array of isPublic bool indicators\\n        uint256 _planetexTokenTotalSupply, // planetex token total supply\\n        address _usdtToken, // usdt token address\\n        address _treasury, // treasury address\\n        address _unirouter // swap router address\\n    ) {\\n        if (\\n            _purchasePercents.length != _minAmounts.length ||\\n            _purchasePercents.length != _durations.length ||\\n            _purchasePercents.length != _purchasePrices.length ||\\n            _purchasePercents.length != _isPublic.length ||\\n            _purchasePercents.length != _startTimes.length\\n        ) {\\n            revert InvalidArrayLengths(\\\"TokenSale: Invalid array lengths\\\");\\n        }\\n        if (\\n            _usdtToken == address(0) ||\\n            _treasury == address(0) ||\\n            _unirouter == address(0)\\n        ) {\\n            revert ZeroAddress(\\\"TokenSale: Zero Address\\\");\\n        }\\n\\n        for (uint256 i; i <= _purchasePercents.length - 1; i++) {\\n            TokenSaleRound storage tokenSaleRound = rounds[i];\\n            tokenSaleRound.duration = _durations[i];\\n            tokenSaleRound.startTime = _startTimes[i];\\n            tokenSaleRound.endTime = _startTimes[i] + _durations[i];\\n            tokenSaleRound.minAmount = _minAmounts[i];\\n            tokenSaleRound.purchasePrice = _purchasePrices[i];\\n            tokenSaleRound.tokensSold = 0;\\n            tokenSaleRound.totalPurchaseAmount =\\n                (_planetexTokenTotalSupply * _purchasePercents[i]) /\\n                PRECISSION;\\n            tokenSaleRound.isPublic = _isPublic[i];\\n            tokenSaleRound.isEnded = false;\\n            tokenSaleRound.tokenSaleType = i;\\n        }\\n        roundsCounter = _purchasePercents.length - 1;\\n        usdtToken = _usdtToken;\\n        treasury = _treasury;\\n        swapRouter = IUniswapV2Router(_unirouter);\\n        address[] memory _path = new address[](2);\\n        _path[0] = IUniswapV2Router(_unirouter).WETH();\\n        _path[1] = _usdtToken;\\n        path = _path;\\n    }\\n\\n    /**\\n    @dev The modifier checks whether the tokenSale round has not expired.\\n    @param roundId tokenSale round id.\\n    */\\n    modifier isEnded(uint256 roundId) {\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        require(\\n            tokenSaleRound.endTime > block.timestamp,\\n            \\\"TokenSale: Round is ended\\\"\\n        );\\n        _;\\n    }\\n\\n    //// External functions\\n\\n    receive() external payable {}\\n\\n    /**\\n    @dev The function performs the purchase of tokens for usdt or busd tokens\\n    @param roundId tokeSale round id.\\n    @param amount usdt or busd amount.\\n    */\\n    function buyForErc20(uint256 roundId, uint256 amount)\\n        external\\n        isEnded(roundId)\\n    {\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n\\n        if (!tokenSaleRound.isPublic) {\\n            if (!whitelist[msg.sender]) {\\n                revert NotInTheWhitelist(\\\"TokenSale: Not in the whitelist\\\");\\n            }\\n        }\\n\\n        if (!isRoundStared(roundId)) {\\n            revert RoundNotStarted(\\\"TokenSale: Round is not started\\\");\\n        }\\n\\n        if (amount < tokenSaleRound.minAmount) {\\n            revert MinMaxPurchase(\\\"TokenSale: Amount not allowed\\\");\\n        }\\n\\n        uint256 tokenAmount = _calcPurchaseAmount(\\n            amount,\\n            tokenSaleRound.purchasePrice\\n        );\\n\\n        if (\\n            tokenSaleRound.tokensSold + tokenAmount >\\n            tokenSaleRound.totalPurchaseAmount\\n        ) {\\n            revert TokensNotEnough(\\\"TokenSale: Tokens not enough\\\");\\n        }\\n\\n        tokenSaleRound.tokensSold += tokenAmount;\\n        userSpentFunds[msg.sender][roundId] += amount;\\n\\n        IERC20(usdtToken).safeTransferFrom(msg.sender, treasury, amount);\\n\\n        userBalance[msg.sender][roundId] += tokenAmount;\\n\\n        _endSoldOutRound(roundId);\\n        emit PurchasePlanetexToken(msg.sender, amount, tokenAmount);\\n    }\\n\\n    /**\\n    @dev The function performs the purchase of tokens for eth or bnb tokens\\n    @param roundId tokeSale round id.\\n    */\\n    function buyForEth(uint256 roundId) external payable isEnded(roundId) {\\n        if (msg.value == 0) {\\n            revert ZeroMsgValue(\\\"TokenSale: Zero msg.value\\\");\\n        }\\n\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n\\n        if (!tokenSaleRound.isPublic) {\\n            if (!whitelist[msg.sender]) {\\n                revert NotInTheWhitelist(\\\"TokenSale: Not in the whitelist\\\");\\n            }\\n        }\\n\\n        if (!isRoundStared(roundId)) {\\n            revert RoundNotStarted(\\\"TokenSale: Round is not started\\\");\\n        }\\n\\n        uint256[] memory amounts = swapRouter.getAmountsOut(msg.value, path);\\n\\n        if (amounts[1] < tokenSaleRound.minAmount) {\\n            revert MinMaxPurchase(\\\"TokenSale: Amount not allowed\\\");\\n        }\\n\\n        uint256 tokenAmount = _calcPurchaseAmount(\\n            amounts[1],\\n            tokenSaleRound.purchasePrice\\n        );\\n\\n        if (\\n            tokenSaleRound.tokensSold + tokenAmount >\\n            tokenSaleRound.totalPurchaseAmount\\n        ) {\\n            revert TokensNotEnough(\\\"TokenSale: Tokens not enough\\\");\\n        }\\n\\n        tokenSaleRound.tokensSold += tokenAmount;\\n        userSpentFunds[msg.sender][roundId] += amounts[1];\\n\\n        userBalance[msg.sender][roundId] += tokenAmount;\\n\\n        _endSoldOutRound(roundId);\\n\\n        (bool sent, ) = treasury.call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        emit PurchasePlanetexToken(msg.sender, amounts[1], tokenAmount);\\n    }\\n\\n    /**\\n    @dev The function withdraws tokens that were not sold and writes \\n    them to the balance of the specified wallet.Only owner can call it. \\n    Only if round is end.\\n    @param roundId tokeSale round id.\\n    @param recipient recipient wallet address\\n    */\\n    function withdrawUnsoldTokens(uint256 roundId, address recipient)\\n        external\\n        onlyOwner\\n    {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        if (tokenSaleRound.endTime > block.timestamp) {\\n            revert RoundNotEnd(\\\"TokenSale: Round not end\\\");\\n        }\\n        if (tokenSaleRound.totalPurchaseAmount > tokenSaleRound.tokensSold) {\\n            uint256 unsoldTokens = tokenSaleRound.totalPurchaseAmount -\\n                tokenSaleRound.tokensSold;\\n            tokenSaleRound.tokensSold = tokenSaleRound.totalPurchaseAmount;\\n            userBalance[recipient][roundId] += unsoldTokens;\\n            emit WithdrawUnsoldTokens(roundId, recipient, unsoldTokens);\\n        } else {\\n            revert TokensNotEnough(\\\"TokenSale: Sold out\\\");\\n        }\\n\\n        tokenSaleRound.isEnded = true;\\n    }\\n\\n    /**\\n    @dev The function update token sale round start time.Only owner can call it. \\n    Only if round is not started.\\n    @param roundId tokeSale round id.\\n    @param newStartTime new start time timestamp\\n    */\\n    function updateStartTime(uint256 roundId, uint256 newStartTime)\\n        external\\n        onlyOwner\\n    {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        if (tokenSaleRound.startTime < block.timestamp) {\\n            revert RoundIsStarted(\\\"TokenSale: Round is started\\\");\\n        }\\n\\n        tokenSaleRound.startTime = newStartTime;\\n        tokenSaleRound.endTime = newStartTime + tokenSaleRound.duration;\\n        emit UpdateRoundStartTime(\\n            roundId,\\n            tokenSaleRound.startTime,\\n            tokenSaleRound.endTime\\n        );\\n    }\\n\\n    //// Public Functions\\n\\n    function convertToStable(uint256 amount, uint256 roundId)\\n        public\\n        view\\n        returns (\\n            uint256 ethAmount,\\n            uint256 usdtAmount,\\n            uint256 planetexAmount\\n        )\\n    {\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        if (amount > 0) {\\n            uint256[] memory amounts = swapRouter.getAmountsOut(amount, path);\\n            ethAmount = amounts[0];\\n            usdtAmount = amounts[1];\\n            planetexAmount = _calcPurchaseAmount(\\n                usdtAmount,\\n                tokenSaleRound.purchasePrice\\n            );\\n        } else {\\n            ethAmount = 0;\\n            usdtAmount = 0;\\n            planetexAmount = 0;\\n        }\\n    }\\n\\n    function convertUsdtToPltx(uint256 roundId, uint256 amount)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        uint256 tokenAmount = _calcPurchaseAmount(\\n            amount,\\n            tokenSaleRound.purchasePrice\\n        );\\n        return tokenAmount;\\n    }\\n\\n    /**\\n    @dev The function shows whether the round has started. Returns true if yes, false if not\\n    @param roundId tokeSale round id.\\n    */\\n    function isRoundStared(uint256 roundId) public view returns (bool) {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        return (block.timestamp >= tokenSaleRound.startTime &&\\n            block.timestamp <= tokenSaleRound.endTime);\\n    }\\n\\n    /**\\n    @dev The function returns the timestamp of the end of the tokenSale round\\n    @param roundId tokeSale round id.\\n    */\\n    function getRoundEndTime(uint256 roundId) public view returns (uint256) {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        return tokenSaleRound.endTime;\\n    }\\n\\n    /**\\n    @dev The function returns the timestamp of the start of the tokenSale round\\n    @param roundId tokeSale round id.\\n    */\\n    function getRoundStartTime(uint256 roundId) public view returns (uint256) {\\n        if (roundId > roundsCounter) {\\n            revert RoundNotFound(\\\"TokenSale: Round not found\\\");\\n        }\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n        return tokenSaleRound.startTime;\\n    }\\n\\n    //// Internal Functions\\n\\n    /**\\n    @dev The function ends the round if all tokens are sold out\\n    @param roundId tokeSale round id.\\n    */\\n    function _endSoldOutRound(uint256 roundId) internal {\\n        TokenSaleRound storage tokenSaleRound = rounds[roundId];\\n\\n        if (tokenSaleRound.tokensSold == tokenSaleRound.totalPurchaseAmount) {\\n            tokenSaleRound.isEnded = true;\\n        }\\n    }\\n\\n    /**\\n    @dev The function calculates the number of tokens to be received by the user\\n    @param amount usdt or busd token amount.\\n    @param price purchase price\\n    */\\n    function _calcPurchaseAmount(uint256 amount, uint256 price)\\n        internal\\n        pure\\n        returns (uint256 tokenAmount)\\n    {\\n        tokenAmount = (amount / price) * 1e18;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/Whitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Whitelist\\n * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\\n * @dev This simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Whitelist is Ownable {\\n    mapping(address => bool) public whitelist;\\n\\n    event WhitelistedAddressAdded(address addr);\\n    event WhitelistedAddressRemoved(address addr);\\n\\n    /**\\n     * @dev add an address to the whitelist\\n     * @param addr address\\n     * @return success if the address was added to the whitelist, false if the address was already in the whitelist\\n     */\\n    function addAddressToWhitelist(address addr)\\n        public\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        if (!whitelist[addr]) {\\n            whitelist[addr] = true;\\n            emit WhitelistedAddressAdded(addr);\\n            success = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev add addresses to the whitelist\\n     * @param addrs addresses\\n     * @return success if at least one address was added to the whitelist,\\n     * false if all addresses were already in the whitelist\\n     */\\n    function addAddressesToWhitelist(address[] memory addrs)\\n        public\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            if (addAddressToWhitelist(addrs[i])) {\\n                success = true;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev remove an address from the whitelist\\n     * @param addr address\\n     * @return success if the address was removed from the whitelist,\\n     * false if the address wasn't in the whitelist in the first place\\n     */\\n    function removeAddressFromWhitelist(address addr)\\n        public\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        if (whitelist[addr]) {\\n            whitelist[addr] = false;\\n            emit WhitelistedAddressRemoved(addr);\\n            success = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev remove addresses from the whitelist\\n     * @param addrs addresses\\n     * @return success if at least one address was removed from the whitelist,\\n     * false if all addresses weren't in the whitelist in the first place\\n     */\\n    function removeAddressesFromWhitelist(address[] memory addrs)\\n        public\\n        onlyOwner\\n        returns (bool success)\\n    {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            if (removeAddressFromWhitelist(addrs[i])) {\\n                success = true;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapRouterV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_purchasePercents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_purchasePrices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"_isPublic\",\"type\":\"bool[]\"},{\"internalType\":\"uint256\",\"name\":\"_planetexTokenTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_usdtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_unirouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"InvalidArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"MinMaxPurchase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"NotInTheWhitelist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"RoundIsStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"RoundNotEnd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"RoundNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"RoundNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"TokensNotEnough\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"err\",\"type\":\"string\"}],\"name\":\"ZeroMsgValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"spentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"PurchasePlanetexToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"UpdateRoundStartTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"WhitelistedAddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawUnsoldTokens\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addAddressToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addAddressesToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyForErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"buyForEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"convertToStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"planetexAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"convertUsdtToPltx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"isRoundStared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeAddressFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeAddressesFromWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPurchaseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenSaleType\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isEnded\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newStartTime\",\"type\":\"uint256\"}],\"name\":\"updateStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userSpentFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawUnsoldTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TokenSale","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000003c0000000000000000000000000000000000000000000c685fa11e01ec6f0000000000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000f1bd8e12c392d835c18dc1c0ec41f67c2c754be70000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000098968000000000000000000000000000000000000000000000000000000000017d78400000000000000000000000000000000000000000000000000000000005f5e10000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000506b80000000000000000000000000000000000000000000000000000000000028de80000000000000000000000000000000000000000000000000000000000024ea0000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000009c40000000000000000000000000000000000000000000000000000000000000c3500000000000000000000000000000000000000000000000000000000000011170000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000636045600000000000000000000000000000000000000000000000000000000063b9eb600000000000000000000000000000000000000000000000000000000063ec04600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]