[{"SourceCode":"/**\r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                             `!'                                        \r\n                                                                          _*YkwV*'                                      \r\n                                                                      `!xomUIzwVcT^.                                    \r\n                                                                   _*c55G3KUIzwVcl}Y*.                                  \r\n                                                                !LG6OdZ5G3KUIzwVcu}Yix<'                                \r\n                                                            -*kE$0E6OdZ5G3KUIzwVcu}Yixx*.                               \r\n                                                         :YbQQ8g$0E6OdZ5G3KUIzwVcl}L*:`                                 \r\n                                                     `~uEQBBQQ8g$0E6OdZ5G3KUIzwVL^_`                                    \r\n                                                  -rXDg8QQBBQQ8g$0E6OdZ5G3mUoL;-                                        \r\n                                               \"ve9E0$g8QQBBQQ8g$0E6OdZ5G3Kx-                                           \r\n                                           -^uHZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUjx!`                                        \r\n                                        _*cKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUXzwV?:`                                     \r\n                                    `!rVzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwVcr.                                     \r\n                                 .!vuVVwzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwVx:'                                     \r\n                             `_=|L}TuVVwzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwVcu}x^\"'                                 \r\n                             .!rxi}TuVVwzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwVcl}}v<,`                                \r\n                                `:r}uVVwzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwV}*:'                                    \r\n                                   `\"r}wzIeKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUIzwV}!                                      \r\n                                       -^}sKPGMZdO9E0$g8QQBBQQ8g$0E6OdZ5G3KUXzwVT*-                                     \r\n                                          '~Y3MZdO9E0$g8QQBBQQ8g$0E6OdZ5G3mUXVr,                                        \r\n                                             `:veO9E0$g8QQBBQQ8g$0E6OdZ5G3mx\"                                           \r\n                                                 _)XD$g8QQBBQQ8g$0E6OdZ5G3KI}<-                                         \r\n                                                    `!YZQQBBQQ8g$0E6OdZ5G3KUXzwur:`                                     \r\n                                                        _vqQQQ8g$0E6OdZ5G3KUIzwVcu}(!.                                  \r\n                                                           '*V6g$0E6OdZ5G3KUIzwVcu}Yix)='                               \r\n                                                               :xmR6OdZ5G3KUIzwVcu}Yix),                                \r\n                                                                  .^}GZ5G3KUIzwVcu}Yv:                                  \r\n                                                                      :?w3KUXzwVcuv:                                    \r\n                                                                         -<LkzwVx\"                                      \r\n                                                                            `\"*:                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n          .^v--?>'    `vxx`:xxxxxxr   -xxxxxxxxxx,       .xx*         vx~         ^xx:`xxxxxxx'  `\\x~      rx*          \r\n        'd@@@*(@@@Z.  :#@#,I@@@@@@Q   )##########}      `8@@@z        @@0         $@@j,@@@@@@@~  ,@@0      #@B          \r\n        k@@L   `r@@M       I@@~                         d@@Q@@x       @@0             ,@@M       _@@6      #@B          \r\n        !B@@8Mwx^:.`       I@@=       :zzzzzzzzz*      j@@V`B@@>      @@0             ,@@q       `zPUzzzzzz@@B          \r\n          =T3EQ@@@8r       I@@=       ^QQQQQQQQQV     x@@M  ,B@#,     @@0             ,@@q       ,@@@QQQQQQ@@B          \r\n       `0BE`   `:B@@`      I@@=                      `gQb`   \"#@B'    @@0             ,@@q       ,@@0      #@B          \r\n        v@@#Z::aD@@d       I@@=       !ZZZZZZZZZZ^  =MZZZZZZZZB@@$    @@0 5ddddj      ,@@q       ,@@0      #@B          \r\n         .xa6=>DZy~        v0E_       =dddddddddd*  wddddddddddddd!   GZ} GZZZZz      .E0i       '5dT      mdk          \r\n                                                                                                                        \r\n                                                                                                                        \r\n                                                                                                                        \r\n Telegram: https://t.me/StealthTokenOfficial\r\n Website: https://StealthToken.io\r\n Stealth\r\n The Home of Dynamic Stealth Tokenomics\r\n Making Crypto Great Again - As One\r\n Contract Creator Address: 0x68739D3CEFEb50d84838B3393535675cbf59E75A\r\n Multi-Sig Wallet Address for Eth: 0x852a8cb5D5e09133EDa0713C1A475A5B7dE80226\r\n*/\r\n\r\npragma solidity ^0.8.6;\r\n// SPDX-License-Identifier: UNLICENSED\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/* @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address payable private _owner;\r\n    address payable private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = payable(address(0));\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner)\r\n        public\r\n        virtual\r\n        onlyOwner\r\n    {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function getUnlockTime() public view returns (uint256) {\r\n        return _lockTime;\r\n    }\r\n\r\n    //Locks the contract for owner for the amount of time provided\r\n    function lock(uint256 time) public virtual onlyOwner {\r\n        _previousOwner = _owner;\r\n        _owner = payable(address(0));\r\n        _lockTime = block.timestamp + time;\r\n        emit OwnershipTransferred(_owner, address(0));\r\n    }\r\n\r\n    //Unlocks the contract for owner when _lockTime is exceeds\r\n    function unlock() public virtual {\r\n        require(\r\n            _previousOwner == msg.sender,\r\n            \"You don't have permission to unlock\"\r\n        );\r\n        require(\r\n            block.timestamp > _lockTime,\r\n            \"Contract is locked until defined days\"\r\n        );\r\n        emit OwnershipTransferred(_owner, _previousOwner);\r\n        _owner = _previousOwner;\r\n        _previousOwner = payable(address(0));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Stealth is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    // If you are reading this then welcome - this is where the work happens.\r\n    // StealthStandard Check\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => uint256) private _firstBuy;\r\n    mapping (address => uint256) private _lastBuy;\r\n    mapping (address => uint256) private _lastSell;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _hasTraded;\r\n    mapping (address => bool) private bots;\r\n    mapping (address => uint) private cooldown;\r\n    uint256 private constant _tTotal = 1000000000000 * 10**18;\r\n    uint256 private _tradingStartTimestamp;\r\n    uint256 public sellCoolDownTime = 60 seconds;\r\n    uint256 private minTokensToSell = _tTotal.div(100000);\r\n    \r\n    address payable private _stealthMultiSigWallet;\r\n    \r\n    string private constant _name = \"Stealth Standard\";\r\n    string private constant _symbol = \"$STEALTH\";\r\n    uint8 private constant _decimals = 18;\r\n    \r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool private tradingOpen = false;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    bool private antiBotEnabled = false;\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _stealthMultiSigWallet = payable(0x852a8cb5D5e09133EDa0713C1A475A5B7dE80226);\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = _uniswapV2Pair;\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_stealthMultiSigWallet] = true;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(balanceOf(from) >= amount,\"Not enough balance for tx\");\r\n\r\n\r\n        // Check if we are buying or selling, or simply transferring\r\n        //if (to == uniswapV2Pair && from != address(uniswapV2Router) && from != owner() && from != address(this) && ! _isExcludedFromFee[from]) {\r\n        if ((to == uniswapV2Pair) && ! _isExcludedFromFee[from]) {\r\n            // Selling to uniswapV2Pair:\r\n\r\n            // ensure trading is open\r\n            require(tradingOpen,\"trading is not yet open\");\r\n\r\n            // Block known bots from selling - If you think this was a mistake please contact the Stealth Team\r\n            require(!bots[from], \"Stealth is a Bot Free Zone\");\r\n\r\n            // anti bot code - checks for buys and sells in the same block or within the sellCoolDownTime\r\n            if  (antiBotEnabled) {\r\n                uint256 lastBuy = _lastBuy[from];\r\n                require(block.timestamp > lastBuy, \"Sorry - no FrontRunning allowed right now\");\r\n                require(cooldown[from] < block.timestamp);\r\n                cooldown[from] = block.timestamp + sellCoolDownTime;\r\n            }\r\n\r\n            // Has Seller made a trade before? If not set to current block timestamp\r\n            // We check this again on a sell to make sure they didn't transfer to a new wallet\r\n            if (!_hasTraded[from]){\r\n                _firstBuy[from] = block.timestamp;\r\n                _hasTraded[from] = true;\r\n            }\r\n\r\n            if (swapEnabled) {\r\n                // handle sell of tokens in contract for Eth\r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (contractTokenBalance >= minTokensToSell) {\r\n                    if (!inSwap) {\r\n                        swapTokensForEth(contractTokenBalance);\r\n                        uint256 contractETHBalance = address(this).balance;\r\n                        if(contractETHBalance > 0) {\r\n                        sendETHToWallet(address(this).balance);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Check to see if just taking profits or selling over 5%\r\n            bool justTakingProfits = _justTakingProfits(amount, from);\r\n            uint256 numHours = _getHours(_lastSell[from], block.timestamp);\r\n            uint256 numDays = (numHours / 24);\r\n            if (justTakingProfits) {\r\n                // just taking profits but need to make sure its been more than 7 days since last sell if so\r\n                if (numDays < 7) {\r\n                    _firstBuy[from] = block.timestamp;\r\n                    _lastBuy[from] = block.timestamp;\r\n                }\r\n            } else {\r\n                if (numDays < 84) {\r\n                // sold over 5% so we reset the last buy to be now\r\n                _firstBuy[from] = block.timestamp;\r\n                _lastBuy[from] = block.timestamp;\r\n                }\r\n            }\r\n\r\n            // Record last sell timestamp\r\n            _lastSell[from] = block.timestamp;\r\n\r\n            // Transfer with taxes\r\n            _tokenTransferTaxed(from,to,amount);\r\n\r\n        //} else if (from == uniswapV2Pair && to != address(uniswapV2Router) && to != owner() && to != address(this)) {\r\n        } else if ((from == uniswapV2Pair) && ! _isExcludedFromFee[to]) {\r\n            // Buying from uniswapV2Pair:\r\n\r\n            // ensure trading is open\r\n            require(tradingOpen,\"trading is not yet open\");\r\n\r\n            // Has buyer made a trade before? If not set to current block timestamp\r\n            if (!_hasTraded[to]){\r\n                _firstBuy[to] = block.timestamp;\r\n                _hasTraded[to] = true;\r\n            }\r\n\r\n            // snapshot the last buy timestamp\r\n            _lastBuy[to] = block.timestamp;\r\n\r\n            // Simple Transfer with no taxes \r\n            _transferFree(from, to, amount);\r\n        } else {\r\n            // Other transfer\r\n\r\n            // Block known bots from selling - If you think this was a mistake please contact the Stealth Team\r\n            require(!bots[from] && !bots[to], \"Stealth is a Bot Free Zone\");\r\n\r\n            // Handle the case of wallet to wallet transfer\r\n            _firstBuy[to] = block.timestamp;\r\n            _hasTraded[to] = true;\r\n\r\n            // Simple Transfer with no taxes\r\n            _transferFree(from, to, amount);\r\n        }\r\n\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount, \r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    // If we are doing a tax free Transfer that happens here after _transfer:\r\n    function _transferFree(address sender, address recipient, uint256 tAmount) private {\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(tAmount); \r\n        emit Transfer(sender, recipient, tAmount);\r\n    }\r\n        \r\n    // If we are doing a taxed Transfer that happens here after _transfer:\r\n    function _tokenTransferTaxed(address sender, address recipient, uint256 amount) private {\r\n        _transferTaxed(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferTaxed(address sender, address recipient, uint256 tAmount) private {\r\n\r\n        // Calculate the taxed token amount\r\n        uint256 tTeam = _getTaxedValue(tAmount, sender);\r\n        uint256 transferAmount = tAmount - tTeam;\r\n\r\n        _balances[sender] = _balances[sender].sub(tAmount);\r\n        _balances[recipient] = _balances[recipient].add(transferAmount); \r\n        _takeTeam(tTeam);\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function _takeTeam(uint256 tTeam) private {\r\n        _balances[address(this)] = _balances[address(this)].add(tTeam);\r\n    }\r\n\r\n    // Check to see if the sell amount is greater than 5% of tokens in a 7 day period\r\n    function _justTakingProfits(uint256 sellAmount, address account) private view returns(bool) {\r\n        // Basic cheak to see if we are selling more than 5% - if so return false\r\n        if ((sellAmount * 20) > _balances[account]) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Calculate the number of taxed tokens for a transaction\r\n    function _getTaxedValue(uint256 transTokens, address account) private view returns(uint256){\r\n        uint256 taxRate = _getTaxRate(account);\r\n        if (taxRate == 0) {\r\n            return 0;\r\n        } else {\r\n            uint256 numerator = (transTokens * (10000 - (100 * taxRate)));\r\n            return (((transTokens * 10000) - numerator) / 10000);\r\n        }\r\n    }\r\n\r\n    // Calculate the current tax rate.\r\n\tfunction _getTaxRate(address account) private view returns(uint256) {\r\n        uint256 numHours = _getHours(_tradingStartTimestamp, block.timestamp);\r\n\r\n        if (numHours <= 24){\r\n            // 20% Sell Tax first 24 Hours\r\n            return 20;\r\n        } else if (numHours <= 48){\r\n            // 16% Sell Tax second 24 Hours\r\n            return 16;\r\n        } else {\r\n            // 12% Sell Tax starting rate\r\n            numHours = _getHours(_firstBuy[account], block.timestamp);\r\n            uint256 numDays = (numHours / 24);\r\n            if (numDays >= 84 ){\r\n                //12 x 7 = 84 = tax free!\r\n                return 0;\r\n            } else {\r\n                uint256 numWeeks = (numDays / 7);\r\n                return (12 - numWeeks);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Calculate the number of hours that have passed between endDate and startDate:\r\n    function _getHours(uint256 startDate, uint256 endDate) private pure returns(uint256){\r\n        return ((endDate - startDate) / 60 / 60);\r\n    }\r\n    \r\n    receive() external payable {}\r\n    \r\n    function manualswap() external {\r\n        require(_msgSender() == _stealthMultiSigWallet || _msgSender() == address(this) || _msgSender() == owner());\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(_msgSender() == _stealthMultiSigWallet || _msgSender() == address(this) || _msgSender() == owner());\r\n        uint256 contractETHBalance = address(this).balance;\r\n        sendETHToWallet(contractETHBalance);\r\n    }\r\n\r\n    function airdrop(address[] memory _user, uint256[] memory _amount) external onlyOwner {\r\n        uint256 len = _user.length;\r\n        require(len == _amount.length);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(_amount[i], \"ERC20: transfer amount exceeds balance\");\r\n            _balances[_user[i]] = _balances[_user[i]].add(_amount[i]);\r\n            emit Transfer(_msgSender(), _user[i], _amount[i]);\r\n        }\r\n    }\r\n    \r\n    function setMultipleBots(address[] memory bots_) public onlyOwner {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n\r\n    function setBot(address isbot) public onlyOwner {\r\n        bots[isbot] = true;\r\n    }\r\n    \r\n    function deleteBot(address notbot) public onlyOwner {\r\n        bots[notbot] = false;\r\n    }\r\n\r\n    function isBlacklisted(address isbot) public view returns(bool) {\r\n        return bots[isbot];\r\n    }\r\n\r\n    function setAntiBotMode(bool onoff) external onlyOwner() {\r\n        antiBotEnabled = onoff;\r\n    }\r\n\r\n    function isAntiBotEnabled() public view returns(bool) {\r\n        return antiBotEnabled;\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function setSellCoolDownTime(uint256 _newTime) public onlyOwner {\r\n        sellCoolDownTime = _newTime;\r\n    }\r\n\r\n    function updateRouter(IUniswapV2Router02 newRouter, address newPair) external onlyOwner {\r\n        uniswapV2Router = newRouter;\r\n        uniswapV2Pair = newPair;\r\n    }\r\n            \r\n    function sendETHToWallet(uint256 amount) private {\r\n        _stealthMultiSigWallet.transfer(amount);\r\n    }\r\n    \r\n    function startTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        antiBotEnabled = true;\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        _tradingStartTimestamp = block.timestamp;\r\n    }\r\n\r\n    function setSwapEnabledMode(bool swap) external onlyOwner {\r\n        swapEnabled = swap;\r\n    }\r\n\r\n    function isTradingOpen() public view returns(bool) {\r\n        return tradingOpen;\r\n    }\r\n\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"deleteBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isAntiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isbot\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellCoolDownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setAntiBotMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"isbot\",\"type\":\"address\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setMultipleBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTime\",\"type\":\"uint256\"}],\"name\":\"setSellCoolDownTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"setSwapEnabledMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"newRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPair\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Stealth","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://d19ce80d824c23f20ef23ce6fa9664081761593819659a6fbe6272b3a7dedce6"}]