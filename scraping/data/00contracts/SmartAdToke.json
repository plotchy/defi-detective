[{"SourceCode":"{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\"},\"SmartAdToken.sol\":{\"content\":\"// contracts/SmartAdToken.sol\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./SMARTERC20.sol\\\";\\nimport \\\"./SmartSafeMath.sol\\\";\\ncontract SmartAdToken is SMARTERC20 {\\n    address public _owner;\\n    mapping (address =\\u003e uint256) private _fees;\\n    using SmartSafeMath for uint256;\\n    event SmartTransfer(address indexed _from, address _to);\\n    event SmartWithdraw(address indexed _to, uint256 _amount);\\n    constructor() public payable SMARTERC20() {\\n        _owner = msg.sender;\\n    }\\n    modifier onlyOwner () {\\n       require(msg.sender == _owner, \\\"This can only be called by the contract owner!\\\");\\n       _;\\n    }\\n    function smartTransfer(address payable recipient) payable public {\\n        require(msg.value \\u003e 0, \\u0027Error, message value cannot be 0\\u0027);\\n        require(msg.sender != address(this));\\n        uint256 amount = msg.value;\\n        uint256 fee = calculateFee(amount, recipient);\\n        uint256 amountToSend = amount.sub(fee);\\n        require(amountToSend \\u003c amount, \\u0027Error, amount to send should be less than original value\\u0027);\\n        recipient.transfer(amountToSend);\\n        emit SmartTransfer(msg.sender, recipient);\\n    }\\n    function smartTokenTransfer(SMARTERC20 token, address payable recipient, uint256 amount) public {\\n        require(amount \\u003e 0, \\u0027Error, amount cannot be 0\\u0027);\\n        require(msg.sender != address(this));\\n        uint256 fee = calculateFee(amount, recipient);\\n        uint256 amountToSend = amount.sub(fee);\\n        require(amountToSend \\u003c amount, \\u0027Error, amount to send should be less than original value\\u0027);\\n        token.transferFrom(msg.sender, address(this), fee);\\n        token.transferFrom(msg.sender, recipient, amountToSend);\\n        emit SmartTransfer(msg.sender, recipient);\\n    }\\n    function calculateFee(uint256 amount, address recipient) internal view returns(uint256 _fee) {\\n        uint256 fee = amount.div(100);\\n        if( _fees[recipient] \\u003e 1 ) {\\n            fee = fee.mul(_fees[recipient]);\\n        }\\n        return fee;\\n    }\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n    function withdraw(uint256 amount) onlyOwner public {\\n        require(amount \\u003c= address(this).balance, \\u0027Insufficience funds to withdraw that amount\\u0027);\\n        address payable sendTo = payable(msg.sender);\\n        sendTo.transfer(amount);\\n        emit SmartWithdraw(msg.sender, amount);\\n    }\\n    function withdrawToken(SMARTERC20 token, uint256 amount) onlyOwner public {\\n        require(amount \\u003c= token.balanceOf(address(this)), \\u0027Insufficience funds to withdraw that amount\\u0027);\\n        address payable sendTo = payable(msg.sender);\\n        token.transfer(sendTo, amount);\\n        emit SmartWithdraw(msg.sender, amount);\\n    }\\n    function setFee(uint256 fee, address recipient) onlyOwner public {\\n        require(fee \\u003c 100, \\u0027Cannot set fee to more than 99\\u0027);\\n        _fees[recipient] = fee;\\n    }\\n}\\n\"},\"SMARTERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./SMARTIERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\ncontract SMARTERC20 is Context, SMARTIERC20 {\\n    mapping (address =\\u003e uint256) private _balances;\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n    constructor () {}\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance \\u003e= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n        return true;\\n    }\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n}\\n\"},\"SMARTIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\ninterface SMARTIERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"SmartSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nlibrary SmartSafeMath {\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"SmartTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"SmartWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SMARTERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"smartTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"smartTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract SMARTERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SmartAdToken","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://581e6dbec1a3a567033361a1f1a26f10bbf4f98d1e8f81398881679d8f079203"}]