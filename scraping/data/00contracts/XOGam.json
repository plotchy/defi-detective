[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/XOGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract XOGame is Ownable {\\n    Cell public nextTurn;\\n    Cell public winner;\\n    uint16 public nonce;\\n    uint64 public lastMoveTimestamp;\\n\\n    address public immutable partyX;\\n    address public immutable partyO;\\n\\n    enum Cell {\\n        Empty,\\n        X,\\n        O\\n    }\\n\\n    Cell[256][256] public field;\\n\\n    event Move(uint8 x, uint8 y, Cell cell);\\n    event Victory(address player, Cell cell);\\n    event PrizeContribution(address sponsor, uint256 amount);\\n\\n    constructor(address _partyX, address _partyO) payable {\\n        partyX = _partyX;\\n        partyO = _partyO;\\n    }\\n\\n    function play(uint8 x, uint8 y, uint256 _nonce) public {\\n        require(msg.sender == partyX || msg.sender == partyO, \\\"Not a player\\\");\\n        require(winner == Cell.Empty, \\\"Game is over\\\");\\n        require(nonce == _nonce, \\\"Invalid nonce\\\");\\n        Cell cell = msg.sender == partyX ? Cell.X : Cell.O;\\n\\n        require(cell == nextTurn || nextTurn == Cell.Empty, \\\"Not your turn\\\");\\n        require(field[x][y] == Cell.Empty, \\\"Cell is not empty\\\");\\n\\n        field[x][y] = cell;\\n        nextTurn = cell == Cell.X ? Cell.O : Cell.X;\\n        lastMoveTimestamp = uint64(block.timestamp);\\n        nonce = nonce + 1;\\n\\n        emit Move(x, y, cell);\\n    }\\n\\n    function win(uint8 x, uint8 y, int8 dx, int8 dy) public {\\n        require(dx == -1 || dx == 0 || dx == 1, \\\"dx must be -1, 0 or 1\\\");\\n        require(dy == -1 || dy == 0 || dy == 1, \\\"dy must be -1, 0 or 1\\\");\\n        require(dx != 0 || dy != 0, \\\"dx and dy cannot be both 0\\\");\\n        require(winner == Cell.Empty, \\\"Game is over\\\");\\n\\n        Cell cell = field[x][y];\\n        require(cell != Cell.Empty, \\\"Cell is empty\\\");\\n\\n        for (uint256 i = 0; i < 5; i++) {\\n            require(field[x][y] == cell, \\\"Not a line\\\");\\n            x = inc(x, dx);\\n            y = inc(y, dy);\\n        }\\n\\n        declareWinner(cell == Cell.X ? partyX : partyO);\\n    }\\n\\n    function playAndWin(uint8 x, uint8 y, uint256 _nonce, uint8 startX, uint8 startY, int8 dx, int8 dy) public {\\n        play(x, y, _nonce);\\n        win(startX, startY, dx, dy);\\n    }\\n\\n    function timedOut() external {\\n        require(winner == Cell.Empty, \\\"Already won\\\");\\n        require(nextTurn != Cell.Empty, \\\"Not started\\\");\\n        require(block.timestamp - lastMoveTimestamp > 3 days, \\\"Too soon\\\");\\n\\n        declareWinner(nextTurn == Cell.X ? partyO : partyX);\\n    }\\n\\n    function declareWinner(address party) internal {\\n        safeSend(party, address(this).balance);\\n        winner = party == partyX ? Cell.X : Cell.O;\\n\\n        emit Victory(party, winner);\\n    }\\n\\n    function emergencyStop() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            safeSend(partyX, balance / 2);\\n            safeSend(partyO, balance / 2);\\n        }\\n    }\\n\\n    function safeSend(address to, uint256 amount) internal {\\n        bool success = payable(to).send(amount);\\n        if (!success) {\\n            WETH weth = WETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n            weth.deposit{value: amount}();\\n            require(weth.transfer(to, amount), \\\"Payment failed\\\");\\n        }\\n    }\\n\\n    function inc(uint8 v, int8 d) internal pure returns (uint8) {\\n        if (d == 0) {\\n            return v;\\n        }\\n\\n        int256 r = int256(uint256(v)) + int256(d);\\n        require(r >= 0 && r < 256, \\\"Out of bounds\\\");\\n        return uint8(uint256(r));\\n    }\\n\\n    receive() external payable {\\n        // Prevent contributions after the game is over\\n        require(winner == Cell.Empty, \\\"Game is over\\\");\\n        emit PrizeContribution(msg.sender, msg.value);\\n    }\\n}\\n\\ninterface WETH {\\n    function deposit() external payable;\\n    function transfer(address dst, uint256 wad) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partyX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_partyO\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum XOGame.Cell\",\"name\":\"cell\",\"type\":\"uint8\"}],\"name\":\"Move\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeContribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum XOGame.Cell\",\"name\":\"cell\",\"type\":\"uint8\"}],\"name\":\"Victory\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"emergencyStop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"field\",\"outputs\":[{\"internalType\":\"enum XOGame.Cell\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMoveTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTurn\",\"outputs\":[{\"internalType\":\"enum XOGame.Cell\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partyO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partyX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"play\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"startX\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"startY\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"dx\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"dy\",\"type\":\"int8\"}],\"name\":\"playAndWin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timedOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"x\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"y\",\"type\":\"uint8\"},{\"internalType\":\"int8\",\"name\":\"dx\",\"type\":\"int8\"},{\"internalType\":\"int8\",\"name\":\"dy\",\"type\":\"int8\"}],\"name\":\"win\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winner\",\"outputs\":[{\"internalType\":\"enum XOGame.Cell\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"XOGame","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000fb48dd878be5895d4c58b6ffda1c3802663e02dc0000000000000000000000004c609a935c997737c8573aa64fc7bec1086778fc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]