[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/curve/CurveMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nimport \\\"../_external/Ownable.sol\\\";\\nimport \\\"./ICurveMaster.sol\\\";\\nimport \\\"./ICurveSlave.sol\\\";\\nimport \\\"../lending/IVaultController.sol\\\";\\n\\n/// @title Curve Master\\n/// @notice Curve master keeps a record of CurveSlave contracts and links it with an address\\n/// @dev all numbers should be scaled to 1e18. for instance, number 5e17 represents 50%\\ncontract CurveMaster is ICurveMaster, Ownable {\\n  // mapping of token to address\\n  mapping(address => address) public _curves;\\n\\n  address public _vaultControllerAddress;\\n  IVaultController private _VaultController;\\n\\n  /// @notice gets the return value of curve labled token_address at x_value\\n  /// @param token_address the key to lookup the curve with in the mapping\\n  /// @param x_value the x value to pass to the slave\\n  /// @return y value of the curve\\n  function getValueAt(address token_address, int256 x_value) external view override returns (int256) {\\n    require(_curves[token_address] != address(0x0), \\\"token not enabled\\\");\\n    ICurveSlave curve = ICurveSlave(_curves[token_address]);\\n    int256 value = curve.valueAt(x_value);\\n    require(value != 0, \\\"result must be nonzero\\\");\\n    return value;\\n  }\\n\\n  /// @notice set the VaultController addr in order to pay interest on curve setting\\n  /// @param vault_master_address address of vault master\\n  function setVaultController(address vault_master_address) external override onlyOwner {\\n    _vaultControllerAddress = vault_master_address;\\n    _VaultController = IVaultController(vault_master_address);\\n  }\\n\\n  function vaultControllerAddress() external view override returns (address) {\\n    return _vaultControllerAddress;\\n  }\\n\\n  ///@notice setting a new curve should pay interest\\n  function setCurve(address token_address, address curve_address) external override onlyOwner {\\n    if (address(_VaultController) != address(0)) {\\n      _VaultController.calculateInterest();\\n    }\\n    _curves[token_address] = curve_address;\\n  }\\n\\n  /// @notice special function that does not calculate interest, used for deployment et al\\n  function forceSetCurve(address token_address, address curve_address) external override onlyOwner {\\n    _curves[token_address] = curve_address;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/_external/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    address msgSender = _msgSender();\\n    _owner = msgSender;\\n    emit OwnershipTransferred(address(0), msgSender);\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    emit OwnershipTransferred(_owner, address(0));\\n    _owner = address(0);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), \\\"Ownable: new owner is zero addr\\\");\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/curve/ICurveMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title CurveMaster Interface\\n/// @notice Interface for interacting with CurveMaster\\ninterface ICurveMaster {\\n  function vaultControllerAddress() external view returns (address);\\n\\n  function getValueAt(address curve_address, int256 x_value) external view returns (int256);\\n\\n  function setVaultController(address vault_master_address) external;\\n\\n  function setCurve(address token_address, address curve_address) external;\\n\\n  function forceSetCurve(address token_address, address curve_address) external;\\n}\\n\"\r\n    },\r\n    \"contracts/curve/ICurveSlave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/// @title CurveSlave Interface\\n/// @notice Interface for interacting with CurveSlaves\\ninterface ICurveSlave {\\n  function valueAt(int256 x_value) external view returns (int256);\\n}\\n\"\r\n    },\r\n    \"contracts/lending/IVaultController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n// @title VaultController Events\\n/// @notice interface which contains any events which the VaultController contract emits\\ninterface VaultControllerEvents {\\n  event InterestEvent(uint64 epoch, uint192 amount, uint256 curve_val);\\n  event NewProtocolFee(uint256 protocol_fee);\\n  event RegisteredErc20(address token_address, uint256 LTVe4, address oracle_address, uint256 liquidationIncentivee4);\\n  event UpdateRegisteredErc20(\\n    address token_address,\\n    uint256 LTVe4,\\n    address oracle_address,\\n    uint256 liquidationIncentivee4\\n  );\\n  event NewVault(address vault_address, uint256 vaultId, address vaultOwner);\\n  event RegisterOracleMaster(address oracleMasterAddress);\\n  event RegisterCurveMaster(address curveMasterAddress);\\n  event BorrowUSDi(uint256 vaultId, address vaultAddress, uint256 borrowAmount);\\n  event RepayUSDi(uint256 vaultId, address vaultAddress, uint256 repayAmount);\\n  event Liquidate(uint256 vaultId, address asset_address, uint256 usdi_to_repurchase, uint256 tokens_to_liquidate);\\n}\\n\\n/// @title VaultController Interface\\n/// @notice extends VaultControllerEvents\\ninterface IVaultController is VaultControllerEvents {\\n  // initializer\\n  function initialize() external;\\n\\n  // view functions\\n\\n  function tokensRegistered() external view returns (uint256);\\n\\n  function vaultsMinted() external view returns (uint96);\\n\\n  function lastInterestTime() external view returns (uint64);\\n\\n  function totalBaseLiability() external view returns (uint192);\\n\\n  function interestFactor() external view returns (uint192);\\n\\n  function protocolFee() external view returns (uint192);\\n\\n  function vaultAddress(uint96 id) external view returns (address);\\n\\n  function vaultIDs(address wallet) external view returns (uint96[] memory);\\n\\n  function amountToSolvency(uint96 id) external view returns (uint256);\\n\\n  function vaultLiability(uint96 id) external view returns (uint192);\\n\\n  function vaultBorrowingPower(uint96 id) external view returns (uint192);\\n\\n  function tokensToLiquidate(uint96 id, address token) external view returns (uint256);\\n\\n  function checkVault(uint96 id) external view returns (bool);\\n\\n  struct VaultSummary {\\n    uint96 id;\\n    uint192 borrowingPower;\\n    uint192 vaultLiability;\\n    address[] tokenAddresses;\\n    uint256[] tokenBalances;\\n  }\\n  function vaultSummaries(uint96 start, uint96 stop) external view returns (VaultSummary[] memory);\\n\\n  // interest calculations\\n  function calculateInterest() external returns (uint256);\\n\\n  // vault management business\\n  function mintVault() external returns (address);\\n\\n  function liquidateVault(\\n    uint96 id,\\n    address asset_address,\\n    uint256 tokenAmount\\n  ) external returns (uint256);\\n\\n  function borrowUsdi(uint96 id, uint192 amount) external;\\n\\n  function repayUSDi(uint96 id, uint192 amount) external;\\n\\n  function repayAllUSDi(uint96 id) external;\\n\\n  // admin\\n  function pause() external;\\n\\n  function unpause() external;\\n\\n  function getOracleMaster() external view returns (address);\\n\\n  function registerOracleMaster(address master_oracle_address) external;\\n\\n  function getCurveMaster() external view returns (address);\\n\\n  function registerCurveMaster(address master_curve_address) external;\\n\\n  function changeProtocolFee(uint192 new_protocol_fee) external;\\n\\n  function registerErc20(\\n    address token_address,\\n    uint256 LTV,\\n    address oracle_address,\\n    uint256 liquidationIncentive\\n  ) external;\\n\\n  function registerUSDi(address usdi_address) external;\\n\\n  function updateRegisteredErc20(\\n    address token_address,\\n    uint256 LTV,\\n    address oracle_address,\\n    uint256 liquidationIncentive\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/_external/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"orderLiterals\": true,\r\n        \"deduplicate\": true,\r\n        \"cse\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_curves\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_vaultControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve_address\",\"type\":\"address\"}],\"name\":\"forceSetCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"x_value\",\"type\":\"int256\"}],\"name\":\"getValueAt\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"curve_address\",\"type\":\"address\"}],\"name\":\"setCurve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_master_address\",\"type\":\"address\"}],\"name\":\"setVaultController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CurveMaster","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]