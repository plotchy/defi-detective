[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract KarbonPlatinum {\r\n    address private owner;\r\n\r\n    ERC20 private foreignToken;\r\n\r\n    address private constant subAddress1 =\r\n        0x926994574F4A14c276cb652FF8BC2427BA3e89B3;\r\n    address private constant subAddress2 =\r\n        0xB0cE41a94cf9EFCb02F7b70771ad26C98f72265d;\r\n    address private constant subAddress3 =\r\n        0xBF30Ea9bD1A129Ee15a2FdBD0B8a4052966C31b0;\r\n    address private constant mainAddress =\r\n        0x5cA3a7f835573f872493f8Ca79d6D33B4Cba7287;\r\n\r\n    struct karbonPlatinumStruct {\r\n        address from;\r\n        address subAddress1;\r\n        address subAddress2;\r\n        address subAddress3;\r\n        address mainAddress;\r\n        uint256 fullAmount;\r\n        uint256 subAmount;\r\n        uint256 mainAmount;\r\n        uint256 timestamp;\r\n        string userId;\r\n    }\r\n\r\n    event karbonPlatinumLiquidityEvent(karbonPlatinumStruct karbonPlatinumObj);\r\n\r\n    constructor(address _foreignTokenAddress) {\r\n        owner = msg.sender;\r\n        foreignToken = ERC20(_foreignTokenAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only callable by owner\");\r\n        _;\r\n    }\r\n\r\n    function karbonPlatinumLiquidity(\r\n        uint256 foreignTokenAmount,\r\n        uint256 subAmount,\r\n        uint256 mainAmount,\r\n        string memory userId\r\n    ) public returns (bool) {\r\n        require(foreignTokenAmount > 0);\r\n\r\n        bool foreignTokenTx1 = foreignToken.transferFrom(\r\n            msg.sender,\r\n            address(subAddress1),\r\n            subAmount\r\n        );\r\n        require(foreignTokenTx1);\r\n\r\n        bool foreignTokenTx2 = foreignToken.transferFrom(\r\n            msg.sender,\r\n            address(subAddress2),\r\n            subAmount\r\n        );\r\n        require(foreignTokenTx2);\r\n\r\n        bool foreignTokenTx3 = foreignToken.transferFrom(\r\n            msg.sender,\r\n            address(subAddress3),\r\n            subAmount\r\n        );\r\n        require(foreignTokenTx3);\r\n        bool foreignTokenTx4 = foreignToken.transferFrom(\r\n            msg.sender,\r\n            address(mainAddress),\r\n            mainAmount\r\n        );\r\n        require(foreignTokenTx4);\r\n\r\n        karbonPlatinumStruct memory karbonPlatinumEventObj = karbonPlatinumStruct(\r\n            msg.sender,\r\n            subAddress1,\r\n            subAddress2,\r\n            subAddress3,\r\n            mainAddress,\r\n            foreignTokenAmount,\r\n            subAmount,\r\n            mainAmount,\r\n            block.timestamp,\r\n            userId\r\n        );\r\n\r\n        emit karbonPlatinumLiquidityEvent(karbonPlatinumEventObj);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foreignTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subAddress1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subAddress2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subAddress3\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fullAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct KarbonPlatinum.karbonPlatinumStruct\",\"name\":\"karbonPlatinumObj\",\"type\":\"tuple\"}],\"name\":\"karbonPlatinumLiquidityEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"foreignTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mainAmount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"userId\",\"type\":\"string\"}],\"name\":\"karbonPlatinumLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KarbonPlatinum","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://95018a5fb89a718538f368217143468b213e48d9c67f515f4464a92d9d0a258e"}]