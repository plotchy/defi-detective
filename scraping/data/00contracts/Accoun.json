[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"brink-core/Account/Account.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n *    ,,                           ,,                                \\n *   *MM                           db                      `7MM      \\n *    MM                                                     MM      \\n *    MM,dMMb.      `7Mb,od8     `7MM      `7MMpMMMb.        MM  ,MP'\\n *    MM    `Mb       MM' \\\"'       MM        MM    MM        MM ;Y   \\n *    MM     M8       MM           MM        MM    MM        MM;Mm   \\n *    MM.   ,M9       MM           MM        MM    MM        MM `Mb. \\n *    P^YbmdP'      .JMML.       .JMML.    .JMML  JMML.    .JMML. YA.\\n *\\n *    Account.sol :: 0x00000000AfCbce78c080F96032a5C1cB1b832D7B\\n *    etherscan.io verified 2021-12-18\\n */ \\n\\nimport \\\"./EIP712SignerRecovery.sol\\\";\\nimport \\\"./EIP1271Validator.sol\\\";\\n\\n/// @title Brink account core\\n/// @notice Deployed once and used by many proxy contracts as the implementation contract. External functions in this\\n/// contract are intended to be called by `delegatecall` from proxy contracts deployed by AccountFactory.\\ncontract Account is EIP712SignerRecovery, EIP1271Validator {\\n  /// @dev Revert if signer of a transaction or EIP712 message signer is not the proxy owner\\n  /// @param signer The address that is not the owner\\n  error NotOwner(address signer);\\n\\n  /// @dev Revert if EIP1271 hash and signature is invalid\\n  /// @param hash Hash of the data to be validated\\n  /// @param signature Signature byte array associated with hash\\n  error InvalidSignature(bytes32 hash, bytes signature);\\n\\n  /// @dev Revert if the Account.sol implementation contract is called directly\\n  error NotDelegateCall();\\n\\n  /// @dev Typehash for signed metaDelegateCall() messages\\n  bytes32 internal immutable META_DELEGATE_CALL_TYPEHASH;\\n\\n  /// @dev Typehash for signed metaDelegateCall_EIP1271() messages\\n  bytes32 internal immutable META_DELEGATE_CALL_EIP1271_TYPEHASH;\\n\\n  /// @dev Deployment address of the implementation Account.sol contract. Used to enforce onlyDelegateCallable.\\n  address internal immutable deploymentAddress = address(this);\\n\\n  /// @dev Used by external functions to revert if they are called directly on the implementation Account.sol contract\\n  modifier onlyDelegateCallable() {\\n    if (address(this) == deploymentAddress) {\\n      revert NotDelegateCall();\\n    }\\n    _;\\n  }\\n\\n  /// @dev Constructor sets immutable constants\\n  constructor() { \\n    META_DELEGATE_CALL_TYPEHASH = keccak256(\\\"MetaDelegateCall(address to,bytes data)\\\");\\n    META_DELEGATE_CALL_EIP1271_TYPEHASH = keccak256(\\\"MetaDelegateCall_EIP1271(address to,bytes data)\\\");\\n  }\\n\\n  /// @dev Makes a call to an external contract\\n  /// @dev Only executable directly by the proxy owner\\n  /// @param value Amount of wei to send with the call\\n  /// @param to Address of the external contract to call\\n  /// @param data Call data to execute\\n  function externalCall(uint256 value, address to, bytes memory data) external payable onlyDelegateCallable {\\n    if (proxyOwner() != msg.sender) {\\n      revert NotOwner(msg.sender);\\n    }\\n\\n    assembly {\\n      let result := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /// @dev Makes a delegatecall to an external contract\\n  /// @param to Address of the external contract to delegatecall\\n  /// @param data Call data to execute\\n  function delegateCall(address to, bytes memory data) external payable onlyDelegateCallable {\\n    if (proxyOwner() != msg.sender) {\\n      revert NotOwner(msg.sender);\\n    }\\n\\n    assembly {\\n      let result := delegatecall(gas(), to, add(data, 0x20), mload(data), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /// @dev Allows execution of a delegatecall with a valid signature from the proxyOwner. Uses EIP-712\\n  /// (https://github.com/ethereum/EIPs/pull/712) signer recovery.\\n  /// @param to Address of the external contract to delegatecall, signed by the proxyOwner\\n  /// @param data Call data to include in the delegatecall, signed by the proxyOwner\\n  /// @param signature Signature of the proxyOwner\\n  /// @param unsignedData Unsigned call data appended to the delegatecall\\n  /// @notice WARNING: The `to` contract is responsible for secure handling of the call provided in the encoded\\n  /// `callData`. If the proxyOwner signs a delegatecall to a malicious contract, this could result in total loss of\\n  /// their account.\\n  function metaDelegateCall(\\n    address to, bytes calldata data, bytes calldata signature, bytes calldata unsignedData\\n  ) external payable onlyDelegateCallable {\\n    address signer = _recoverSigner(\\n      keccak256(abi.encode(META_DELEGATE_CALL_TYPEHASH, to, keccak256(data))),\\n      signature\\n    );\\n    if (proxyOwner() != signer) {\\n      revert NotOwner(signer);\\n    }\\n\\n    bytes memory callData = abi.encodePacked(data, unsignedData);\\n\\n    assembly {\\n      let result := delegatecall(gas(), to, add(callData, 0x20), mload(callData), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /// @dev Allows execution of a delegatecall if proxyOwner is a smart contract. Uses EIP-1271\\n  /// (https://eips.ethereum.org/EIPS/eip-1271) signer validation.\\n  /// @param to Address of the external contract to delegatecall, validated by the proxyOwner contract\\n  /// @param data Call data to include in the delegatecall, validated by the proxyOwner contract\\n  /// @param signature Signature that will be validated by the proxyOwner contract\\n  /// @param unsignedData Unsigned call data appended to the delegatecall\\n  /// @notice WARNING: The `to` contract is responsible for secure handling of the call provided in the encoded\\n  /// `callData`. If the proxyOwner contract validates a delegatecall to a malicious contract, this could result in\\n  /// total loss of the account.\\n  function metaDelegateCall_EIP1271(\\n    address to, bytes calldata data, bytes calldata signature, bytes calldata unsignedData\\n  ) external payable onlyDelegateCallable {\\n    bytes32 hash = keccak256(abi.encode(META_DELEGATE_CALL_EIP1271_TYPEHASH, to, keccak256(data)));\\n    if(!_isValidSignature(proxyOwner(), hash, signature)) {\\n      revert InvalidSignature(hash, signature);\\n    }\\n\\n    bytes memory callData = abi.encodePacked(data, unsignedData);\\n\\n    assembly {\\n      let result := delegatecall(gas(), to, add(callData, 0x20), mload(callData), 0, 0)\\n      returndatacopy(0, 0, returndatasize())\\n      switch result\\n      case 0 {\\n        revert(0, returndatasize())\\n      }\\n      default {\\n        return(0, returndatasize())\\n      }\\n    }\\n  }\\n\\n  /// @dev Returns the owner address for the proxy\\n  /// @return _proxyOwner The owner address for the proxy\\n  function proxyOwner() internal view returns (address _proxyOwner) {\\n    assembly {\\n      // copies to \\\"scratch space\\\" 0 memory pointer\\n      extcodecopy(address(), 0, 0x28, 0x14)\\n      _proxyOwner := shr(0x60, mload(0))\\n    }\\n  }\\n\\n  receive() external payable { }\\n}\\n\"\r\n    },\r\n    \"brink-core/Account/EIP712SignerRecovery.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/// @title Provides signer address recovery for EIP-712 signed messages\\n/// @notice https://github.com/ethereum/EIPs/pull/712\\nabstract contract EIP712SignerRecovery {\\n  /// @dev Recovers the signer address for an EIP-712 signed message\\n  /// @param dataHash Hash of the data included in the message\\n  /// @param signature An EIP-712 signature\\n  function _recoverSigner(bytes32 dataHash, bytes calldata signature) internal view returns (address) {\\n    // generate the hash for the signed message\\n    bytes32 messageHash = keccak256(abi.encodePacked(\\n      \\\"\\\\x19\\\\x01\\\",\\n      // hash the EIP712 domain separator\\n      keccak256(abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(\\\"BrinkAccount\\\"),\\n        keccak256(\\\"1\\\"),\\n        block.chainid,\\n        address(this)\\n      )),\\n      dataHash\\n    ));\\n\\n    // recover the signer address from the signed messageHash and return\\n    return ECDSA.recover(messageHash, signature);\\n  }\\n}\\n\"\r\n    },\r\n    \"brink-core/Account/EIP1271Validator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\nimport \\\"../Interfaces/IERC1271.sol\\\";\\n\\n/// @title Provides a validation check on a signer contract that implements EIP-1271\\n/// @notice https://github.com/ethereum/EIPs/issues/1271\\nabstract contract EIP1271Validator {\\n\\n  bytes4 constant internal MAGICVALUE = bytes4(keccak256(\\\"isValidSignature(bytes32,bytes)\\\"));\\n\\n  /**\\n   * @dev Should return whether the signature provided is valid for the provided hash\\n   * @param signer Address of a contract that implements EIP-1271\\n   * @param hash Hash of the data to be validated\\n   * @param signature Signature byte array associated with hash\\n   */ \\n  function _isValidSignature(address signer, bytes32 hash, bytes calldata signature) internal view returns (bool) {\\n    return IERC1271(signer).isValidSignature(hash, signature) == MAGICVALUE;\\n  }\\n}\\n\"\r\n    },\r\n    \"brink-core/Account/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"brink-core/Interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity =0.8.10;\\npragma abicoder v1;\\n\\ninterface IERC1271 {\\n  function isValidSignature(bytes32 _hash, bytes memory _signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 800\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDelegateCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"delegateCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"externalCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"unsignedData\",\"type\":\"bytes\"}],\"name\":\"metaDelegateCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"unsignedData\",\"type\":\"bytes\"}],\"name\":\"metaDelegateCall_EIP1271\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Account","CompilerVersion":"v0.8.10+commit.fc410830","OptimizationUsed":"1","Runs":"800","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]