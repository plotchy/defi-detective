[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OneHiController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\nimport \\\"./libraries/TableHelper.sol\\\";\\nimport \\\"./IOneHiTableLogic.sol\\\";\\nimport \\\"./IOneHiController.sol\\\";\\nimport \\\"./IFractonSwap.sol\\\";\\nimport \\\"./OneHiEvent.sol\\\";\\n\\ncontract OneHiController is Ownable, VRFConsumerBaseV2, IOneHiController, OneHiEvent {\\n\\n    struct Record {\\n        uint256 number;\\n        address player;\\n    }\\n\\n    struct TableInfo {\\n        Record[] records;\\n        address nftAddr;\\n        address winner;\\n        address maker;\\n        address lucky;\\n        uint256 time;\\n        uint256 targetAmount;\\n    }\\n\\n    struct ChainLinkVrfParam {\\n        VRFCoordinatorV2Interface vrfCoordinator;\\n        uint16 requestConfirmations;\\n        bytes32 keyHash;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        uint64 subscriptionId;\\n    }\\n\\n    struct NFTInfo {\\n        bool isSupport;\\n        uint256 createTableFee;\\n        address miniNftAddr;\\n        address fftAddr;\\n    }\\n\\n    address private fractonSwapAddr;\\n    address private vaultAddr;\\n    address public implTableAddr;\\n\\n    mapping(address=>NFTInfo) public nftAddr2nftInfo;\\n    mapping(address=>TableInfo) public tableAddr2Info;\\n    \\n    uint8 private splitProfitRatio = 50;\\n    uint8 private luckySplitProfitRatio = 80;\\n    uint256 public minTargetAmount = 1_050_000;\\n\\n    //ChainLink VRF\\n    ChainLinkVrfParam public chainLinkVrfParam;\\n    mapping(uint256=>address) private requestId2Table;\\n\\n    constructor(address _implTableAddr, address _fractonSwapAddr, address _vaultAddr,\\n        address _vrfCoordinator, bytes32 _keyHash, uint64 _subscriptionId\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n\\n        implTableAddr = _implTableAddr;\\n        fractonSwapAddr = _fractonSwapAddr;\\n        vaultAddr = _vaultAddr;\\n\\n        chainLinkVrfParam.vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        chainLinkVrfParam.numWords = 1;\\n        chainLinkVrfParam.callbackGasLimit = 1000000;\\n        chainLinkVrfParam.requestConfirmations = 3;\\n        chainLinkVrfParam.subscriptionId = _subscriptionId;\\n        chainLinkVrfParam.keyHash = _keyHash;\\n    }\\n\\n    error InvalidChainLinkVrfParam(ChainLinkVrfParam);\\n\\n    function _requestRandom(address tableAddr) internal {\\n        uint256 requestId = chainLinkVrfParam.vrfCoordinator.requestRandomWords(\\n            chainLinkVrfParam.keyHash,\\n            chainLinkVrfParam.subscriptionId,\\n            chainLinkVrfParam.requestConfirmations,\\n            chainLinkVrfParam.callbackGasLimit,\\n            chainLinkVrfParam.numWords\\n        );\\n        requestId2Table[requestId] = tableAddr;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n    internal virtual override {\\n        address tableAddr = requestId2Table[requestId];\\n        _pickUpWinner(tableAddr, randomWords[0]);\\n    }\\n\\n    function _pickUpWinner(address tableAddr, uint256 randomWord) internal {\\n        uint256 left = 0;\\n        uint256 right = tableAddr2Info[tableAddr].records.length - 1;\\n\\n        uint256 middle;\\n        uint256 middleNumber;\\n\\n        uint256 random = (randomWord % tableAddr2Info[tableAddr].targetAmount) + 1;\\n        uint256 winnerNumber = random;\\n\\n        while (true) {\\n            if (right - left <= 1) {\\n                if (random <= tableAddr2Info[tableAddr].records[left].number) {\\n                    tableAddr2Info[tableAddr].winner = tableAddr2Info[tableAddr].records[left].player;\\n                } else {\\n                    tableAddr2Info[tableAddr].winner = tableAddr2Info[tableAddr].records[right].player;\\n                }\\n                break;\\n            } else {\\n                middle = (right + left) / 2;\\n                middleNumber = tableAddr2Info[tableAddr].records[middle].number;\\n\\n                if (middleNumber == random) {\\n                    tableAddr2Info[tableAddr].winner = tableAddr2Info[tableAddr].records[middle].player;\\n                    break;\\n                }\\n\\n                if (middleNumber < random) {\\n                    left = middle;\\n                } else {\\n                    right = middle;\\n                }\\n            }\\n        }\\n        _emitChooseWinnerEvent(tableAddr, tableAddr2Info[tableAddr].winner, winnerNumber);\\n    }\\n\\n    function createTable(address nftAddr, uint256 targetAmount, bytes32 salt) external {\\n        require(nftAddr2nftInfo[nftAddr].isSupport, \\\"not support nft-address\\\");\\n        require(targetAmount >= minTargetAmount, \\\"minTargetAmount not met\\\");\\n        address fftAddr = nftAddr2nftInfo[nftAddr].fftAddr;\\n        require(IERC20(fftAddr).transferFrom(msg.sender, vaultAddr, nftAddr2nftInfo[nftAddr].createTableFee));\\n\\n        address tableAddr = Create2.deploy(\\n            0,\\n            salt,\\n            TableHelper.getBytecode(implTableAddr)\\n        );\\n\\n        require(tableAddr != address(0), \\\"tableAddr deploy failed\\\");\\n\\n        IOneHiTableLogic(tableAddr).initialize(address(this), fftAddr);\\n\\n        tableAddr2Info[tableAddr].nftAddr = nftAddr;\\n        tableAddr2Info[tableAddr].maker = msg.sender;\\n        tableAddr2Info[tableAddr].time = block.timestamp;\\n        tableAddr2Info[tableAddr].targetAmount = targetAmount;\\n\\n        _emitCreateTableEvent(tableAddr, msg.sender, nftAddr, targetAmount);\\n\\n        buyTickets(tableAddr, targetAmount * 5 / 10000);\\n    }\\n\\n    function buyTickets(address tableAddr, uint256 ticketsAmount) public returns(uint256) {\\n        require(ticketsAmount > 0);\\n        address nftAddr = tableAddr2Info[tableAddr].nftAddr;\\n        require(nftAddr != address(0), \\\"Invalid tableAddr\\\");\\n\\n        require(block.timestamp <= (tableAddr2Info[tableAddr].time + 4 hours), \\\"Table is timeout\\\");\\n        tableAddr2Info[tableAddr].time = block.timestamp;\\n\\n        uint256 amount = tableAddr2Info[tableAddr].targetAmount - getTableAccumulation(tableAddr);\\n        require(amount > 0, \\\"Controller: table is finished.\\\");\\n        if (amount < ticketsAmount) {\\n            ticketsAmount = amount;\\n        }\\n        require(IERC20(nftAddr2nftInfo[nftAddr].fftAddr).transferFrom(msg.sender, tableAddr,\\n            ticketsAmount * 1e18));\\n\\n        _buyTickets(tableAddr, ticketsAmount);\\n        return ticketsAmount;\\n    }\\n\\n    function _buyTickets(address tableAddr, uint256 actualAmount) internal {\\n        Record[] storage records = tableAddr2Info[tableAddr].records;\\n        uint256 accumulation;\\n        if (records.length != 0) {\\n            accumulation = records[records.length - 1].number;\\n        }\\n\\n        uint256 targetAmount = tableAddr2Info[tableAddr].targetAmount;\\n        uint256 afterAmount = accumulation + actualAmount;\\n        records.push(Record(afterAmount, msg.sender));\\n\\n        _emitBuyTicketsEvent(tableAddr, msg.sender, accumulation+1, afterAmount);\\n\\n        if (afterAmount == targetAmount) {\\n            _emitUpToTargetAmountEvent(tableAddr);\\n            _liquidate(tableAddr);\\n        }\\n    }\\n    function _liquidate(address tableAddr) internal {\\n        address nftAddr = tableAddr2Info[tableAddr].nftAddr;\\n        _swapNFT(tableAddr, nftAddr, nftAddr2nftInfo[nftAddr].miniNftAddr,\\n            nftAddr2nftInfo[nftAddr].fftAddr);\\n        _splitProfit(tableAddr, nftAddr2nftInfo[nftAddr].fftAddr);\\n        _requestRandom(tableAddr);\\n    }\\n    function _swapNFT(address tableAddr, address nftAddr, address miniNFTAddr, address fftAddr) internal {\\n        uint256 miniNFTAmount = 1000 + IFractonSwap(fractonSwapAddr).nftTax();\\n\\n        IOneHiTableLogic(tableAddr).swapNFT(fractonSwapAddr, fftAddr, miniNFTAddr, miniNFTAmount,\\n            nftAddr);\\n    }\\n    function _splitProfit(address tableAddr, address fftAddr) internal {\\n        uint256 balance = IERC20(fftAddr).balanceOf(tableAddr);\\n        uint256 profitOfMaker = balance * splitProfitRatio / 100;\\n        uint256 profitOfVault = balance - profitOfMaker;\\n\\n        require(IERC20(fftAddr).transferFrom(tableAddr, tableAddr2Info[tableAddr].maker, profitOfMaker));\\n        require(IERC20(fftAddr).transferFrom(tableAddr, vaultAddr, profitOfVault));\\n        _emitSplitProfitEvent(tableAddr, tableAddr2Info[tableAddr].maker,\\n            profitOfMaker, vaultAddr, profitOfVault);\\n    }\\n\\n    function claimTreasure(address tableAddr, uint256 tokenId) external {\\n        address nftAddr = tableAddr2Info[tableAddr].nftAddr;\\n        require(tableAddr2Info[tableAddr].winner != address(0));\\n        require(tableAddr2Info[tableAddr].winner == msg.sender, \\\"winner is invalid\\\");\\n        require(IOneHiTableLogic(tableAddr).claimTreasure(msg.sender, nftAddr, tokenId));\\n        _emitClaimTreasureEvent(tableAddr);\\n    }\\n\\n    function luckyClaim(address tableAddr) external {\\n        address nftAddr = tableAddr2Info[tableAddr].nftAddr;\\n        require(nftAddr != address(0), \\\"TableAddr is invalid\\\");\\n        address fftAddr = nftAddr2nftInfo[nftAddr].fftAddr;\\n\\n        Record[] storage records = tableAddr2Info[tableAddr].records;\\n        require(block.timestamp > (tableAddr2Info[tableAddr].time + 4 hours), \\\"Table isn't timeout\\\");\\n        require(records.length != 0, \\\"Table is empty\\\");\\n        require(msg.sender == records[records.length - 1].player, \\\"invalid luckyAddr\\\");\\n        require(records[records.length - 1].number != tableAddr2Info[tableAddr].targetAmount, \\\"Table is full\\\");\\n\\n        tableAddr2Info[tableAddr].lucky = msg.sender;\\n        uint256 balance = IERC20(fftAddr).balanceOf(tableAddr);\\n        require(balance > 0, \\\"table balance is zero\\\");\\n        uint256 profitOfLucky = balance * luckySplitProfitRatio / 100;\\n        uint256 profitOfVault = balance - profitOfLucky;\\n\\n        require(IERC20(fftAddr).transferFrom(tableAddr, msg.sender, profitOfLucky));\\n        require(IERC20(fftAddr).transferFrom(tableAddr, vaultAddr, profitOfVault));\\n        _emitLuckyClaimEvent(tableAddr);\\n        _emitSplitProfitEvent(tableAddr, msg.sender, profitOfLucky, vaultAddr, profitOfVault);\\n    }\\n\\n    function updateHiStatus(address nftAddr, bool isSupport, uint256 createTableFee) external onlyOwner {\\n        address miniNftAddr = IFractonSwap(fractonSwapAddr).NFTtoMiniNFT(nftAddr);\\n        require(miniNftAddr != address(0), \\\"miniNftAddr is zero\\\");\\n        address fftAddr = IFractonSwap(fractonSwapAddr).miniNFTtoFFT(miniNftAddr);\\n        require(fftAddr != address(0), \\\"fftAddr is zero\\\");\\n\\n        nftAddr2nftInfo[nftAddr].isSupport = isSupport;\\n        nftAddr2nftInfo[nftAddr].createTableFee = createTableFee * 1e18;\\n        nftAddr2nftInfo[nftAddr].miniNftAddr = miniNftAddr;\\n        nftAddr2nftInfo[nftAddr].fftAddr = fftAddr;\\n        _emitUpdateHiStatusEvent(nftAddr, miniNftAddr, fftAddr, isSupport, createTableFee*1e18);\\n    }\\n\\n    function updateSplitProfitRatio(uint8 _splitProfitRatio) external onlyOwner {\\n        splitProfitRatio = _splitProfitRatio;\\n        _emitUpdateRatio(splitProfitRatio, luckySplitProfitRatio);\\n    }\\n\\n    function updateLuckySplitProfitRatio(uint8 _luckySplitProfitRatio) external onlyOwner {\\n        luckySplitProfitRatio = _luckySplitProfitRatio;\\n        _emitUpdateRatio(splitProfitRatio, luckySplitProfitRatio);\\n    }\\n\\n    function updateVaultAddr(address _vaultAddr) external onlyOwner {\\n        vaultAddr = _vaultAddr;\\n    }\\n\\n    function updateVrfParam(ChainLinkVrfParam memory _chainLinkVrfParam) external onlyOwner {\\n        if (chainLinkVrfParam.numWords == 0 || chainLinkVrfParam.callbackGasLimit == 0 ||\\n            chainLinkVrfParam.requestConfirmations == 0 ||\\n            address(chainLinkVrfParam.vrfCoordinator) == address(0)) {\\n            revert InvalidChainLinkVrfParam(_chainLinkVrfParam);\\n        }\\n\\n        chainLinkVrfParam = _chainLinkVrfParam;\\n    }\\n\\n    //table\\n    function getFractonSwapAddr() external view returns(address) {\\n        return fractonSwapAddr;\\n    }\\n    function getVaultAddr() external view returns(address) {\\n        return vaultAddr;\\n    }\\n    function getSplitProfitRatio() external view returns(uint256) {\\n        return splitProfitRatio;\\n    }\\n    function getLuckySplitProfitRatio() external view returns(uint256) {\\n        return luckySplitProfitRatio;\\n    }\\n\\n    function getTableAccumulation(address tableAddr) public view returns(uint256) {\\n        if (tableAddr2Info[tableAddr].records.length == 0) {\\n            return 0;\\n        }\\n        return tableAddr2Info[tableAddr].records[tableAddr2Info[tableAddr].records.length - 1].number;\\n    }\\n\\n    function getTableLucky(address tableAddr) external view returns(address) {\\n        require(block.timestamp > (tableAddr2Info[tableAddr].time + 4 hours), \\\"Table isn't timeout\\\");\\n        require(tableAddr2Info[tableAddr].records.length != 0, \\\"Table is empty\\\");\\n\\n        return tableAddr2Info[tableAddr].records[tableAddr2Info[tableAddr].records.length - 1].player;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IOneHiTableLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOneHiTableLogic {\\n    function initialize(address _controller, address fftAddr) external;\\n    function claimTreasure(address player, address nftAddr, uint256 tokenId) external returns(bool);\\n    function swapNFT(address fractonSwapAddr, address fftAddr, address miniNFTAddr, uint256 miniNFTAmount,\\n        address nftAddr) external;\\n}\\n\"\r\n    },\r\n    \"contracts/IFractonSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IFractonSwap {\\n    function nftTax() external view returns(uint256);\\n    function swapFFTtoMiniNFT(address miniNFTAddress, uint256 miniNFTAmount) external returns(bool);\\n    function swapMiniNFTtoNFT(address nftAddr) external returns(bool);\\n    function NFTtoMiniNFT(address nftAddr) external view returns(address);\\n    function miniNFTtoFFT(address miniNFT) external view returns(address);\\n}\"\r\n    },\r\n    \"contracts/OneHiEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nabstract contract OneHiEvent {\\n    event CreateTable(address tableAddr, address makerAddr, address nftAddr, uint256 targetAmount);\\n    event BuyTickets(address tableAddr, address player, uint256 start, uint256 end);\\n    event UpdateHiStatus(address nftAddr, address miniNFTAddr, address fftAddr,\\n        bool isSupport, uint256 createTableFee);\\n    event UpToTargetAmount(address tableAddr);\\n    event ChooseWinner(address tableAddr, address winner, uint256 winnerNumber);\\n    event ClaimTreasure(address tableAddr);\\n    event LuckyClaim(address tableAddr);\\n    event SplitProfit(address tableAddr, address makerAddr, uint256 makeAmount, address vaultAddr, uint256 vaultAmount);\\n    event UpdateRatio(uint8 splitProfitRatio, uint8 luckySplitProfitRatio);\\n\\n    function _emitCreateTableEvent(address tableAddr, address makerAddr, address nftAddr,\\n        uint256 targetAmount) internal {\\n        emit CreateTable(tableAddr, makerAddr, nftAddr, targetAmount);\\n    }\\n    function _emitUpdateHiStatusEvent(address nftAddr, address miniNFTAddr, address fftAddr,\\n        bool isSupport, uint256 createTableFee) internal {\\n        emit UpdateHiStatus(nftAddr, miniNFTAddr, fftAddr, isSupport, createTableFee);\\n    }\\n    function _emitBuyTicketsEvent(address tableAddr, address player, uint256 start, uint256 end) internal {\\n        emit BuyTickets(tableAddr, player, start, end);\\n    }\\n    function _emitUpToTargetAmountEvent(address tableAddr) internal {\\n        emit UpToTargetAmount(tableAddr);\\n    }\\n    function _emitChooseWinnerEvent(address tableAddr, address winner, uint256 winnerNumber) internal {\\n        emit ChooseWinner(tableAddr, winner, winnerNumber);\\n    }\\n    function _emitClaimTreasureEvent(address tableAddr) internal {\\n        emit ClaimTreasure(tableAddr);\\n    }\\n    function _emitLuckyClaimEvent(address tableAddr) internal {\\n        emit LuckyClaim(tableAddr);\\n    }\\n    function _emitSplitProfitEvent(address tableAddr, address makerAddr, uint256 makerAmount, address vaultAddr, uint256 vaultAmount) internal {\\n        emit SplitProfit(tableAddr, makerAddr, makerAmount, vaultAddr, vaultAmount);\\n    }\\n    function _emitUpdateRatio(uint8 splitProfitRatio, uint8 luckySplitProfitRatio) internal {\\n        emit UpdateRatio(splitProfitRatio, luckySplitProfitRatio);\\n    }\\n}\"\r\n    },\r\n    \"contracts/IOneHiController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IOneHiController {\\n    function createTable(address nftAddr, uint256 targetAmount, bytes32 salt) external;\\n    function buyTickets(address tableAddr, uint256 amount) external returns(uint256);\\n    function claimTreasure(address tableAddr, uint256 tokenId) external;\\n    function luckyClaim(address tableAddr) external;\\n    //table\\n    function getFractonSwapAddr() external view returns(address);\\n    function getVaultAddr() external view returns(address);\\n    function getSplitProfitRatio() external view returns(uint256);\\n    function getLuckySplitProfitRatio() external view returns(uint256);\\n    //frontend\\n    function getTableAccumulation(address tableAddr) external view returns(uint256);\\n    function getTableLucky(address tableAddr) external view returns(address);\\n\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/TableHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"../OneHiTable.sol\\\";\\n\\nlibrary TableHelper {\\n    function getBytecode(address implTableAddr) public pure returns (bytes memory) {\\n        bytes memory bytecode = type(OneHiTable).creationCode;\\n        return abi.encodePacked(bytecode, abi.encode(implTableAddr));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/OneHiTable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity  ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract OneHiTable is Proxy {\\n\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    constructor(\\n        address _implAddr\\n    ) {\\n        _setImplementation(_implAddr);\\n    }\\n\\n    function _implementation() internal view override returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"peephole\": true,\r\n        \"jumpdestRemover\": true,\r\n        \"orderLiterals\": false,\r\n        \"deduplicate\": true,\r\n        \"constantOptimizer\": true,\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/TableHelper.sol\": {\r\n        \"TableHelper\": \"0x6afe770203fd031c45b40b48ccd21f5d9685b545\"\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implTableAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fractonSwapAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"internalType\":\"struct OneHiController.ChainLinkVrfParam\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"InvalidChainLinkVrfParam\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"BuyTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winnerNumber\",\"type\":\"uint256\"}],\"name\":\"ChooseWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"ClaimTreasure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"makerAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"name\":\"CreateTable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"LuckyClaim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"makerAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultAmount\",\"type\":\"uint256\"}],\"name\":\"SplitProfit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"UpToTargetAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miniNFTAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fftAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSupport\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"createTableFee\",\"type\":\"uint256\"}],\"name\":\"UpdateHiStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"splitProfitRatio\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"luckySplitProfitRatio\",\"type\":\"uint8\"}],\"name\":\"UpdateRatio\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketsAmount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainLinkVrfParam\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimTreasure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"createTable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFractonSwapAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLuckySplitProfitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSplitProfitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"getTableAccumulation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"getTableLucky\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implTableAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tableAddr\",\"type\":\"address\"}],\"name\":\"luckyClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTargetAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nftAddr2nftInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSupport\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createTableFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miniNftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fftAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tableAddr2Info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lucky\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isSupport\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"createTableFee\",\"type\":\"uint256\"}],\"name\":\"updateHiStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_luckySplitProfitRatio\",\"type\":\"uint8\"}],\"name\":\"updateLuckySplitProfitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_splitProfitRatio\",\"type\":\"uint8\"}],\"name\":\"updateSplitProfitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAddr\",\"type\":\"address\"}],\"name\":\"updateVaultAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"}],\"internalType\":\"struct OneHiController.ChainLinkVrfParam\",\"name\":\"_chainLinkVrfParam\",\"type\":\"tuple\"}],\"name\":\"updateVrfParam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"OneHiController","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002f344e1ce883ecda38231541fcf486d01c95da380000000000000000000000007fee302a14d6b945c0eb6da9c4426c8d75d38a73000000000000000000000000fe2a906e94e5521c7c70c409b30f82d2835a2a74000000000000000000000000271682deb8c4e0901d1a1550ad2e64d568e699099fe0eebf5e446e3c998ec9bb19951541aee00bb90ea201ae456421a2ded8680500000000000000000000000000000000000000000000000000000000000001cf","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]