[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contract-allow-list/contracts/ERC721AntiScam/lockable/ERC721Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IERC721Lockable.sol\\\";\\nimport \\\"erc721psi/contracts/extension/ERC721PsiBurnable.sol\\\";\\n\\n/// @title トークンのtransfer抑止機能付きコントラクト\\n/// @dev Readmeを見てください。\\n\\nabstract contract ERC721Lockable is ERC721PsiBurnable, IERC721Lockable {\\n    /*//////////////////////////////////////////////////////////////\\n    ロック変数。トークンごとに個別ロック設定を行う\\n    //////////////////////////////////////////////////////////////*/\\n    bool public enableLock = true;\\n    LockStatus public contractLockStatus = LockStatus.UnLock;\\n\\n    // token lock\\n    mapping(uint256 => LockStatus) public tokenLock;\\n\\n    // wallet lock\\n    mapping(address => LockStatus) public walletLock;\\n\\n    /*//////////////////////////////////////////////////////////////\\n    modifier\\n    //////////////////////////////////////////////////////////////*/\\n    modifier existToken(uint256 tokenId) {\\n        require(\\n            _exists(tokenId),\\n            \\\"Lockable: locking query for nonexistent token\\\"\\n        );\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n    ロック機能ロジック\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // function getLockStatus(uint256 tokenId) external view returns (LockStatus) existToken(tokenId) {\\n    //     return _getLockStatus(ownerOf(tokenId), tokenId);\\n    // }\\n\\n    function isLocked(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        existToken(tokenId)\\n        returns (bool)\\n    {\\n        if (!enableLock) {\\n            return false;\\n        }\\n\\n        if (\\n            tokenLock[tokenId] == LockStatus.Lock ||\\n            (tokenLock[tokenId] == LockStatus.UnSet &&\\n                isLocked(ownerOf(tokenId)))\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function isLocked(address holder) public view virtual returns (bool) {\\n        if (!enableLock) {\\n            return false;\\n        }\\n\\n        if (\\n            walletLock[holder] == LockStatus.Lock ||\\n            (walletLock[holder] == LockStatus.UnSet &&\\n                contractLockStatus == LockStatus.Lock)\\n        ) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function getTokensUnderLock()\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        uint256 start = _startTokenId();\\n        uint256 end = _nextTokenId();\\n\\n        return getTokensUnderLock(start, end);\\n    }\\n\\n    function getTokensUnderLock(uint256 start, uint256 end)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory)\\n    {\\n        bool[] memory lockList = new bool[](end - start + 1);\\n        uint256 i = 0;\\n        uint256 lockCount = 0;\\n        for (uint256 tokenId = start; tokenId <= end; tokenId++) {\\n            if (_exists(tokenId) && isLocked(tokenId)) {\\n                lockList[i] = true;\\n                lockCount++;\\n            } else {\\n                lockList[i] = false;\\n            }\\n\\n            i++;\\n        }\\n\\n        uint256[] memory tokensUnderLock = new uint256[](lockCount);\\n\\n        i = 0;\\n        uint256 j = 0;\\n        for (uint256 tokenId = start; tokenId <= end; tokenId++) {\\n            if (lockList[i]) {\\n                tokensUnderLock[j] = tokenId;\\n                j++;\\n            }\\n\\n            i++;\\n        }\\n\\n        return tokensUnderLock;\\n    }\\n\\n    function _deleteTokenLock(uint256 tokenId) internal virtual {\\n        delete tokenLock[tokenId];\\n    }\\n\\n    function _setTokenLock(uint256[] calldata tokenIds, LockStatus lockStatus)\\n        internal\\n        virtual\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            tokenLock[tokenIds[i]] = lockStatus;\\n            emit TokenLock(\\n                ownerOf(tokenIds[i]),\\n                msg.sender,\\n                lockStatus,\\n                tokenIds[i]\\n            );\\n        }\\n    }\\n\\n    function _setWalletLock(address to, LockStatus lockStatus)\\n        internal\\n        virtual\\n    {\\n        walletLock[to] = lockStatus;\\n        emit WalletLock(to, msg.sender, lockStatus);\\n    }\\n\\n    function _setContractLock(LockStatus lockStatus) internal virtual {\\n        contractLockStatus = lockStatus;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (isLocked(owner)) {\\n            return false;\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            isLocked(msg.sender) == false || approved == false,\\n            \\\"Can not approve locked token\\\"\\n        );\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function _beforeApprove(\\n        address, /**to**/\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(\\n            isLocked(tokenId) == false,\\n            \\\"Lockable: Can not approve locked token\\\"\\n        );\\n    }\\n\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        _beforeApprove(to, tokenId);\\n        super.approve(to, tokenId);\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 /*quantity*/\\n    ) internal virtual override {\\n        // 転送やバーンにおいては、常にstartTokenIdは TokenIDそのものとなります。\\n        if (from != address(0) && to != address(0)) {\\n            // トークンがロックされている場合、転送を許可しない\\n            require(\\n                isLocked(startTokenId) == false,\\n                \\\"Lockable: Can not transfer locked token\\\"\\n            );\\n        }\\n    }\\n\\n    function _afterTokenTransfers(\\n        address from,\\n        address, /*to*/\\n        uint256 startTokenId,\\n        uint256 /*quantity*/\\n    ) internal virtual override {\\n        // 転送やバーンにおいては、常にstartTokenIdは TokenIDそのものとなります。\\n        if (from != address(0)) {\\n            // ロックをデフォルトに戻す。\\n            _deleteTokenLock(startTokenId);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721Lockable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contract-allow-list/contracts/ERC721AntiScam/lockable/IERC721Lockable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title IERC721Lockable\\n * @dev トークンのtransfer抑止機能付きコントラクトのインターフェース\\n * @author Lavulite\\n */\\ninterface IERC721Lockable {\\n\\n   enum LockStatus {\\n      UnSet,\\n      UnLock,\\n      Lock\\n   }\\n\\n    /**\\n     * @dev 個別ロックが指定された場合のイベント\\n     */\\n    event TokenLock(address indexed holder, address indexed operator, LockStatus lockStatus, uint256 indexed tokenId);\\n    \\n    /**\\n     * @dev ウォレットロックが指定された場合のイベント\\n     */\\n    event WalletLock(address indexed holder, address indexed operator, LockStatus lockStatus);\\n\\n    /**\\n     * @dev 該当トークンIDのロックステータスを変更する。\\n     */\\n    function setTokenLock(uint256[] calldata tokenIds, LockStatus lockStatus) external;\\n\\n    /**\\n     * @dev 該当ウォレットのロックステータスを変更する。\\n     */\\n    function setWalletLock(address to, LockStatus lockStatus) external;\\n\\n    /**\\n     * @dev コントラクトのロックステータスを変更する。\\n     */\\n    function setContractLock(LockStatus lockStatus) external;\\n\\n    /**\\n     * @dev 該当トークンIDがロックされているかを返す\\n     */\\n    function isLocked(uint256 tokenId) external view returns (bool);\\n    \\n    /**\\n     * @dev ウォレットロックを行っているかを返す\\n     */\\n    function isLocked(address holder) external view returns (bool);\\n\\n    /**\\n     * @dev 転送が拒否されているトークンを全て返す\\n     */\\n    function getTokensUnderLock() external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev 転送が拒否されているstartからstopまでのトークンIDを返す\\n     */\\n    function getTokensUnderLock(uint256 start, uint256 end) external view returns (uint256[] memory);\\n\\n}\"\r\n    },\r\n    \"contract-allow-list/contracts/proxy/interface/IContractAllowListProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.7.0 <0.9.0;\\r\\n\\r\\ninterface IContractAllowListProxy {\\r\\n    function isAllowed(address _transferer, uint256 _level)\\r\\n        external\\r\\n        view\\r\\n        returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/CNPES.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./libs/IMetadataRouter.sol\\\";\\nimport \\\"./libs/ERC721BasicFrame.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./libs/BitOperator.sol\\\";\\n\\ncontract CNPES is ERC721BasicFrame {\\n    using Strings for uint256;\\n    using BitOperator for uint256;\\n    /*\\n     * @dev Token aux for routing parameter : bit layout\\n     * 0..7     update index like burnin without changing token id\\n     */\\n    uint256 private constant BITPOS_AUX_UPDATE_INDEX = 0;\\n    \\n    /*\\n     * @dev Routing parameter bit layout\\n     * 0        bool of lock status\\n     * 1..8     update index like burnin without changing token id\\n     */\\n    uint256 private constant BITPOS_LOCK_STATUS = 0;\\n    uint256 private constant BITPOS_UPDATE_INDEX = BITPOS_LOCK_STATUS + 1;\\n\\n    uint8 public currentUpdateIndex;\\n\\n    event UpdateToken(uint256 indexed tokenId, uint8 indexed updateIndex);\\n    event IncreaseUpdateIndex(uint8 indexed updateIndex);\\n    \\n    error InvalidUpdateIndex();\\n    error ZeroUpdateIndex();\\n    error RouterNotSet();\\n    IMetadataRouter public router;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Constructor\\n    ///////////////////////////////////////////////////////////////////////////\\n    constructor() ERC721BasicFrame(\\\"CNPES Generative\\\", \\\"CNPES\\\", 5000) {\\n        // TODO:set royaltyAddress\\n        royaltyAddress = 0x6796a415c77c210533dbaA735AC412Fc942f00Ba;\\n        // Grants minter and burner role for owner address\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n        // mint 2. please burn by yourself for token number starts from 1\\n        _mint(msg.sender, 2);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Setter functions : Metadata Router\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setRouter(IMetadataRouter _new) external onlyAdmin {\\n        router = _new;\\n    }\\n\\n    /**\\n      * @dev Allow administrators to change the lock status so that locked tokens are not listed in the marketplace.\\n      */\\n    function setTokenLockByAdmin(uint256[] calldata tokenIds, LockStatus lockStatus)\\n        external\\n        onlyAdmin\\n    {\\n        // _setTokenLock call _exists(tokenId) in ownerOf() function.\\n        // So this function calls internal function without checking token existance\\n        _setTokenLock(tokenIds, lockStatus);\\n    }\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Update Index functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    function getTokenUpdateIndex(uint256 tokenId) external view virtual returns(uint8){\\n        if (!_exists(tokenId)) revert TokenNonexistent(tokenId);\\n        return _getTokenUpdateIndex(tokenId);\\n    }\\n\\n    function _getTokenUpdateIndex(uint256 tokenId) internal view virtual returns(uint8){\\n        return _getTokenAux(tokenId).getBitValueUint8(BITPOS_AUX_UPDATE_INDEX);\\n    }\\n\\n    function updateToken(uint256 tokenId)\\n        external\\n        virtual\\n        onlyRole(UPDATER_ROLE)\\n    {\\n        // Grab from strage\\n        uint8 index = currentUpdateIndex;\\n        uint256 aux = _getTokenAux(tokenId);\\n\\n        if (!_exists(tokenId)) revert TokenNonexistent(tokenId);\\n        if (index == 0) revert ZeroUpdateIndex();\\n        if (aux.getBitValueUint8(BITPOS_AUX_UPDATE_INDEX) >= index) revert InvalidUpdateIndex();\\n        emit UpdateToken(tokenId, index);\\n        _setTokenAux(tokenId, aux.setBitValueUint8(BITPOS_AUX_UPDATE_INDEX, index));\\n    }\\n\\n    function increaseCurrentUpdateIndex()\\n        external\\n        virtual\\n        onlyRole(UPDATER_ROLE)\\n        returns(uint8)\\n    {\\n        uint8 newIndex = currentUpdateIndex++;\\n        emit IncreaseUpdateIndex(newIndex);\\n        return newIndex;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Metadata functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        if (address(router) == address(0)) revert RouterNotSet();\\n        if (!_exists(tokenId)) revert TokenNonexistent(tokenId);\\n\\n        uint256 param = isLocked(tokenId) ? 1 : 0;\\n        param = param.setBitValueUint8(BITPOS_UPDATE_INDEX, _getTokenUpdateIndex(tokenId));\\n\\n        return router.getURI(tokenId, ownerOf(tokenId), param);\\n    }\\n\\n\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override {\\n        // reset SubIdForToken when tansfers\\n        if (from != address(0) && address(router) != address(0)) {\\n            router.resetTokenPriority(startTokenId);\\n        }\\n        super._afterTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/BitOperator.sol\": {\r\n      \"content\": \"//// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BitOperator{\\n    string private constant ERROR_OVERFLOW = \\\"position should overflow\\\";\\n    function getBitValueUint8(uint256 value, uint256 pos) internal pure returns(uint8){\\n        if (pos > 248) revert(ERROR_OVERFLOW);\\n        return uint8(value >> pos);\\n    }\\n\\n    function getBitValueBool(uint256 value, uint256 pos) internal pure returns(bool){\\n        if (pos > 255) revert(ERROR_OVERFLOW);\\n        return ((value >> pos) & 0x01 == 1);\\n    }\\n\\n    function setBitValueUint8(uint256 value, uint256 pos, uint8 set) internal pure returns(uint256){\\n        if (pos > 248) revert(ERROR_OVERFLOW);\\n        return (value & ~(0xFF << pos)) | (uint256(set) << pos);\\n    }\\n\\n    function setBitValueBool(uint256 value, uint256 pos, bool set) internal pure returns(uint256){\\n        if (pos > 255) revert(ERROR_OVERFLOW);\\n        return (value & ~(0x01 << pos)) | ((set ? uint256(1) : uint256(0)) << pos);\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/libs/ERC721AntiScamSalesInfo.sol\": {\r\n      \"content\": \"//// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n//import \\\"contract-allow-list/contracts/ERC721AntiScam/ERC721AntiScam.sol\\\";\\nimport \\\"./ERC721AntiScamSubset.sol\\\";\\n\\nabstract contract ERC721AntiScamSalesInfo is ERC721AntiScamSubset{\\n    /* ==================================================================\\n     * This section is derived from ERC721PsiAddressData\\n     * Splits the aux to record sales information on the \\\"allow list\\\"\\n     * ==================================================================*/\\n    // Mapping owner address to address data\\n    mapping(address => AddressData) _addressData;\\n\\n    // Compiler will pack this into a single 256bit word.\\n    struct AddressData {\\n        // Realistically, 2**64-1 is more than enough.\\n        uint64 balance;\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\n        uint64 numberMinted;\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\n        uint64 numberBurned;\\n        // For miscellaneous variable(s) pertaining to the address\\n        // (e.g. number of whitelist mint slots used).\\n        // If there are multiple variables, please pack them into a uint64.\\n        //uint64 aux;\\n        // Keeps track of recent sale index\\n        uint8 saleIndex;\\n        // Keeps track of the consumed amount of allocations in the recent sale\\n        uint16 numberConsumedInRecentSale;\\n        // New aux\\n        uint40 aux;\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) \\n        public \\n        view \\n        virtual \\n        override \\n        returns (uint) \\n    {\\n        require(owner != address(0), \\\"ERC721Psi: balance query for the zero address\\\");\\n        return uint256(_addressData[owner].balance);   \\n    }\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal override virtual {\\n        require(quantity < 2 ** 64);\\n        uint64 _quantity = uint64(quantity);\\n\\n        if(from != address(0)){\\n            _addressData[from].balance -= _quantity;\\n        } else {\\n            // Mint\\n            _addressData[to].numberMinted += _quantity;\\n        }\\n\\n        if(to != address(0)){\\n            _addressData[to].balance += _quantity;\\n        } else {\\n            // Burn\\n            _addressData[from].numberBurned += _quantity;\\n        }\\n        super._afterTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"contracts/libs/ERC721AntiScamSubset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n//import \\\"./IERC721AntiScam.sol\\\";\\nimport \\\"contract-allow-list/contracts/ERC721AntiScam/lockable/ERC721Lockable.sol\\\";\\nimport \\\"./ERC721RestrictApproveGlobalOnly.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title ERC721PsiBurnable with Anti Scam functions(Subset version)\\n/// @dev See readme.\\n\\nabstract contract ERC721AntiScamSubset is\\n    ERC721Lockable,\\n    ERC721RestrictApproveGlobalOnly,\\n    Ownable\\n{\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override(ERC721Lockable, ERC721RestrictApproveGlobalOnly)\\n        returns (bool)\\n    {\\n        if (isLocked(owner) || !_isAllowed(owner, operator)) {\\n            return false;\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override(ERC721Lockable, ERC721RestrictApproveGlobalOnly)\\n    {\\n        require(\\n            isLocked(msg.sender) == false || approved == false,\\n            \\\"Can not approve locked token\\\"\\n        );\\n        require(\\n            _isAllowed(operator) || approved == false,\\n            \\\"RestrictApprove: Can not approve locked token\\\"\\n        );\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function _beforeApprove(address to, uint256 tokenId)\\n        internal\\n        virtual\\n        override(ERC721Lockable, ERC721RestrictApproveGlobalOnly)\\n    {\\n        ERC721Lockable._beforeApprove(to, tokenId);\\n        ERC721RestrictApproveGlobalOnly._beforeApprove(to, tokenId);\\n    }\\n\\n    function approve(address to, uint256 tokenId)\\n        public\\n        virtual\\n        override(ERC721Lockable, ERC721RestrictApproveGlobalOnly)\\n    {\\n        _beforeApprove(to, tokenId);\\n        ERC721Psi.approve(to, tokenId);\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721Psi, ERC721Lockable) {\\n        ERC721Lockable._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override(ERC721Lockable, ERC721RestrictApproveGlobalOnly) {\\n        ERC721Lockable._afterTokenTransfers(from, to, startTokenId, quantity);\\n        ERC721RestrictApproveGlobalOnly._afterTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721Lockable, ERC721RestrictApproveGlobalOnly)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Psi.supportsInterface(interfaceId) ||\\n            ERC721Lockable.supportsInterface(interfaceId) ||\\n            ERC721RestrictApproveGlobalOnly.supportsInterface(interfaceId) /*||\\n            interfaceId == type(IERC721AntiScam).interfaceId*/;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC721BasicFrame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"operator-filter-registry/src/DefaultOperatorFilterer.sol\\\";\\nimport \\\"contract-allow-list/contracts/proxy/interface/IContractAllowListProxy.sol\\\";\\nimport \\\"./ERC721AntiScamSalesInfo.sol\\\";\\nimport \\\"./ISalesItem.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nabstract contract ERC721BasicFrameControlable is \\n    IERC2981,\\n    ISalesItem,\\n    DefaultOperatorFilterer,\\n    AccessControl,\\n    Ownable,\\n    ERC721AntiScamSalesInfo\\n{\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Constants\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    uint256 public immutable MAX_SUPPLY;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    bytes32 public constant SELLER_ROLE = keccak256(\\\"SELLER_ROLE\\\");\\n    bytes32 public constant UPDATER_ROLE = keccak256(\\\"UPDATER_ROLE\\\");\\n\\n    constructor(uint256 maxSupply){\\n        MAX_SUPPLY = maxSupply;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Variables\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    // Mapping from tokenId to uint256 aux\\n    mapping(uint256 => uint256) private _tokenAux;\\n\\n    // royalty\\n    address public royaltyAddress;\\n    uint96 public royaltyFee = 1000; // default:10%\\n\\n    // SBT\\n    bool public isSBT;\\n\\n    /*\\n    // tokenId -> unlock time\\n    mapping(uint256 => uint256) unlockTokenTimestamp;\\n    // wallet -> unlock time\\n    mapping(address => uint256) unlockWalletTimestamp;\\n    uint256 public unlockLeadTime = 3 hours;\\n    */\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Error Functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    error ZeroAddress();\\n    error InvlidRoyaltyFee(uint256 fee);\\n    error MaxSupplyExceeded();\\n    error ProhibitedBecauseSBT();\\n    error NotAllowedByCAL(address operator);\\n    error ArrayLengthIsZero();\\n    error NotTokenHolder();\\n    error WalletLockNotAllowedByOthers();\\n    error InvalidRole();\\n    error TokenNonexistent(uint256 tokenId);\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // External Mint / Burn function\\n    ///////////////////////////////////////////////////////////////////////////\\n    function externalMint(address to, uint256 quantity) external onlyRole(MINTER_ROLE) {\\n        _mint(to, quantity);\\n    }\\n\\n    function sellerMint(address to, uint256 quantity) external onlyRole(SELLER_ROLE) {\\n        _mint(to, quantity);\\n    }\\n\\n    function externalBurn(uint256 tokenId) external onlyRole(BURNER_ROLE) {\\n        _burn(tokenId);\\n    }\\n\\n    function sellerBurn(uint256 tokenId) external onlyRole(SELLER_ROLE) {\\n        _burn(tokenId);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Override function : _mint\\n    ///////////////////////////////////////////////////////////////////////////\\n    function _mint(address to, uint256 quantity) internal override {\\n        if (quantity + totalSupply() > MAX_SUPPLY) revert MaxSupplyExceeded();\\n        super._mint(to, quantity);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Number burned function\\n    ///////////////////////////////////////////////////////////////////////////\\n    function burned() external view returns(uint256){\\n        return _burned();\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Setter functions : Aux region of _addressData\\n    ///////////////////////////////////////////////////////////////////////////\\n\\n    function setConsumedAllocation(address _target, uint8 _currentSaleIndex, uint16 _consumed)\\n        external\\n        virtual\\n        onlyRole(SELLER_ROLE)\\n    {\\n        // Grab memory\\n        AddressData memory data = _addressData[_target];\\n        data.saleIndex = _currentSaleIndex;\\n        data.numberConsumedInRecentSale = _consumed;\\n        _addressData[_target] = data;\\n    }\\n\\n    function addConsumedAllocation(address _target, uint8 _currentSaleIndex, uint16 _consumed)\\n        external\\n        virtual\\n        onlyRole(SELLER_ROLE)\\n    {\\n        // Grab memory\\n        AddressData memory data = _addressData[_target];\\n        // If previous sale was recorded in the data, updates it with the current sale\\n        if (data.saleIndex != _currentSaleIndex){\\n            data.saleIndex = _currentSaleIndex;\\n            data.numberConsumedInRecentSale = _consumed;\\n        } else {\\n            data.numberConsumedInRecentSale += _consumed;\\n        }\\n        _addressData[_target] = data;\\n    }\\n\\n    function _setAddressAux(address _target, uint40 _aux)\\n        internal\\n        virtual\\n    {\\n        _addressData[_target].aux = _aux;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Setter functions : TokenId Aux\\n    ///////////////////////////////////////////////////////////////////////////\\n    function _setTokenAux(uint256 tokenId, uint256 aux) internal virtual{\\n        _tokenAux[tokenId] = aux;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Setter functions : ERC2981\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setRoyaltyAddress(address _new) external onlyAdmin {\\n        if (_new == address(0)) revert ZeroAddress();\\n        royaltyAddress = _new;\\n    }\\n\\n    function setRoyaltyFee(uint96 _new) external onlyAdmin {\\n        if (_new > 10000) revert InvlidRoyaltyFee(_new);\\n        royaltyFee = _new;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Setter functions : Soul Bound Tokenizer\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setIsSBT(bool _state) external onlyAdmin {\\n        isSBT = _state;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Essential getter functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(AccessControl, IERC165, ERC721AntiScamSubset)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC2981).interfaceId ||\\n            interfaceId == type(ISalesItem).interfaceId ||\\n            AccessControl.supportsInterface(interfaceId) ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // AntiScam functions : Enabler\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setEnableRestrict(bool value) external onlyAdmin {\\n        enableRestrict = value;\\n    }\\n\\n    function setEnableLock(bool value) external onlyAdmin {\\n        enableLock = value;\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Override functions : IERC721RestrictApprove\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setCALLevel(uint256 level) external onlyAdmin{\\n        CALLevel = level;\\n    }\\n\\n    function setCAL(address calAddress) external onlyAdmin{\\n        _setCAL(calAddress);\\n    }\\n\\n    /*\\n    function addLocalContractAllowList(address transferer) external onlyAdmin{\\n        _addLocalContractAllowList(transferer);\\n    }\\n\\n    function removeLocalContractAllowList(address transferer) external onlyAdmin{\\n        _removeLocalContractAllowList(transferer);\\n    }\\n\\n    function getLocalContractAllowList() external view returns(address[] memory){\\n        return _getLocalContractAllowList();\\n    }\\n    */\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // TimeLock derived from default-nft-contract\\n    // https://github.com/Lavulite/default-nft-contract/blob/main/contracts/tokens/NFT/base/ERC721AntiScamTimeLock.sol\\n    ///////////////////////////////////////////////////////////////////////////\\n    /*\\n    function setWalletLock(address to, LockStatus lockStatus)\\n        external\\n        override\\n    {\\n        if(msg.sender != to) revert WalletLockNotAllowedByOthers();\\n\\n        if (\\n            walletLock[to] == LockStatus.Lock && lockStatus != LockStatus.Lock\\n        ) {\\n            unlockWalletTimestamp[to] = block.timestamp;\\n        }\\n\\n        _setWalletLock(to, lockStatus);\\n    }\\n\\n    function _isTokenLockToUnlock(uint256 tokenId, LockStatus newLockStatus)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        if (newLockStatus == LockStatus.UnLock) {\\n            LockStatus currentWalletLock = walletLock[msg.sender];\\n            bool isWalletLock_TokenLockOrUnset = (currentWalletLock ==\\n                LockStatus.Lock &&\\n                tokenLock[tokenId] != LockStatus.UnLock);\\n            bool isWalletUnlockOrUnset_TokenLock = (currentWalletLock !=\\n                LockStatus.Lock &&\\n                tokenLock[tokenId] == LockStatus.Lock);\\n\\n            return\\n                isWalletLock_TokenLockOrUnset ||\\n                isWalletUnlockOrUnset_TokenLock;\\n        } else if (newLockStatus == LockStatus.UnSet) {\\n            LockStatus currentWalletLock = walletLock[msg.sender];\\n            bool isNotWalletLock = currentWalletLock != LockStatus.Lock;\\n            bool isTokenLock = tokenLock[tokenId] == LockStatus.Lock;\\n\\n            return isNotWalletLock && isTokenLock;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function setTokenLock(uint256[] calldata tokenIds, LockStatus newLockStatus)\\n        external\\n        override\\n    {\\n        if (tokenIds.length == 0) revert ArrayLengthIsZero();\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if(msg.sender != ownerOf(tokenIds[i])) revert NotTokenHolder();\\n        //}\\n\\n        //for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (_isTokenLockToUnlock(tokenIds[i], newLockStatus)) {\\n                unlockTokenTimestamp[tokenIds[i]] = block.timestamp;\\n            }\\n        }\\n        _setTokenLock(tokenIds, newLockStatus);\\n    }\\n\\n    function _isTokenTimeLock(uint256 tokenId) private view returns (bool) {\\n        return unlockTokenTimestamp[tokenId] + unlockLeadTime > block.timestamp;\\n    }\\n\\n    function _isWalletTimeLock(uint256 tokenId) private view returns (bool) {\\n        return\\n            unlockWalletTimestamp[ownerOf(tokenId)] + unlockLeadTime >\\n            block.timestamp;\\n    }\\n\\n    function isLocked(uint256 tokenId)\\n        public\\n        view\\n///        override(IERC721Lockable, ERC721Lockable)\\n        override(ERC721Lockable)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Lockable.isLocked(tokenId) ||\\n            _isTokenTimeLock(tokenId) ||\\n            _isWalletTimeLock(tokenId);\\n    }\\n\\n    function setUnlockLeadTime(uint256 value) external onlyAdmin {\\n        unlockLeadTime = value;\\n    }\\n    */\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Override functions for support interface of IERC721BasicFrame\\n    ///////////////////////////////////////////////////////////////////////////\\n    /*\\n    function ownerOf(uint256 tokenId) public view virtual override(IERC721BasicFrame, ERC721Psi) returns (address){\\n        return ERC721Psi.ownerOf(tokenId);\\n    }\\n\\n    function totalSupply() public view virtual override(IERC721BasicFrame, ERC721PsiBurnable) returns (uint256){\\n        return ERC721PsiBurnable.totalSupply();\\n    }\\n    */\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Override functions : ERC721Locable\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setTokenLock(uint256[] calldata tokenIds, LockStatus lockStatus)\\n        external\\n        virtual\\n        override\\n    {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (msg.sender != ownerOf(tokenIds[i])) revert NotTokenHolder();\\n        }\\n        _setTokenLock(tokenIds, lockStatus);\\n    }\\n\\n    function setWalletLock(address to, LockStatus lockStatus)\\n        external\\n        virtual\\n        override\\n    {\\n        require(to == msg.sender, \\\"not yourself.\\\");\\n        _setWalletLock(to, lockStatus);\\n    }\\n\\n    function setContractLock(LockStatus lockStatus) external onlyAdmin{\\n        _setContractLock(lockStatus);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Internal State functions : TokenId Aux\\n    ///////////////////////////////////////////////////////////////////////////\\n    function _getAddressAux(address _target) internal virtual view returns(uint40){\\n        return _addressData[_target].aux;\\n    }\\n    \\n    function _getTokenAux(uint256 tokenId) internal virtual view returns(uint256){\\n        return _tokenAux[tokenId];\\n    }\\n\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Modifiers\\n    ///////////////////////////////////////////////////////////////////////////\\n    modifier onlyAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n\\n}\\n\\nabstract contract ERC721BasicFrame is ERC721BasicFrameControlable {\\n    using Strings for uint256;\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Constructor\\n    ///////////////////////////////////////////////////////////////////////////\\n    constructor(string memory _name, string memory _symbol, uint256 maxSupply) \\n        ERC721Psi(_name, _symbol)\\n        ERC721BasicFrameControlable(maxSupply)\\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // State functions : Aux region of _addressData\\n    ///////////////////////////////////////////////////////////////////////////\\n    /*\\n     * @dev Returns consumed allocation in the current sale\\n     */\\n    function getConsumedAllocation(address _target, uint8 _currentSaleIndex) external view virtual returns(uint16){\\n        \\n        // Grab stuck\\n        AddressData memory data = _addressData[_target];\\n        // If previous sale was recorded in the data, updates it with the current sale\\n        if (data.saleIndex != _currentSaleIndex){\\n            return 0;\\n        } \\n        return data.numberConsumedInRecentSale;\\n    }\\n    \\n    ///////////////////////////////////////////////////////////////////////////\\n    // Override functions : ERC2981\\n    ///////////////////////////////////////////////////////////////////////////\\n    function royaltyInfo(\\n        uint256, /*_tokenId*/\\n        uint256 _salePrice\\n    ) public view virtual override returns (address, uint256) {\\n        return (royaltyAddress, (_salePrice * uint256(royaltyFee)) / 10000);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Transfer functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override onlyAllowedOperator(from) {\\n        super.transferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId);\\n    }\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public override onlyAllowedOperator(from) {\\n        super.safeTransferFrom(from, to, tokenId, data);\\n    }\\n\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual override {\\n        if (\\n            isSBT &&\\n            from != address(0) &&\\n            to != address(0x000000000000000000000000000000000000dEaD)\\n        ) revert ProhibitedBecauseSBT();\\n        super._beforeTokenTransfers(from, to, startTokenId, quantity);\\n    }\\n\\n    ///////////////////////////////////////////////////////////////////////////\\n    // Approve functions\\n    ///////////////////////////////////////////////////////////////////////////\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        if (approved){\\n            if (isSBT) revert ProhibitedBecauseSBT();\\n        }\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function approve(address operator, uint256 tokenId)\\n        public\\n        virtual\\n        override\\n        onlyAllowedOperatorApproval(operator)\\n    {\\n        if (operator != address(0)) {\\n            if (isSBT) revert ProhibitedBecauseSBT();\\n        }\\n        super.approve(operator, tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ERC721RestrictApproveGlobalOnly.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"erc721psi/contracts/extension/ERC721PsiBurnable.sol\\\";\\nimport \\\"./IERC721RestrictApproveGlobalOnly.sol\\\";\\n//import \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"contract-allow-list/contracts/proxy/interface/IContractAllowListProxy.sol\\\";\\n\\n/// @title ERC721PsiBurnable with RestrictApprove without Local CAL List.\\n/// @dev See readme.\\n\\nabstract contract ERC721RestrictApproveGlobalOnly is ERC721PsiBurnable, IERC721RestrictApproveGlobalOnly {\\n    //using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IContractAllowListProxy public CAL;\\n    //EnumerableSet.AddressSet localAllowedAddresses;\\n\\n    modifier onlyHolder(uint256 tokenId) {\\n        require(\\n            msg.sender == ownerOf(tokenId),\\n            \\\"RestrictApprove: operation is only holder.\\\"\\n        );\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n    変数\\n    //////////////////////////////////////////////////////////////*/\\n    bool public enableRestrict = true;\\n\\n    // token lock\\n    mapping(uint256 => uint256) public tokenCALLevel;\\n\\n    // wallet lock\\n    mapping(address => uint256) public walletCALLevel;\\n\\n    // contract lock\\n    uint256 public CALLevel = 1;\\n\\n    /*///////////////////////////////////////////////////////////////\\n    Approve抑制機能ロジック\\n    //////////////////////////////////////////////////////////////*/\\n    /*\\n    function _addLocalContractAllowList(address transferer)\\n        internal\\n        virtual\\n    {\\n        localAllowedAddresses.add(transferer);\\n        emit LocalCalAdded(msg.sender, transferer);\\n    }\\n\\n    function _removeLocalContractAllowList(address transferer)\\n        internal\\n        virtual\\n    {\\n        localAllowedAddresses.remove(transferer);\\n        emit LocalCalRemoved(msg.sender, transferer);\\n    }\\n\\n    function _getLocalContractAllowList()\\n        internal\\n        virtual\\n        view\\n        returns(address[] memory)\\n    {\\n        return localAllowedAddresses.values();\\n    }\\n\\n    function _isLocalAllowed(address transferer)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return localAllowedAddresses.contains(transferer);\\n    }\\n    */\\n\\n    function _isAllowed(address transferer)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        return _isAllowed(msg.sender, transferer);\\n    }\\n\\n    function _isAllowed(uint256 tokenId, address transferer)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 level = _getCALLevel(msg.sender, tokenId);\\n        return _isAllowed(transferer, level);\\n    }\\n\\n    function _isAllowed(address holder, address transferer)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        uint256 level = _getCALLevel(holder);\\n        return _isAllowed(transferer, level);\\n    }\\n\\n    function _isAllowed(address transferer, uint256 level)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        if (!enableRestrict) {\\n            return true;\\n        }\\n\\n        return /*_isLocalAllowed(transferer) ||*/ CAL.isAllowed(transferer, level);\\n    }\\n\\n    function _getCALLevel(address holder, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (tokenCALLevel[tokenId] > 0) {\\n            return tokenCALLevel[tokenId];\\n        }\\n\\n        return _getCALLevel(holder);\\n    }\\n\\n    function _getCALLevel(address holder)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        if (walletCALLevel[holder] > 0) {\\n            return walletCALLevel[holder];\\n        }\\n\\n        return CALLevel;\\n    }\\n\\n    function _setCAL(address _cal) internal virtual {\\n        CAL = IContractAllowListProxy(_cal);\\n    }\\n\\n    function _deleteTokenCALLevel(uint256 tokenId) internal virtual {\\n        delete tokenCALLevel[tokenId];\\n    }\\n\\n    function setTokenCALLevel(uint256 tokenId, uint256 level)\\n        external\\n        virtual\\n        onlyHolder(tokenId)\\n    {\\n        tokenCALLevel[tokenId] = level;\\n    }\\n\\n    function setWalletCALLevel(uint256 level)\\n        external\\n        virtual\\n    {\\n        walletCALLevel[msg.sender] = level;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                              OVERRIDES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        if (_isAllowed(owner, operator) == false) {\\n            return false;\\n        }\\n        return super.isApprovedForAll(owner, operator);\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            _isAllowed(operator) || approved == false,\\n            \\\"RestrictApprove: Can not approve locked token\\\"\\n        );\\n        super.setApprovalForAll(operator, approved);\\n    }\\n\\n    function _beforeApprove(address to, uint256 tokenId)\\n        internal\\n        virtual\\n    {\\n        if (to != address(0)) {\\n            require(_isAllowed(tokenId, to), \\\"RestrictApprove: The contract is not allowed.\\\");\\n        }\\n    }\\n\\n    function approve(address to, uint256 tokenId)\\n        public\\n        virtual\\n        override\\n    {\\n        _beforeApprove(to, tokenId);\\n        super.approve(to, tokenId);\\n    }\\n\\n    function _afterTokenTransfers(\\n        address from,\\n        address, /*to*/\\n        uint256 startTokenId,\\n        uint256 /*quantity*/\\n    ) internal virtual override {\\n        // 転送やバーンにおいては、常にstartTokenIdは TokenIDそのものとなります。\\n        if (from != address(0)) {\\n            // CALレベルをデフォルトに戻す。\\n            _deleteTokenCALLevel(startTokenId);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721RestrictApproveGlobalOnly).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IERC721RestrictApproveGlobalOnly.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @title IERC721RestrictApprove\\n/// @dev Approve抑制機能付きコントラクトのインターフェース\\n/// @author Lavulite\\n\\ninterface IERC721RestrictApproveGlobalOnly {\\n    /**\\n     * @dev CALレベルが変更された場合のイベント\\n     */\\n    event CalLevelChanged(address indexed operator, uint256 indexed level);\\n    \\n    /**\\n     * @dev LocalContractAllowListnに追加された場合のイベント\\n     */\\n    event LocalCalAdded(address indexed operator, address indexed transferer);\\n\\n    /**\\n     * @dev LocalContractAllowListnに削除された場合のイベント\\n     */\\n    event LocalCalRemoved(address indexed operator, address indexed transferer);\\n\\n    /**\\n     * @dev CALを利用する場合のCALのレベルを設定する。レベルが高いほど、許可されるコントラクトの範囲が狭い。\\n     */\\n    function setCALLevel(uint256 level) external;\\n\\n    /**\\n     * @dev CALのアドレスをセットする。\\n     */\\n    function setCAL(address calAddress) external;\\n\\n    /**\\n     * @dev CALのリストに無い独自の許可アドレスを追加する場合、こちらにアドレスを記載する。\\n     */\\n    //function addLocalContractAllowList(address transferer) external;\\n\\n    /**\\n     * @dev CALのリストにある独自の許可アドレスを削除する場合、こちらにアドレスを記載する。\\n     */\\n    //function removeLocalContractAllowList(address transferer) external;\\n\\n    /**\\n     * @dev CALのリストにある独自の許可アドレスの一覧を取得する。\\n     */\\n    //function getLocalContractAllowList() external view returns(address[] memory);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/libs/IMetadataRouter.sol\": {\r\n      \"content\": \"//// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IMetadataRouter{\\n/*\\tenum NFTStandard{\\n\\t\\tERC721,\\n\\t\\tERC1155\\n\\t}*/\\n\\tstruct SubNFT {\\n\\t\\taddress addr;\\n//\\t\\tNFTStandard standard;\\n\\t\\tuint256 tokenId;\\n\\t\\tstring baseURI;\\n\\t}\\n    /**\\n     * @dev Emitted when subNFT of `subId` is updated.\\n     */\\n\\tevent UpdateSubNFT(uint16 indexed subId, address indexed addr, uint256 indexed tokenId, string key);\\n    /**\\n     * @dev Emitted when the first `subId` of `tokenId` is updated.\\n     */\\n\\tevent UpdateSubIdForToken(uint256 tokenId, uint16 subId);\\n    /**\\n     * @dev Emitted when global priority list is updated.\\n     */\\n\\tevent UpdateGlobalPriority();\\n    /**\\n     * @dev Emitted when main NFT contract address `addr` is updated.\\n     */\\n\\tevent UpdateMainNFT(address indexed addr);\\n\\n    /**\\n     * @dev Returns the subNFT infromation as SubNFT struct of `subId` index.\\n     */\\n\\tfunction subNFTs(uint16) external view returns(SubNFT memory);//(address, NFTStandard, uint256, string memory);\\n\\n    /**\\n     * @dev Returns the first pritoriy `subId` of `tokenId` token.\\n     */\\n\\tfunction tokenPriority(uint256 tokenId) external view returns(uint16 subId);\\n\\n    /**\\n     * @dev Returns the global priority subId array.\\n     */\\n\\tfunction globalPriorityArray() external view returns(uint16[] memory subIds);\\n\\n    /**\\n     * @dev Returns the global priority `subId` at `index`.\\n     */\\n\\tfunction globalPriority(uint256 index) external view returns(uint16 subId);\\n\\tfunction getGlobalPriorityLength() external view returns(uint256);\\n\\tfunction mainNFT() external view returns(IERC721);\\n\\tfunction getURI(uint256 tokenId, address owner, uint256 param) external view returns(string memory);\\n\\tfunction getTotalSubNFTs() external view returns(uint256 total);\\n\\n    /**\\n     * @dev append new SubNFT `info` on subNFTs array.\\n\\t * Returns provided `sudId` starting from 1.\\n     */\\n\\tfunction appendSubNFT(SubNFT memory info) external returns(uint16 subId);\\n\\tfunction updateSubNFT(uint16 subId, SubNFT memory info) external;\\n\\tfunction disableSubNFT(uint16 subId) external;\\n\\tfunction setTokenPriority(uint256 tokenId, uint16 subId) external;\\n\\tfunction resetTokenPriority(uint256 tokenId) external;\\n\\tfunction setGlobalPriority(uint16[] memory subIds) external;\\n\\tfunction setMainNFT(IERC721 addr) external;\\n\\n}\"\r\n    },\r\n    \"contracts/libs/ISalesItem.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISalesItem is IERC165{\\n    function sellerMint(address to, uint256 quantity) external;\\n    function sellerBurn(uint256 tokenId) external;\\n    function burned() external view returns(uint256);\\n    function getConsumedAllocation(address _target, uint8 _currentSaleIndex) external view returns(uint16);\\n    function setConsumedAllocation(address _target, uint8 _currentSaleIndex, uint16 _consumed) external;\\n    function addConsumedAllocation(address _target, uint8 _currentSaleIndex, uint16 _consumed) external;\\n}\\n\"\r\n    },\r\n    \"erc721psi/contracts/ERC721Psi.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n  ______ _____   _____ ______ ___  __ _  _  _ \\n |  ____|  __ \\\\ / ____|____  |__ \\\\/_ | || || |\\n | |__  | |__) | |        / /   ) || | \\\\| |/ |\\n |  __| |  _  /| |       / /   / / | |\\\\_   _/ \\n | |____| | \\\\ \\\\| |____  / /   / /_ | |  | |   \\n |______|_|  \\\\_\\\\\\\\_____|/_/   |____||_|  |_|   \\n\\n - github: https://github.com/estarriolvetch/ERC721Psi\\n - npm: https://www.npmjs.com/package/erc721psi\\n                                          \\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"solidity-bits/contracts/BitMaps.sol\\\";\\n\\n\\ncontract ERC721Psi is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n    using BitMaps for BitMaps.BitMap;\\n\\n    BitMaps.BitMap private _batchHead;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) internal _owners;\\n    uint256 private _currentIndex;\\n\\n    mapping(uint256 => address) private _tokenApprovals;\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal pure returns (uint256) {\\n        // It will become modifiable in the future versions\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view virtual returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view virtual returns (uint256) {\\n        return _currentIndex - _startTokenId();\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) \\n        public \\n        view \\n        virtual \\n        override \\n        returns (uint) \\n    {\\n        require(owner != address(0), \\\"ERC721Psi: balance query for the zero address\\\");\\n\\n        uint count;\\n        for( uint i = _startTokenId(); i < _nextTokenId(); ++i ){\\n            if(_exists(i)){\\n                if( owner == ownerOf(i)){\\n                    ++count;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        (address owner, ) = _ownerAndBatchHeadOf(tokenId);\\n        return owner;\\n    }\\n\\n    function _ownerAndBatchHeadOf(uint256 tokenId) internal view returns (address owner, uint256 tokenIdBatchHead){\\n        require(_exists(tokenId), \\\"ERC721Psi: owner query for nonexistent token\\\");\\n        tokenIdBatchHead = _getBatchHead(tokenId);\\n        owner = _owners[tokenIdBatchHead];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Psi: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721Psi: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721Psi: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Psi: approved query for nonexistent token\\\"\\n        );\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved)\\n        public\\n        virtual\\n        override\\n    {\\n        require(operator != _msgSender(), \\\"ERC721Psi: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(\\n            _isApprovedOrOwner(_msgSender(), tokenId),\\n            \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(\\n            _checkOnERC721Received(from, to, tokenId, 1,_data),\\n            \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return tokenId < _nextTokenId() && _startTokenId() <= tokenId;\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId)\\n        internal\\n        view\\n        virtual\\n        returns (bool)\\n    {\\n        require(\\n            _exists(tokenId),\\n            \\\"ERC721Psi: operator query for nonexistent token\\\"\\n        );\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal virtual {\\n        _safeMint(to, quantity, \\\"\\\");\\n    }\\n\\n    \\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal virtual {\\n        uint256 nextTokenId = _nextTokenId();\\n        _mint(to, quantity);\\n        require(\\n            _checkOnERC721Received(address(0), to, nextTokenId, quantity, _data),\\n            \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n\\n    function _mint(\\n        address to,\\n        uint256 quantity\\n    ) internal virtual {\\n        uint256 nextTokenId = _nextTokenId();\\n        \\n        require(quantity > 0, \\\"ERC721Psi: quantity must be greater 0\\\");\\n        require(to != address(0), \\\"ERC721Psi: mint to the zero address\\\");\\n        \\n        _beforeTokenTransfers(address(0), to, nextTokenId, quantity);\\n        _currentIndex += quantity;\\n        _owners[nextTokenId] = to;\\n        _batchHead.set(nextTokenId);\\n        _afterTokenTransfers(address(0), to, nextTokenId, quantity);\\n        \\n        // Emit events\\n        for(uint256 tokenId=nextTokenId; tokenId < nextTokenId + quantity; tokenId++){\\n            emit Transfer(address(0), to, tokenId);\\n        } \\n    }\\n\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        (address owner, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\\n\\n        require(\\n            owner == from,\\n            \\\"ERC721Psi: transfer of token that is not own\\\"\\n        );\\n        require(to != address(0), \\\"ERC721Psi: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);   \\n\\n        uint256 subsequentTokenId = tokenId + 1;\\n\\n        if(!_batchHead.get(subsequentTokenId) &&  \\n            subsequentTokenId < _nextTokenId()\\n        ) {\\n            _owners[subsequentTokenId] = from;\\n            _batchHead.set(subsequentTokenId);\\n        }\\n\\n        _owners[tokenId] = to;\\n        if(tokenId != tokenIdBatchHead) {\\n            _batchHead.set(tokenId);\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param startTokenId uint256 the first ID of the tokens to be transferred\\n     * @param quantity uint256 amount of the tokens to be transfered.\\n     * @param _data bytes optional data to send along with the call\\n     * @return r bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) private returns (bool r) {\\n        if (to.isContract()) {\\n            r = true;\\n            for(uint256 tokenId = startTokenId; tokenId < startTokenId + quantity; tokenId++){\\n                try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                    r = r && retval == IERC721Receiver.onERC721Received.selector;\\n                } catch (bytes memory reason) {\\n                    if (reason.length == 0) {\\n                        revert(\\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\");\\n                    } else {\\n                        assembly {\\n                            revert(add(32, reason), mload(reason))\\n                        }\\n                    }\\n                }\\n            }\\n            return r;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _getBatchHead(uint256 tokenId) internal view returns (uint256 tokenIdBatchHead) {\\n        tokenIdBatchHead = _batchHead.scanForward(tokenId); \\n    }\\n\\n\\n    function totalSupply() public virtual view returns (uint256) {\\n        return _totalMinted();\\n    }\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * This function is compatiable with ERC721AQueryable.\\n     */\\n    function tokensOfOwner(address owner) external view virtual returns (uint256[] memory) {\\n        unchecked {\\n            uint256 tokenIdsIdx;\\n            uint256 tokenIdsLength = balanceOf(owner);\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\n                if (_exists(i)) {\\n                    if (ownerOf(i) == owner) {\\n                        tokenIds[tokenIdsIdx++] = i;\\n                    }\\n                }\\n            }\\n            return tokenIds;   \\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n     * minting.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n}\"\r\n    },\r\n    \"erc721psi/contracts/extension/ERC721PsiBurnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n  ______ _____   _____ ______ ___  __ _  _  _ \\n |  ____|  __ \\\\ / ____|____  |__ \\\\/_ | || || |\\n | |__  | |__) | |        / /   ) || | \\\\| |/ |\\n |  __| |  _  /| |       / /   / / | |\\\\_   _/ \\n | |____| | \\\\ \\\\| |____  / /   / /_ | |  | |   \\n |______|_|  \\\\_\\\\\\\\_____|/_/   |____||_|  |_|   \\n                                              \\n                                            \\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"solidity-bits/contracts/BitMaps.sol\\\";\\nimport \\\"../ERC721Psi.sol\\\";\\n\\n\\nabstract contract ERC721PsiBurnable is ERC721Psi {\\n    using BitMaps for BitMaps.BitMap;\\n    BitMaps.BitMap private _burnedToken;\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address from = ownerOf(tokenId);\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n        _burnedToken.set(tokenId);\\n        \\n        emit Transfer(from, address(0), tokenId);\\n\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view override virtual returns (bool){\\n        if(_burnedToken.get(tokenId)) {\\n            return false;\\n        } \\n        return super._exists(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalMinted() - _burned();\\n    }\\n\\n    /**\\n     * @dev Returns number of token burned.\\n     */\\n    function _burned() internal view returns (uint256 burned){\\n        uint256 startBucket = _startTokenId() >> 8;\\n        uint256 lastBucket = (_nextTokenId() >> 8) + 1;\\n\\n        for(uint256 i=startBucket; i < lastBucket; i++) {\\n            uint256 bucket = _burnedToken.getBucket(i);\\n            burned += _popcount(bucket);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns number of set bits.\\n     */\\n    function _popcount(uint256 x) private pure returns (uint256 count) {\\n        unchecked{\\n            for (count=0; x!=0; count++)\\n                x &= x - 1;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"operator-filter-registry/src/DefaultOperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {OperatorFilterer} from \\\"./OperatorFilterer.sol\\\";\\n\\n/**\\n * @title  DefaultOperatorFilterer\\n * @notice Inherits from OperatorFilterer and automatically subscribes to the default OpenSea subscription.\\n */\\nabstract contract DefaultOperatorFilterer is OperatorFilterer {\\n    address constant DEFAULT_SUBSCRIPTION = address(0x3cc6CddA760b79bAfa08dF41ECFA224f810dCeB6);\\n\\n    constructor() OperatorFilterer(DEFAULT_SUBSCRIPTION, true) {}\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/IOperatorFilterRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IOperatorFilterRegistry {\\n    function isOperatorAllowed(address registrant, address operator) external view returns (bool);\\n    function register(address registrant) external;\\n    function registerAndSubscribe(address registrant, address subscription) external;\\n    function registerAndCopyEntries(address registrant, address registrantToCopy) external;\\n    function unregister(address addr) external;\\n    function updateOperator(address registrant, address operator, bool filtered) external;\\n    function updateOperators(address registrant, address[] calldata operators, bool filtered) external;\\n    function updateCodeHash(address registrant, bytes32 codehash, bool filtered) external;\\n    function updateCodeHashes(address registrant, bytes32[] calldata codeHashes, bool filtered) external;\\n    function subscribe(address registrant, address registrantToSubscribe) external;\\n    function unsubscribe(address registrant, bool copyExistingEntries) external;\\n    function subscriptionOf(address addr) external returns (address registrant);\\n    function subscribers(address registrant) external returns (address[] memory);\\n    function subscriberAt(address registrant, uint256 index) external returns (address);\\n    function copyEntriesOf(address registrant, address registrantToCopy) external;\\n    function isOperatorFiltered(address registrant, address operator) external returns (bool);\\n    function isCodeHashOfFiltered(address registrant, address operatorWithCode) external returns (bool);\\n    function isCodeHashFiltered(address registrant, bytes32 codeHash) external returns (bool);\\n    function filteredOperators(address addr) external returns (address[] memory);\\n    function filteredCodeHashes(address addr) external returns (bytes32[] memory);\\n    function filteredOperatorAt(address registrant, uint256 index) external returns (address);\\n    function filteredCodeHashAt(address registrant, uint256 index) external returns (bytes32);\\n    function isRegistered(address addr) external returns (bool);\\n    function codeHashOf(address addr) external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"operator-filter-registry/src/OperatorFilterer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport {IOperatorFilterRegistry} from \\\"./IOperatorFilterRegistry.sol\\\";\\n\\n/**\\n * @title  OperatorFilterer\\n * @notice Abstract contract whose constructor automatically registers and optionally subscribes to or copies another\\n *         registrant's entries in the OperatorFilterRegistry.\\n * @dev    This smart contract is meant to be inherited by token contracts so they can use the following:\\n *         - `onlyAllowedOperator` modifier for `transferFrom` and `safeTransferFrom` methods.\\n *         - `onlyAllowedOperatorApproval` modifier for `approve` and `setApprovalForAll` methods.\\n */\\nabstract contract OperatorFilterer {\\n    error OperatorNotAllowed(address operator);\\n\\n    IOperatorFilterRegistry public constant OPERATOR_FILTER_REGISTRY =\\n        IOperatorFilterRegistry(0x000000000000AAeB6D7670E522A718067333cd4E);\\n\\n    constructor(address subscriptionOrRegistrantToCopy, bool subscribe) {\\n        // If an inheriting token contract is deployed to a network without the registry deployed, the modifier\\n        // will not revert, but the contract will need to be registered with the registry once it is deployed in\\n        // order for the modifier to filter addresses.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (subscribe) {\\n                OPERATOR_FILTER_REGISTRY.registerAndSubscribe(address(this), subscriptionOrRegistrantToCopy);\\n            } else {\\n                if (subscriptionOrRegistrantToCopy != address(0)) {\\n                    OPERATOR_FILTER_REGISTRY.registerAndCopyEntries(address(this), subscriptionOrRegistrantToCopy);\\n                } else {\\n                    OPERATOR_FILTER_REGISTRY.register(address(this));\\n                }\\n            }\\n        }\\n    }\\n\\n    modifier onlyAllowedOperator(address from) virtual {\\n        // Allow spending tokens from addresses with balance\\n        // Note that this still allows listings and marketplaces with escrow to transfer tokens if transferred\\n        // from an EOA.\\n        if (from != msg.sender) {\\n            _checkFilterOperator(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAllowedOperatorApproval(address operator) virtual {\\n        _checkFilterOperator(operator);\\n        _;\\n    }\\n\\n    function _checkFilterOperator(address operator) internal view virtual {\\n        // Check registry code length to facilitate testing in environments without a deployed registry.\\n        if (address(OPERATOR_FILTER_REGISTRY).code.length > 0) {\\n            if (!OPERATOR_FILTER_REGISTRY.isOperatorAllowed(address(this), operator)) {\\n                revert OperatorNotAllowed(operator);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bits/contracts/BitMaps.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n   _____       ___     ___ __           ____  _ __      \\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\n                           /____/                        \\n\\n- npm: https://www.npmjs.com/package/solidity-bits\\n- github: https://github.com/estarriolvetch/solidity-bits\\n\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BitScan.sol\\\";\\n\\n/**\\n * @dev This Library is a modified version of Openzeppelin's BitMaps library.\\n * Functions of finding the index of the closest set bit from a given index are added.\\n * The indexing of each bucket is modifed to count from the MSB to the LSB instead of from the LSB to the MSB.\\n * The modification of indexing makes finding the closest previous set bit more efficient in gas usage.\\n*/\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\n\\nlibrary BitMaps {\\n    using BitScan for uint256;\\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\\n    uint256 private constant MASK_FULL = type(uint256).max;\\n\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n\\n\\n    /**\\n     * @dev Consecutively sets `amount` of bits starting from the bit at `startIndex`.\\n     */    \\n    function setBatch(BitMap storage bitmap, uint256 startIndex, uint256 amount) internal {\\n        uint256 bucket = startIndex >> 8;\\n\\n        uint256 bucketStartIndex = (startIndex & 0xff);\\n\\n        unchecked {\\n            if(bucketStartIndex + amount < 256) {\\n                bitmap._data[bucket] |= MASK_FULL << (256 - amount) >> bucketStartIndex;\\n            } else {\\n                bitmap._data[bucket] |= MASK_FULL >> bucketStartIndex;\\n                amount -= (256 - bucketStartIndex);\\n                bucket++;\\n\\n                while(amount > 256) {\\n                    bitmap._data[bucket] = MASK_FULL;\\n                    amount -= 256;\\n                    bucket++;\\n                }\\n\\n                bitmap._data[bucket] |= MASK_FULL << (256 - amount);\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Consecutively unsets `amount` of bits starting from the bit at `startIndex`.\\n     */    \\n    function unsetBatch(BitMap storage bitmap, uint256 startIndex, uint256 amount) internal {\\n        uint256 bucket = startIndex >> 8;\\n\\n        uint256 bucketStartIndex = (startIndex & 0xff);\\n\\n        unchecked {\\n            if(bucketStartIndex + amount < 256) {\\n                bitmap._data[bucket] &= ~(MASK_FULL << (256 - amount) >> bucketStartIndex);\\n            } else {\\n                bitmap._data[bucket] &= ~(MASK_FULL >> bucketStartIndex);\\n                amount -= (256 - bucketStartIndex);\\n                bucket++;\\n\\n                while(amount > 256) {\\n                    bitmap._data[bucket] = 0;\\n                    amount -= 256;\\n                    bucket++;\\n                }\\n\\n                bitmap._data[bucket] &= ~(MASK_FULL << (256 - amount));\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Find the closest index of the set bit before `index`.\\n     */\\n    function scanForward(BitMap storage bitmap, uint256 index) internal view returns (uint256 setBitIndex) {\\n        uint256 bucket = index >> 8;\\n\\n        // index within the bucket\\n        uint256 bucketIndex = (index & 0xff);\\n\\n        // load a bitboard from the bitmap.\\n        uint256 bb = bitmap._data[bucket];\\n\\n        // offset the bitboard to scan from `bucketIndex`.\\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\\n        \\n        if(bb > 0) {\\n            unchecked {\\n                setBitIndex = (bucket << 8) | (bucketIndex -  bb.bitScanForward256());    \\n            }\\n        } else {\\n            while(true) {\\n                require(bucket > 0, \\\"BitMaps: The set bit before the index doesn't exist.\\\");\\n                unchecked {\\n                    bucket--;\\n                }\\n                // No offset. Always scan from the least significiant bit now.\\n                bb = bitmap._data[bucket];\\n                \\n                if(bb > 0) {\\n                    unchecked {\\n                        setBitIndex = (bucket << 8) | (255 -  bb.bitScanForward256());\\n                        break;\\n                    }\\n                } \\n            }\\n        }\\n    }\\n\\n    function getBucket(BitMap storage bitmap, uint256 bucket) internal view returns (uint256) {\\n        return bitmap._data[bucket];\\n    }\\n}\\n\"\r\n    },\r\n    \"solidity-bits/contracts/BitScan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n/**\\n   _____       ___     ___ __           ____  _ __      \\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\n                           /____/                        \\n\\n- npm: https://www.npmjs.com/package/solidity-bits\\n- github: https://github.com/estarriolvetch/solidity-bits\\n\\n */\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary BitScan {\\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\n    bytes constant private LOOKUP_TABLE_256 = hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n        @dev Isolate the least significant set bit.\\n     */ \\n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            return bb & (0 - bb);\\n        }\\n    } \\n\\n    /**\\n        @dev Isolate the most significant set bit.\\n     */ \\n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            bb |= bb >> 128;\\n            bb |= bb >> 64;\\n            bb |= bb >> 32;\\n            bb |= bb >> 16;\\n            bb |= bb >> 8;\\n            bb |= bb >> 4;\\n            bb |= bb >> 2;\\n            bb |= bb >> 1;\\n            \\n            return (bb >> 1) + 1;\\n        }\\n    } \\n\\n    /**\\n        @dev Find the index of the lest significant set bit. (trailing zero count)\\n     */ \\n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\\n        }   \\n    }\\n\\n    /**\\n        @dev Find the index of the most significant set bit.\\n     */ \\n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\\n        }   \\n    }\\n\\n    function log2(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return uint8(LOOKUP_TABLE_256[(isolateMS1B256(bb) * DEBRUIJN_256) >> 248]);\\n        } \\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArrayLengthIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidUpdateIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InvlidRoyaltyFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NotAllowedByCAL\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProhibitedBecauseSBT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RouterNotSet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenNonexistent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WalletLockNotAllowedByOthers\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroUpdateIndex\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"CalLevelChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"updateIndex\",\"type\":\"uint8\"}],\"name\":\"IncreaseUpdateIndex\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferer\",\"type\":\"address\"}],\"name\":\"LocalCalAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferer\",\"type\":\"address\"}],\"name\":\"LocalCalRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenLock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"updateIndex\",\"type\":\"uint8\"}],\"name\":\"UpdateToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"}],\"name\":\"WalletLock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAL\",\"outputs\":[{\"internalType\":\"contract IContractAllowListProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_FILTER_REGISTRY\",\"outputs\":[{\"internalType\":\"contract IOperatorFilterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SELLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_currentSaleIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_consumed\",\"type\":\"uint16\"}],\"name\":\"addConsumedAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractLockStatus\",\"outputs\":[{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentUpdateIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableRestrict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"externalBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"externalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_currentSaleIndex\",\"type\":\"uint8\"}],\"name\":\"getConsumedAllocation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenUpdateIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getTokensUnderLock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokensUnderLock\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseCurrentUpdateIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSBT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IMetadataRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"sellerBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"sellerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"calAddress\",\"type\":\"address\"}],\"name\":\"setCAL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setCALLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_currentSaleIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"_consumed\",\"type\":\"uint16\"}],\"name\":\"setConsumedAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"}],\"name\":\"setContractLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setEnableRestrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setIsSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataRouter\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"setRoyaltyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_new\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setTokenCALLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"}],\"name\":\"setTokenLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"}],\"name\":\"setTokenLockByAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"}],\"name\":\"setWalletCALLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"lockStatus\",\"type\":\"uint8\"}],\"name\":\"setWalletLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenCALLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenLock\",\"outputs\":[{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletCALLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"walletLock\",\"outputs\":[{\"internalType\":\"enum IERC721Lockable.LockStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"CNPES","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"20","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]