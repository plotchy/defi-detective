[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/market-wrapper/FoundationMarketWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\n// ============ External Imports ============\\nimport {IFoundationMarket} from \\\"../external/interfaces/IFoundationMarket.sol\\\";\\n\\n// ============ Internal Imports ============\\nimport {IMarketWrapper} from \\\"./IMarketWrapper.sol\\\";\\n\\n/**\\n * @title FoundationMarketWrapper\\n * @author Anna Carroll\\n * @notice MarketWrapper contract implementing IMarketWrapper interface\\n * according to the logic of Foundation's NFT Market\\n * Original Foundation NFT Market code: https://etherscan.io/address/0xa7d94560dbd814af316dd96fde78b9136a977d1c#code\\n */\\ncontract FoundationMarketWrapper is IMarketWrapper {\\n    // ============ Internal Immutables ============\\n\\n    IFoundationMarket internal immutable market;\\n\\n    // ======== Constructor =========\\n\\n    constructor(address _foundationMarket) {\\n        market = IFoundationMarket(_foundationMarket);\\n    }\\n\\n    // ======== External Functions =========\\n\\n    /**\\n     * @notice Determine whether there is an existing auction\\n     * for this token on the market\\n     * @return TRUE if the auction exists\\n     */\\n    function auctionExists(uint256 auctionId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // line 219 of NFTMarketReserveAuction, logic within placeBid() function (not exposed publicly)\\n        IFoundationMarket.ReserveAuction memory _auction =\\n            market.getReserveAuction(auctionId);\\n        return _auction.amount != 0;\\n    }\\n\\n    /**\\n     * @notice Determine whether the given auctionId is\\n     * an auction for the tokenId + nftContract\\n     * @return TRUE if the auctionId matches the tokenId + nftContract\\n     */\\n    function auctionIdMatchesToken(\\n        uint256 auctionId,\\n        address nftContract,\\n        uint256 tokenId\\n    ) public view override returns (bool) {\\n        return auctionId == market.getReserveAuctionIdFor(nftContract, tokenId);\\n    }\\n\\n    /**\\n     * @notice Query the current highest bidder for this auction\\n     * @return highest bidder\\n     */\\n    function getCurrentHighestBidder(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        // line 279 of NFTMarketReserveAuction, getMinBidAmount() function\\n        IFoundationMarket.ReserveAuction memory _auction =\\n            market.getReserveAuction(auctionId);\\n        return _auction.bidder;\\n    }\\n\\n    /**\\n     * @notice Calculate the minimum next bid for this auction\\n     * @return minimum bid amount\\n     */\\n    function getMinimumBid(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // line 279 of NFTMarketReserveAuction, getMinBidAmount() function\\n        return market.getMinBidAmount(auctionId);\\n    }\\n\\n    /**\\n     * @notice Submit bid to Market contract\\n     */\\n    function bid(uint256 auctionId, uint256 bidAmount) external override {\\n        // line 217 of NFTMarketReserveAuction, placeBid() function\\n        (bool success, bytes memory returnData) =\\n            address(market).call{value: bidAmount}(\\n                abi.encodeWithSignature(\\\"placeBid(uint256)\\\", auctionId)\\n            );\\n        require(success, string(returnData));\\n    }\\n\\n    /**\\n     * @notice Determine whether the auction has been finalized\\n     * @return TRUE if the auction has been finalized\\n     */\\n    function isFinalized(uint256 auctionId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        // line 266 of NFTMarketReserveAuction,\\n        // the auction is deleted at the end of the finalizeReserveAuction() function\\n        // since we checked that the auction DID exist when we deployed the partyBid,\\n        // if it no longer exists that means the auction has been finalized.\\n        return !auctionExists(auctionId);\\n    }\\n\\n    /**\\n     * @notice Finalize the results of the auction\\n     */\\n    function finalize(uint256 auctionId) external override {\\n        // line 260 of finalizeReserveAuction, finalizeReserveAuction() function\\n        // will revert if auction has not started or still in progress\\n        market.finalizeReserveAuction(auctionId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/external/interfaces/IFoundationMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\ninterface IFoundationMarket {\\n    struct ReserveAuction {\\n        address nftContract;\\n        uint256 tokenId;\\n        address payable seller;\\n        uint256 duration;\\n        uint256 extensionDuration;\\n        uint256 endTime;\\n        address payable bidder;\\n        uint256 amount;\\n    }\\n\\n    function getMinBidAmount(uint256 auctionId) external view returns (uint256);\\n\\n    function placeBid(uint256 auctionId) external payable;\\n\\n    function getReserveAuction(uint256 auctionId)\\n        external\\n        view\\n        returns (ReserveAuction memory);\\n\\n    function getReserveAuctionIdFor(address nftContract, uint256 tokenId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function finalizeReserveAuction(uint256 auctionId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/market-wrapper/IMarketWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.5;\\n\\n/**\\n * @title IMarketWrapper\\n * @author Anna Carroll\\n * @notice IMarketWrapper provides a common interface for\\n * interacting with NFT auction markets.\\n * Contracts can abstract their interactions with\\n * different NFT markets using IMarketWrapper.\\n * NFT markets can become compatible with any contract\\n * using IMarketWrapper by deploying a MarketWrapper contract\\n * that implements this interface using the logic of their Market.\\n *\\n * WARNING: MarketWrapper contracts should NEVER write to storage!\\n * When implementing a MarketWrapper, exercise caution; a poorly implemented\\n * MarketWrapper contract could permanently lose access to the NFT or user funds.\\n */\\ninterface IMarketWrapper {\\n    /**\\n     * @notice Determine whether there is an existing auction\\n     * for this token on the underlying market\\n     * @return TRUE if the auction exists\\n     */\\n    function auctionExists(uint256 auctionId) external view returns (bool);\\n\\n    /**\\n     * @notice Determine whether the given auctionId is\\n     * an auction for the tokenId + nftContract\\n     * @return TRUE if the auctionId matches the tokenId + nftContract\\n     */\\n    function auctionIdMatchesToken(\\n        uint256 auctionId,\\n        address nftContract,\\n        uint256 tokenId\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Calculate the minimum next bid for this auction\\n     * @return minimum bid amount\\n     */\\n    function getMinimumBid(uint256 auctionId) external view returns (uint256);\\n\\n    /**\\n     * @notice Query the current highest bidder for this auction\\n     * @return highest bidder\\n     */\\n    function getCurrentHighestBidder(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    /**\\n     * @notice Submit bid to Market contract\\n     */\\n    function bid(uint256 auctionId, uint256 bidAmount) external;\\n\\n    /**\\n     * @notice Determine whether the auction has been finalized\\n     * @return TRUE if the auction has been finalized\\n     */\\n    function isFinalized(uint256 auctionId) external view returns (bool);\\n\\n    /**\\n     * @notice Finalize the results of the auction\\n     */\\n    function finalize(uint256 auctionId) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_foundationMarket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"auctionExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"auctionIdMatchesToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getCurrentHighestBidder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"isFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FoundationMarketWrapper","CompilerVersion":"v0.8.5+commit.a4f2e591","OptimizationUsed":"1","Runs":"999999","ConstructorArguments":"000000000000000000000000a7d94560dbd814af316dd96fde78b9136a977d1c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]