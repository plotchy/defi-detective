[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IMarketOddsFactory{\r\n  function calcOdds(MarketDomain.MarketBetBo memory betBo,MarketDomain.MarketBetOptionBo [] memory options) pure external returns (bool exceed,uint256 currentOdds,MarketDomain.MarketBetOptionBo [] memory CurrOptions);\r\n}\r\n\r\ncontract MarketDomain{\r\n\r\n  struct MarketBetBo{\r\n    uint256 poolId;\r\n    uint256 poolType;\r\n    address user;\r\n    uint256 option;\r\n    uint256 betAmount;\r\n    uint256 slide;\r\n    uint256 fee;\r\n    uint256 minUnit;\r\n  }\r\n\r\n  struct MarketBetOptionBo{\r\n        uint256 option;\r\n        uint256 currOdds;\r\n        uint256 betTotalAmount;       \r\n  }\r\n}\r\n\r\ncontract MarketDefaultOddsFactory is IMarketOddsFactory,MarketDomain{\r\n  function calcOdds(MarketBetBo memory betBo,MarketBetOptionBo [] memory options) pure override external \r\n  returns (bool ,uint256 ,MarketDomain.MarketBetOptionBo [] memory){\r\n    uint256 oldSelfTotalBetAcount;\r\n    uint256 newSelfTotalBetAcount;\r\n    uint256 opponentTotalAmount;\r\n    uint256 oldSelfOdds;\r\n    for(uint256 i=0;i<options.length;i++){\r\n      MarketBetOptionBo memory optionBo = options[i];\r\n      if(optionBo.option==betBo.option){\r\n        oldSelfTotalBetAcount = optionBo.betTotalAmount;\r\n        optionBo.betTotalAmount += betBo.betAmount;\r\n        newSelfTotalBetAcount = optionBo.betTotalAmount;\r\n        oldSelfOdds = optionBo.currOdds;\r\n      }else{\r\n        opponentTotalAmount +=optionBo.betTotalAmount;\r\n      }\r\n    }\r\n\r\n    uint256 currentOdds = _doCalcBetCurrOdds(betBo.minUnit,100,betBo.betAmount,oldSelfTotalBetAcount,opponentTotalAmount,betBo.fee);\r\n    uint256 absOddsDiff = currentOdds >oldSelfOdds?currentOdds-oldSelfOdds:oldSelfOdds-currentOdds;\r\n    bool exceed = absOddsDiff / oldSelfOdds  > betBo.slide ;\r\n    MarketBetOptionBo [] memory newOptions = _refreshOptions(options,betBo.fee);\r\n    return (exceed,currentOdds,newOptions);\r\n  }\r\n\r\n  function _doCalcBetCurrOdds(uint256 minUnit,uint256 maxLoopCount,uint256 selfBetAmount,uint256 selfBetTotalAmount,uint256 opponentTotalAmount,uint256 fee)internal pure returns(uint256 currOdds){\r\n    uint256 factor=0;\r\n    uint256 loopCount = selfBetAmount / minUnit;\r\n    if(loopCount >maxLoopCount){\r\n      loopCount = maxLoopCount;\r\n      minUnit = selfBetAmount/loopCount;\r\n    }\r\n    uint256 fee_up = fee*10**uint(18);\r\n    uint256 one = 1*10**uint(18);\r\n    uint256 radio = 10000;\r\n    uint256 one_double = 1*10**uint(36);\r\n    uint256 radioDiff = 1*10**uint(14);\r\n    for(uint256 i =0; i<loopCount; i++){\r\n      factor = factor + one_double / (selfBetTotalAmount + minUnit * i);\r\n    }\r\n    currOdds = (one - fee_up /radio) * (one+ opponentTotalAmount*factor/(selfBetAmount* one/minUnit))/one /radioDiff;\r\n    currOdds = _rounding(currOdds);\r\n  }\r\n\r\n\r\n  function _calcOptionCurrOdds(uint256 selfBetTotalAmount,uint256 opponentTotalAmount,uint256 fee)internal pure returns(uint256 finalOdds){\r\n    uint256 one = 1*10**uint(18);\r\n    uint256 fee_up = fee*10**uint(18);\r\n    uint256 radio = 10000;\r\n     uint256 radioDiff = 1*10**uint(14);\r\n    finalOdds = (one - fee_up /radio) * (one + opponentTotalAmount * one/selfBetTotalAmount)/one/radioDiff;\r\n    finalOdds = _rounding(finalOdds);\r\n  }\r\n\r\n  function _calcTotalAmounts(MarketDomain.MarketBetOptionBo [] memory options,uint256 selfOption)internal pure returns(uint256 selfTotalAmount,uint256 opponentTotalAmount){\r\n    for(uint256 i=0;i<options.length;i++){\r\n      MarketBetOptionBo memory optionBo = options[i];\r\n      if(optionBo.option==selfOption){\r\n        selfTotalAmount = optionBo.betTotalAmount;\r\n      }else{\r\n        opponentTotalAmount +=optionBo.betTotalAmount;\r\n      }\r\n    }\r\n  }\r\n\r\n  function _refreshOptions(MarketDomain.MarketBetOptionBo [] memory options,uint256 fee) internal pure returns(MarketDomain.MarketBetOptionBo [] memory){\r\n      for(uint256 i=0;i<options.length;i++){\r\n        MarketBetOptionBo memory optionBo = options[i];\r\n        uint256 _selfTotalBetAcount;\r\n        uint256 _opponentTotalAmount;\r\n        (_selfTotalBetAcount,_opponentTotalAmount) = _calcTotalAmounts(options,optionBo.option);\r\n       optionBo.currOdds = _calcOptionCurrOdds(_selfTotalBetAcount,_opponentTotalAmount,fee);\r\n      }\r\n      return options;\r\n  }\r\n\r\n  function _rounding(uint256 number) internal pure returns(uint256){\r\n    uint256 part1 = number / 100 * 100;\r\n    uint256 remain = number % 100;\r\n    if(remain>=50){\r\n      return part1 + 100;\r\n    }else{\r\n      return part1;\r\n    }\r\n  }\r\n\r\n  constructor(){\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slide\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUnit\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketDomain.MarketBetBo\",\"name\":\"betBo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currOdds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betTotalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketDomain.MarketBetOptionBo[]\",\"name\":\"options\",\"type\":\"tuple[]\"}],\"name\":\"calcOdds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"option\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currOdds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betTotalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct MarketDomain.MarketBetOptionBo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"MarketDefaultOddsFactory","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://9cc6e702567cb74a27bffaa7f0cc77d30a8c2b197bfe48d10cff0b2519601f9c"}]