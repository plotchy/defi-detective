[{"SourceCode":"//SPDX-License-Identifier: None\r\n\r\n// File contracts/interfaces/IERC3156FlashBorrower.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC3156FlashBorrower {\r\n\r\n  /**\r\n    * @dev Receive a flash loan.\r\n    * @param initiator The initiator of the loan.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @param fee The additional amount of tokens to repay.\r\n    * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n    * @return The keccak256 hash of \"ERC3156FlashBorrower.onFlashLoan\"\r\n    */\r\n  function onFlashLoan(\r\n      address initiator,\r\n      address token,\r\n      uint256 amount,\r\n      uint256 fee,\r\n      bytes calldata data\r\n  ) external returns (bytes32);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC3156FlashLender.sol\r\n\r\npragma solidity ^0.8.0;\r\ninterface IERC3156FlashLender {\r\n  /**\r\n    * @dev The amount of currency available to be lent.\r\n    * @param token The loan currency.\r\n    * @return The amount of `token` that can be borrowed.\r\n    */\r\n  function maxFlashLoan(\r\n      address token\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n    * @dev The fee to be charged for a given loan.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @return The amount of `token` to be charged for the loan, on top of the returned principal.\r\n    */\r\n  function flashFee(\r\n      address token,\r\n      uint256 amount\r\n  ) external view returns (uint256);\r\n\r\n  /**\r\n    * @dev Initiate a flash loan.\r\n    * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\r\n    * @param token The loan currency.\r\n    * @param amount The amount of tokens lent.\r\n    * @param data Arbitrary data structure, intended to contain user-defined parameters.\r\n    */\r\n  function flashLoan(\r\n      address receiver,\r\n      address token,\r\n      uint256 amount,\r\n      bytes calldata data\r\n  ) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/ICErc20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ICErc20 {\r\n    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n    function underlying() external view returns (address);\r\n}\r\n\r\n\r\n// File contracts/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IWeth.sol\r\n\r\npragma solidity ^0.8.0;\r\ninterface IWeth is IERC20 {\r\n    function deposit() external payable;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IComptroller.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IComptroller {\r\n    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRouter.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IRouter {\r\n    function getAmountsIn(uint256 amountOut, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n        \r\n    function getAmountsOut(uint256 amountIn, address[] memory path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\n\r\n// File contracts/utils/Context.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Ownable.sol\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) - value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/AnchorFlashLiquidator.sol\r\n\r\npragma solidity ^0.8.0;\r\ncontract AnchorFlashLiquidator is Ownable {\r\n    using SafeERC20 for IERC20;\r\n\r\n    IERC3156FlashLender public flashLender =\r\n        IERC3156FlashLender(0x6bdC1FCB2F13d1bA9D26ccEc3983d5D4bf318693);\r\n    IComptroller public comptroller =\r\n        IComptroller(0x4dCf7407AE5C07f8681e1659f626E114A7667339);\r\n    IRouter public constant sushiRouter =\r\n        IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\r\n    IRouter public constant uniRouter =\r\n        IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IERC20 public constant dola =\r\n        IERC20(0x865377367054516e17014CcdED1e7d814EDC9ce4);\r\n    IWeth public constant weth =\r\n        IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    IERC20 public constant dai =\r\n        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n\r\n    struct LiquidationData {\r\n        address cErc20;\r\n        address cTokenCollateral;\r\n        address borrower;\r\n        address caller;\r\n        IRouter dolaRouter;\r\n        IRouter exitRouter;\r\n        uint256 amount;\r\n        uint256 minProfit;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function liquidate(\r\n        address _flashLoanToken,\r\n        address _cErc20,\r\n        address _borrower,\r\n        uint256 _amount,\r\n        address _cTokenCollateral,\r\n        IRouter _dolaRouter,\r\n        IRouter _exitRouter,\r\n        uint256 _minProfit,\r\n        uint256 _deadline\r\n    ) external {\r\n        require(\r\n            (_dolaRouter == sushiRouter || _dolaRouter == uniRouter) &&\r\n                (_exitRouter == sushiRouter || _exitRouter == uniRouter),\r\n            \"Invalid router\"\r\n        );\r\n        // make sure _borrower is liquidatable\r\n        (, , uint256 shortfall) = comptroller.getAccountLiquidity(_borrower);\r\n        require(shortfall > 0, \"!liquidatable\");\r\n        address[] memory path = _getDolaPath(_flashLoanToken);\r\n        uint256 tokensNeeded;\r\n        {\r\n            // scope to avoid stack too deep error\r\n            tokensNeeded = _dolaRouter.getAmountsIn(_amount, path)[0];\r\n            require(\r\n                tokensNeeded <= flashLender.maxFlashLoan(_flashLoanToken),\r\n                \"Insufficient lender reserves\"\r\n            );\r\n            uint256 fee = flashLender.flashFee(_flashLoanToken, tokensNeeded);\r\n            uint256 repayment = tokensNeeded + fee;\r\n            _approve(IERC20(_flashLoanToken), address(flashLender), repayment);\r\n        }\r\n        bytes memory data =\r\n            abi.encode(\r\n                LiquidationData({\r\n                    cErc20: _cErc20,\r\n                    cTokenCollateral: _cTokenCollateral,\r\n                    borrower: _borrower,\r\n                    caller: msg.sender,\r\n                    dolaRouter: _dolaRouter,\r\n                    exitRouter: _exitRouter,\r\n                    amount: _amount,\r\n                    minProfit: _minProfit,\r\n                    deadline: _deadline\r\n                })\r\n            );\r\n        flashLender.flashLoan(\r\n            address(this),\r\n            _flashLoanToken,\r\n            tokensNeeded,\r\n            data\r\n        );\r\n    }\r\n\r\n    function onFlashLoan(\r\n        address initiator,\r\n        address token,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external returns (bytes32) {\r\n        require(msg.sender == address(flashLender), \"Untrusted lender\");\r\n        require(initiator == address(this), \"Untrusted loan initiator\");\r\n        LiquidationData memory liqData = abi.decode(data, (LiquidationData));\r\n\r\n        // Step 1: Convert token to DOLA\r\n        _approve(IERC20(token), address(liqData.dolaRouter), amount);\r\n        address[] memory entryPath = _getDolaPath(token);\r\n        require(\r\n            liqData.amount ==\r\n                liqData.dolaRouter.swapExactTokensForTokens(\r\n                    amount,\r\n                    0,\r\n                    entryPath,\r\n                    address(this),\r\n                    liqData.deadline\r\n                )[entryPath.length - 1],\r\n            \"Incorrect DOLA amount received\"\r\n        );\r\n\r\n        // Step 2: Liquidate borrower and seize their cToken\r\n        _approve(dola, liqData.cErc20, liqData.amount);\r\n        ICErc20(liqData.cErc20).liquidateBorrow(\r\n            liqData.borrower,\r\n            liqData.amount,\r\n            liqData.cTokenCollateral\r\n        );\r\n        uint256 seizedBal =\r\n            IERC20(liqData.cTokenCollateral).balanceOf(address(this));\r\n\r\n        // Step 3: Redeem seized cTokens for collateral\r\n        _approve(IERC20(liqData.cTokenCollateral), liqData.cErc20, seizedBal);\r\n        uint256 ethBalBefore = address(this).balance; // snapshot ETH balance before redeem to determine if it is cEther\r\n        ICErc20(liqData.cTokenCollateral).redeem(seizedBal);\r\n        address underlying;\r\n\r\n        // Step 3.1: Get amount of underlying collateral redeemed\r\n        if (address(this).balance > ethBalBefore) {\r\n            // If ETH balance increased, seized cToken is cEther & wrap into WETH\r\n            weth.deposit{value: address(this).balance}();\r\n            underlying = address(weth);\r\n        } else {\r\n            underlying = ICErc20(liqData.cTokenCollateral).underlying();\r\n        }\r\n        uint256 underlyingBal = IERC20(underlying).balanceOf(address(this));\r\n\r\n        // Step 4: Swap underlying collateral for token (if collateral != token)\r\n        uint256 tokensReceived;\r\n        if (underlying != token) {\r\n            _approve(\r\n                IERC20(underlying),\r\n                address(liqData.exitRouter),\r\n                underlyingBal\r\n            );\r\n            address[] memory exitPath = _getExitPath(underlying, token);\r\n            tokensReceived = liqData.exitRouter.swapExactTokensForTokens(\r\n                underlyingBal,\r\n                0,\r\n                exitPath,\r\n                address(this),\r\n                liqData.deadline\r\n            )[exitPath.length - 1];\r\n        } else {\r\n            tokensReceived = underlyingBal;\r\n        }\r\n\r\n        // Step 5: Sanity check to ensure process is profitable\r\n        require(\r\n            tokensReceived >= amount + fee + liqData.minProfit,\r\n            \"Not enough profit\"\r\n        );\r\n\r\n        // Step 6: Send profits to caller\r\n        IERC20(token).safeTransfer(\r\n            liqData.caller,\r\n            tokensReceived - (amount + fee)\r\n        );\r\n        return keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n    }\r\n\r\n    function receiveEth() external payable {}\r\n\r\n    function setFlashLender(IERC3156FlashLender _flashLender)\r\n        external\r\n        onlyOwner\r\n    {\r\n        flashLender = _flashLender;\r\n    }\r\n\r\n    function setComptroller(IComptroller _comptroller) external onlyOwner {\r\n        comptroller = _comptroller;\r\n    }\r\n\r\n    function _getDolaPath(address _token)\r\n        internal\r\n        pure\r\n        returns (address[] memory path)\r\n    {\r\n        if (_token == address(weth)) {\r\n            path = new address[](2);\r\n            path[0] = address(weth);\r\n            path[1] = address(dola);\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = _token;\r\n            path[1] = address(weth);\r\n            path[2] = address(dola);\r\n        }\r\n    }\r\n\r\n    function _getExitPath(address _underlying, address _token)\r\n        internal\r\n        pure\r\n        returns (address[] memory path)\r\n    {\r\n        if (_underlying == address(weth)) {\r\n            path = new address[](2);\r\n            path[0] = address(weth);\r\n            path[1] = _token;\r\n        } else {\r\n            path = new address[](3);\r\n            path[0] = address(_underlying);\r\n            path[1] = address(weth);\r\n            path[2] = _token;\r\n        }\r\n    }\r\n\r\n    function _approve(\r\n        IERC20 _token,\r\n        address _spender,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_token.allowance(address(this), _spender) < _amount) {\r\n            _token.safeApprove(_spender, type(uint256).max);\r\n        }\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dola\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_flashLoanToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cErc20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_cTokenCollateral\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"_dolaRouter\",\"type\":\"address\"},{\"internalType\":\"contract IRouter\",\"name\":\"_exitRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minProfit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"_comptroller\",\"type\":\"address\"}],\"name\":\"setComptroller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_flashLender\",\"type\":\"address\"}],\"name\":\"setFlashLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWeth\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnchorFlashLiquidator","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9f8deca43ae5c57f97cb8708494d3e238d5b7ea309f88c5795a2318eff4d395"}]