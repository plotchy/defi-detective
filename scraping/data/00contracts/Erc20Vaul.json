[{"SourceCode":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/Address.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.5.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.5.1\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\r\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() initializer {}\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\r\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\r\n        // contract may have been reentered.\r\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} modifier, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IStrategy.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IStrategy {\r\n    function name() external view returns (string memory);\r\n\r\n    function deposit() external payable returns (bool);\r\n\r\n    function balance() external view returns (uint256);\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function withdrawAll() external returns (uint256);\r\n\r\n    function harvestable() external view returns (uint256);\r\n\r\n    function harvest() external returns (uint256);\r\n\r\n    function strategist() external view returns (address);\r\n\r\n    function shutdown() external returns (bool);\r\n\r\n    function hasPendingFunds() external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IPreparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPreparable {\r\n    event ConfigPreparedAddress(bytes32 indexed key, address value, uint256 delay);\r\n    event ConfigPreparedNumber(bytes32 indexed key, uint256 value, uint256 delay);\r\n\r\n    event ConfigUpdatedAddress(bytes32 indexed key, address oldValue, address newValue);\r\n    event ConfigUpdatedNumber(bytes32 indexed key, uint256 oldValue, uint256 newValue);\r\n\r\n    event ConfigReset(bytes32 indexed key);\r\n}\r\n\r\n\r\n// File interfaces/IVault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @title Interface for a Vault\r\n */\r\n\r\ninterface IVault is IPreparable {\r\n    event StrategyActivated(address indexed strategy);\r\n\r\n    event StrategyDeactivated(address indexed strategy);\r\n\r\n    /**\r\n     * @dev 'netProfit' is the profit after all fees have been deducted\r\n     */\r\n    event Harvest(uint256 indexed netProfit, uint256 indexed loss);\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external;\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint256 amount) external returns (bool);\r\n\r\n    function initializeStrategy(address strategy_) external returns (bool);\r\n\r\n    function withdrawAll() external;\r\n\r\n    function withdrawFromReserve(uint256 amount) external;\r\n\r\n    function getStrategy() external view returns (IStrategy);\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory);\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function getTotalUnderlying() external view returns (uint256);\r\n\r\n    function getUnderlying() external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/IVaultReserve.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IVaultReserve {\r\n    event Deposit(address indexed vault, address indexed token, uint256 amount);\r\n    event Withdraw(address indexed vault, address indexed token, uint256 amount);\r\n    event VaultListed(address indexed vault);\r\n\r\n    function deposit(address token, uint256 amount) external payable returns (bool);\r\n\r\n    function withdraw(address token, uint256 amount) external returns (bool);\r\n\r\n    function getBalance(address vault, address token) external view returns (uint256);\r\n\r\n    function canWithdraw(address vault) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/pool/ILiquidityPool.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\ninterface ILiquidityPool is IPreparable {\r\n    event Deposit(address indexed minter, uint256 depositAmount, uint256 mintedLpTokens);\r\n\r\n    event DepositFor(\r\n        address indexed minter,\r\n        address indexed mintee,\r\n        uint256 depositAmount,\r\n        uint256 mintedLpTokens\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n    event LpTokenSet(address indexed lpToken);\r\n\r\n    event StakerVaultSet(address indexed stakerVault);\r\n\r\n    function redeem(uint256 redeemTokens) external returns (uint256);\r\n\r\n    function redeem(uint256 redeemTokens, uint256 minRedeemAmount) external returns (uint256);\r\n\r\n    function calcRedeem(address account, uint256 underlyingAmount) external returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount) external payable returns (uint256);\r\n\r\n    function deposit(uint256 mintAmount, uint256 minTokenAmount) external payable returns (uint256);\r\n\r\n    function depositAndStake(uint256 depositAmount, uint256 minTokenAmount)\r\n        external\r\n        payable\r\n        returns (uint256);\r\n\r\n    function depositFor(address account, uint256 depositAmount) external payable returns (uint256);\r\n\r\n    function depositFor(\r\n        address account,\r\n        uint256 depositAmount,\r\n        uint256 minTokenAmount\r\n    ) external payable returns (uint256);\r\n\r\n    function unstakeAndRedeem(uint256 redeemLpTokens, uint256 minRedeemAmount)\r\n        external\r\n        returns (uint256);\r\n\r\n    function handleLpTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function executeNewVault() external returns (address);\r\n\r\n    function executeNewMaxWithdrawalFee() external returns (uint256);\r\n\r\n    function executeNewRequiredReserves() external returns (uint256);\r\n\r\n    function executeNewReserveDeviation() external returns (uint256);\r\n\r\n    function setLpToken(address _lpToken) external returns (bool);\r\n\r\n    function setStaker() external returns (bool);\r\n\r\n    function isCapped() external returns (bool);\r\n\r\n    function uncap() external returns (bool);\r\n\r\n    function updateDepositCap(uint256 _depositCap) external returns (bool);\r\n\r\n    function getUnderlying() external view returns (address);\r\n\r\n    function getLpToken() external view returns (address);\r\n\r\n    function getWithdrawalFee(address account, uint256 amount) external view returns (uint256);\r\n\r\n    function getVault() external view returns (IVault);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/IGasBank.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IGasBank {\r\n    event Deposit(address indexed account, uint256 value);\r\n    event Withdraw(address indexed account, address indexed receiver, uint256 value);\r\n\r\n    function depositFor(address account) external payable;\r\n\r\n    function withdrawUnused(address account) external;\r\n\r\n    function withdrawFrom(address account, uint256 amount) external;\r\n\r\n    function withdrawFrom(\r\n        address account,\r\n        address payable to,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n// File interfaces/oracles/IOracleProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IOracleProvider {\r\n    /// @notice Quotes the USD price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the USD price of the asset\r\n    function getPriceUSD(address baseAsset) external view returns (uint256);\r\n\r\n    /// @notice Quotes the ETH price of `baseAsset`\r\n    /// @param baseAsset the asset of which the price is to be quoted\r\n    /// @return the ETH price of the asset\r\n    function getPriceETH(address baseAsset) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/AddressProviderMeta.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderMeta {\r\n    struct Meta {\r\n        bool freezable;\r\n        bool frozen;\r\n    }\r\n\r\n    function fromUInt(uint256 value) internal pure returns (Meta memory) {\r\n        Meta memory meta;\r\n        meta.freezable = (value & 1) == 1;\r\n        meta.frozen = ((value >> 1) & 1) == 1;\r\n        return meta;\r\n    }\r\n\r\n    function toUInt(Meta memory meta) internal pure returns (uint256) {\r\n        uint256 value;\r\n        value |= meta.freezable ? 1 : 0;\r\n        value |= meta.frozen ? 1 << 1 : 0;\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IAddressProvider.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IAddressProvider is IPreparable {\r\n    event KnownAddressKeyAdded(bytes32 indexed key);\r\n    event StakerVaultListed(address indexed stakerVault);\r\n    event StakerVaultDelisted(address indexed stakerVault);\r\n    event ActionListed(address indexed action);\r\n    event PoolListed(address indexed pool);\r\n    event PoolDelisted(address indexed pool);\r\n    event VaultUpdated(address indexed previousVault, address indexed newVault);\r\n\r\n    /** Key functions */\r\n    function getKnownAddressKeys() external view returns (bytes32[] memory);\r\n\r\n    function freezeAddress(bytes32 key) external;\r\n\r\n    /** Pool functions */\r\n\r\n    function allPools() external view returns (address[] memory);\r\n\r\n    function addPool(address pool) external;\r\n\r\n    function poolsCount() external view returns (uint256);\r\n\r\n    function getPoolAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isPool(address pool) external view returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    function getPoolForToken(address token) external view returns (ILiquidityPool);\r\n\r\n    function safeGetPoolForToken(address token) external view returns (address);\r\n\r\n    /** Vault functions  */\r\n\r\n    function updateVault(address previousVault, address newVault) external;\r\n\r\n    function allVaults() external view returns (address[] memory);\r\n\r\n    function vaultsCount() external view returns (uint256);\r\n\r\n    function getVaultAtIndex(uint256 index) external view returns (address);\r\n\r\n    function isVault(address vault) external view returns (bool);\r\n\r\n    /** Action functions */\r\n\r\n    function allActions() external view returns (address[] memory);\r\n\r\n    function addAction(address action) external returns (bool);\r\n\r\n    function isAction(address action) external view returns (bool);\r\n\r\n    /** Address functions */\r\n    function initializeAddress(\r\n        bytes32 key,\r\n        address initialAddress,\r\n        bool frezable\r\n    ) external;\r\n\r\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress) external;\r\n\r\n    function getAddress(bytes32 key) external view returns (address);\r\n\r\n    function getAddress(bytes32 key, bool checkExists) external view returns (address);\r\n\r\n    function getAddressMeta(bytes32 key) external view returns (AddressProviderMeta.Meta memory);\r\n\r\n    function prepareAddress(bytes32 key, address newAddress) external returns (bool);\r\n\r\n    function executeAddress(bytes32 key) external returns (address);\r\n\r\n    function resetAddress(bytes32 key) external returns (bool);\r\n\r\n    /** Staker vault functions */\r\n    function allStakerVaults() external view returns (address[] memory);\r\n\r\n    function tryGetStakerVault(address token) external view returns (bool, address);\r\n\r\n    function getStakerVault(address token) external view returns (address);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function isStakerVault(address stakerVault, address token) external view returns (bool);\r\n\r\n    function isStakerVaultRegistered(address stakerVault) external view returns (bool);\r\n\r\n    function isWhiteListedFeeHandler(address feeHandler) external view returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IInflationManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IInflationManager {\r\n    event KeeperGaugeListed(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeListed(address indexed token, address indexed ammGauge);\r\n    event KeeperGaugeDelisted(address indexed pool, address indexed keeperGauge);\r\n    event AmmGaugeDelisted(address indexed token, address indexed ammGauge);\r\n\r\n    /** Pool functions */\r\n\r\n    function setKeeperGauge(address pool, address _keeperGauge) external returns (bool);\r\n\r\n    function setAmmGauge(address token, address _ammGauge) external returns (bool);\r\n\r\n    function getAllAmmGauges() external view returns (address[] memory);\r\n\r\n    function getLpRateForStakerVault(address stakerVault) external view returns (uint256);\r\n\r\n    function getKeeperRateForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmRateForToken(address token) external view returns (uint256);\r\n\r\n    function getKeeperWeightForPool(address pool) external view returns (uint256);\r\n\r\n    function getAmmWeightForToken(address pool) external view returns (uint256);\r\n\r\n    function getLpPoolWeight(address pool) external view returns (uint256);\r\n\r\n    function getKeeperGaugeForPool(address pool) external view returns (address);\r\n\r\n    function getAmmGaugeForToken(address token) external view returns (address);\r\n\r\n    function isInflationWeightManager(address account) external view returns (bool);\r\n\r\n    function removeStakerVaultFromInflation(address stakerVault, address lpToken) external;\r\n\r\n    function addGaugeForVault(address lpToken) external returns (bool);\r\n\r\n    function whitelistGauge(address gauge) external;\r\n\r\n    function checkpointAllGauges() external returns (bool);\r\n\r\n    function mintRewards(address beneficiary, uint256 amount) external;\r\n\r\n    function addStrategyToDepositStakerVault(address depositStakerVault, address strategyPool)\r\n        external\r\n        returns (bool);\r\n\r\n    /** Weight setter functions **/\r\n\r\n    function prepareLpPoolWeight(address lpToken, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function prepareAmmTokenWeight(address token, uint256 newTokenWeight) external returns (bool);\r\n\r\n    function prepareKeeperPoolWeight(address pool, uint256 newPoolWeight) external returns (bool);\r\n\r\n    function executeLpPoolWeight(address lpToken) external returns (uint256);\r\n\r\n    function executeAmmTokenWeight(address token) external returns (uint256);\r\n\r\n    function executeKeeperPoolWeight(address pool) external returns (uint256);\r\n\r\n    function batchPrepareLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchPrepareKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\r\n        external\r\n        returns (bool);\r\n\r\n    function batchExecuteLpPoolWeights(address[] calldata lpTokens) external returns (bool);\r\n\r\n    function batchExecuteAmmTokenWeights(address[] calldata tokens) external returns (bool);\r\n\r\n    function batchExecuteKeeperPoolWeights(address[] calldata pools) external returns (bool);\r\n}\r\n\r\n\r\n// File interfaces/IController.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n// solhint-disable ordering\r\n\r\ninterface IController is IPreparable {\r\n    function addressProvider() external view returns (IAddressProvider);\r\n\r\n    function inflationManager() external view returns (IInflationManager);\r\n\r\n    function addStakerVault(address stakerVault) external returns (bool);\r\n\r\n    function removePool(address pool) external returns (bool);\r\n\r\n    /** Keeper functions */\r\n    function prepareKeeperRequiredStakedBKD(uint256 amount) external;\r\n\r\n    function executeKeeperRequiredStakedBKD() external;\r\n\r\n    function getKeeperRequiredStakedBKD() external view returns (uint256);\r\n\r\n    function canKeeperExecuteAction(address keeper) external view returns (bool);\r\n\r\n    /** Miscellaneous functions */\r\n\r\n    function getTotalEthRequiredForGas(address payer) external view returns (uint256);\r\n}\r\n\r\n\r\n// File libraries/ScaledMath.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n/*\r\n * @dev To use functions of this contract, at least one of the numbers must\r\n * be scaled to `DECIMAL_SCALE`. The result will scaled to `DECIMAL_SCALE`\r\n * if both numbers are scaled to `DECIMAL_SCALE`, otherwise to the scale\r\n * of the number not scaled by `DECIMAL_SCALE`\r\n */\r\nlibrary ScaledMath {\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant DECIMAL_SCALE = 1e18;\r\n    // solhint-disable-next-line private-vars-leading-underscore\r\n    uint256 internal constant ONE = 1e18;\r\n\r\n    /**\r\n     * @notice Performs a multiplication between two scaled numbers\r\n     */\r\n    function scaledMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * b) / DECIMAL_SCALE;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two scaled numbers\r\n     */\r\n    function scaledDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, rounding up the result\r\n     */\r\n    function scaledDivRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a * DECIMAL_SCALE + b - 1) / b;\r\n    }\r\n\r\n    /**\r\n     * @notice Performs a division between two numbers, ignoring any scaling and rounding up the result\r\n     */\r\n    function divRoundUp(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return (a + b - 1) / b;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/Errors.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Error {\r\n    string internal constant ADDRESS_WHITELISTED = \"address already whitelisted\";\r\n    string internal constant ADMIN_ALREADY_SET = \"admin has already been set once\";\r\n    string internal constant ADDRESS_NOT_WHITELISTED = \"address not whitelisted\";\r\n    string internal constant ADDRESS_NOT_FOUND = \"address not found\";\r\n    string internal constant CONTRACT_INITIALIZED = \"contract can only be initialized once\";\r\n    string internal constant CONTRACT_PAUSED = \"contract is paused\";\r\n    string internal constant INVALID_AMOUNT = \"invalid amount\";\r\n    string internal constant INVALID_INDEX = \"invalid index\";\r\n    string internal constant INVALID_VALUE = \"invalid msg.value\";\r\n    string internal constant INVALID_SENDER = \"invalid msg.sender\";\r\n    string internal constant INVALID_TOKEN = \"token address does not match pool's LP token address\";\r\n    string internal constant INVALID_DECIMALS = \"incorrect number of decimals\";\r\n    string internal constant INVALID_ARGUMENT = \"invalid argument\";\r\n    string internal constant INVALID_PARAMETER_VALUE = \"invalid parameter value attempted\";\r\n    string internal constant INVALID_IMPLEMENTATION = \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_POOL_IMPLEMENTATION =\r\n        \"invalid pool implementation for given coin\";\r\n    string internal constant INVALID_LP_TOKEN_IMPLEMENTATION =\r\n        \"invalid LP Token implementation for given coin\";\r\n    string internal constant INVALID_VAULT_IMPLEMENTATION =\r\n        \"invalid vault implementation for given coin\";\r\n    string internal constant INVALID_STAKER_VAULT_IMPLEMENTATION =\r\n        \"invalid stakerVault implementation for given coin\";\r\n    string internal constant INSUFFICIENT_BALANCE = \"insufficient balance\";\r\n    string internal constant ADDRESS_ALREADY_SET = \"Address is already set\";\r\n    string internal constant INSUFFICIENT_STRATEGY_BALANCE = \"insufficient strategy balance\";\r\n    string internal constant INSUFFICIENT_FUNDS_RECEIVED = \"insufficient funds received\";\r\n    string internal constant ADDRESS_DOES_NOT_EXIST = \"address does not exist\";\r\n    string internal constant ADDRESS_FROZEN = \"address is frozen\";\r\n    string internal constant ROLE_EXISTS = \"role already exists\";\r\n    string internal constant CANNOT_REVOKE_ROLE = \"cannot revoke role\";\r\n    string internal constant UNAUTHORIZED_ACCESS = \"unauthorized access\";\r\n    string internal constant SAME_ADDRESS_NOT_ALLOWED = \"same address not allowed\";\r\n    string internal constant SELF_TRANSFER_NOT_ALLOWED = \"self-transfer not allowed\";\r\n    string internal constant ZERO_ADDRESS_NOT_ALLOWED = \"zero address not allowed\";\r\n    string internal constant ZERO_TRANSFER_NOT_ALLOWED = \"zero transfer not allowed\";\r\n    string internal constant THRESHOLD_TOO_HIGH = \"threshold is too high, must be under 10\";\r\n    string internal constant INSUFFICIENT_THRESHOLD = \"insufficient threshold\";\r\n    string internal constant NO_POSITION_EXISTS = \"no position exists\";\r\n    string internal constant POSITION_ALREADY_EXISTS = \"position already exists\";\r\n    string internal constant PROTOCOL_NOT_FOUND = \"protocol not found\";\r\n    string internal constant TOP_UP_FAILED = \"top up failed\";\r\n    string internal constant SWAP_PATH_NOT_FOUND = \"swap path not found\";\r\n    string internal constant UNDERLYING_NOT_SUPPORTED = \"underlying token not supported\";\r\n    string internal constant NOT_ENOUGH_FUNDS_WITHDRAWN =\r\n        \"not enough funds were withdrawn from the pool\";\r\n    string internal constant FAILED_TRANSFER = \"transfer failed\";\r\n    string internal constant FAILED_MINT = \"mint failed\";\r\n    string internal constant FAILED_REPAY_BORROW = \"repay borrow failed\";\r\n    string internal constant FAILED_METHOD_CALL = \"method call failed\";\r\n    string internal constant NOTHING_TO_CLAIM = \"there is no claimable balance\";\r\n    string internal constant ERC20_BALANCE_EXCEEDED = \"ERC20: transfer amount exceeds balance\";\r\n    string internal constant INVALID_MINTER =\r\n        \"the minter address of the LP token and the pool address do not match\";\r\n    string internal constant STAKER_VAULT_EXISTS = \"a staker vault already exists for the token\";\r\n    string internal constant DEADLINE_NOT_ZERO = \"deadline must be 0\";\r\n    string internal constant DEADLINE_NOT_SET = \"deadline is 0\";\r\n    string internal constant DEADLINE_NOT_REACHED = \"deadline has not been reached yet\";\r\n    string internal constant DELAY_TOO_SHORT = \"delay be at least 3 days\";\r\n    string internal constant INSUFFICIENT_UPDATE_BALANCE =\r\n        \"insufficient funds for updating the position\";\r\n    string internal constant SAME_AS_CURRENT = \"value must be different to existing value\";\r\n    string internal constant NOT_CAPPED = \"the pool is not currently capped\";\r\n    string internal constant ALREADY_CAPPED = \"the pool is already capped\";\r\n    string internal constant EXCEEDS_DEPOSIT_CAP = \"deposit exceeds deposit cap\";\r\n    string internal constant VALUE_TOO_LOW_FOR_GAS = \"value too low to cover gas\";\r\n    string internal constant NOT_ENOUGH_FUNDS = \"not enough funds to withdraw\";\r\n    string internal constant ESTIMATED_GAS_TOO_HIGH = \"too much ETH will be used for gas\";\r\n    string internal constant DEPOSIT_FAILED = \"deposit failed\";\r\n    string internal constant GAS_TOO_HIGH = \"too much ETH used for gas\";\r\n    string internal constant GAS_BANK_BALANCE_TOO_LOW = \"not enough ETH in gas bank to cover gas\";\r\n    string internal constant INVALID_TOKEN_TO_ADD = \"Invalid token to add\";\r\n    string internal constant INVALID_TOKEN_TO_REMOVE = \"token can not be removed\";\r\n    string internal constant TIME_DELAY_NOT_EXPIRED = \"time delay not expired yet\";\r\n    string internal constant UNDERLYING_NOT_WITHDRAWABLE =\r\n        \"pool does not support additional underlying coins to be withdrawn\";\r\n    string internal constant STRATEGY_SHUT_DOWN = \"Strategy is shut down\";\r\n    string internal constant STRATEGY_DOES_NOT_EXIST = \"Strategy does not exist\";\r\n    string internal constant UNSUPPORTED_UNDERLYING = \"Underlying not supported\";\r\n    string internal constant NO_DEX_SET = \"no dex has been set for token\";\r\n    string internal constant INVALID_TOKEN_PAIR = \"invalid token pair\";\r\n    string internal constant TOKEN_NOT_USABLE = \"token not usable for the specific action\";\r\n    string internal constant ADDRESS_NOT_ACTION = \"address is not registered action\";\r\n    string internal constant INVALID_SLIPPAGE_TOLERANCE = \"Invalid slippage tolerance\";\r\n    string internal constant POOL_NOT_PAUSED = \"Pool must be paused to withdraw from reserve\";\r\n    string internal constant INTERACTION_LIMIT = \"Max of one deposit and withdraw per block\";\r\n    string internal constant GAUGE_EXISTS = \"Gauge already exists\";\r\n    string internal constant GAUGE_DOES_NOT_EXIST = \"Gauge does not exist\";\r\n    string internal constant EXCEEDS_MAX_BOOST = \"Not allowed to exceed maximum boost on Convex\";\r\n    string internal constant PREPARED_WITHDRAWAL =\r\n        \"Cannot relock funds when withdrawal is being prepared\";\r\n    string internal constant ASSET_NOT_SUPPORTED = \"Asset not supported\";\r\n    string internal constant STALE_PRICE = \"Price is stale\";\r\n    string internal constant NEGATIVE_PRICE = \"Price is negative\";\r\n    string internal constant NOT_ENOUGH_BKD_STAKED = \"Not enough BKD tokens staked\";\r\n    string internal constant RESERVE_ACCESS_EXCEEDED = \"Reserve access exceeded\";\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.5.0\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for managing\r\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\r\n * types.\r\n *\r\n * Sets have the following properties:\r\n *\r\n * - Elements are added, removed, and checked for existence in constant time\r\n * (O(1)).\r\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\r\n *\r\n * ```\r\n * contract Example {\r\n *     // Add the library methods\r\n *     using EnumerableSet for EnumerableSet.AddressSet;\r\n *\r\n *     // Declare a set state variable\r\n *     EnumerableSet.AddressSet private mySet;\r\n * }\r\n * ```\r\n *\r\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\r\n * and `uint256` (`UintSet`) are supported.\r\n */\r\nlibrary EnumerableSet {\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Set type with\r\n    // bytes32 values.\r\n    // The Set implementation uses private functions, and user-facing\r\n    // implementations (such as AddressSet) are just wrappers around the\r\n    // underlying Set.\r\n    // This means that we can only create new EnumerableSets for types that fit\r\n    // in bytes32.\r\n\r\n    struct Set {\r\n        // Storage of set values\r\n        bytes32[] _values;\r\n        // Position of the value in the `values` array, plus 1 because index 0\r\n        // means a value is not in the set.\r\n        mapping(bytes32 => uint256) _indexes;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function _add(Set storage set, bytes32 value) private returns (bool) {\r\n        if (!_contains(set, value)) {\r\n            set._values.push(value);\r\n            // The value is stored at length-1, but we add 1 to all indexes\r\n            // and use 0 as a sentinel value\r\n            set._indexes[value] = set._values.length;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\r\n        // We read and store the value's index to prevent multiple reads from the same storage slot\r\n        uint256 valueIndex = set._indexes[value];\r\n\r\n        if (valueIndex != 0) {\r\n            // Equivalent to contains(set, value)\r\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\r\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\r\n            // This modifies the order of the array, as noted in {at}.\r\n\r\n            uint256 toDeleteIndex = valueIndex - 1;\r\n            uint256 lastIndex = set._values.length - 1;\r\n\r\n            if (lastIndex != toDeleteIndex) {\r\n                bytes32 lastvalue = set._values[lastIndex];\r\n\r\n                // Move the last value to the index where the value to delete is\r\n                set._values[toDeleteIndex] = lastvalue;\r\n                // Update the index for the moved value\r\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\r\n            }\r\n\r\n            // Delete the slot where the moved value was stored\r\n            set._values.pop();\r\n\r\n            // Delete the index for the deleted slot\r\n            delete set._indexes[value];\r\n\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\r\n        return set._indexes[value] != 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function _length(Set storage set) private view returns (uint256) {\r\n        return set._values.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\r\n        return set._values[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function _values(Set storage set) private view returns (bytes32[] memory) {\r\n        return set._values;\r\n    }\r\n\r\n    // Bytes32Set\r\n\r\n    struct Bytes32Set {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _add(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\r\n        return _remove(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\r\n        return _contains(set._inner, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(Bytes32Set storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\r\n        return _at(set._inner, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\r\n        return _values(set._inner);\r\n    }\r\n\r\n    // AddressSet\r\n\r\n    struct AddressSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(AddressSet storage set, address value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(AddressSet storage set, address value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values in the set. O(1).\r\n     */\r\n    function length(AddressSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\r\n        return address(uint160(uint256(_at(set._inner, index))));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(AddressSet storage set) internal view returns (address[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        address[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // UintSet\r\n\r\n    struct UintSet {\r\n        Set _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Add a value to a set. O(1).\r\n     *\r\n     * Returns true if the value was added to the set, that is if it was not\r\n     * already present.\r\n     */\r\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _add(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the value was removed from the set, that is if it was\r\n     * present.\r\n     */\r\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\r\n        return _remove(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the value is in the set. O(1).\r\n     */\r\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\r\n        return _contains(set._inner, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of values on the set. O(1).\r\n     */\r\n    function length(UintSet storage set) internal view returns (uint256) {\r\n        return _length(set._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value stored at position `index` in the set. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\r\n        return uint256(_at(set._inner, index));\r\n    }\r\n\r\n    /**\r\n     * @dev Return the entire set in an array\r\n     *\r\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\r\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\r\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\r\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\r\n     */\r\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\r\n        bytes32[] memory store = _values(set._inner);\r\n        uint256[] memory result;\r\n\r\n        assembly {\r\n            result := store\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File libraries/EnumerableMapping.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary EnumerableMapping {\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n\r\n    // Code take from contracts/utils/structs/EnumerableMap.sol\r\n    // because the helper functions are private\r\n\r\n    // To implement this library for multiple types with as little code\r\n    // repetition as possible, we write it in terms of a generic Map type with\r\n    // bytes32 keys and values.\r\n    // The Map implementation uses private functions, and user-facing\r\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\r\n    // the underlying Map.\r\n    // This means that we can only create new EnumerableMaps for types that fit\r\n    // in bytes32.\r\n\r\n    struct Map {\r\n        // Storage of keys\r\n        EnumerableSet.Bytes32Set _keys;\r\n        mapping(bytes32 => bytes32) _values;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function _set(\r\n        Map storage map,\r\n        bytes32 key,\r\n        bytes32 value\r\n    ) private returns (bool) {\r\n        map._values[key] = value;\r\n        return map._keys.add(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a key-value pair from a map. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\r\n        delete map._values[key];\r\n        return map._keys.remove(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\r\n        return map._keys.contains(key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of key-value pairs in the map. O(1).\r\n     */\r\n    function _length(Map storage map) private view returns (uint256) {\r\n        return map._keys.length();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\r\n     *\r\n     * Note that there are no guarantees on the ordering of entries inside the\r\n     * array, and it may change when more entries are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\r\n        bytes32 key = map._keys.at(index);\r\n        return (key, map._values[key]);\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     */\r\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\r\n        bytes32 value = map._values[key];\r\n        if (value == bytes32(0)) {\r\n            return (_contains(map, key), bytes32(0));\r\n        } else {\r\n            return (true, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\r\n        bytes32 value = map._values[key];\r\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\r\n        return value;\r\n    }\r\n\r\n    // AddressToAddressMap\r\n\r\n    struct AddressToAddressMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(\r\n        AddressToAddressMap storage map,\r\n        address key,\r\n        address value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(uint256(uint160(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(AddressToAddressMap storage map, address key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(AddressToAddressMap storage map, address key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(AddressToAddressMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the set. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressToAddressMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address, address)\r\n    {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (address(uint160(uint256(key))), address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(AddressToAddressMap storage map, address key)\r\n        internal\r\n        view\r\n        returns (bool, address)\r\n    {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\r\n        return (success, address(uint160(uint256(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(AddressToAddressMap storage map, address key) internal view returns (address) {\r\n        return address(uint160(uint256(_get(map._inner, bytes32(uint256(uint160(key)))))));\r\n    }\r\n\r\n    // AddressToUintMap\r\n\r\n    struct AddressToUintMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(\r\n        AddressToUintMap storage map,\r\n        address key,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\r\n        return _remove(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\r\n        return _contains(map._inner, bytes32(uint256(uint160(key))));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the set. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(AddressToUintMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address, uint256)\r\n    {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (address(uint160(uint256(key))), uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(AddressToUintMap storage map, address key)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(uint256(uint160(key))));\r\n        return (success, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\r\n        return uint256(_get(map._inner, bytes32(uint256(uint160(key)))));\r\n    }\r\n\r\n    // Bytes32ToUIntMap\r\n\r\n    struct Bytes32ToUIntMap {\r\n        Map _inner;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\r\n     * key. O(1).\r\n     *\r\n     * Returns true if the key was added to the map, that is if it was not\r\n     * already present.\r\n     */\r\n    function set(\r\n        Bytes32ToUIntMap storage map,\r\n        bytes32 key,\r\n        uint256 value\r\n    ) internal returns (bool) {\r\n        return _set(map._inner, key, bytes32(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Removes a value from a set. O(1).\r\n     *\r\n     * Returns true if the key was removed from the map, that is if it was present.\r\n     */\r\n    function remove(Bytes32ToUIntMap storage map, bytes32 key) internal returns (bool) {\r\n        return _remove(map._inner, key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the key is in the map. O(1).\r\n     */\r\n    function contains(Bytes32ToUIntMap storage map, bytes32 key) internal view returns (bool) {\r\n        return _contains(map._inner, key);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of elements in the map. O(1).\r\n     */\r\n    function length(Bytes32ToUIntMap storage map) internal view returns (uint256) {\r\n        return _length(map._inner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the element stored at position `index` in the set. O(1).\r\n     * Note that there are no guarantees on the ordering of values inside the\r\n     * array, and it may change when more values are added or removed.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `index` must be strictly less than {length}.\r\n     */\r\n    function at(Bytes32ToUIntMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32, uint256)\r\n    {\r\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\r\n        return (key, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Tries to returns the value associated with `key`.  O(1).\r\n     * Does not revert if `key` is not in the map.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryGet(Bytes32ToUIntMap storage map, bytes32 key)\r\n        internal\r\n        view\r\n        returns (bool, uint256)\r\n    {\r\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\r\n        return (success, uint256(value));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the value associated with `key`.  O(1).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `key` must be in the map.\r\n     */\r\n    function get(Bytes32ToUIntMap storage map, bytes32 key) internal view returns (uint256) {\r\n        return uint256(_get(map._inner, key));\r\n    }\r\n}\r\n\r\n\r\n// File libraries/EnumerableExtensions.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\nlibrary EnumerableExtensions {\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableSet for EnumerableSet.Bytes32Set;\r\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\r\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\r\n    using EnumerableMapping for EnumerableMapping.Bytes32ToUIntMap;\r\n\r\n    function toArray(EnumerableSet.AddressSet storage addresses)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 len = addresses.length();\r\n        address[] memory result = new address[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = addresses.at(i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function toArray(EnumerableSet.Bytes32Set storage values)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        uint256 len = values.length();\r\n        bytes32[] memory result = new bytes32[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = values.at(i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function keyAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        (address key, ) = map.at(index);\r\n        return key;\r\n    }\r\n\r\n    function valueAt(EnumerableMapping.AddressToAddressMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        (, address value) = map.at(index);\r\n        return value;\r\n    }\r\n\r\n    function keyAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        (address key, ) = map.at(index);\r\n        return key;\r\n    }\r\n\r\n    function keyAt(EnumerableMapping.Bytes32ToUIntMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (bytes32)\r\n    {\r\n        (bytes32 key, ) = map.at(index);\r\n        return key;\r\n    }\r\n\r\n    function valueAt(EnumerableMapping.AddressToUintMap storage map, uint256 index)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, uint256 value) = map.at(index);\r\n        return value;\r\n    }\r\n\r\n    function keysArray(EnumerableMapping.AddressToAddressMap storage map)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 len = map.length();\r\n        address[] memory result = new address[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = keyAt(map, i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function valuesArray(EnumerableMapping.AddressToAddressMap storage map)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 len = map.length();\r\n        address[] memory result = new address[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = valueAt(map, i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function keysArray(EnumerableMapping.AddressToUintMap storage map)\r\n        internal\r\n        view\r\n        returns (address[] memory)\r\n    {\r\n        uint256 len = map.length();\r\n        address[] memory result = new address[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = keyAt(map, i);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function keysArray(EnumerableMapping.Bytes32ToUIntMap storage map)\r\n        internal\r\n        view\r\n        returns (bytes32[] memory)\r\n    {\r\n        uint256 len = map.length();\r\n        bytes32[] memory result = new bytes32[](len);\r\n        for (uint256 i = 0; i < len; i++) {\r\n            result[i] = keyAt(map, i);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\n// File interfaces/IRoleManager.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IRoleManager {\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(bytes32[] memory roles, address account) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function hasAnyRole(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3,\r\n        address account\r\n    ) external view returns (bool);\r\n\r\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\r\n\r\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\r\n}\r\n\r\n\r\n// File interfaces/tokenomics/IBkdToken.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IBkdToken is IERC20 {\r\n    function mint(address account, uint256 amount) external;\r\n}\r\n\r\n\r\n// File libraries/AddressProviderKeys.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\nlibrary AddressProviderKeys {\r\n    bytes32 internal constant _TREASURY_KEY = \"treasury\";\r\n    bytes32 internal constant _GAS_BANK_KEY = \"gasBank\";\r\n    bytes32 internal constant _VAULT_RESERVE_KEY = \"vaultReserve\";\r\n    bytes32 internal constant _SWAPPER_REGISTRY_KEY = \"swapperRegistry\";\r\n    bytes32 internal constant _ORACLE_PROVIDER_KEY = \"oracleProvider\";\r\n    bytes32 internal constant _POOL_FACTORY_KEY = \"poolFactory\";\r\n    bytes32 internal constant _CONTROLLER_KEY = \"controller\";\r\n    bytes32 internal constant _BKD_LOCKER_KEY = \"bkdLocker\";\r\n    bytes32 internal constant _ROLE_MANAGER_KEY = \"roleManager\";\r\n}\r\n\r\n\r\n// File libraries/AddressProviderHelpers.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary AddressProviderHelpers {\r\n    /**\r\n     * @return The address of the treasury.\r\n     */\r\n    function getTreasury(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._TREASURY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The gas bank.\r\n     */\r\n    function getGasBank(IAddressProvider provider) internal view returns (IGasBank) {\r\n        return IGasBank(provider.getAddress(AddressProviderKeys._GAS_BANK_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the vault reserve.\r\n     */\r\n    function getVaultReserve(IAddressProvider provider) internal view returns (IVaultReserve) {\r\n        return IVaultReserve(provider.getAddress(AddressProviderKeys._VAULT_RESERVE_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return The address of the swapperRegistry.\r\n     */\r\n    function getSwapperRegistry(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._SWAPPER_REGISTRY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return The oracleProvider.\r\n     */\r\n    function getOracleProvider(IAddressProvider provider) internal view returns (IOracleProvider) {\r\n        return IOracleProvider(provider.getAddress(AddressProviderKeys._ORACLE_PROVIDER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getBKDLocker(IAddressProvider provider) internal view returns (address) {\r\n        return provider.getAddress(AddressProviderKeys._BKD_LOCKER_KEY);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the BKD locker\r\n     */\r\n    function getRoleManager(IAddressProvider provider) internal view returns (IRoleManager) {\r\n        return IRoleManager(provider.getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\r\n    }\r\n\r\n    /**\r\n     * @return the controller\r\n     */\r\n    function getController(IAddressProvider provider) internal view returns (IController) {\r\n        return IController(provider.getAddress(AddressProviderKeys._CONTROLLER_KEY));\r\n    }\r\n}\r\n\r\n\r\n// File contracts/vault/VaultStorage.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\ncontract VaultStorage {\r\n    uint256 public currentAllocated;\r\n    uint256 public waitingForRemovalAllocated;\r\n    address public pool;\r\n\r\n    uint256 public totalDebt;\r\n    bool public strategyActive;\r\n\r\n    EnumerableMapping.AddressToUintMap internal _strategiesWaitingForRemoval;\r\n}\r\n\r\ncontract VaultStorageV1 is VaultStorage {\r\n    /**\r\n     * @dev This is to avoid breaking contracts inheriting from `VaultStorage`\r\n     * such as `Erc20Vault`, especially if they have storage variables\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     * for more details\r\n     *\r\n     * A new field can be added using a new contract such as\r\n     *\r\n     * ```solidity\r\n     * contract VaultStorageV2 is VaultStorage {\r\n     *   uint256 someNewField;\r\n     *   uint256[49] private __gap;\r\n     * }\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n\r\n// File contracts/utils/Preparable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @notice Implements the base logic for a two-phase commit\r\n * @dev This does not implements any access-control so publicly exposed\r\n * callers should make sure to have the proper checks in palce\r\n */\r\ncontract Preparable is IPreparable {\r\n    uint256 private constant _MIN_DELAY = 3 days;\r\n\r\n    mapping(bytes32 => address) public pendingAddresses;\r\n    mapping(bytes32 => uint256) public pendingUInts256;\r\n\r\n    mapping(bytes32 => address) public currentAddresses;\r\n    mapping(bytes32 => uint256) public currentUInts256;\r\n\r\n    /**\r\n     * @dev Deadlines shares the same namespace regardless of the type\r\n     * of the pending variable so this needs to be enforced in the caller\r\n     */\r\n    mapping(bytes32 => uint256) public deadlines;\r\n\r\n    function _prepareDeadline(bytes32 key, uint256 delay) internal {\r\n        require(deadlines[key] == 0, Error.DEADLINE_NOT_ZERO);\r\n        require(delay >= _MIN_DELAY, Error.DELAY_TOO_SHORT);\r\n        deadlines[key] = block.timestamp + delay;\r\n    }\r\n\r\n    /**\r\n     * @notice Prepares an uint256 that should be commited to the contract\r\n     * after `_MIN_DELAY` elapsed\r\n     * @param value The value to prepare\r\n     * @return `true` if success.\r\n     */\r\n    function _prepare(\r\n        bytes32 key,\r\n        uint256 value,\r\n        uint256 delay\r\n    ) internal returns (bool) {\r\n        _prepareDeadline(key, delay);\r\n        pendingUInts256[key] = value;\r\n        emit ConfigPreparedNumber(key, value, delay);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Same as `_prepare(bytes32,uint256,uint256)` but uses a default delay\r\n     */\r\n    function _prepare(bytes32 key, uint256 value) internal returns (bool) {\r\n        return _prepare(key, value, _MIN_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepares an address that should be commited to the contract\r\n     * after `_MIN_DELAY` elapsed\r\n     * @param value The value to prepare\r\n     * @return `true` if success.\r\n     */\r\n    function _prepare(\r\n        bytes32 key,\r\n        address value,\r\n        uint256 delay\r\n    ) internal returns (bool) {\r\n        _prepareDeadline(key, delay);\r\n        pendingAddresses[key] = value;\r\n        emit ConfigPreparedAddress(key, value, delay);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Same as `_prepare(bytes32,address,uint256)` but uses a default delay\r\n     */\r\n    function _prepare(bytes32 key, address value) internal returns (bool) {\r\n        return _prepare(key, value, _MIN_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Reset a uint256 key\r\n     * @return `true` if success.\r\n     */\r\n    function _resetUInt256Config(bytes32 key) internal returns (bool) {\r\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\r\n        deadlines[key] = 0;\r\n        pendingUInts256[key] = 0;\r\n        emit ConfigReset(key);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Reset an address key\r\n     * @return `true` if success.\r\n     */\r\n    function _resetAddressConfig(bytes32 key) internal returns (bool) {\r\n        require(deadlines[key] != 0, Error.DEADLINE_NOT_ZERO);\r\n        deadlines[key] = 0;\r\n        pendingAddresses[key] = address(0);\r\n        emit ConfigReset(key);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks the deadline of the key and reset it\r\n     */\r\n    function _executeDeadline(bytes32 key) internal {\r\n        uint256 deadline = deadlines[key];\r\n        require(block.timestamp >= deadline, Error.DEADLINE_NOT_REACHED);\r\n        require(deadline != 0, Error.DEADLINE_NOT_SET);\r\n        deadlines[key] = 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute uint256 config update (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n     * @return New value.\r\n     */\r\n    function _executeUInt256(bytes32 key) internal returns (uint256) {\r\n        _executeDeadline(key);\r\n        uint256 newValue = pendingUInts256[key];\r\n        _setConfig(key, newValue);\r\n        return newValue;\r\n    }\r\n\r\n    /**\r\n     * @notice Execute address config update (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\r\n     * @return New value.\r\n     */\r\n    function _executeAddress(bytes32 key) internal returns (address) {\r\n        _executeDeadline(key);\r\n        address newValue = pendingAddresses[key];\r\n        _setConfig(key, newValue);\r\n        return newValue;\r\n    }\r\n\r\n    function _setConfig(bytes32 key, address value) internal returns (address) {\r\n        address oldValue = currentAddresses[key];\r\n        currentAddresses[key] = value;\r\n        pendingAddresses[key] = address(0);\r\n        deadlines[key] = 0;\r\n        emit ConfigUpdatedAddress(key, oldValue, value);\r\n        return value;\r\n    }\r\n\r\n    function _setConfig(bytes32 key, uint256 value) internal returns (uint256) {\r\n        uint256 oldValue = currentUInts256[key];\r\n        currentUInts256[key] = value;\r\n        pendingUInts256[key] = 0;\r\n        deadlines[key] = 0;\r\n        emit ConfigUpdatedNumber(key, oldValue, value);\r\n        return value;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/utils/IPausable.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ninterface IPausable {\r\n    function pause() external returns (bool);\r\n\r\n    function unpause() external returns (bool);\r\n\r\n    function isPaused() external view returns (bool);\r\n\r\n    function isAuthorizedToPause(address account) external view returns (bool);\r\n}\r\n\r\n\r\n// File libraries/Roles.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n// solhint-disable private-vars-leading-underscore\r\n\r\nlibrary Roles {\r\n    bytes32 internal constant GOVERNANCE = \"governance\";\r\n    bytes32 internal constant ADDRESS_PROVIDER = \"address_provider\";\r\n    bytes32 internal constant POOL_FACTORY = \"pool_factory\";\r\n    bytes32 internal constant CONTROLLER = \"controller\";\r\n    bytes32 internal constant GAUGE_ZAP = \"gauge_zap\";\r\n    bytes32 internal constant MAINTENANCE = \"maintenance\";\r\n    bytes32 internal constant INFLATION_MANAGER = \"inflation_manager\";\r\n    bytes32 internal constant POOL = \"pool\";\r\n    bytes32 internal constant VAULT = \"vault\";\r\n}\r\n\r\n\r\n// File contracts/access/AuthorizationBase.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n/**\r\n * @notice Provides modifiers for authorization\r\n */\r\nabstract contract AuthorizationBase {\r\n    /**\r\n     * @notice Only allows a sender with `role` to perform the given action\r\n     */\r\n    modifier onlyRole(bytes32 role) {\r\n        require(_roleManager().hasRole(role, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with GOVERNANCE role to perform the given action\r\n     */\r\n    modifier onlyGovernance() {\r\n        require(_roleManager().hasRole(Roles.GOVERNANCE, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles2(bytes32 role1, bytes32 role2) {\r\n        require(_roleManager().hasAnyRole(role1, role2, msg.sender), Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Only allows a sender with any of `roles` to perform the given action\r\n     */\r\n    modifier onlyRoles3(\r\n        bytes32 role1,\r\n        bytes32 role2,\r\n        bytes32 role3\r\n    ) {\r\n        require(\r\n            _roleManager().hasAnyRole(role1, role2, role3, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    function roleManager() external view virtual returns (IRoleManager) {\r\n        return _roleManager();\r\n    }\r\n\r\n    function _roleManager() internal view virtual returns (IRoleManager);\r\n}\r\n\r\n\r\n// File contracts/access/Authorization.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract Authorization is AuthorizationBase {\r\n    IRoleManager internal immutable __roleManager;\r\n\r\n    constructor(IRoleManager roleManager) {\r\n        __roleManager = roleManager;\r\n    }\r\n\r\n    function _roleManager() internal view override returns (IRoleManager) {\r\n        return __roleManager;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/vault/Vault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract Vault is IVault, Authorization, VaultStorageV1, Preparable, Initializable {\r\n    using ScaledMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using EnumerableSet for EnumerableSet.AddressSet;\r\n    using EnumerableExtensions for EnumerableSet.AddressSet;\r\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\r\n    using EnumerableExtensions for EnumerableMapping.AddressToUintMap;\r\n    using AddressProviderHelpers for IAddressProvider;\r\n\r\n    bytes32 internal constant _STRATEGY_KEY = \"Strategy\";\r\n    bytes32 internal constant _PERFORMANCE_FEE_KEY = \"PerformanceFee\";\r\n    bytes32 internal constant _STRATEGIST_FEE_KEY = \"StrategistFee\";\r\n    bytes32 internal constant _DEBT_LIMIT_KEY = \"DebtLimit\";\r\n    bytes32 internal constant _TARGET_ALLOCATION_KEY = \"TargetAllocation\";\r\n    bytes32 internal constant _RESERVE_FEE_KEY = \"ReserveFee\";\r\n    bytes32 internal constant _BOUND_KEY = \"Bound\";\r\n\r\n    uint256 internal constant _INITIAL_RESERVE_FEE = 0.01e18;\r\n    uint256 internal constant _INITIAL_STRATEGIST_FEE = 0.1e18;\r\n    uint256 internal constant _INITIAL_PERFORMANCE_FEE = 0;\r\n\r\n    uint256 public constant MAX_PERFORMANCE_FEE = 0.5e18;\r\n    uint256 public constant MAX_DEVIATION_BOUND = 0.5e18;\r\n    uint256 public constant STRATEGY_DELAY = 5 days;\r\n\r\n    IController public immutable controller;\r\n    IAddressProvider public immutable addressProvider;\r\n    IVaultReserve public immutable reserve;\r\n\r\n    modifier onlyPool() {\r\n        require(msg.sender == pool, Error.UNAUTHORIZED_ACCESS);\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolOrGovernance() {\r\n        require(\r\n            msg.sender == pool || _roleManager().hasRole(Roles.GOVERNANCE, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier onlyPoolOrMaintenance() {\r\n        require(\r\n            msg.sender == pool || _roleManager().hasRole(Roles.MAINTENANCE, msg.sender),\r\n            Error.UNAUTHORIZED_ACCESS\r\n        );\r\n        _;\r\n    }\r\n\r\n    constructor(IController _controller)\r\n        Authorization(_controller.addressProvider().getRoleManager())\r\n    {\r\n        controller = _controller;\r\n        IAddressProvider addressProvider_ = _controller.addressProvider();\r\n        addressProvider = addressProvider_;\r\n        reserve = IVaultReserve(addressProvider_.getVaultReserve());\r\n    }\r\n\r\n    function _initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) internal {\r\n        require(_debtLimit <= ScaledMath.ONE, Error.INVALID_AMOUNT);\r\n        require(_targetAllocation <= ScaledMath.ONE, Error.INVALID_AMOUNT);\r\n        require(_bound <= MAX_DEVIATION_BOUND, Error.INVALID_AMOUNT);\r\n\r\n        pool = _pool;\r\n\r\n        _setConfig(_DEBT_LIMIT_KEY, _debtLimit);\r\n        _setConfig(_TARGET_ALLOCATION_KEY, _targetAllocation);\r\n        _setConfig(_BOUND_KEY, _bound);\r\n        _setConfig(_RESERVE_FEE_KEY, _INITIAL_RESERVE_FEE);\r\n        _setConfig(_STRATEGIST_FEE_KEY, _INITIAL_STRATEGIST_FEE);\r\n        _setConfig(_PERFORMANCE_FEE_KEY, _INITIAL_PERFORMANCE_FEE);\r\n    }\r\n\r\n    /**\r\n     * @notice Handles deposits from the liquidity pool\r\n     */\r\n    function deposit() external payable override onlyPoolOrMaintenance {\r\n        // solhint-disable-previous-line ordering\r\n        _deposit();\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws specified amount of underlying from vault.\r\n     * @dev If the specified amount exceeds idle funds, an amount of funds is withdrawn\r\n     *      from the strategy such that it will achieve a target allocation for after the\r\n     *      amount has been withdrawn.\r\n     * @param amount Amount to withdraw.\r\n     * @return `true` if successful.\r\n     */\r\n    function withdraw(uint256 amount) external override onlyPoolOrGovernance returns (bool) {\r\n        IStrategy strategy = getStrategy();\r\n        uint256 availableUnderlying_ = _availableUnderlying();\r\n\r\n        if (availableUnderlying_ < amount) {\r\n            if (address(strategy) == address(0)) return false;\r\n            uint256 allocated = strategy.balance();\r\n            uint256 requiredWithdrawal = amount - availableUnderlying_;\r\n\r\n            if (requiredWithdrawal > allocated) return false;\r\n\r\n            // compute withdrawal amount to sustain target allocation\r\n            uint256 newTarget = (allocated - requiredWithdrawal).scaledMul(getTargetAllocation());\r\n            uint256 excessAmount = allocated - newTarget;\r\n            strategy.withdraw(excessAmount);\r\n            currentAllocated = _computeNewAllocated(currentAllocated, excessAmount);\r\n        } else {\r\n            uint256 allocatedUnderlying = 0;\r\n            if (address(strategy) != address(0))\r\n                allocatedUnderlying = IStrategy(strategy).balance();\r\n            uint256 totalUnderlying = availableUnderlying_ +\r\n                allocatedUnderlying +\r\n                waitingForRemovalAllocated;\r\n            uint256 totalUnderlyingAfterWithdraw = totalUnderlying - amount;\r\n            _rebalance(totalUnderlyingAfterWithdraw, allocatedUnderlying);\r\n        }\r\n\r\n        _transfer(pool, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws all funds from vault and strategy and transfer them to the pool.\r\n     */\r\n    function withdrawAll() external override onlyPoolOrGovernance {\r\n        _withdrawAllFromStrategy();\r\n        _transfer(pool, _availableUnderlying());\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws specified amount of underlying from reserve to vault.\r\n     * @dev Withdraws from reserve will cause a spike in pool exchange rate.\r\n     *  Pool deposits should be paused during this to prevent front running\r\n     * @param amount Amount to withdraw.\r\n     */\r\n    function withdrawFromReserve(uint256 amount) external override onlyGovernance {\r\n        require(amount > 0, Error.INVALID_AMOUNT);\r\n        require(IPausable(pool).isPaused(), Error.POOL_NOT_PAUSED);\r\n        uint256 reserveBalance_ = reserve.getBalance(address(this), getUnderlying());\r\n        require(amount <= reserveBalance_, Error.INSUFFICIENT_BALANCE);\r\n        reserve.withdraw(getUnderlying(), amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Activate the current strategy set for the vault.\r\n     * @return `true` if strategy has been activated\r\n     */\r\n    function activateStrategy() external onlyGovernance returns (bool) {\r\n        return _activateStrategy();\r\n    }\r\n\r\n    /**\r\n     * @notice Deactivates a strategy.\r\n     * @return `true` if strategy has been deactivated\r\n     */\r\n    function deactivateStrategy() external onlyGovernance returns (bool) {\r\n        return _deactivateStrategy();\r\n    }\r\n\r\n    /**\r\n     * @notice Initializes the vault's strategy.\r\n     * @dev Bypasses the time delay, but can only be called if strategy is not set already.\r\n     * @param strategy_ Address of the strategy.\r\n     * @return `true` if successful.\r\n     */\r\n    function initializeStrategy(address strategy_) external override onlyGovernance returns (bool) {\r\n        require(currentAddresses[_STRATEGY_KEY] == address(0), Error.ADDRESS_ALREADY_SET);\r\n        require(strategy_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        _setConfig(_STRATEGY_KEY, strategy_);\r\n        _activateStrategy();\r\n        require(IStrategy(strategy_).strategist() != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of the vault's strategy (with time delay enforced).\r\n     * @param newStrategy Address of the new strategy.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareNewStrategy(address newStrategy) external onlyGovernance returns (bool) {\r\n        return _prepare(_STRATEGY_KEY, newStrategy, STRATEGY_DELAY);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute strategy update (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New strategy address.\r\n     */\r\n    function executeNewStrategy() external returns (address) {\r\n        _executeDeadline(_STRATEGY_KEY);\r\n        IStrategy strategy = getStrategy();\r\n        if (address(strategy) != address(0)) {\r\n            _harvest();\r\n            strategy.shutdown();\r\n            strategy.withdrawAll();\r\n\r\n            // there might still be some balance left if the strategy did not\r\n            // manage to withdraw all funds (e.g. due to locking)\r\n            uint256 remainingStrategyBalance = strategy.balance();\r\n            if (remainingStrategyBalance > 0) {\r\n                _strategiesWaitingForRemoval.set(address(strategy), remainingStrategyBalance);\r\n                waitingForRemovalAllocated += remainingStrategyBalance;\r\n            }\r\n        }\r\n        _deactivateStrategy();\r\n        currentAllocated = 0;\r\n        totalDebt = 0;\r\n        address newStrategy = pendingAddresses[_STRATEGY_KEY];\r\n        _setConfig(_STRATEGY_KEY, newStrategy);\r\n\r\n        if (newStrategy != address(0)) {\r\n            _activateStrategy();\r\n        }\r\n\r\n        return newStrategy;\r\n    }\r\n\r\n    function resetNewStrategy() external onlyGovernance returns (bool) {\r\n        return _resetAddressConfig(_STRATEGY_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of performance fee (with time delay enforced).\r\n     * @param newPerformanceFee New performance fee value.\r\n     * @return `true` if successful.\r\n     */\r\n    function preparePerformanceFee(uint256 newPerformanceFee)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        require(newPerformanceFee <= MAX_PERFORMANCE_FEE, Error.INVALID_AMOUNT);\r\n        return _prepare(_PERFORMANCE_FEE_KEY, newPerformanceFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of performance fee (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New performance fee.\r\n     */\r\n    function executePerformanceFee() external returns (uint256) {\r\n        return _executeUInt256(_PERFORMANCE_FEE_KEY);\r\n    }\r\n\r\n    function resetPerformanceFee() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_PERFORMANCE_FEE_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of strategist fee (with time delay enforced).\r\n     * @param newStrategistFee New strategist fee value.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareStrategistFee(uint256 newStrategistFee) external onlyGovernance returns (bool) {\r\n        _checkFeesInvariant(getReserveFee(), newStrategistFee);\r\n        return _prepare(_STRATEGIST_FEE_KEY, newStrategistFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of strategist fee (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New strategist fee.\r\n     */\r\n    function executeStrategistFee() external returns (uint256) {\r\n        uint256 newStrategistFee = _executeUInt256(_STRATEGIST_FEE_KEY);\r\n        _checkFeesInvariant(getReserveFee(), newStrategistFee);\r\n        return newStrategistFee;\r\n    }\r\n\r\n    function resetStrategistFee() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_STRATEGIST_FEE_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of debt limit (with time delay enforced).\r\n     * @param newDebtLimit New debt limit.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareDebtLimit(uint256 newDebtLimit) external onlyGovernance returns (bool) {\r\n        return _prepare(_DEBT_LIMIT_KEY, newDebtLimit);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of debt limit (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New debt limit.\r\n     */\r\n    function executeDebtLimit() external returns (uint256) {\r\n        uint256 debtLimit = _executeUInt256(_DEBT_LIMIT_KEY);\r\n        uint256 debtLimitAllocated = currentAllocated.scaledMul(debtLimit);\r\n        if (totalDebt >= debtLimitAllocated) {\r\n            _handleExcessDebt();\r\n        }\r\n        return debtLimit;\r\n    }\r\n\r\n    function resetDebtLimit() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_DEBT_LIMIT_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of target allocation (with time delay enforced).\r\n     * @param newTargetAllocation New target allocation.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareTargetAllocation(uint256 newTargetAllocation)\r\n        external\r\n        onlyGovernance\r\n        returns (bool)\r\n    {\r\n        return _prepare(_TARGET_ALLOCATION_KEY, newTargetAllocation);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of target allocation (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New target allocation.\r\n     */\r\n    function executeTargetAllocation() external returns (uint256) {\r\n        uint256 targetAllocation = _executeUInt256(_TARGET_ALLOCATION_KEY);\r\n        _deposit();\r\n        return targetAllocation;\r\n    }\r\n\r\n    function resetTargetAllocation() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_TARGET_ALLOCATION_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of reserve fee (with time delay enforced).\r\n     * @param newReserveFee New reserve fee.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareReserveFee(uint256 newReserveFee) external onlyGovernance returns (bool) {\r\n        _checkFeesInvariant(newReserveFee, getStrategistFee());\r\n        return _prepare(_RESERVE_FEE_KEY, newReserveFee);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of reserve fee (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New reserve fee.\r\n     */\r\n    function executeReserveFee() external returns (uint256) {\r\n        uint256 newReserveFee = _executeUInt256(_RESERVE_FEE_KEY);\r\n        _checkFeesInvariant(newReserveFee, getStrategistFee());\r\n        return newReserveFee;\r\n    }\r\n\r\n    function resetReserveFee() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_RESERVE_FEE_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Prepare update of deviation bound for strategy allocation (with time delay enforced).\r\n     * @param newBound New deviation bound for target allocation.\r\n     * @return `true` if successful.\r\n     */\r\n    function prepareBound(uint256 newBound) external onlyGovernance returns (bool) {\r\n        require(newBound <= MAX_DEVIATION_BOUND, Error.INVALID_AMOUNT);\r\n        return _prepare(_BOUND_KEY, newBound);\r\n    }\r\n\r\n    /**\r\n     * @notice Execute update of deviation bound for strategy allocation (with time delay enforced).\r\n     * @dev Needs to be called after the update was prepraed. Fails if called before time delay is met.\r\n     * @return New deviation bound.\r\n     */\r\n    function executeBound() external returns (uint256) {\r\n        uint256 bound = _executeUInt256(_BOUND_KEY);\r\n        _deposit();\r\n        return bound;\r\n    }\r\n\r\n    function resetBound() external onlyGovernance returns (bool) {\r\n        return _resetUInt256Config(_BOUND_KEY);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws an amount of underlying from the strategy to the vault.\r\n     * @param amount Amount of underlying to withdraw.\r\n     * @return True if successful withdrawal.\r\n     */\r\n    function withdrawFromStrategy(uint256 amount) external onlyGovernance returns (bool) {\r\n        IStrategy strategy = getStrategy();\r\n        if (address(strategy) == address(0)) return false;\r\n        if (strategy.balance() < amount) return false;\r\n        uint256 oldBalance = _availableUnderlying();\r\n        strategy.withdraw(amount);\r\n        uint256 newBalance = _availableUnderlying();\r\n        currentAllocated -= newBalance - oldBalance;\r\n        return true;\r\n    }\r\n\r\n    function withdrawFromStrategyWaitingForRemoval(address strategy) external returns (uint256) {\r\n        (bool exists, uint256 allocated) = _strategiesWaitingForRemoval.tryGet(strategy);\r\n        require(exists, Error.STRATEGY_DOES_NOT_EXIST);\r\n\r\n        IStrategy strategy_ = IStrategy(strategy);\r\n\r\n        strategy_.harvest();\r\n        uint256 withdrawn = strategy_.withdrawAll();\r\n\r\n        uint256 _waitingForRemovalAllocated = waitingForRemovalAllocated;\r\n        if (withdrawn >= _waitingForRemovalAllocated) {\r\n            waitingForRemovalAllocated = 0;\r\n        } else {\r\n            waitingForRemovalAllocated = _waitingForRemovalAllocated - withdrawn;\r\n        }\r\n\r\n        if (withdrawn > allocated) {\r\n            uint256 profit = withdrawn - allocated;\r\n            uint256 strategistShare = _shareFees(profit.scaledMul(getPerformanceFee()));\r\n            if (strategistShare > 0) {\r\n                _payStrategist(strategistShare, strategy_.strategist());\r\n            }\r\n            allocated = 0;\r\n            emit Harvest(profit, 0);\r\n        } else {\r\n            allocated -= withdrawn;\r\n        }\r\n\r\n        if (strategy_.balance() == 0) {\r\n            _strategiesWaitingForRemoval.remove(address(strategy_));\r\n        } else {\r\n            _strategiesWaitingForRemoval.set(address(strategy_), allocated);\r\n        }\r\n\r\n        return withdrawn;\r\n    }\r\n\r\n    function getStrategiesWaitingForRemoval() external view returns (address[] memory) {\r\n        return _strategiesWaitingForRemoval.keysArray();\r\n    }\r\n\r\n    /**\r\n     * @notice Computes the total underlying of the vault: idle funds + allocated funds - debt\r\n     * @return Total amount of underlying.\r\n     */\r\n    function getTotalUnderlying() external view override returns (uint256) {\r\n        uint256 availableUnderlying_ = _availableUnderlying();\r\n\r\n        if (address(getStrategy()) == address(0)) {\r\n            return availableUnderlying_;\r\n        }\r\n\r\n        uint256 netUnderlying = availableUnderlying_ +\r\n            currentAllocated +\r\n            waitingForRemovalAllocated;\r\n        if (totalDebt <= netUnderlying) return netUnderlying - totalDebt;\r\n        return 0;\r\n    }\r\n\r\n    function getAllocatedToStrategyWaitingForRemoval(address strategy)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _strategiesWaitingForRemoval.get(strategy);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraws all funds from strategy to vault.\r\n     * @dev Harvests profits before withdrawing. Deactivates strategy after withdrawing.\r\n     * @return `true` if successful.\r\n     */\r\n    function withdrawAllFromStrategy() public onlyPoolOrGovernance returns (bool) {\r\n        return _withdrawAllFromStrategy();\r\n    }\r\n\r\n    /**\r\n     * @notice Harvest profits from the vault's strategy.\r\n     * @dev Harvesting adds profits to the vault's balance and deducts fees.\r\n     *  No performance fees are charged on profit used to repay debt.\r\n     * @return `true` if successful.\r\n     */\r\n    function harvest() public onlyPoolOrMaintenance returns (bool) {\r\n        return _harvest();\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the percentage of the performance fee that goes to the strategist.\r\n     */\r\n    function getStrategistFee() public view returns (uint256) {\r\n        return currentUInts256[_STRATEGIST_FEE_KEY];\r\n    }\r\n\r\n    function getStrategy() public view override returns (IStrategy) {\r\n        return IStrategy(currentAddresses[_STRATEGY_KEY]);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the percentage of the performance fee which is allocated to the vault reserve\r\n     */\r\n    function getReserveFee() public view returns (uint256) {\r\n        return currentUInts256[_RESERVE_FEE_KEY];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the fee charged on a strategy's generated profits.\r\n     * @dev The strategist is paid in LP tokens, while the remainder of the profit stays in the vault.\r\n     *      Default performance fee is set to 5% of harvested profits.\r\n     */\r\n    function getPerformanceFee() public view returns (uint256) {\r\n        return currentUInts256[_PERFORMANCE_FEE_KEY];\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the allowed symmetric bound for target allocation (e.g. +- 5%)\r\n     */\r\n    function getBound() public view returns (uint256) {\r\n        return currentUInts256[_BOUND_KEY];\r\n    }\r\n\r\n    /**\r\n     * @notice The target percentage of total underlying funds to be allocated towards a strategy.\r\n     * @dev this is to reduce gas costs. Withdrawals first come from idle funds and can therefore\r\n     *      avoid unnecessary gas costs.\r\n     */\r\n    function getTargetAllocation() public view returns (uint256) {\r\n        return currentUInts256[_TARGET_ALLOCATION_KEY];\r\n    }\r\n\r\n    /**\r\n     * @notice The debt limit that the total debt of a strategy may not exceed.\r\n     */\r\n    function getDebtLimit() public view returns (uint256) {\r\n        return currentUInts256[_DEBT_LIMIT_KEY];\r\n    }\r\n\r\n    function getUnderlying() public view virtual override returns (address);\r\n\r\n    function _activateStrategy() internal returns (bool) {\r\n        IStrategy strategy = getStrategy();\r\n        if (address(strategy) == address(0)) return false;\r\n\r\n        strategyActive = true;\r\n        emit StrategyActivated(address(strategy));\r\n        _deposit();\r\n        return true;\r\n    }\r\n\r\n    function _harvest() internal returns (bool) {\r\n        IStrategy strategy = getStrategy();\r\n        if (address(strategy) == address(0)) {\r\n            return false;\r\n        }\r\n\r\n        strategy.harvest();\r\n\r\n        uint256 strategistShare = 0;\r\n\r\n        uint256 allocatedUnderlying = strategy.balance();\r\n        uint256 amountAllocated = currentAllocated;\r\n        uint256 currentDebt = totalDebt;\r\n\r\n        if (allocatedUnderlying > amountAllocated) {\r\n            // we made profits\r\n            uint256 profit = allocatedUnderlying - amountAllocated;\r\n\r\n            if (profit > currentDebt) {\r\n                if (currentDebt > 0) {\r\n                    profit -= currentDebt;\r\n                    currentDebt = 0;\r\n                }\r\n                (profit, strategistShare) = _shareProfit(profit);\r\n            } else {\r\n                currentDebt -= profit;\r\n            }\r\n            emit Harvest(profit, 0);\r\n        } else if (allocatedUnderlying < amountAllocated) {\r\n            // we made a loss\r\n            uint256 loss = amountAllocated - allocatedUnderlying;\r\n            currentDebt += loss;\r\n\r\n            // check debt limit and withdraw funds if exceeded\r\n            uint256 debtLimit = getDebtLimit();\r\n            uint256 debtLimitAllocated = amountAllocated.scaledMul(debtLimit);\r\n            if (currentDebt > debtLimitAllocated) {\r\n                currentDebt = _handleExcessDebt(currentDebt);\r\n            }\r\n            emit Harvest(0, loss);\r\n        } else {\r\n            // nothing to declare\r\n            return true;\r\n        }\r\n\r\n        totalDebt = currentDebt;\r\n        currentAllocated = strategy.balance();\r\n\r\n        if (strategistShare > 0) {\r\n            _payStrategist(strategistShare);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _withdrawAllFromStrategy() internal returns (bool) {\r\n        IStrategy strategy = getStrategy();\r\n        if (address(strategy) == address(0)) return false;\r\n        _harvest();\r\n        uint256 oldBalance = _availableUnderlying();\r\n        strategy.withdrawAll();\r\n        uint256 newBalance = _availableUnderlying();\r\n        uint256 withdrawnAmount = newBalance - oldBalance;\r\n\r\n        currentAllocated = _computeNewAllocated(currentAllocated, withdrawnAmount);\r\n        _deactivateStrategy();\r\n        return true;\r\n    }\r\n\r\n    function _handleExcessDebt(uint256 currentDebt) internal returns (uint256) {\r\n        uint256 underlyingReserves = reserve.getBalance(address(this), getUnderlying());\r\n        if (currentDebt > underlyingReserves) {\r\n            _emergencyStop(underlyingReserves);\r\n        } else if (reserve.canWithdraw(address(this))) {\r\n            reserve.withdraw(getUnderlying(), currentDebt);\r\n            currentDebt = 0;\r\n            _deposit();\r\n        }\r\n        return currentDebt;\r\n    }\r\n\r\n    function _handleExcessDebt() internal {\r\n        uint256 currentDebt = totalDebt;\r\n        uint256 newDebt = _handleExcessDebt(totalDebt);\r\n        if (currentDebt != newDebt) {\r\n            totalDebt = newDebt;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Invest the underlying money in the vault after a deposit from the pool is made.\r\n     * @dev After each deposit, the vault checks whether it needs to rebalance underlying funds allocated to strategy.\r\n     * If no strategy is set then all deposited funds will be idle.\r\n     */\r\n    function _deposit() internal {\r\n        if (!strategyActive) return;\r\n\r\n        uint256 allocatedUnderlying = getStrategy().balance();\r\n        uint256 totalUnderlying = _availableUnderlying() +\r\n            allocatedUnderlying +\r\n            waitingForRemovalAllocated;\r\n\r\n        if (totalUnderlying == 0) return;\r\n        _rebalance(totalUnderlying, allocatedUnderlying);\r\n    }\r\n\r\n    function _shareProfit(uint256 profit) internal returns (uint256, uint256) {\r\n        uint256 totalFeeAmount = profit.scaledMul(getPerformanceFee());\r\n        if (_availableUnderlying() < totalFeeAmount) {\r\n            getStrategy().withdraw(totalFeeAmount);\r\n        }\r\n        uint256 strategistShare = _shareFees(totalFeeAmount);\r\n\r\n        return ((profit - totalFeeAmount), strategistShare);\r\n    }\r\n\r\n    function _shareFees(uint256 totalFeeAmount) internal returns (uint256) {\r\n        uint256 strategistShare = totalFeeAmount.scaledMul(getStrategistFee());\r\n\r\n        uint256 reserveShare = totalFeeAmount.scaledMul(getReserveFee());\r\n        uint256 treasuryShare = totalFeeAmount - strategistShare - reserveShare;\r\n\r\n        _depositToReserve(reserveShare);\r\n        if (treasuryShare > 0) {\r\n            _depositToTreasury(treasuryShare);\r\n        }\r\n        return strategistShare;\r\n    }\r\n\r\n    function _emergencyStop(uint256 underlyingReserves) internal {\r\n        // debt limit exceeded: withdraw funds from strategy\r\n        uint256 withdrawn = getStrategy().withdrawAll();\r\n\r\n        uint256 actualDebt = _computeNewAllocated(currentAllocated, withdrawn);\r\n\r\n        if (reserve.canWithdraw(address(this))) {\r\n            // check if debt can be covered with reserve funds\r\n            if (underlyingReserves >= actualDebt) {\r\n                reserve.withdraw(getUnderlying(), actualDebt);\r\n            } else if (underlyingReserves > 0) {\r\n                // debt can not be covered with reserves\r\n                reserve.withdraw(getUnderlying(), underlyingReserves);\r\n            }\r\n        }\r\n\r\n        // too much money lost, stop the strategy\r\n        _deactivateStrategy();\r\n    }\r\n\r\n    /**\r\n     * @notice Deactivates a strategy. All positions of the strategy are exited.\r\n     * @return `true` if strategy has been deactivated\r\n     */\r\n    function _deactivateStrategy() internal returns (bool) {\r\n        if (!strategyActive) return false;\r\n\r\n        strategyActive = false;\r\n        emit StrategyDeactivated(address(getStrategy()));\r\n        return true;\r\n    }\r\n\r\n    function _payStrategist(uint256 amount) internal {\r\n        _payStrategist(amount, getStrategy().strategist());\r\n    }\r\n\r\n    function _payStrategist(uint256 amount, address strategist) internal virtual;\r\n\r\n    function _transfer(address to, uint256 amount) internal virtual;\r\n\r\n    function _depositToReserve(uint256 amount) internal virtual;\r\n\r\n    function _depositToTreasury(uint256 amount) internal virtual;\r\n\r\n    function _availableUnderlying() internal view virtual returns (uint256);\r\n\r\n    function _computeNewAllocated(uint256 allocated, uint256 withdrawn)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (allocated > withdrawn) {\r\n            return allocated - withdrawn;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function _checkFeesInvariant(uint256 reserveFee, uint256 strategistFee) internal pure {\r\n        require(\r\n            reserveFee + strategistFee <= ScaledMath.ONE,\r\n            \"sum of strategist fee and reserve fee should be below 1\"\r\n        );\r\n    }\r\n\r\n    function _rebalance(uint256 totalUnderlying, uint256 allocatedUnderlying)\r\n        private\r\n        returns (bool)\r\n    {\r\n        if (!strategyActive) return false;\r\n        uint256 targetAllocation = getTargetAllocation();\r\n\r\n        IStrategy strategy = getStrategy();\r\n        uint256 bound = getBound();\r\n\r\n        uint256 target = totalUnderlying.scaledMul(targetAllocation);\r\n        uint256 upperBound = targetAllocation == 0 ? 0 : targetAllocation + bound;\r\n        upperBound = upperBound > ScaledMath.ONE ? ScaledMath.ONE : upperBound;\r\n        uint256 lowerBound = bound > targetAllocation ? 0 : targetAllocation - bound;\r\n        if (allocatedUnderlying > totalUnderlying.scaledMul(upperBound)) {\r\n            // withdraw funds from strategy\r\n            uint256 withdrawAmount = allocatedUnderlying - target;\r\n            strategy.withdraw(withdrawAmount);\r\n\r\n            currentAllocated = _computeNewAllocated(currentAllocated, withdrawAmount);\r\n        } else if (allocatedUnderlying < totalUnderlying.scaledMul(lowerBound)) {\r\n            // allocate more funds to strategy\r\n            uint256 depositAmount = target - allocatedUnderlying;\r\n            _transfer(address(strategy), depositAmount);\r\n            currentAllocated += depositAmount;\r\n            strategy.deposit();\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/vault/Erc20Vault.sol\r\n\r\npragma solidity 0.8.9;\r\n\r\ncontract Erc20Vault is Vault {\r\n    using AddressProviderHelpers for IAddressProvider;\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor(IController controller) Vault(controller) {}\r\n\r\n    function initialize(\r\n        address _pool,\r\n        uint256 _debtLimit,\r\n        uint256 _targetAllocation,\r\n        uint256 _bound\r\n    ) external virtual override initializer {\r\n        _initialize(_pool, _debtLimit, _targetAllocation, _bound);\r\n        address underlying_ = ILiquidityPool(pool).getUnderlying();\r\n        require(underlying_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\r\n        IERC20(underlying_).safeApprove(address(reserve), type(uint256).max);\r\n        IERC20(underlying_).safeApprove(_pool, type(uint256).max);\r\n    }\r\n\r\n    function getUnderlying() public view override returns (address) {\r\n        return ILiquidityPool(pool).getUnderlying();\r\n    }\r\n\r\n    function _transfer(address to, uint256 amount) internal override {\r\n        IERC20(getUnderlying()).safeTransfer(to, amount);\r\n    }\r\n\r\n    function _depositToReserve(uint256 amount) internal override {\r\n        reserve.deposit(getUnderlying(), amount);\r\n    }\r\n\r\n    function _depositToTreasury(uint256 amount) internal override {\r\n        IERC20(getUnderlying()).safeTransfer(addressProvider.getTreasury(), amount);\r\n    }\r\n\r\n    function _payStrategist(uint256 amount, address strategist) internal override {\r\n        if (strategist == address(0)) return;\r\n        ILiquidityPool(pool).depositFor(strategist, amount);\r\n    }\r\n\r\n    function _availableUnderlying() internal view override returns (uint256) {\r\n        return IERC20(getUnderlying()).balanceOf(address(this));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IController\",\"name\":\"controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"ConfigPreparedNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"ConfigReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"ConfigUpdatedAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ConfigUpdatedNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"netProfit\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyDeactivated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEVIATION_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERFORMANCE_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activateStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract IAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deadlines\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeNewStrategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executePerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeReserveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeStrategistFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeTargetAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getAllocatedToStrategyWaitingForRemoval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPerformanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategiesWaitingForRemoval\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategistFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTargetAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_debtLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bound\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy_\",\"type\":\"address\"}],\"name\":\"initializeStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingUInts256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBound\",\"type\":\"uint256\"}],\"name\":\"prepareBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebtLimit\",\"type\":\"uint256\"}],\"name\":\"prepareDebtLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"prepareNewStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"preparePerformanceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFee\",\"type\":\"uint256\"}],\"name\":\"prepareReserveFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newStrategistFee\",\"type\":\"uint256\"}],\"name\":\"prepareStrategistFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTargetAllocation\",\"type\":\"uint256\"}],\"name\":\"prepareTargetAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IVaultReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetDebtLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNewStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetPerformanceFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetReserveFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetStrategistFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetTargetAllocation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"waitingForRemovalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllFromStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"withdrawFromStrategyWaitingForRemoval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Erc20Vault","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000f88864b5d747961eb1caf88d395d13aca8274c9f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b9461137cc7925b2efb3570802b116877a0ed0fa0e827563cedf28951c1dbd36"}]