[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\n\n/**\n * @title Wallets Trading Limiter Interface.\n */\ninterface IWalletsTradingLimiter {\n    /**\n     * @dev Increment the limiter value of a wallet.\n     * @param _wallet The address of the wallet.\n     * @param _value The amount to be updated.\n     */\n    function updateWallet(address _wallet, uint256 _value) external;\n}\n\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingDataSource.sol\n\n/**\n * @title Wallets Trading Data Source Interface.\n */\ninterface IWalletsTradingDataSource {\n    /**\n     * @dev Increment the value of a given wallet.\n     * @param _wallet The address of the wallet.\n     * @param _value The value to increment by.\n     * @param _limit The limit of the wallet.\n     */\n    function updateWallet(address _wallet, uint256 _value, uint256 _limit) external;\n}\n\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiterValueConverter.sol\n\n/**\n * @title Wallets Trading Limiter Value Converter Interface.\n */\ninterface IWalletsTradingLimiterValueConverter {\n    /**\n     * @dev Get the current limiter currency worth of a given SGR amount.\n     * @param _sgrAmount The amount of SGR to convert.\n     * @return The equivalent amount of the limiter currency.\n     */\n    function toLimiterValue(uint256 _sgrAmount) external view returns (uint256);\n}\n\n// File: contracts/wallet_trading_limiter/interfaces/ITradingClasses.sol\n\n/**\n * @title Trading Classes Interface.\n */\ninterface ITradingClasses {\n    /**\n     * @dev Get the complete info of a class.\n     * @param _id The id of the class.\n     * @return complete info of a class.\n     */\n    function getInfo(uint256 _id) external view returns (uint256, uint256, uint256);\n\n    /**\n     * @dev Get the action-role of a class.\n     * @param _id The id of the class.\n     * @return The action-role of the class.\n     */\n    function getActionRole(uint256 _id) external view returns (uint256);\n\n    /**\n     * @dev Get the sell limit of a class.\n     * @param _id The id of the class.\n     * @return The sell limit of the class.\n     */\n    function getSellLimit(uint256 _id) external view returns (uint256);\n\n    /**\n     * @dev Get the buy limit of a class.\n     * @param _id The id of the class.\n     * @return The buy limit of the class.\n     */\n    function getBuyLimit(uint256 _id) external view returns (uint256);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \"oblivious\" to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \"IAuthorizationDataSource\";\n    bytes32 internal constant _ISGNConversionManager_    = \"ISGNConversionManager\"      ;\n    bytes32 internal constant _IModelDataSource_         = \"IModelDataSource\"        ;\n    bytes32 internal constant _IPaymentHandler_          = \"IPaymentHandler\"            ;\n    bytes32 internal constant _IPaymentManager_          = \"IPaymentManager\"            ;\n    bytes32 internal constant _IPaymentQueue_            = \"IPaymentQueue\"              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \"IReconciliationAdjuster\"      ;\n    bytes32 internal constant _IIntervalIterator_        = \"IIntervalIterator\"       ;\n    bytes32 internal constant _IMintHandler_             = \"IMintHandler\"            ;\n    bytes32 internal constant _IMintListener_            = \"IMintListener\"           ;\n    bytes32 internal constant _IMintManager_             = \"IMintManager\"            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \"IPriceBandCalculator\"       ;\n    bytes32 internal constant _IModelCalculator_         = \"IModelCalculator\"        ;\n    bytes32 internal constant _IRedButton_               = \"IRedButton\"              ;\n    bytes32 internal constant _IReserveManager_          = \"IReserveManager\"         ;\n    bytes32 internal constant _ISagaExchanger_           = \"ISagaExchanger\"          ;\n    bytes32 internal constant _ISogurExchanger_           = \"ISogurExchanger\"          ;\n    bytes32 internal constant _SgnToSgrExchangeInitiator_ = \"SgnToSgrExchangeInitiator\"          ;\n    bytes32 internal constant _IMonetaryModel_               = \"IMonetaryModel\"              ;\n    bytes32 internal constant _IMonetaryModelState_          = \"IMonetaryModelState\"         ;\n    bytes32 internal constant _ISGRAuthorizationManager_ = \"ISGRAuthorizationManager\";\n    bytes32 internal constant _ISGRToken_                = \"ISGRToken\"               ;\n    bytes32 internal constant _ISGRTokenManager_         = \"ISGRTokenManager\"        ;\n    bytes32 internal constant _ISGRTokenInfo_         = \"ISGRTokenInfo\"        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \"ISGNAuthorizationManager\";\n    bytes32 internal constant _ISGNToken_                = \"ISGNToken\"               ;\n    bytes32 internal constant _ISGNTokenManager_         = \"ISGNTokenManager\"        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \"IMintingPointTimersManager\"            ;\n    bytes32 internal constant _ITradingClasses_          = \"ITradingClasses\"         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \"IWalletsTLValueConverter\"       ;\n    bytes32 internal constant _BuyWalletsTradingDataSource_       = \"BuyWalletsTradingDataSource\"      ;\n    bytes32 internal constant _SellWalletsTradingDataSource_       = \"SellWalletsTradingDataSource\"      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \"WalletsTLSGNTokenManager\"         ;\n    bytes32 internal constant _BuyWalletsTradingLimiter_SGRTokenManager_          = \"BuyWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _SellWalletsTradingLimiter_SGRTokenManager_          = \"SellWalletsTLSGRTokenManager\"         ;\n    bytes32 internal constant _IETHConverter_             = \"IETHConverter\"   ;\n    bytes32 internal constant _ITransactionLimiter_      = \"ITransactionLimiter\"     ;\n    bytes32 internal constant _ITransactionManager_      = \"ITransactionManager\"     ;\n    bytes32 internal constant _IRateApprover_      = \"IRateApprover\"     ;\n    bytes32 internal constant _SGAToSGRInitializer_      = \"SGAToSGRInitializer\"     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \"locator is illegal\");\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \"caller is illegal\");\n        _;\n    }\n\n}\n\n// File: contracts/authorization/interfaces/IAuthorizationDataSource.sol\n\n/**\n * @title Authorization Data Source Interface.\n */\ninterface IAuthorizationDataSource {\n    /**\n     * @dev Get the authorized action-role of a wallet.\n     * @param _wallet The address of the wallet.\n     * @return The authorized action-role of the wallet.\n     */\n    function getAuthorizedActionRole(address _wallet) external view returns (bool, uint256);\n\n    /**\n     * @dev Get the authorized action-role and trade-class of a wallet.\n     * @param _wallet The address of the wallet.\n     * @return The authorized action-role and class of the wallet.\n     */\n    function getAuthorizedActionRoleAndClass(address _wallet) external view returns (bool, uint256, uint256);\n\n    /**\n     * @dev Get all the trade-limits and trade-class of a wallet.\n     * @param _wallet The address of the wallet.\n     * @return The trade-limits and trade-class of the wallet.\n     */\n    function getTradeLimitsAndClass(address _wallet) external view returns (uint256, uint256, uint256);\n\n\n    /**\n     * @dev Get the buy trade-limit and trade-class of a wallet.\n     * @param _wallet The address of the wallet.\n     * @return The buy trade-limit and trade-class of the wallet.\n     */\n    function getBuyTradeLimitAndClass(address _wallet) external view returns (uint256, uint256);\n\n    /**\n     * @dev Get the sell trade-limit and trade-class of a wallet.\n     * @param _wallet The address of the wallet.\n     * @return The sell trade-limit and trade-class of the wallet.\n     */\n    function getSellTradeLimitAndClass(address _wallet) external view returns (uint256, uint256);\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/wallet_trading_limiter/WalletsTradingLimiterBase.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title Wallets Trading Limiter Base.\n */\ncontract WalletsTradingLimiterBase is IWalletsTradingLimiter, ContractAddressLocatorHolder, Claimable {\n    string public constant VERSION = \"1.1.0\";\n\n    bytes32 public walletsTradingDataSourceIdentifier;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator, bytes32 _walletsTradingDataSourceIdentifier) ContractAddressLocatorHolder(_contractAddressLocator) public {\n        walletsTradingDataSourceIdentifier = _walletsTradingDataSourceIdentifier;\n    }\n\n    /**\n     * @dev Return the contract which implements the IAuthorizationDataSource interface.\n     */\n    function getAuthorizationDataSource() public view returns (IAuthorizationDataSource) {\n        return IAuthorizationDataSource(getContractAddress(_IAuthorizationDataSource_));\n    }\n\n    /**\n     * @dev Return the contract which implements the ITradingClasses interface.\n     */\n    function getTradingClasses() public view returns (ITradingClasses) {\n        return ITradingClasses(getContractAddress(_ITradingClasses_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IWalletsTradingDataSource interface.\n     */\n    function getWalletsTradingDataSource() public view returns (IWalletsTradingDataSource) {\n        return IWalletsTradingDataSource(getContractAddress(walletsTradingDataSourceIdentifier));\n    }\n\n    /**\n     * @dev Return the contract which implements the IWalletsTradingLimiterValueConverter interface.\n     */\n    function getWalletsTradingLimiterValueConverter() public view returns (IWalletsTradingLimiterValueConverter) {\n        return IWalletsTradingLimiterValueConverter(getContractAddress(_IWalletsTradingLimiterValueConverter_));\n    }\n\n    /**\n     * @dev Get the contract locator identifier that is permitted to perform update wallet.\n     * @return The contract locator identifier.\n     */\n    function getUpdateWalletPermittedContractLocatorIdentifier() public pure returns (bytes32);\n\n    /**\n     * @dev Get the wallet override trade-limit and class.\n     * @return The wallet override trade-limit and class.\n     */\n    function getOverrideTradeLimitAndClass(address _wallet) public view returns (uint256, uint256);\n\n    /**\n     * @dev Get the wallet trade-limit.\n     * @return The wallet trade-limit.\n     */\n    function getTradeLimit(uint256 _tradeClassId) public view returns (uint256);\n\n    /**\n     * @dev Get the limiter value.\n     * @param _value The amount to be converted to the limiter value.\n     * @return The limiter value worth of the given amount.\n     */\n    function getLimiterValue(uint256 _value) public view returns (uint256);\n\n\n    /**\n     * @dev Increment the limiter value of a wallet.\n     * @param _wallet The address of the wallet.\n     * @param _value The amount to be updated.\n     */\n    function updateWallet(address _wallet, uint256 _value) external only(getUpdateWalletPermittedContractLocatorIdentifier()) {\n        uint256 limiterValue = getLimiterValue(_value);\n\n        (uint256 overrideTradeLimit, uint256 tradeClassId) = getOverrideTradeLimitAndClass(_wallet);\n\n        uint256 tradeLimit = overrideTradeLimit > 0 ? overrideTradeLimit : getTradeLimit(tradeClassId);\n\n        getWalletsTradingDataSource().updateWallet(_wallet, limiterValue, tradeLimit);\n    }\n}\n\n// File: contracts/sogur/SGRWalletsTradingLimiter.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title SGR Wallets Trading Limiter.\n */\ncontract SGRWalletsTradingLimiter is WalletsTradingLimiterBase {\n    string public constant VERSION = \"1.1.0\";\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator, bytes32 _walletsTradingDataSourceIdentifier) WalletsTradingLimiterBase(_contractAddressLocator, _walletsTradingDataSourceIdentifier) public {}\n\n\n    /**\n     * @dev Get the contract locator identifier that is permitted to perform update wallet.\n     * @return The contract locator identifier.\n     */\n    function getUpdateWalletPermittedContractLocatorIdentifier() public pure returns (bytes32){\n        return _ISGRTokenManager_;\n    }\n\n    /**\n     * @dev Get the limiter value.\n     * @param _value The SGR amount to convert to limiter value.\n     * @return The limiter value worth of the given SGR amount.\n     */\n    function getLimiterValue(uint256 _value) public view returns (uint256){\n        return getWalletsTradingLimiterValueConverter().toLimiterValue(_value);\n    }\n}\n\n// File: contracts/sogur/SGRSellWalletsTradingLimiter.sol\n\n/**\n * Details of usage of licenced software see here: https://www.sogur.com/software/readme_v1\n */\n\n/**\n * @title SGR sell Wallets Trading Limiter.\n */\ncontract SGRSellWalletsTradingLimiter is SGRWalletsTradingLimiter {\n    string public constant VERSION = \"2.0.0\";\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) SGRWalletsTradingLimiter(_contractAddressLocator, _SellWalletsTradingDataSource_) public {}\n\n\n    /**\n     * @dev Get the wallet override trade-limit and class.\n     * @return The wallet override trade-limit and class.\n     */\n    function getOverrideTradeLimitAndClass(address _wallet) public view returns (uint256, uint256){\n        return getAuthorizationDataSource().getSellTradeLimitAndClass(_wallet);\n\n    }\n\n    /**\n     * @dev Get the wallet trade-limit.\n     * @return The wallet trade-limit.\n     */\n    function getTradeLimit(uint256 _tradeClassId) public view returns (uint256){\n        return getTradingClasses().getSellLimit(_tradeClassId);\n    }\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"walletsTradingDataSourceIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getContractAddressLocator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpdateWalletPermittedContractLocatorIdentifier\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTradingClasses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletsTradingDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getWalletsTradingLimiterValueConverter\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"getLimiterValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getOverrideTradeLimitAndClass\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"updateWallet\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tradeClassId\",\"type\":\"uint256\"}],\"name\":\"getTradeLimit\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAuthorizationDataSource\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddressLocator\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"SGRSellWalletsTradingLimiter","CompilerVersion":"v0.4.25+commit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":""}]