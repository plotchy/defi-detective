[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ConditionalWager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./BartrrBase.sol\\\";\\n\\nerror Uninitialized();\\nerror WagerAlreadyClosed();\\nerror WagerAlreadyFilled();\\nerror UserAlreadyRefunded();\\nerror WagerNotFilled();\\nerror InvalidValue();\\nerror InvalidDuration();\\nerror InvalidPrices();\\nerror UnauthorizedSender();\\nerror WagerIncomplete();\\nerror WagerExpired();\\nerror TokenNotApproved();\\nerror TransferFailed();\\nerror SelfWager();\\nerror RestrictedP2P();\\n\\n/// @title Bartrr Conditional Wager Contract\\n/// @notice This contract is used to manage conditional wagers for the Bartrr protocol.\\ncontract ConditionalWager is BartrrBase {\\n    using SafeERC20 for IERC20;\\n    struct Wager {\\n        bool isFilled; // true if wager is filled\\n        bool isClosed; // true if the wager has been closed (redeemed or cancelled)\\n        address userA; // address of userA\\n        address userB; // address of userB (0x0 if p2m)\\n        address wagerToken; // token to be used for wager\\n        address paymentToken; // payment token is the token that is used to pay the wager\\n        int256 wagerPriceA; // UserA bet price\\n        int256 wagerPriceB; // UserB bet price\\n        uint256 amountUserA; // amount userA wagered\\n        uint256 amountUserB; // amount userB wagered\\n        uint256 duration; // duration of the wager\\n    }\\n\\n    /// Array of wagers\\n    Wager[] public wagers;\\n\\n    /// @notice Emitted when a wager is created\\n    /// @param wagerId The wager id\\n    /// @param userA The user who created the wager\\n    /// @param userB The user who will fill the wager (zero address if the wager is open for anyone to fill)\\n    /// @param wagerPriceA The wagered price of wagerToken by userA\\n    /// @param wagerPriceB The wagered price of wagerToken by userB\\n    event WagerCreated(\\n        uint256 indexed wagerId,\\n        address indexed userA,\\n        address userB,\\n        address wagerToken,\\n        int256 wagerPriceA,\\n        int256 wagerPriceB\\n    );\\n\\n    /// @notice Emitted when a wager is filled by the second party\\n    /// @param wagerId The wager id\\n    /// @param userA The user who created the wager\\n    /// @param userB The user who filled the wager\\n    /// @param wagerToken The token whose price was wagered\\n    /// @param wagerPriceA The wagered price of wagerToken by userA\\n    /// @param wagerPriceB The wagered price of wagerToken by userB\\n    event WagerFilled(\\n        uint256 indexed wagerId,\\n        address indexed userA,\\n        address indexed userB,\\n        address wagerToken,\\n        int256 wagerPriceA,\\n        int256 wagerPriceB\\n    );\\n\\n    constructor() {\\n        _transferOwnership(tx.origin);\\n    }\\n\\n    /// @notice Creates a new wager\\n    /// @param _userB address of userB (0x0 if p2m)\\n    /// @param _wagerToken address of token to be wagered on\\n    /// @param _paymentToken address of token to be paid with\\n    /// @param _wagerPriceA UserA bet price -- USD price + 8 decimals\\n    /// @param _wagerPriceB UserB bet price -- USD price + 8 decimals\\n    /// @param _amountUserA amount userA wagered\\n    /// @param _amountUserB amount userB wagered\\n    /// @param _duration duration of the wager\\n    function createWager(\\n        address _userB,\\n        address _wagerToken,\\n        address _paymentToken, // Zero address if ETH\\n        int256 _wagerPriceA,\\n        int256 _wagerPriceB,\\n        uint256 _amountUserA,\\n        uint256 _amountUserB,\\n        uint256 _duration\\n    ) external payable nonReentrant {\\n        if (!isInitialized) revert Uninitialized();\\n        if (\\n            !wagerTokens[_wagerToken] ||\\n            refundableTimestamp[_wagerToken].nonrefundable <\\n            refundableTimestamp[_wagerToken].refundable\\n        ) {\\n            revert TokenNotApproved();\\n        }\\n        if (!paymentTokens[_paymentToken]) revert TokenNotApproved();\\n        if (_duration < MIN_WAGER_DURATION) revert InvalidDuration();\\n        if (_userB == msg.sender) revert SelfWager();\\n        if (_wagerPriceA == _wagerPriceB) revert InvalidPrices();\\n\\n        uint256 feeUserA = _calculateFee(_amountUserA, _paymentToken);\\n\\n        if (\\n            _paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            // ETH\\n            if (msg.value != _amountUserA) revert InvalidValue();\\n            if (_userB == address(0)) {\\n                // p2m\\n                _amountUserA = _amountUserA - feeUserA;\\n                _transfer(payable(feeAddress), feeUserA);\\n            }\\n        } else {\\n            // Tokens\\n            uint256 balanceBefore = IERC20(_paymentToken).balanceOf(\\n                address(this)\\n            );\\n\\n            IERC20(_paymentToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _amountUserA\\n            );\\n\\n            if (_userB == address(0)) {\\n                // p2m - userA fees paid immediately\\n                IERC20(_paymentToken).safeTransfer(feeAddress, feeUserA);\\n            }\\n            uint256 balanceAfter = IERC20(_paymentToken).balanceOf(\\n                address(this)\\n            );\\n\\n            _amountUserA = balanceAfter - balanceBefore;\\n        }\\n\\n        _createWager(\\n            msg.sender,\\n            _userB,\\n            _wagerToken,\\n            _paymentToken,\\n            _wagerPriceA,\\n            _wagerPriceB,\\n            _amountUserA,\\n            _amountUserB,\\n            _duration\\n        );\\n    }\\n\\n    /// @notice Fills a wager and starts the wager countdown\\n    /// @param _wagerId id of the wager\\n    function fillWager(uint256 _wagerId) external payable nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n\\n        if (wager.isFilled) revert WagerAlreadyFilled();\\n        if (\\n            refundableTimestamp[wager.wagerToken].nonrefundable <\\n            refundableTimestamp[wager.wagerToken].refundable\\n        ) {\\n            revert TokenNotApproved();\\n        }\\n        if (msg.sender == wager.userA) revert SelfWager();\\n\\n        uint256 feeUserB = _calculateFee(wager.amountUserB, wager.paymentToken);\\n\\n        if (wager.userB != address(0)) {\\n            // p2p\\n            if (msg.sender != wager.userB) revert RestrictedP2P();\\n\\n            // UserA fees have not been paid yet\\n            uint256 feeUserA = _calculateFee(\\n                wager.amountUserA,\\n                wager.paymentToken\\n            );\\n\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                // ETH\\n                if (msg.value != wager.amountUserB) revert InvalidValue();\\n\\n                wager.amountUserA -= feeUserA; // TODO test with this change\\n                wager.amountUserB -= feeUserB;\\n\\n                _transfer(payable(feeAddress), feeUserA + feeUserB);\\n            } else {\\n                uint256 balanceBefore = IERC20(wager.paymentToken).balanceOf(\\n                    address(this)\\n                );\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    wager.amountUserB\\n                );\\n                uint256 balanceAfter = IERC20(wager.paymentToken).balanceOf(\\n                    address(this)\\n                );\\n\\n                wager.amountUserB = balanceAfter - balanceBefore;\\n\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    feeAddress,\\n                    feeUserA + feeUserB\\n                );\\n\\n                wager.amountUserA -= feeUserA;\\n                wager.amountUserB -= feeUserB;\\n            }\\n        } else {\\n            // p2m\\n            if (createdTimes[_wagerId] + 30 days <= block.timestamp) {\\n                revert WagerExpired();\\n            }\\n            wager.userB = msg.sender;\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                if (msg.value != wager.amountUserB) revert InvalidValue();\\n                wager.amountUserB -= feeUserB;\\n                _transfer(payable(feeAddress), feeUserB);\\n            } else {\\n                uint256 balanceBefore = IERC20(wager.paymentToken).balanceOf(\\n                    address(this)\\n                );\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    wager.amountUserB\\n                );\\n                IERC20(wager.paymentToken).safeTransfer(feeAddress, feeUserB);\\n                uint256 balanceAfter = IERC20(wager.paymentToken).balanceOf(\\n                    address(this)\\n                );\\n\\n                wager.amountUserB = balanceAfter - balanceBefore;\\n            }\\n        }\\n\\n        endTimes[_wagerId] = wager.duration + block.timestamp;\\n        wager.isFilled = true;\\n\\n        wagers[_wagerId] = wager; // update wager to storage\\n\\n        emit WagerFilled(\\n            _wagerId,\\n            wager.userA,\\n            wager.userB,\\n            wager.wagerToken,\\n            wager.wagerPriceA,\\n            wager.wagerPriceB\\n        );\\n    }\\n\\n    /// @notice Cancels a wager that has not been filled\\n    /// @dev Fee is not refunded if wager was created as p2m\\n    /// @param _wagerId id of the wager\\n    function cancelWager(uint256 _wagerId) external nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n        if (wager.isClosed) revert WagerAlreadyClosed();\\n        if (msg.sender != wager.userA && msg.sender != wager.userB)\\n            revert UnauthorizedSender();\\n        if (wager.isFilled) revert WagerAlreadyFilled();\\n\\n        wagers[_wagerId].isClosed = true;\\n\\n        if (\\n            wager.paymentToken ==\\n            address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            _transfer(payable(wager.userA), wager.amountUserA);\\n        } else {\\n            IERC20(wager.paymentToken).safeTransfer(\\n                wager.userA,\\n                wager.amountUserA\\n            );\\n        }\\n        emit WagerCancelled(_wagerId, msg.sender);\\n    }\\n\\n    /// @notice Redeems a wager\\n    /// @param _wagerId id of the wager\\n    function redeem(uint256 _wagerId) external nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n        if (!wager.isFilled) revert WagerNotFilled();\\n        if (wager.isClosed) revert WagerAlreadyClosed();\\n        uint256 refundable = refundableTimestamp[wager.wagerToken].refundable;\\n        uint256 nonrefundable = refundableTimestamp[wager.wagerToken]\\n            .nonrefundable;\\n        if (\\n            (refundable > 0 &&\\n                endTimes[_wagerId] > refundable &&\\n                (refundable > nonrefundable ||\\n                    nonrefundable > createdTimes[_wagerId])) || // token has been marked refundable at least once // wager wasn't complete when marked refundable // wager was created before token was marked nonrefundable\\n            refundUserA[_wagerId] ||\\n            refundUserB[_wagerId]\\n        ) {\\n            _refundWager(_wagerId);\\n        } else {\\n            _redeemWager(_wagerId);\\n        }\\n    }\\n\\n    /// @notice Returns the winner of the wager once it is completed\\n    /// @param _wagerId id of the wager\\n    /// @return winner The winner of the wager (or the zero address if it is a draw)\\n    function checkWinner(uint256 _wagerId) public view returns (address) {\\n        Wager memory wager = wagers[_wagerId];\\n        if (!wager.isFilled) revert WagerNotFilled();\\n        uint256 endTime = endTimes[_wagerId];\\n        if (block.timestamp < endTime) revert WagerIncomplete();\\n\\n        AggregatorV2V3Interface feed = AggregatorV2V3Interface(\\n            oracles[wager.wagerToken]\\n        );\\n\\n        uint80 roundId = roundIdFetcher.getRoundId(feed, endTime);\\n\\n        if (roundId == 0) {\\n            return address(0);\\n        }\\n\\n        (int256 price, , ) = _getHistoricalPrice(roundId, wager.wagerToken);\\n\\n        if (wager.wagerPriceA > wager.wagerPriceB) {\\n            // User A bets above\\n            if (price >= wager.wagerPriceA) {\\n                return wager.userA; // User A wins\\n            } else if (price <= wager.wagerPriceB) {\\n                return wager.userB; // User B wins\\n            }\\n        } else if (wager.wagerPriceA < wager.wagerPriceB) {\\n            // User A bets below\\n            if (price <= wager.wagerPriceA) {\\n                return wager.userA; // User A wins\\n            } else if (price >= wager.wagerPriceB) {\\n                return wager.userB; // User B wins\\n            }\\n        }\\n        return address(0); // Draw\\n    }\\n\\n    /// @notice Get all wagers\\n    /// @return All created wagers\\n    function getAllWagers() public view returns (Wager[] memory) {\\n        return wagers;\\n    }\\n\\n    function _createWager(\\n        address _userA,\\n        address _userB,\\n        address _wagerToken,\\n        address _paymentToken,\\n        int256 _wagerPriceA,\\n        int256 _wagerPriceB,\\n        uint256 _amountUserA,\\n        uint256 _amountUserB,\\n        uint256 _duration\\n    ) internal {\\n        Wager memory wager = Wager(\\n            false,\\n            false,\\n            _userA,\\n            _userB,\\n            _wagerToken,\\n            _paymentToken,\\n            _wagerPriceA,\\n            _wagerPriceB,\\n            _amountUserA,\\n            _amountUserB,\\n            _duration\\n        );\\n        wagers.push(wager);\\n        createdTimes[idCounter] = block.timestamp;\\n        emit WagerCreated(\\n            idCounter,\\n            _userA,\\n            _userB,\\n            _wagerToken,\\n            _wagerPriceA,\\n            _wagerPriceB\\n        );\\n        idCounter++;\\n    }\\n\\n    function _refundWager(uint256 _wagerId) internal {\\n        Wager memory wager = wagers[_wagerId];\\n        if (msg.sender == wager.userA) {\\n            if (refundUserA[_wagerId]) revert UserAlreadyRefunded();\\n            refundUserA[_wagerId] = true;\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                _transfer(payable(wager.userA), wager.amountUserA);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userA,\\n                    wager.amountUserA\\n                );\\n            }\\n            emit WagerRefunded(\\n                _wagerId,\\n                msg.sender,\\n                wager.paymentToken,\\n                wager.amountUserA\\n            );\\n        } else if (msg.sender == wager.userB) {\\n            if (refundUserB[_wagerId]) revert UserAlreadyRefunded();\\n            refundUserB[_wagerId] = true;\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                _transfer(payable(wager.userB), wager.amountUserB);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userB,\\n                    wager.amountUserB\\n                );\\n            }\\n            emit WagerRefunded(\\n                _wagerId,\\n                msg.sender,\\n                wager.paymentToken,\\n                wager.amountUserB\\n            );\\n        }\\n    }\\n\\n    function _redeemWager(uint256 _wagerId) internal {\\n        Wager memory wager = wagers[_wagerId];\\n        if (block.timestamp < endTimes[_wagerId]) revert WagerIncomplete();\\n        uint256 winningSum = wager.amountUserA + wager.amountUserB;\\n        address winner = checkWinner(_wagerId);\\n\\n        wagers[_wagerId].isClosed = true;\\n\\n        if (winner == address(0)) {\\n            // draw\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                _transfer(payable(wager.userA), wager.amountUserA);\\n                _transfer(payable(wager.userB), wager.amountUserB);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userA,\\n                    wager.amountUserA\\n                );\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userB,\\n                    wager.amountUserB\\n                );\\n            }\\n        } else {\\n            if (\\n                wager.paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                _transfer(payable(winner), winningSum);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(winner, winningSum);\\n            }\\n        }\\n        emit WagerRedeemed(_wagerId, winner, wager.paymentToken, winningSum);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BartrrBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./interfaces/IRoundIdFetcher.sol\\\";\\n\\nerror AlreadyInitialized();\\nerror InvalidAddress();\\nerror EthTransferFailed();\\nerror InsufficientAmount();\\nerror NegativeTokenPrice();\\nerror RoundIncomplete();\\n\\n/// @title BartrrBase\\n/// @dev Contains the shared code between ConditionalWager.sol and FixedWager.sol\\ncontract BartrrBase is Ownable, ReentrancyGuard {\\n    struct RefundableTimestamp {\\n        uint256 refundable;\\n        uint256 nonrefundable;\\n    }\\n\\n    address public feeAddress;\\n    IRoundIdFetcher public roundIdFetcher;\\n    uint256 public constant MIN_WAGER_DURATION = 1 days;\\n    uint32 public constant MIN_WAGER_AMOUNT = 995_000; // $9.95\\n    uint32 public constant MIN_WAGER_AMOUNT_FACTOR = 100_000;\\n    uint32 public constant MIN_FEE_AMOUNT = 250_000_000; // $2.50 (8 decimals)\\n    uint256 public idCounter; // Counter for the wager id\\n    bool public isInitialized;\\n\\n    mapping(uint256 => uint256) public createdTimes; // mapping of contract creation times\\n    mapping(uint256 => uint256) public endTimes; // mapping of end times\\n    mapping(address => RefundableTimestamp) public refundableTimestamp; // mapping of timestamps for refundable token switch\\n    mapping(uint256 => bool) public refundUserA; // Marked true when userA calls refundWager()\\n    mapping(uint256 => bool) public refundUserB; // Marked true when userB calls refundWager()\\n\\n    mapping(address => bool) public wagerTokens; // Tokens to be wagered on\\n    mapping(address => bool) public paymentTokens; // Tokens to be paid with\\n\\n    mapping(address => address) public oracles; // Store the chainlink oracle for the token\\n\\n    /// @notice Emitted when a wager is cancelled\\n    /// @param wagerId The wager id\\n    /// @param user The user who cancelled the wager\\n    event WagerCancelled(uint256 indexed wagerId, address indexed user);\\n\\n    /// @notice Emitted when a wager is redeemed\\n    /// @param wagerId The wager id\\n    /// @param winner The winner of the wager\\n    /// @param paymentToken The token used to pay for the wager\\n    /// @param winningSum The amount of paymentTokens won\\n    event WagerRedeemed(\\n        uint256 indexed wagerId,\\n        address indexed winner,\\n        address paymentToken,\\n        uint256 winningSum\\n    );\\n\\n    /// @notice Emitted when a wager is refunded\\n    /// @param wagerId The wager id\\n    /// @param user The user refunding the wager\\n    /// @param paymentToken The token being refunded\\n    /// @param amount The amount of paymentToken being refunded\\n    event WagerRefunded(\\n        uint256 indexed wagerId,\\n        address indexed user,\\n        address paymentToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an array of wager tokens is updated\\n    /// @param tokens Array of wager tokens\\n    /// @param oracles Array of oracles for the wager tokens\\n    /// @param update Whether the wager token is added (true) or removed (false)\\n    event WagerTokensUpdated(\\n        address[] indexed tokens,\\n        address[] indexed oracles,\\n        bool update\\n    );\\n\\n    /// @notice Emitted when an array of payment tokens is updated\\n    /// @param tokens Array of payment tokens\\n    /// @param oracles Array of oracles\\n    /// @param update Whether the array of payment tokens is added (true) or removed (false)\\n    event PaymentTokensUpdated(\\n        address[] indexed tokens,\\n        address[] indexed oracles,\\n        bool update\\n    );\\n\\n    /// @notice Called if an error is detected in the chainlink oracle\\n    /// @param _token address of the token whose wagers need to be refunded\\n    function oracleMalfunction(address _token) external onlyOwner {\\n        refundableTimestamp[_token].refundable = block.timestamp;\\n    }\\n\\n    /// @notice Called when there is working update for the chainlink oracle\\n    /// @param _token address of the token whose wagers need to be refunded\\n    function oracleRecovery(address _token) external onlyOwner {\\n        refundableTimestamp[_token].nonrefundable = block.timestamp;\\n    }\\n\\n    /// @param _feeAddress address of the fee recipient\\n    function init(\\n        address _feeAddress,\\n        address _owner,\\n        address _roundIdFetcher\\n    ) external onlyOwner {\\n        if (isInitialized) revert AlreadyInitialized();\\n        if (_feeAddress == address(0)) revert InvalidAddress();\\n        feeAddress = _feeAddress;\\n        roundIdFetcher = IRoundIdFetcher(_roundIdFetcher);\\n        _transferOwnership(_owner);\\n        isInitialized = true;\\n    }\\n\\n    /// @param _wagerTokens array of wager token addresses\\n    /// @param _oracles array of oracles for the wager tokens\\n    /// @param _update true if the tokens are being added, false if they are being removed\\n    function updateWagerTokens(\\n        address[] memory _wagerTokens,\\n        address[] memory _oracles,\\n        bool _update\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _wagerTokens.length; i++) {\\n            wagerTokens[_wagerTokens[i]] = _update;\\n            oracles[_wagerTokens[i]] = _oracles[i];\\n        }\\n        emit WagerTokensUpdated(_wagerTokens, _oracles, _update);\\n    }\\n\\n    /// @param _paymentTokens array of payment token addresses\\n    /// @param _oracles array of oracles for the payment tokens\\n    /// @param _update true if the tokens are being added, false if they are being removed\\n    function updatePaymentTokens(\\n        address[] memory _paymentTokens,\\n        address[] memory _oracles,\\n        bool _update\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _paymentTokens.length; i++) {\\n            paymentTokens[_paymentTokens[i]] = _update;\\n            oracles[_paymentTokens[i]] = _oracles[i];\\n        }\\n        emit PaymentTokensUpdated(_paymentTokens, _oracles, _update);\\n    }\\n\\n    /// @notice Function to transfer Ether from this contract to address from input\\n    /// @param _to address of transfer recipient\\n    /// @param _amount amount of ether to be transferred\\n    function _transfer(address payable _to, uint256 _amount) internal {\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert EthTransferFailed();\\n        }\\n    }\\n\\n    /// @param _roundId Chainlink roundId corresponding to the wager deadline\\n    /// @param _token address of the token whose price is being queried\\n    function _getHistoricalPrice(uint80 _roundId, address _token)\\n        internal\\n        view\\n        returns (\\n            int256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        (\\n            ,\\n            int256 price,\\n            uint256 startedAt,\\n            uint256 timeStamp,\\n\\n        ) = AggregatorV2V3Interface(oracles[_token]).getRoundData(_roundId);\\n        if (timeStamp <= 0) revert RoundIncomplete();\\n        return (price, startedAt, timeStamp);\\n    }\\n\\n    /// @param _token address of the token whose price is being queried\\n    function _getLatestPrice(address _token)\\n        internal\\n        view\\n        returns (int256, uint8)\\n    {\\n        address aggregator = oracles[_token];\\n        (, int256 answer, , uint256 updatedAt, ) = AggregatorV2V3Interface(\\n            aggregator\\n        ).latestRoundData();\\n        if (updatedAt <= 0) revert RoundIncomplete();\\n        uint8 decimals = AggregatorV2V3Interface(aggregator).decimals();\\n        return (answer, decimals);\\n    }\\n\\n    /// @param _amount amount of the wager\\n    /// @param _paymentToken address of the payment token\\n    function _calculateFee(uint256 _amount, address _paymentToken)\\n        internal\\n        view\\n        returns (uint256 fee)\\n    {\\n        (int256 tokenPrice, uint8 oracleDecimals) = _getLatestPrice(\\n            _paymentToken\\n        );\\n\\n        // Protection against negative prices\\n        if (tokenPrice <= 0) {\\n            revert NegativeTokenPrice();\\n        } else {\\n            uint256 usdPrice = uint256(tokenPrice);\\n            uint8 decimals;\\n            if (\\n                _paymentToken ==\\n                address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n            ) {\\n                decimals = 18;\\n            } else {\\n                decimals = IERC20Metadata(_paymentToken).decimals();\\n            }\\n\\n            uint256 dollarAmount = (((_amount * usdPrice) *\\n                MIN_WAGER_AMOUNT_FACTOR) / (10**decimals)) /\\n                (10**oracleDecimals);\\n\\n            if (dollarAmount < MIN_WAGER_AMOUNT) revert InsufficientAmount();\\n            fee = (_amount * 5) / 1000; // .5% fee\\n            if (((fee * usdPrice) / (10**decimals)) < MIN_FEE_AMOUNT) {\\n                fee = (MIN_FEE_AMOUNT * (10**decimals)) / usdPrice; // $5 fee\\n            }\\n        }\\n        return fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRoundIdFetcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ninterface IRoundIdFetcher {\\n    function getPhaseForTimestamp(address _feed, uint256 _targetTime)\\n        external\\n        view\\n        returns (\\n            uint80,\\n            uint256,\\n            uint80\\n        );\\n\\n    function getRoundId(AggregatorV2V3Interface _feed, uint256 _timeStamp)\\n        external\\n        view\\n        returns (uint80 roundId);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrices\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeTokenPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RestrictedP2P\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RoundIncomplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelfWager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uninitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRefunded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WagerAlreadyClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WagerAlreadyFilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WagerExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WagerIncomplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WagerNotFilled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"PaymentTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WagerCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPriceA\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPriceB\",\"type\":\"int256\"}],\"name\":\"WagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPriceA\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPriceB\",\"type\":\"int256\"}],\"name\":\"WagerFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningSum\",\"type\":\"uint256\"}],\"name\":\"WagerRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WagerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"WagerTokensUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_FEE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WAGER_AMOUNT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WAGER_AMOUNT_FACTOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WAGER_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"cancelWager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_wagerPriceA\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_wagerPriceB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createWager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"fillWager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWagers\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wagerPriceA\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"wagerPriceB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct ConditionalWager.Wager[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roundIdFetcher\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"oracleMalfunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"oracleRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundUserA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundUserB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundableTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonrefundable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundIdFetcher\",\"outputs\":[{\"internalType\":\"contract IRoundIdFetcher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updatePaymentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wagerTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updateWagerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wagerTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wagerPriceA\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"wagerPriceB\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"ConditionalWager","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]