[{"SourceCode":"pragma solidity >=0.7.0 <0.8.0;\r\n\r\n// In the first version, claimed block nonce / mixDigest IS NOT VERIFIED\r\n// This contract assumes that mev block template producer completely TRUSTS pool operator that received the signed work order.\r\n// This contract !DOES NOT VERIFY! that block nonce / mixDigest is valid or that it was broadcasted without delay\r\n// In the next version we're planning to introduce trustless approach to verify submited block nonce on-chain(see smartpool) and verify delay in seconds for share submission(using oracles)\r\ncontract LogOfClaimedMEVBlocks {\r\n    uint256 internal constant FLAG_BLOCK_NONCE_LIMIT = 0x10000000000000000;\r\n    mapping (address => uint) public timestampOfPossibleExit;\r\n    mapping (address => uint) public depositedEther;\r\n    \r\n    mapping (address => address) public blockSubmissionsOperator;\r\n    mapping (bytes32 => uint) public claimedBlockNonce;\r\n    mapping (bytes32 => bytes32) public claimedBlockMixDigest;\r\n    \r\n    event Deposit(address user, uint amount);\r\n    event Withdraw(address user, uint amount);\r\n    event BlockClaimed(bytes32 blockHeader, bytes32 seedHash, bytes32 target, uint blockNumber, uint blockPayment, address miningPoolAddress, address mevProducerAddress, uint blockNonce, bytes32 mixDigest);\r\n    \r\n\r\n    function setBlockClaimsOperator(address newBlockSubmissionsOperator) public {\r\n        assert(msg.data.length == 36);\r\n        blockSubmissionsOperator[msg.sender] = newBlockSubmissionsOperator;\r\n    }\r\n\r\n    fallback () payable external {\r\n        this.depositAndLock(msg.value, 24 * 60 * 60);\r\n    }\r\n    function depositAndLock(uint depositAmount, uint depositDuration) payable external {\r\n        require(depositAmount == msg.value);\r\n        // Enforcing min and max lockup durations\r\n        require(depositDuration >= 24 * 60 * 60 && depositDuration < 365 * 24 * 60 * 60);\r\n        timestampOfPossibleExit[msg.sender] = block.timestamp + depositDuration;\r\n        if (msg.value > 0) {\r\n            depositedEther[msg.sender] += msg.value;\r\n        }\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n    \r\n    \r\n    function withdrawUpTo(uint etherAmount) external {\r\n        // User previously deposited into contract\r\n        require(depositedEther[msg.sender] > 0);\r\n        // Deposit lockup period is over\r\n        require(block.timestamp > timestampOfPossibleExit[msg.sender]);\r\n        if (depositedEther[msg.sender] < etherAmount)\r\n            etherAmount = depositedEther[msg.sender];\r\n        depositedEther[msg.sender] -= etherAmount;\r\n        msg.sender.transfer(etherAmount);\r\n        emit Withdraw(msg.sender, etherAmount);\r\n    }\r\n\r\n    function submitClaim(\r\n        bytes32 blockHeader,\r\n        bytes32 seedHash,\r\n        bytes32 target,\r\n        uint blockNumber,\r\n        uint blockPayment,\r\n        address payable miningPoolAddress,\r\n        address mevProducerAddress,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint blockNonce,\r\n        bytes32 mixDigest\r\n    ) public {\r\n        require(msg.sender == blockSubmissionsOperator[miningPoolAddress] || msg.sender == miningPoolAddress);\r\n        bytes32 hash = keccak256(abi.encodePacked(blockHeader, seedHash, target, blockNumber, blockPayment, miningPoolAddress));\r\n        if (claimedBlockNonce[hash] == 0 && blockNonce < FLAG_BLOCK_NONCE_LIMIT) {\r\n            if (ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) == mevProducerAddress) {\r\n                require(depositedEther[mevProducerAddress] >= blockPayment);\r\n                claimedBlockNonce[hash] = FLAG_BLOCK_NONCE_LIMIT + blockNonce;\r\n                claimedBlockMixDigest[hash] = mixDigest;\r\n                depositedEther[mevProducerAddress] -= blockPayment;\r\n                miningPoolAddress.transfer(blockPayment);\r\n                emit BlockClaimed(blockHeader, seedHash, target, blockNumber, blockPayment, miningPoolAddress, mevProducerAddress, blockNonce, mixDigest);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function remainingDurationForWorkClaim(\r\n        bytes32 blockHeader,\r\n        bytes32 seedHash,\r\n        bytes32 target,\r\n        uint blockNumber,\r\n        uint blockPayment,\r\n        address miningPoolAddress,\r\n        address mevProducerAddress,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public view returns (uint) {\r\n        bytes32 hash = keccak256(abi.encodePacked(blockHeader, seedHash, target, blockNumber, blockPayment, miningPoolAddress));\r\n        if (claimedBlockNonce[hash] != 0) return 0;\r\n        if (ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)),v,r,s) != mevProducerAddress) return 0;\r\n        if (depositedEther[mevProducerAddress] < blockPayment) return 0;\r\n        if (block.timestamp >= timestampOfPossibleExit[mevProducerAddress]) return 0;\r\n        return timestampOfPossibleExit[mevProducerAddress] - block.timestamp;\r\n    }\r\n}\r\n\r\ncontract GasOptimisedPayoutsToMiners {\r\n    function dispersePaymentForShares(uint256[] memory minerPayoutData) external payable {\r\n        for (uint256 i = 0; i < minerPayoutData.length; i++) {\r\n            uint256 singlePayout = minerPayoutData[i];\r\n            payable(singlePayout).transfer(singlePayout / (16 ** 40));\r\n        }\r\n        uint256 balance = address(this).balance;\r\n        if (balance > 0)\r\n            msg.sender.transfer(balance);\r\n    }\r\n}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHeader\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"miningPoolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mevProducerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mixDigest\",\"type\":\"bytes32\"}],\"name\":\"BlockClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blockSubmissionsOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimedBlockMixDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimedBlockNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDuration\",\"type\":\"uint256\"}],\"name\":\"depositAndLock\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHeader\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPayment\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"miningPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mevProducerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"remainingDurationForWorkClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBlockSubmissionsOperator\",\"type\":\"address\"}],\"name\":\"setBlockClaimsOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHeader\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"seedHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"target\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockPayment\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"miningPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mevProducerAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"blockNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"mixDigest\",\"type\":\"bytes32\"}],\"name\":\"submitClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"timestampOfPossibleExit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"etherAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawUpTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LogOfClaimedMEVBlocks","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://a9303dfddff5c617d5947b630d78f9aa06e01fc20f6b7c7438686c7f853a0a26"}]