[{"SourceCode":"// SPDX-License-Identifier: GLWTPL\r\n\r\npragma solidity ^0.8.15;\r\n\r\ninterface CallProxy {\r\n    function anyCall(\r\n        address _to,\r\n        bytes calldata _data,\r\n        address _fallback,\r\n        uint256 _toChainID,\r\n        uint256 _flags\r\n    ) external payable;\r\n\r\n    function executor() external view returns (Executor executor);\r\n}\r\n\r\ninterface Executor {\r\n    function context() external view returns (address from, uint256 fromChainID, uint256 nonce);\r\n}\r\n\r\n // Mainnet\r\n contract SenderReceiverTest {\r\n\r\n    CallProxy public callProxy = CallProxy(0xC10Ef9F491C9B59f936957026020C321651ac078);\r\n\r\n    address public owner;\r\n    Executor public executor;\r\n    mapping(uint256 => address) public allowedSources;\r\n\r\n    event SendNumber(uint256 number);\r\n    event ReceiveNumber(uint256 number, uint256 gas);\r\n\r\n    event StandardReceiveCalled();\r\n    event StandardFallbackCalled();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        executor = callProxy.executor();\r\n    }\r\n\r\n    function send(uint256 _number, address _to, uint256 _toChainID) external payable {\r\n        require(msg.sender == owner);\r\n\r\n        emit SendNumber(_number);\r\n\r\n        callProxy.anyCall{value : msg.value}(\r\n            _to,\r\n            abi.encode(_number),\r\n            address(0), // no fallback\r\n            _toChainID,\r\n            2 // fees paid on source chain\r\n        );\r\n    }\r\n\r\n    function setAllowedSource(uint256 _chainID, address _from) external {\r\n        require(msg.sender == owner);\r\n\r\n        allowedSources[_chainID] = _from;\r\n    }\r\n\r\n    function anyExecute(bytes memory _data) external returns (bool success, bytes memory result) {\r\n        uint256 gas = gasleft();\r\n\r\n        (address from, uint256 fromChainID,) = executor.context();\r\n\r\n        require(\r\n            fromChainID != 0 &&\r\n            allowedSources[fromChainID] == from\r\n        );\r\n\r\n        (uint256 number) = abi.decode(_data, (uint256));\r\n\r\n        emit ReceiveNumber(number, gas);\r\n\r\n        uint256 resultNumber = ourFact(number);\r\n\r\n        success = true;\r\n        result = abi.encode(resultNumber);\r\n    }\r\n\r\n    function ourFact(uint256 x) public returns (uint256) { // non-pure on purpose\r\n        if (x == 0 || x == 1) {\r\n            return 1;\r\n        }\r\n\r\n        uint256 result = x;\r\n\r\n        while (x > 1) {\r\n            x--;\r\n\r\n            unchecked {\r\n                result *= x;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    receive() external payable {\r\n        emit StandardReceiveCalled();\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit StandardFallbackCalled();\r\n    }\r\n\r\n    function cleanup() external {\r\n        require(msg.sender == owner);\r\n\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"ReceiveNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"SendNumber\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StandardFallbackCalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StandardReceiveCalled\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedSources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"anyExecute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callProxy\",\"outputs\":[{\"internalType\":\"contract CallProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cleanup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"contract Executor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ourFact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_toChainID\",\"type\":\"uint256\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"}],\"name\":\"setAllowedSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"SenderReceiverTest","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://dbf5fcf51ad6576c046ad960a2f89944c3ae043f0b98715848edcbc0c6b3e57b"}]