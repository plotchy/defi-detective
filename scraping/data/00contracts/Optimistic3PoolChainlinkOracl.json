[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/delphi-ii/src/Optimistic3PoolChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport {sub, wdiv, min} from \\\"fiat/core/utils/Math.sol\\\";\\nimport {ICollybus} from \\\"fiat/interfaces/ICollybus.sol\\\";\\n\\nimport {OptimisticOracle} from \\\"./OptimisticOracle.sol\\\";\\nimport {IOptimistic3PoolChainlinkValue} from \\\"./interfaces/IOptimistic3PoolChainlinkValue.sol\\\";\\nimport {AggregatorV3Interface} from \\\"./interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @title Optimistic3PoolChainlinkOracle\\n/// @notice Implementation of the OptimisticOracle for any 3-Token-Pool.\\n/// The oracle uses the chainlink feeds to fetch prices and\\n/// computes the minimum across the three assets.\\n/// Assumptions: If a Chainlink Aggregator is not working as intended (e.g. calls revert (excl. getRoundData))\\n/// then the methods `value` and `validate` and subsequently `dispute` will revert as well\\ncontract Optimistic3PoolChainlinkOracle is\\n    OptimisticOracle,\\n    IOptimistic3PoolChainlinkValue\\n{\\n    /// ======== Custom Errors ======== ///\\n\\n    error Optimistic3PoolChainlinkOracle__fetchLatestValue_invalidTimestamp();\\n    error Optimistic3PoolChainlinkOracle__encodeNonce_staleProposal();\\n    error Optimistic3PoolChainlinkOracle__encodeNonce_activeDisputeWindow();\\n    error Optimistic3PoolChainlinkOracle__push_inactiveRateId();\\n    error Optimistic3PoolChainlinkOracle__encodeNonce_invalidTimestamp();\\n    error Optimistic3PoolChainlinkOracle__validate_invalidData();\\n\\n    /// ======== Storage ======== ///\\n\\n    // @notice Chainlink Feeds\\n    address public immutable aggregatorFeed1;\\n    address public immutable aggregatorFeed2;\\n    address public immutable aggregatorFeed3;\\n\\n    /// @notice A proposals validation result, as determined in `validate`\\n    enum ValidateResult {\\n        Success,\\n        InvalidRoundId,\\n        InvalidDataOrNonce,\\n        InvalidValue\\n    }\\n\\n    /// ======== Events ======== ///\\n\\n    /// @param target Address of target\\n    /// @param oracleType Unique identifier\\n    /// @param bondToken Address of the ERC20 token used by the bonding proposers\\n    /// @param bondSize Amount of `bondToken` a proposer has to bond in order to submit proposals for each `rateId`\\n    /// @param disputeWindow Period until a proposed value can not be disputed anymore [seconds]\\n    /// @param aggregatorFeed1_ Address of the first chainlink aggregator feed\\n    /// @param aggregatorFeed2_ Address of the second chainlink aggregator feed\\n    /// @param aggregatorFeed3_ Address of the third chainlink aggregator feed\\n    constructor(\\n        address target,\\n        bytes32 oracleType,\\n        IERC20 bondToken,\\n        uint256 bondSize,\\n        uint256 disputeWindow,\\n        address aggregatorFeed1_,\\n        address aggregatorFeed2_,\\n        address aggregatorFeed3_\\n    ) OptimisticOracle(target, oracleType, bondToken, bondSize, disputeWindow) {\\n        aggregatorFeed1 = aggregatorFeed1_;\\n        aggregatorFeed2 = aggregatorFeed2_;\\n        aggregatorFeed3 = aggregatorFeed3_;\\n    }\\n\\n    /// ======== Chainlink Oracle Implementation ======== ///\\n\\n    /// @notice Retrieves the latest spot price from each Chainlink feed\\n    /// and computes the minimum price.\\n    /// @dev Assumes that the Chainlink Aggregators work as intended\\n    /// @return value_ Minimum spot price across the three feeds [wad]\\n    /// @return data Latest round ids and round timestamps for the\\n    /// Chainlink feeds[uint80,uint64,uint80,uint64,uint80,uint64]\\n    function value()\\n        public\\n        view\\n        override\\n        returns (uint256 value_, bytes memory data)\\n    {\\n        (\\n            uint256 value1,\\n            uint80 roundId1,\\n            uint64 timestamp1\\n        ) = _fetchLatestValue(aggregatorFeed1);\\n\\n        (\\n            uint256 value2,\\n            uint80 roundId2,\\n            uint64 timestamp2\\n        ) = _fetchLatestValue(aggregatorFeed2);\\n\\n        (\\n            uint256 value3,\\n            uint80 roundId3,\\n            uint64 timestamp3\\n        ) = _fetchLatestValue(aggregatorFeed3);\\n\\n        // compute the min value between the three feeds\\n        value_ = min(value1, min(value2, value3));\\n\\n        data = abi.encode(\\n            roundId1,\\n            timestamp1,\\n            roundId2,\\n            timestamp2,\\n            roundId3,\\n            timestamp3\\n        );\\n    }\\n\\n    /// ======== Proposal Management ======== ///\\n\\n    /// @notice Validates `proposedValue` for given `nonce` via the corresponding Chainlink feeds\\n    /// @param proposedValue Value to be validated [wad]\\n    /// @param *rateId RateId (see target) of the proposal being validated\\n    /// @param nonce Nonce of the `proposedValue`\\n    /// @param data Data used to generate `nonce`\\n    /// @return result Result of the validation [ValidateResult]\\n    /// @return validValue The minimum value retrieved from the chainlink feeds [wad]\\n    /// @return validData Data corresponding to `validValue`\\n    function validate(\\n        uint256 proposedValue,\\n        bytes32, /*rateId*/\\n        bytes32 nonce,\\n        bytes memory data\\n    )\\n        public\\n        view\\n        override(OptimisticOracle)\\n        returns (\\n            uint256 result,\\n            uint256 validValue,\\n            bytes memory validData\\n        )\\n    {\\n        // validate the data length\\n        if (data.length != 192) {\\n            revert Optimistic3PoolChainlinkOracle__validate_invalidData();\\n        } else {\\n            (\\n                uint80 roundId1,\\n                uint64 timestamp1,\\n                uint80 roundId2,\\n                uint64 timestamp2,\\n                uint80 roundId3,\\n                uint64 timestamp3\\n            ) = abi.decode(\\n                    data,\\n                    (uint80, uint64, uint80, uint64, uint80, uint64)\\n                );\\n\\n            // validate the feed 1 chainlink round\\n            validValue = _fetchAndValidate(\\n                aggregatorFeed1,\\n                roundId1,\\n                timestamp1\\n            );\\n            // validate the feed 2 chainlink round, skip if validation failed previously\\n            if (validValue != 0) {\\n                validValue = min(\\n                    validValue,\\n                    _fetchAndValidate(aggregatorFeed2, roundId2, timestamp2)\\n                );\\n            }\\n            // validate the feed 3 chainlink round, skip if validation failed previously\\n            if (validValue != 0) {\\n                validValue = min(\\n                    validValue,\\n                    _fetchAndValidate(aggregatorFeed3, roundId3, timestamp3)\\n                );\\n            }\\n\\n            // `validValue` will be 0 if any feed fails the verification\\n            if (validValue == 0) {\\n                result = uint256(ValidateResult.InvalidRoundId);\\n            } else {\\n                // create the nonce from the validated data\\n                uint64 minTimestamp = uint64(\\n                    min(timestamp1, min(timestamp2, timestamp3))\\n                );\\n\\n                bytes32 computedNonce = _encodeNonce(\\n                    keccak256(data),\\n                    minTimestamp,\\n                    uint64(uint256(nonce))\\n                );\\n\\n                if (computedNonce != nonce) {\\n                    result = uint256(ValidateResult.InvalidDataOrNonce);\\n                } else {\\n                    result = (validValue == proposedValue)\\n                        ? uint256(ValidateResult.Success)\\n                        : uint256(ValidateResult.InvalidValue);\\n                }\\n            }\\n        }\\n\\n        // retrieve fresh data in case the validation process failed\\n        if (result != uint256(ValidateResult.Success)) {\\n            (validValue, validData) = value();\\n        }\\n    }\\n\\n    /// @notice Fetches the latest value from a Chainlink Aggregator feed\\n    /// @param feed Address of the Chainlink Aggregator\\n    /// @return value_ Latest value fetched [wad]\\n    /// @return roundId_ RoundId for `value_`\\n    /// @return roundTimestamp_ The timestamp at which the latest round was created\\n    function _fetchLatestValue(address feed)\\n        private\\n        view\\n        returns (\\n            uint256 value_,\\n            uint80 roundId_,\\n            uint64 roundTimestamp_\\n        )\\n    {\\n        (\\n            uint80 roundId,\\n            int256 feedValue,\\n            ,\\n            uint256 roundTimestamp,\\n\\n        ) = AggregatorV3Interface(feed).latestRoundData();\\n\\n        if (roundTimestamp > type(uint64).max)\\n            revert Optimistic3PoolChainlinkOracle__fetchLatestValue_invalidTimestamp();\\n\\n        roundTimestamp_ = uint64(roundTimestamp);\\n        roundId_ = roundId;\\n\\n        unchecked {\\n            // scale to WAD\\n            value_ = wdiv(\\n                uint256(feedValue),\\n                10**AggregatorV3Interface(feed).decimals()\\n            );\\n        }\\n    }\\n\\n    /// @notice Fetches round value from a Chainlink Aggregator feed for a given `roundId`\\n    /// @param feed Address of the Chainlink Aggregator\\n    /// @param roundId RoundId of the Chainlink Aggregator to fetch round data for\\n    /// @param roundTimestamp The timestamp used to validate the round data\\n    /// @return roundValue Value fetched for the given `roundId` [wad]\\n    /// @dev Returns 0 if the round is not found or if `roundTimestamp` does not match the retrieved round timestamp\\n    function _fetchAndValidate(\\n        address feed,\\n        uint256 roundId,\\n        uint256 roundTimestamp\\n    ) private view returns (uint256 roundValue) {\\n        try AggregatorV3Interface(feed).getRoundData(uint80(roundId)) returns (\\n            uint80, /*roundId*/\\n            int256 roundValue_,\\n            uint256, /*startedAt*/\\n            uint256 roundTimestamp_,\\n            uint80 /*answeredInRound*/\\n        ) {\\n            // set the return value only if the timestamp is checked\\n            if (roundTimestamp_ == roundTimestamp) {\\n                unchecked {\\n                    // scale to WAD\\n                    roundValue = wdiv(\\n                        uint256(roundValue_),\\n                        10**AggregatorV3Interface(feed).decimals()\\n                    );\\n                }\\n            }\\n        } catch {}\\n    }\\n\\n    /// @notice Pushes a value directly to target by computing it on-chain\\n    /// without going through the shift / dispute process\\n    /// @dev Overwrites the current queued proposal with the blank (initial) proposal\\n    /// @param rateId RateId (see target)\\n    function push(bytes32 rateId) public override(OptimisticOracle) {\\n        if (!activeRateIds[rateId])\\n            revert Optimistic3PoolChainlinkOracle__push_inactiveRateId();\\n\\n        // fetch the latest value from the Chainlink Aggregators\\n        (uint256 value1, , uint64 timestamp1) = _fetchLatestValue(\\n            aggregatorFeed1\\n        );\\n        (uint256 value2, , uint64 timestamp2) = _fetchLatestValue(\\n            aggregatorFeed2\\n        );\\n        (uint256 value3, , uint64 timestamp3) = _fetchLatestValue(\\n            aggregatorFeed3\\n        );\\n\\n        // compute the min value\\n        uint256 value_ = min(value1, min(value2, value3));\\n\\n        // compute the min round timestamp\\n        uint64 minTimestamp = uint64(\\n            min(timestamp1, min(timestamp2, timestamp3))\\n        );\\n\\n        bytes32 nonce = _encodeNonce(0, minTimestamp, 0);\\n        // reset the current proposal\\n        proposals[rateId] = computeProposalId(rateId, address(0), 0, nonce);\\n\\n        // push the value to target\\n        _push(rateId, value_);\\n\\n        emit Push(rateId, nonce, value_);\\n    }\\n\\n    /// @notice Pushes a proposed value to target\\n    /// @param rateId RateId (see target)\\n    /// @param value_ Value that will be pushed to target [wad]\\n    function _push(bytes32 rateId, uint256 value_)\\n        internal\\n        override(OptimisticOracle)\\n    {\\n        // the OptimisticOracle ignores any exceptions that could be raised in the contract where the values are pushed\\n        // to - otherwise the shift / dispute flow would halt\\n        try\\n            ICollybus(target).updateSpot(\\n                address(uint160(uint256(rateId))),\\n                value_\\n            )\\n        {} catch {}\\n    }\\n\\n    /// @notice Checks that the dispute operation can be performed by the Oracle given `nonce`.\\n    /// `proposeTimestamp` encoded in `nonce` has to be less than `disputeWindow`\\n    /// @param nonce Nonce of the current proposal\\n    /// @return canDispute True if dispute operation can be performed\\n    function canDispute(bytes32 nonce)\\n        public\\n        view\\n        override(OptimisticOracle)\\n        returns (bool)\\n    {\\n        return (sub(block.timestamp, uint64(uint256(nonce))) <= disputeWindow);\\n    }\\n\\n    /// @notice Derives the nonce of a proposal from `data` and block.timestamp\\n    /// @param prevNonce Nonce of the previous proposal\\n    /// @param data Encoded round ids and round timestamps for the\\n    /// chainlink rounds [uint80,uint64,uint80,uint64,uint80,uint64]\\n    /// @return nonce Nonce of the current proposal\\n    /// @dev Reverts if the `disputeWindow` is still active\\n    /// Reverts if the current proposal is older than the previous proposal\\n    function encodeNonce(bytes32 prevNonce, bytes memory data)\\n        public\\n        view\\n        override(OptimisticOracle)\\n        returns (bytes32 nonce)\\n    {\\n        // decode the timestamp of each round, must revert if data cannot be decoded\\n        (\\n            ,\\n            uint64 roundTimestamp1,\\n            ,\\n            uint64 roundTimestamp2,\\n            ,\\n            uint64 roundTimestamp3\\n        ) = abi.decode(data, (uint80, uint64, uint80, uint64, uint80, uint64));\\n\\n        // compute the min between the three timestamps\\n        uint64 minTimestamp = uint64(\\n            min(roundTimestamp1, min(roundTimestamp2, roundTimestamp3))\\n        );\\n\\n        // skip the time window checks for the initial proposal\\n        if (prevNonce != 0) {\\n            // decode the round timestamp of the previous proposal from `nonce`\\n            (\\n                ,\\n                uint64 prevTimestamp,\\n                uint64 prevProposeTimestamp\\n            ) = _decodeNonce(prevNonce);\\n\\n            // revert if the current proposal is older than the previous proposal\\n            if (prevTimestamp >= uint64(minTimestamp)) {\\n                revert Optimistic3PoolChainlinkOracle__encodeNonce_staleProposal();\\n            }\\n\\n            // revert if prev. proposal is still within `disputeWindow`\\n            if (sub(block.timestamp, prevProposeTimestamp) <= disputeWindow) {\\n                revert Optimistic3PoolChainlinkOracle__encodeNonce_activeDisputeWindow();\\n            }\\n        }\\n\\n        // create the nonce\\n        nonce = _encodeNonce(\\n            keccak256(data),\\n            uint64(minTimestamp),\\n            uint64(block.timestamp)\\n        );\\n    }\\n\\n    /// @notice Decodes `nonce` into `dataHash` and `proposeTimestamp`\\n    /// @param nonce Nonce of a proposal\\n    /// @return noncePrefix The prefix of nonce [dataHash,round timestamp]\\n    /// @return proposeTimestamp Timestamp at which the proposal was created\\n    function decodeNonce(bytes32 nonce)\\n        public\\n        pure\\n        override(OptimisticOracle)\\n        returns (bytes32 noncePrefix, uint64 proposeTimestamp)\\n    {\\n        (\\n            bytes32 dataHash,\\n            uint64 roundTimestamp,\\n            uint64 proposeTimestamp_\\n        ) = _decodeNonce(nonce);\\n        noncePrefix = bytes32(\\n            (uint256(dataHash << 128) + uint256(roundTimestamp)) << 64\\n        );\\n        proposeTimestamp = proposeTimestamp_;\\n    }\\n\\n    /// @notice Encodes `dataHash`, `roundTimestamp` and `proposeTimestamp` as `nonce`\\n    /// @param dataHash The keccak hash of the proposal data\\n    /// @param roundTimestamp Timestamp of the Chainlink round\\n    /// @param proposeTimestamp Timestamp at which the proposal was created\\n    /// @return nonce Nonce [dataHash, roundTimestamp, proposeTimestamp]\\n    function _encodeNonce(\\n        bytes32 dataHash,\\n        uint64 roundTimestamp,\\n        uint64 proposeTimestamp\\n    ) internal pure returns (bytes32 nonce) {\\n        unchecked {\\n            nonce = bytes32(\\n                (uint256(dataHash) << 128) +\\n                    (uint256(roundTimestamp) << 64) +\\n                    uint256(proposeTimestamp)\\n            );\\n        }\\n    }\\n\\n    /// @notice Decodes the `dataHash`, `roundTimestamp` and `proposeTimestamp` from `nonce`\\n    /// @param nonce bytes32 containing [roundId, roundTimestamp, proposeTimestamp]\\n    /// @return dataHash Hash of the proposal data contained in the nonce\\n    /// @return roundTimestamp Timestamp of the Chainlink round\\n    /// @return proposeTimestamp Timestamp at which the proposal was created\\n\\n    function _decodeNonce(bytes32 nonce)\\n        internal\\n        pure\\n        returns (\\n            bytes32 dataHash,\\n            uint64 roundTimestamp,\\n            uint64 proposeTimestamp\\n        )\\n    {\\n        dataHash = bytes32(uint256(nonce >> 128));\\n        roundTimestamp = uint64(uint256(nonce >> 64));\\n        proposeTimestamp = uint64(uint256(nonce));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/delphi-ii/src/OptimisticOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {mul} from \\\"fiat/core/utils/Math.sol\\\";\\nimport {Guarded} from \\\"fiat/core/utils/Guarded.sol\\\";\\n\\nimport {IOptimisticOracle} from \\\"./interfaces/IOptimisticOracle.sol\\\";\\n\\n/// @title OptimisticOracle\\n/// @notice The Optimistic Oracle allows for gas-efficient oracle value updates.\\n/// Bonded proposers can optimistically propose a value for a given RateId which can be disputed within a set time\\n/// interval by computing the value on-chain. Proposers are not rewarded for doing so directly and instead are only\\n/// compensated in the event that they call the `dispute` function, as `dispute` is a gas intensive operation due to its\\n/// computation of the expected value on-chain. Compensation is sourced from the bond put up by the malicious proposer.\\n/// This is an abstract contract which provides the base logic for shifting and disputing proposals and bond management.\\nabstract contract OptimisticOracle is IOptimisticOracle, Guarded {\\n    using SafeERC20 for IERC20;\\n\\n    /// ======== Custom Errors ======== ///\\n\\n    error OptimisticOracle__activateRateId_activeRateId(bytes32 rateId);\\n    error OptimisticOracle__deactivateRateId_inactiveRateId(bytes32 rateId);\\n    error OptimisticOracle__shift_invalidPreviousProposal();\\n    error OptimisticOracle__shift_unbondedProposer();\\n    error OptimisticOracle__dispute_inactiveRateId();\\n    error OptimisticOracle__dispute_invalidDispute();\\n    error OptimisticOracle__settleDispute_unknownProposal();\\n    error OptimisticOracle__settleDispute_alreadyDisputed();\\n    error OptimisticOracle__bond_bondedProposer(bytes32 rateId);\\n    error OptimisticOracle__bond_inactiveRateId(bytes32 rateId);\\n    error OptimisticOracle__unbond_unbondedProposer();\\n    error OptimisticOracle__unbond_invalidProposal();\\n    error OptimisticOracle__unbond_isProposing();\\n    error OptimisticOracle__recover_unbondedProposer();\\n    error OptimisticOracle__recover_notLocked();\\n\\n    /// @notice Address of the target where values should be pushed to\\n    address public immutable target;\\n    /// @notice Address of the bonded token\\n    IERC20 public immutable bondToken;\\n    /// @notice Amount of `bondToken` proposers have to bond for each \\\"rate feed\\\" [precision of bondToken]\\n    uint256 public immutable bondSize;\\n    /// @notice Oracle type (metadata)\\n    bytes32 public immutable oracleType;\\n    /// @notice Time until a proposed value can not be disputed anymore\\n    uint256 public immutable disputeWindow;\\n\\n    /// @notice Map of ProposalIds by RateId\\n    /// For each \\\"rate feed\\\" (id. by RateId) only the current proposal is stored.\\n    /// Instead of storing all the data associated with a proposal, only the keccak256 hash of the data\\n    /// is stored as the ProposalId. The ProposalId is derived via `computeProposalId`.\\n    /// @dev RateId => ProposalId\\n    mapping(bytes32 => bytes32) public proposals;\\n\\n    /// @notice Map of active RateIds\\n    /// A `rateId` has to be activated in order for proposer to deposit a bond for it and dispute proposals which\\n    /// reference the `rateId`.\\n    /// @dev RateId => bool\\n    mapping(bytes32 => bool) public activeRateIds;\\n\\n    /// @notice Mapping of Bonds\\n    /// The Optimistic Oracle needs to ensure that there's a bond attached to every proposal made which can be claimed\\n    /// if the proposal is incorrect. In practice this requires that:\\n    /// - a proposer can't reuse their bond for multiple proposals (for the same or different rateIds)\\n    /// - a proposer can't unbond a proposal which hasn't passed `disputeWindow`\\n    /// For each \\\"rate feed\\\" (id. by RateId) it is required that a proposer submit proposals with a bond of `bondSize`.\\n    /// @dev Proposer => RateId => bonded\\n    mapping(address => mapping(bytes32 => bool)) public bonds;\\n\\n    /// @param target_ Address of target\\n    /// @param oracleType_ Unique identifier\\n    /// @param bondToken_ Address of the ERC20 token used for bonding proposers\\n    /// @param bondSize_ Amount of `bondToken` a proposer has to bond in order to submit proposals for each `rateId`\\n    /// @param disputeWindow_ Protocol specific period until a proposed value can not be disputed [seconds//blocks]\\n    constructor(\\n        address target_,\\n        bytes32 oracleType_,\\n        IERC20 bondToken_,\\n        uint256 bondSize_,\\n        uint256 disputeWindow_\\n    ) {\\n        target = target_;\\n        bondToken = bondToken_;\\n        bondSize = bondSize_;\\n        oracleType = oracleType_;\\n        disputeWindow = disputeWindow_;\\n    }\\n\\n    /// ======== Rate Configuration ======== ///\\n\\n    /// @notice Activates proposing for a given `rateId` and creates the initial / blank proposal for it.\\n    /// @dev Sender has to be allowed to call this method. Reverts if the `rateId` is already active.\\n    /// @param rateId RateId\\n    function activateRateId(bytes32 rateId) public checkCaller {\\n        if (activeRateIds[rateId])\\n            revert OptimisticOracle__activateRateId_activeRateId(rateId);\\n\\n        activeRateIds[rateId] = true;\\n\\n        // update target and set the current proposal as a blank (initial) proposal\\n        push(rateId);\\n    }\\n\\n    /// @notice Deactivates proposing for a given `rateId` and removes the last proposal which references it.\\n    /// @dev Sender has to be allowed to call this method. Reverts if the `rateId` is already inactive.\\n    /// @param rateId RateId\\n    function deactivateRateId(bytes32 rateId) public checkCaller {\\n        if (!activeRateIds[rateId]) {\\n            revert OptimisticOracle__deactivateRateId_inactiveRateId(rateId);\\n        }\\n\\n        delete activeRateIds[rateId];\\n\\n        // clear the current proposal to stop bonded proposers to `shift` new values for this rateId\\n        // without a valid current proposal, no new shifts can be made\\n        delete proposals[rateId];\\n    }\\n\\n    /// ======== Proposal Management ======== ///\\n\\n    /// @notice Queues a new proposed `value` for a given `rateId` and pushes `prevValue` to target\\n    /// @dev Can only be called by a bonded proposer. Reverts if either:\\n    /// - the specified previous proposal (`prevProposer`, `prevValue`, `prevNonce`) is invalid / non existent,\\n    /// - `disputeWindow` still active,\\n    /// - current proposed value is disputable (`dispute` has to be called beforehand)\\n    /// For the initial shift for a given `rateId` - `prevProposer`, `prevValue` and `prevNonce` are set to 0.\\n    /// @param rateId RateId for which to shift the proposals\\n    /// @param prevProposer Address of the previous proposer\\n    /// @param prevValue Value of the previous proposal\\n    /// @param prevNonce Nonce of the previous proposal\\n    /// @param value Value of the new proposal [wad]\\n    /// @param data Data of the new proposal\\n    function shift(\\n        bytes32 rateId,\\n        address prevProposer,\\n        uint256 prevValue,\\n        bytes32 prevNonce,\\n        uint256 value,\\n        bytes memory data\\n    ) external override(IOptimisticOracle) {\\n        // check that proposer is bonded for the given `rateId`\\n        if (!isBonded(msg.sender, rateId))\\n            revert OptimisticOracle__shift_unbondedProposer();\\n\\n        // verify that the previous proposal exists\\n        if (\\n            proposals[rateId] !=\\n            computeProposalId(rateId, prevProposer, prevValue, prevNonce)\\n        ) {\\n            revert OptimisticOracle__shift_invalidPreviousProposal();\\n        }\\n\\n        // derive the nonce of the new proposal from `data` (reverts if prev. proposal is within the `disputeWindow`)\\n        bytes32 nonce = encodeNonce(prevNonce, data);\\n\\n        // push the previous value to target\\n        // skip if `prevNonce` is 0 (blank (initial) proposal) since it is not an actual proposal\\n        if (prevNonce != 0 && prevValue != 0) _push(rateId, prevValue);\\n\\n        // update the proposal with the new values\\n        proposals[rateId] = computeProposalId(rateId, msg.sender, value, nonce);\\n\\n        emit Propose(rateId, nonce);\\n    }\\n\\n    /// @notice Disputes a proposed value by fetching the correct value from the implementation's data feed.\\n    /// The bond of the proposer of the disputed value is sent to the `receiver`.\\n    /// @param rateId RateId of the proposal being disputed\\n    /// @param proposer Address of the proposer of the proposal being disputed\\n    /// @param receiver Address of the receiver of the `proposer`'s bond\\n    /// @param value_ Value of the proposal being disputed [wad]\\n    /// @param nonce Nonce of the proposal being disputed\\n    /// @param data Additional encoded data required for disputes\\n    function dispute(\\n        bytes32 rateId,\\n        address proposer,\\n        address receiver,\\n        uint256 value_,\\n        bytes32 nonce,\\n        bytes memory data\\n    ) external override(IOptimisticOracle) {\\n        if (!activeRateIds[rateId])\\n            revert OptimisticOracle__dispute_inactiveRateId();\\n\\n        // validate the proposed value\\n        (uint256 result, uint256 validValue, bytes memory validData) = validate(\\n            value_,\\n            rateId,\\n            nonce,\\n            data\\n        );\\n\\n        // if result is zero then the validation was successful\\n        if (result == 0) revert OptimisticOracle__dispute_invalidDispute();\\n\\n        emit Validate(rateId, proposer, result);\\n\\n        // skip the dispute window check when replacing the invalid nonce\\n        bytes32 validNonce = encodeNonce(bytes32(0), validData);\\n\\n        _settleDispute(\\n            rateId,\\n            proposer,\\n            receiver,\\n            value_,\\n            nonce,\\n            validValue,\\n            validNonce\\n        );\\n\\n        emit Propose(rateId, validNonce);\\n    }\\n\\n    /// @notice Validates `proposedValue` for a given `nonce`\\n    /// @param proposedValue Value to be validated [wad]\\n    /// @param rateId RateId\\n    /// @param nonce Protocol specific nonce of the `proposedValue`\\n    /// @param data Protocol specific data buffer corresponding to `proposedValue`\\n    /// @return result 0 for success, otherwise a protocol specific validation failure code is returned\\n    /// @return validValue Value that was computed onchain\\n    /// @return validData Data corresponding to `validValue`\\n    function validate(\\n        uint256 proposedValue,\\n        bytes32 rateId,\\n        bytes32 nonce,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override(IOptimisticOracle)\\n        returns (\\n            uint256 result,\\n            uint256 validValue,\\n            bytes memory validData\\n        );\\n\\n    /// @notice Settles the dispute by overwriting the invalid proposal with a new proposal\\n    /// and claims the malicious proposer's bond\\n    /// @param rateId RateId of the proposal to dispute\\n    /// @param proposer Address of the proposer of the disputed proposal\\n    /// @param receiver Address of the bond receiver\\n    /// @param value Value of the proposal to dispute [wad]\\n    /// @param nonce Nonce of the proposal to dispute\\n    /// @param validValue Value computed by the validator [wad]\\n    /// @param validNonce Nonce computed by the validator\\n    function _settleDispute(\\n        bytes32 rateId,\\n        address proposer,\\n        address receiver,\\n        uint256 value,\\n        bytes32 nonce,\\n        uint256 validValue,\\n        bytes32 validNonce\\n    ) internal {\\n        if (proposer == address(this)) {\\n            revert OptimisticOracle__settleDispute_alreadyDisputed();\\n        }\\n\\n        // verify the proposal data\\n        if (\\n            proposals[rateId] !=\\n            computeProposalId(rateId, proposer, value, nonce)\\n        ) {\\n            revert OptimisticOracle__settleDispute_unknownProposal();\\n        }\\n\\n        // overwrite the proposal with the value computed by the Validator\\n        proposals[rateId] = computeProposalId(\\n            rateId,\\n            address(this),\\n            validValue,\\n            validNonce\\n        );\\n\\n        // block the proposer from further bonding\\n        _blockCaller(bytes4(keccak256(\\\"bond(bytes32[])\\\")), proposer);\\n\\n        // transfer the bond to the receiver (disregard the outcome)\\n        _claimBond(proposer, rateId, receiver);\\n\\n        emit Dispute(rateId, proposer, msg.sender, value, validValue);\\n    }\\n\\n    /// @notice Pushes a value directly to target by computing it on-chain\\n    /// without going through the shift / dispute process\\n    /// @dev Overwrites the current queued proposal with the blank (initial) proposal\\n    /// @param rateId RateId\\n    function push(bytes32 rateId) public virtual override(IOptimisticOracle);\\n\\n    /// @notice Pushes a proposed value to target\\n    /// @param rateId RateId\\n    /// @param value Value that will be pushed to target [wad]\\n    function _push(bytes32 rateId, uint256 value) internal virtual;\\n\\n    /// @notice Computes the ProposalId\\n    /// @param rateId RateId\\n    /// @param proposer Address of the proposer\\n    /// @param value Proposed value [wad]\\n    /// @param nonce Nonce of the proposal\\n    /// @return proposalId Computed proposalId\\n    function computeProposalId(\\n        bytes32 rateId,\\n        address proposer,\\n        uint256 value,\\n        bytes32 nonce\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(rateId, proposer, value, nonce));\\n    }\\n\\n    /// @notice Derive the nonce of a proposal from `prevNonce` and `data`.\\n    /// @dev Must revert if the `disputeWindow` is still active\\n    /// @param prevNonce Nonce of the previous proposal\\n    /// @param data Data of the current proposal\\n    /// @return nonce of the current proposal\\n    function encodeNonce(bytes32 prevNonce, bytes memory data)\\n        public\\n        view\\n        virtual\\n        override(IOptimisticOracle)\\n        returns (bytes32);\\n\\n    /// @notice Decode the data hash and the `proposeTimestamp` from a proposal `nonce`\\n    /// @dev Reverts if the `disputeWindow` is still active\\n    /// @param nonce Protocol specific nonce containing `proposeTimestamp`\\n    /// @return dataHash Pre-image of `nonce`\\n    /// @return proposeTimestamp Timestamp at which the proposal was made [uint64]\\n    function decodeNonce(bytes32 nonce)\\n        public\\n        view\\n        virtual\\n        override(IOptimisticOracle)\\n        returns (bytes32 dataHash, uint64 proposeTimestamp);\\n\\n    /// @notice Checks that the dispute operation can be performed by the OptimisticOracle given `nonce`\\n    /// @return canDispute True if dispute operation can be performed\\n    function canDispute(bytes32 nonce)\\n        public\\n        view\\n        virtual\\n        override(IOptimisticOracle)\\n        returns (bool);\\n\\n    /// ======== Bond Management ======== ///\\n\\n    /// @notice Deposits `bondToken`'s for the specified `rateIds`\\n    /// The total bonded amount is `rateIds.length * bondSize`\\n    /// The caller needs to be whitelisted by the oracle owner\\n    /// @dev Reverts if the caller already deposited a bond for a given `rateId`\\n    /// Requires the caller to set an allowance for this contract\\n    /// @param rateIds List of `rateId`'s for each which sender wants to submit proposals for\\n    function bond(bytes32[] calldata rateIds)\\n        public\\n        override(IOptimisticOracle)\\n        checkCaller\\n    {\\n        _bond(msg.sender, rateIds);\\n    }\\n\\n    /// @notice Deposits `bondToken`'s for a given `proposer` for the specified `rateIds`.\\n    /// The total bonded amount is `rateIds.length * bondSize`.\\n    /// @dev Requires the caller to set an allowance for this contract.\\n    /// Reverts if `proposer` already deposited a bond for a given `rateId`.\\n    /// @param proposer Address of the proposer\\n    /// @param rateIds List of `rateId`'s for each which `proposer` wants to submit proposals for\\n    function bond(address proposer, bytes32[] calldata rateIds)\\n        public\\n        override(IOptimisticOracle)\\n        checkCaller\\n    {\\n        _bond(proposer, rateIds);\\n    }\\n\\n    /// @notice Deposits `bondToken`'s for a given `proposer` for the specified `rateIds`.\\n    /// The total bonded amount is `rateIds.length * bondSize`.\\n    /// @dev Requires the caller to set an allowance for this contract.\\n    /// Reverts if `proposer` already deposited a bond for a given `rateId`.\\n    /// @param proposer Address of the proposer\\n    /// @param rateIds List of `rateId`'s for each which `proposer` wants to submit proposals for\\n    function _bond(address proposer, bytes32[] calldata rateIds) private {\\n        // transfer the total amount to bond from the caller\\n        bondToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            mul(rateIds.length, bondSize)\\n        );\\n\\n        // mark the `proposer` as bonded for each rateId\\n        for (uint256 i = 0; i < rateIds.length; ++i) {\\n            bytes32 rateId = rateIds[i];\\n\\n            // `rateId` needs to be active\\n            if (!activeRateIds[rateId]) {\\n                revert OptimisticOracle__bond_inactiveRateId(rateId);\\n            }\\n\\n            // `proposer` should be unbonded for the specified `rateId`'s\\n            if (isBonded(proposer, rateId)) {\\n                revert OptimisticOracle__bond_bondedProposer(rateId);\\n            }\\n\\n            bonds[proposer][rateId] = true;\\n        }\\n\\n        emit Bond(proposer, rateIds);\\n    }\\n\\n    /// @notice Unbond the caller for a given `rateId` and send the bonded amount to `receiver`\\n    /// Proposers can retrieve their bond if either:\\n    /// - the last proposal was made by another proposer,\\n    /// - `disputeWindow` for the last proposal has elapsed,\\n    /// - `rateId` is inactive\\n    /// @dev Reverts if the caller is not bonded for a given `rateId`\\n    /// @param rateId RateId for which to unbond\\n    /// @param lastProposerForRateId Address of the last proposer for `rateId`\\n    /// @param value Value of the current proposal made for `rateId`\\n    /// @param nonce Nonce of the current proposal made for `rateId`\\n    /// @param receiver Address of the recipient of the bonded amount\\n    function unbond(\\n        bytes32 rateId,\\n        address lastProposerForRateId,\\n        uint256 value,\\n        bytes32 nonce,\\n        address receiver\\n    ) public override(IOptimisticOracle) {\\n        bytes32 proposalId = computeProposalId(\\n            rateId,\\n            lastProposerForRateId,\\n            value,\\n            nonce\\n        );\\n\\n        // revert if `proposalId` is invalid\\n        if (proposals[rateId] != proposalId)\\n            revert OptimisticOracle__unbond_invalidProposal();\\n\\n        // revert if the `proposer` is `msg.sender` and the dispute window is active\\n        // skipping and allowing unbond if the rate is removed is intended\\n        if (\\n            lastProposerForRateId == msg.sender &&\\n            activeRateIds[rateId] &&\\n            canDispute(nonce)\\n        ) {\\n            revert OptimisticOracle__unbond_isProposing();\\n        }\\n\\n        // revert if `msg.sender` is not bonded\\n        if (!isBonded(msg.sender, rateId))\\n            revert OptimisticOracle__unbond_unbondedProposer();\\n\\n        delete bonds[msg.sender][rateId];\\n        bondToken.safeTransfer(receiver, bondSize);\\n\\n        emit Unbond(msg.sender, rateId, receiver);\\n    }\\n\\n    /// @notice Claims the bond of `proposer` for `rateId` and sends the bonded amount (`bondSize`) of `bondToken`\\n    /// to `receiver`\\n    /// @dev Does not revert if the `proposer` is unbonded for a given `rateId` to avoid deadlocks\\n    /// @param proposer Address of the proposer from which to claim the bond\\n    /// @param rateId RateId for which the proposer bonded\\n    /// @param receiver Address of the recipient of the claimed bond\\n    function _claimBond(\\n        address proposer,\\n        bytes32 rateId,\\n        address receiver\\n    ) internal returns (bool) {\\n        if (!isBonded(proposer, rateId)) return false;\\n\\n        // clear bond\\n        delete bonds[proposer][rateId];\\n\\n        // avoids blocking the dispute in case the transfer fails\\n        try bondToken.transfer(receiver, bondSize) {} catch {}\\n\\n        emit ClaimBond(proposer, rateId, receiver);\\n\\n        return true;\\n    }\\n\\n    /// @notice Checks that `proposer` is bonded for a given `rateId`\\n    /// @param proposer Address of the proposer\\n    /// @param rateId RateId\\n    /// @return isBonded True if `proposer` is bonded\\n    function isBonded(address proposer, bytes32 rateId)\\n        public\\n        view\\n        override(IOptimisticOracle)\\n        returns (bool)\\n    {\\n        return bonds[proposer][rateId];\\n    }\\n\\n    /// @notice Allow `proposer` to call `bond`\\n    /// @dev Sender has to be allowed to call this method\\n    /// @param proposer Address of the proposer\\n    function allowProposer(address proposer)\\n        external\\n        override(IOptimisticOracle)\\n        checkCaller\\n    {\\n        _allowCaller(bytes4(keccak256(\\\"bond(bytes32[])\\\")), proposer);\\n    }\\n\\n    /// ======== Shutdown ======== ///\\n\\n    /// @notice Locks `shift`, `dispute` operations for a given set of `rateId`s.\\n    /// @dev Sender has to be allowed to call this method. Reverts if the rate was already unregistered.\\n    /// @param rateIds RateIds for which to lock `shift` and `dispute`\\n    function lock(bytes32[] calldata rateIds)\\n        public\\n        override(IOptimisticOracle)\\n        checkCaller\\n    {\\n        uint256 length = rateIds.length;\\n        for (uint256 rateIdx = 0; rateIdx < length; ) {\\n            deactivateRateId(rateIds[rateIdx]);\\n            unchecked {\\n                ++rateIdx;\\n            }\\n        }\\n\\n        emit Lock();\\n    }\\n\\n    /// @notice Allows proposers to withdraw their bond for a given `rateId` in case after the oracle is locked\\n    /// @param rateId RateId for which the proposer wants to withdraw the bond\\n    /// @param receiver Address that will receive the bond\\n    function recover(bytes32 rateId, address receiver)\\n        public\\n        override(IOptimisticOracle)\\n    {\\n        if (activeRateIds[rateId]) {\\n            revert OptimisticOracle__recover_notLocked();\\n        }\\n\\n        // transfer and clear the bond\\n        if (!_claimBond(msg.sender, rateId, receiver)) {\\n            revert OptimisticOracle__recover_unbondedProposer();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/delphi-ii/src/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice Copied from:\\n/// https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n/// at commit a64a7fc38b647c490416091bccf39e85ded3961d\\ninterface AggregatorV3Interface {\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(uint80 _roundId)\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/delphi-ii/src/interfaces/IOptimistic3PoolChainlinkValue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IOptimistic3PoolChainlinkValue {\\n    function value() external view returns (uint256 value_, bytes memory data);\\n}\\n\"\r\n    },\r\n    \"lib/delphi-ii/src/interfaces/IOptimisticOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IOptimisticOracle {\\n    event Propose(bytes32 indexed rateId, bytes32 nonce);\\n\\n    event Dispute(\\n        bytes32 indexed rateId,\\n        address indexed proposer,\\n        address indexed disputer,\\n        uint256 proposedValue,\\n        uint256 validValue\\n    );\\n\\n    event Validate(\\n        bytes32 indexed token,\\n        address indexed proposer,\\n        uint256 result\\n    );\\n    event Push(bytes32 indexed rateId, bytes32 nonce, uint256 value);\\n    event Bond(address indexed proposer, bytes32[] rateIds);\\n    event Unbond(address indexed proposer, bytes32 rateId, address receiver);\\n    event ClaimBond(address indexed proposer, bytes32 rateId, address receiver);\\n    event Lock();\\n\\n    function target() external view returns (address);\\n\\n    function bondToken() external view returns (IERC20);\\n\\n    function bondSize() external view returns (uint256);\\n\\n    function oracleType() external view returns (bytes32);\\n\\n    function disputeWindow() external view returns (uint256);\\n\\n    function proposals(bytes32 rateId) external view returns (bytes32);\\n\\n    function activeRateIds(bytes32 rateId) external view returns (bool);\\n\\n    function bonds(address, bytes32) external view returns (bool);\\n\\n    function bond(address proposer, bytes32[] calldata rateIds) external;\\n\\n    function bond(bytes32[] calldata rateIds) external;\\n\\n    function unbond(\\n        bytes32 rateId,\\n        address proposer,\\n        uint256 value,\\n        bytes32 nonce,\\n        address receiver\\n    ) external;\\n\\n    function isBonded(address proposer, bytes32 rateId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function shift(\\n        bytes32 rateId,\\n        address prevProposer,\\n        uint256 prevValue,\\n        bytes32 prevNonce,\\n        uint256 value,\\n        bytes memory data\\n    ) external;\\n\\n    function dispute(\\n        bytes32 rateId,\\n        address proposer,\\n        address receiver,\\n        uint256 value_,\\n        bytes32 nonce,\\n        bytes memory data\\n    ) external;\\n\\n    function validate(\\n        uint256 proposedValue,\\n        bytes32 rateId,\\n        bytes32 nonce,\\n        bytes memory data\\n    )\\n        external\\n        returns (\\n            uint256,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function push(bytes32 rateId) external;\\n\\n    function encodeNonce(bytes32 prevNonce, bytes memory data)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function decodeNonce(bytes32 nonce)\\n        external\\n        view\\n        returns (bytes32 dataHash, uint64 proposeTimestamp);\\n\\n    function canDispute(bytes32 nonce) external view returns (bool);\\n\\n    function allowProposer(address proposer) external;\\n\\n    function lock(bytes32[] calldata rateIds_) external;\\n\\n    function recover(bytes32 rateId, address receiver) external;\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"lib/fiat-i/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/src/core/utils/Guarded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport {IGuarded} from \\\"../../interfaces/IGuarded.sol\\\";\\n\\n/// @title Guarded\\n/// @notice Mixin implementing an authentication scheme on a method level\\nabstract contract Guarded is IGuarded {\\n    /// ======== Custom Errors ======== ///\\n\\n    error Guarded__notRoot();\\n    error Guarded__notGranted();\\n\\n    /// ======== Storage ======== ///\\n\\n    /// @notice Wildcard for granting a caller to call every guarded method\\n    bytes32 public constant override ANY_SIG = keccak256(\\\"ANY_SIG\\\");\\n    /// @notice Wildcard for granting a caller to call every guarded method\\n    address public constant override ANY_CALLER = address(uint160(uint256(bytes32(keccak256(\\\"ANY_CALLER\\\")))));\\n\\n    /// @notice Mapping storing who is granted to which method\\n    /// @dev Method Signature => Caller => Bool\\n    mapping(bytes32 => mapping(address => bool)) private _canCall;\\n\\n    /// ======== Events ======== ///\\n\\n    event AllowCaller(bytes32 sig, address who);\\n    event BlockCaller(bytes32 sig, address who);\\n\\n    constructor() {\\n        // set root\\n        _setRoot(msg.sender);\\n    }\\n\\n    /// ======== Auth ======== ///\\n\\n    modifier callerIsRoot() {\\n        if (_canCall[ANY_SIG][msg.sender]) {\\n            _;\\n        } else revert Guarded__notRoot();\\n    }\\n\\n    modifier checkCaller() {\\n        if (canCall(msg.sig, msg.sender)) {\\n            _;\\n        } else revert Guarded__notGranted();\\n    }\\n\\n    /// @notice Grant the right to call method `sig` to `who`\\n    /// @param sig Method signature (4Byte)\\n    /// @param who Address of who should be able to call `sig`\\n    function _allowCaller(bytes32 sig, address who) internal {\\n        _canCall[sig][who] = true;\\n        emit AllowCaller(sig, who);        \\n    }\\n\\n    /// @notice Revoke the right to call method `sig` from `who`\\n    /// @param sig Method signature (4Byte)\\n    /// @param who Address of who should not be able to call `sig` anymore\\n    function _blockCaller(bytes32 sig, address who) internal {\\n        _canCall[sig][who] = false;\\n        emit BlockCaller(sig, who);\\n    }\\n\\n    /// @notice Sets the root user (granted `ANY_SIG`)\\n    /// @param root Address of who should be set as root\\n    function _setRoot(address root) internal {\\n        _allowCaller(ANY_SIG, root);\\n    }\\n\\n    /// @notice Unsets the root user (granted `ANY_SIG`)\\n    /// @param root Address of who should be unset as root\\n    function _unsetRoot(address root) internal {\\n        _blockCaller(ANY_SIG, root);\\n    }\\n\\n    /// @notice Grant the right to call method `sig` to `who`\\n    /// @dev Only the root user (granted `ANY_SIG`) is able to call this method\\n    /// @param sig Method signature (4Byte)\\n    /// @param who Address of who should be able to call `sig`\\n    function allowCaller(bytes32 sig, address who) public override callerIsRoot {\\n        _allowCaller(sig, who);\\n    }\\n\\n    /// @notice Revoke the right to call method `sig` from `who`\\n    /// @dev Only the root user (granted `ANY_SIG`) is able to call this method\\n    /// @param sig Method signature (4Byte)\\n    /// @param who Address of who should not be able to call `sig` anymore\\n    function blockCaller(bytes32 sig, address who) public override callerIsRoot {\\n        _blockCaller(sig, who);\\n    }\\n\\n    /// @notice Returns if `who` can call `sig`\\n    /// @param sig Method signature (4Byte)\\n    /// @param who Address of who should be able to call `sig`\\n    function canCall(bytes32 sig, address who) public view override returns (bool) {\\n        return (_canCall[sig][who] || _canCall[ANY_SIG][who] || _canCall[sig][ANY_CALLER]);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/src/core/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\\npragma solidity ^0.8.4;\\n\\nuint256 constant MLN = 10**6;\\nuint256 constant BLN = 10**9;\\nuint256 constant WAD = 10**18;\\nuint256 constant RAY = 10**18;\\nuint256 constant RAD = 10**18;\\n\\n/* solhint-disable func-visibility, no-inline-assembly */\\n\\nerror Math__toInt256_overflow(uint256 x);\\n\\nfunction toInt256(uint256 x) pure returns (int256) {\\n    if (x > uint256(type(int256).max)) revert Math__toInt256_overflow(x);\\n    return int256(x);\\n}\\n\\nfunction min(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = x <= y ? x : y;\\n    }\\n}\\n\\nfunction max(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = x >= y ? x : y;\\n    }\\n}\\n\\nerror Math__diff_overflow(uint256 x, uint256 y);\\n\\nfunction diff(uint256 x, uint256 y) pure returns (int256 z) {\\n    unchecked {\\n        z = int256(x) - int256(y);\\n        if (!(int256(x) >= 0 && int256(y) >= 0)) revert Math__diff_overflow(x, y);\\n    }\\n}\\n\\nerror Math__add_overflow(uint256 x, uint256 y);\\n\\nfunction add(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        if ((z = x + y) < x) revert Math__add_overflow(x, y);\\n    }\\n}\\n\\nerror Math__add48_overflow(uint256 x, uint256 y);\\n\\nfunction add48(uint48 x, uint48 y) pure returns (uint48 z) {\\n    unchecked {\\n        if ((z = x + y) < x) revert Math__add48_overflow(x, y);\\n    }\\n}\\n\\nerror Math__add_overflow_signed(uint256 x, int256 y);\\n\\nfunction add(uint256 x, int256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = x + uint256(y);\\n        if (!(y >= 0 || z <= x)) revert Math__add_overflow_signed(x, y);\\n        if (!(y <= 0 || z >= x)) revert Math__add_overflow_signed(x, y);\\n    }\\n}\\n\\nerror Math__sub_overflow(uint256 x, uint256 y);\\n\\nfunction sub(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        if ((z = x - y) > x) revert Math__sub_overflow(x, y);\\n    }\\n}\\n\\nerror Math__sub_overflow_signed(uint256 x, int256 y);\\n\\nfunction sub(uint256 x, int256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = x - uint256(y);\\n        if (!(y <= 0 || z <= x)) revert Math__sub_overflow_signed(x, y);\\n        if (!(y >= 0 || z >= x)) revert Math__sub_overflow_signed(x, y);\\n    }\\n}\\n\\nerror Math__mul_overflow(uint256 x, uint256 y);\\n\\nfunction mul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        if (!(y == 0 || (z = x * y) / y == x)) revert Math__mul_overflow(x, y);\\n    }\\n}\\n\\nerror Math__mul_overflow_signed(uint256 x, int256 y);\\n\\nfunction mul(uint256 x, int256 y) pure returns (int256 z) {\\n    unchecked {\\n        z = int256(x) * y;\\n        if (int256(x) < 0) revert Math__mul_overflow_signed(x, y);\\n        if (!(y == 0 || z / y == int256(x))) revert Math__mul_overflow_signed(x, y);\\n    }\\n}\\n\\nfunction wmul(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = mul(x, y) / WAD;\\n    }\\n}\\n\\nfunction wmul(uint256 x, int256 y) pure returns (int256 z) {\\n    unchecked {\\n        z = mul(x, y) / int256(WAD);\\n    }\\n}\\n\\nerror Math__div_overflow(uint256 x, uint256 y);\\n\\nfunction div(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        if (y == 0) revert Math__div_overflow(x, y);\\n        return x / y;\\n    }\\n}\\n\\nfunction wdiv(uint256 x, uint256 y) pure returns (uint256 z) {\\n    unchecked {\\n        z = mul(x, WAD) / y;\\n    }\\n}\\n\\n// optimized version from dss PR #78\\nfunction wpow(\\n    uint256 x,\\n    uint256 n,\\n    uint256 b\\n) pure returns (uint256 z) {\\n    unchecked {\\n        assembly {\\n            switch n\\n            case 0 {\\n                z := b\\n            }\\n            default {\\n                switch x\\n                case 0 {\\n                    z := 0\\n                }\\n                default {\\n                    switch mod(n, 2)\\n                    case 0 {\\n                        z := b\\n                    }\\n                    default {\\n                        z := x\\n                    }\\n                    let half := div(b, 2) // for rounding.\\n                    for {\\n                        n := div(n, 2)\\n                    } n {\\n                        n := div(n, 2)\\n                    } {\\n                        let xx := mul(x, x)\\n                        if shr(128, x) {\\n                            revert(0, 0)\\n                        }\\n                        let xxRound := add(xx, half)\\n                        if lt(xxRound, xx) {\\n                            revert(0, 0)\\n                        }\\n                        x := div(xxRound, b)\\n                        if mod(n, 2) {\\n                            let zx := mul(z, x)\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) {\\n                                revert(0, 0)\\n                            }\\n                            let zxRound := add(zx, half)\\n                            if lt(zxRound, zx) {\\n                                revert(0, 0)\\n                            }\\n                            z := div(zxRound, b)\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n/* solhint-disable func-visibility, no-inline-assembly */\\n\"\r\n    },\r\n    \"lib/fiat-i/src/interfaces/ICodex.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\ninterface ICodex {\\n    function init(address vault) external;\\n\\n    function setParam(bytes32 param, uint256 data) external;\\n\\n    function setParam(\\n        address,\\n        bytes32,\\n        uint256\\n    ) external;\\n\\n    function credit(address) external view returns (uint256);\\n\\n    function unbackedDebt(address) external view returns (uint256);\\n\\n    function balances(\\n        address,\\n        uint256,\\n        address\\n    ) external view returns (uint256);\\n\\n    function vaults(address vault)\\n        external\\n        view\\n        returns (\\n            uint256 totalNormalDebt,\\n            uint256 rate,\\n            uint256 debtCeiling,\\n            uint256 debtFloor\\n        );\\n\\n    function positions(\\n        address vault,\\n        uint256 tokenId,\\n        address position\\n    ) external view returns (uint256 collateral, uint256 normalDebt);\\n\\n    function globalDebt() external view returns (uint256);\\n\\n    function globalUnbackedDebt() external view returns (uint256);\\n\\n    function globalDebtCeiling() external view returns (uint256);\\n\\n    function delegates(address, address) external view returns (uint256);\\n\\n    function grantDelegate(address) external;\\n\\n    function revokeDelegate(address) external;\\n\\n    function modifyBalance(\\n        address,\\n        uint256,\\n        address,\\n        int256\\n    ) external;\\n\\n    function transferBalance(\\n        address vault,\\n        uint256 tokenId,\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    function transferCredit(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external;\\n\\n    function modifyCollateralAndDebt(\\n        address vault,\\n        uint256 tokenId,\\n        address user,\\n        address collateralizer,\\n        address debtor,\\n        int256 deltaCollateral,\\n        int256 deltaNormalDebt\\n    ) external;\\n\\n    function transferCollateralAndDebt(\\n        address vault,\\n        uint256 tokenId,\\n        address src,\\n        address dst,\\n        int256 deltaCollateral,\\n        int256 deltaNormalDebt\\n    ) external;\\n\\n    function confiscateCollateralAndDebt(\\n        address vault,\\n        uint256 tokenId,\\n        address user,\\n        address collateralizer,\\n        address debtor,\\n        int256 deltaCollateral,\\n        int256 deltaNormalDebt\\n    ) external;\\n\\n    function settleUnbackedDebt(uint256 debt) external;\\n\\n    function createUnbackedDebt(\\n        address debtor,\\n        address creditor,\\n        uint256 debt\\n    ) external;\\n\\n    function modifyRate(\\n        address vault,\\n        address creditor,\\n        int256 rate\\n    ) external;\\n\\n    function live() external view returns (uint256);\\n\\n    function lock() external;\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/src/interfaces/ICollybus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.4;\\n\\nimport {ICodex} from \\\"./ICodex.sol\\\";\\n\\ninterface IPriceFeed {\\n    function peek() external returns (bytes32, bool);\\n\\n    function read() external view returns (bytes32);\\n}\\n\\ninterface ICollybus {\\n    function vaults(address) external view returns (uint128, uint128);\\n\\n    function spots(address) external view returns (uint256);\\n\\n    function rates(uint256) external view returns (uint256);\\n\\n    function rateIds(address, uint256) external view returns (uint256);\\n\\n    function redemptionPrice() external view returns (uint256);\\n\\n    function live() external view returns (uint256);\\n\\n    function setParam(bytes32 param, uint256 data) external;\\n\\n    function setParam(\\n        address vault,\\n        bytes32 param,\\n        uint128 data\\n    ) external;\\n\\n    function setParam(\\n        address vault,\\n        uint256 tokenId,\\n        bytes32 param,\\n        uint256 data\\n    ) external;\\n\\n    function updateDiscountRate(uint256 rateId, uint256 rate) external;\\n\\n    function updateSpot(address token, uint256 spot) external;\\n\\n    function read(\\n        address vault,\\n        address underlier,\\n        uint256 tokenId,\\n        uint256 maturity,\\n        bool net\\n    ) external view returns (uint256 price);\\n\\n    function lock() external;\\n}\\n\"\r\n    },\r\n    \"lib/fiat-i/src/interfaces/IGuarded.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.4;\\n\\ninterface IGuarded {\\n    function ANY_SIG() external view returns (bytes32);\\n\\n    function ANY_CALLER() external view returns (address);\\n\\n    function allowCaller(bytes32 sig, address who) external;\\n\\n    function blockCaller(bytes32 sig, address who) external;\\n\\n    function canCall(bytes32 sig, address who) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@cleanunicorn/mockprovider/=lib/delphi/lib/mockprovider/\",\r\n      \"@openzeppelin/=lib/fiat-i/lib/openzeppelin-contracts/\",\r\n      \"abdk-libraries-solidity/=lib/delphi/lib/abdk-libraries-solidity/\",\r\n      \"actions/=lib/fiat-i/src/actions/\",\r\n      \"delphi-ii/=lib/delphi-ii/src/\",\r\n      \"delphi/=lib/delphi/src/\",\r\n      \"ds-auth/=lib/delphi/lib/ds-auth/src/\",\r\n      \"ds-math/=lib/delphi/lib/ds-math/src/\",\r\n      \"ds-note/=lib/delphi/lib/ds-note/src/\",\r\n      \"ds-test/=lib/delphi/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/fiat-i/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"fiat-i/=lib/fiat-i/src/\",\r\n      \"fiat/=lib/fiat-i/src/\",\r\n      \"forge-std/=lib/fiat-i/lib/forge-std/src/\",\r\n      \"guards/=lib/fiat-i/src/guards/\",\r\n      \"mockprovider/=lib/delphi/lib/mockprovider/src/\",\r\n      \"openzeppelin-contracts/=lib/fiat-i/lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin/=lib/fiat-i/lib/openzeppelin-contracts/\",\r\n      \"prb-math/=lib/fiat-i/lib/prb-math/\",\r\n      \"proxy/=lib/proxy/\",\r\n      \"token/=lib/token/contracts/\",\r\n      \"vaults/=lib/fiat-i/src/vaults/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 8000\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"oracleType\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC20\",\"name\":\"bondToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bondSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"disputeWindow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aggregatorFeed1_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorFeed2_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregatorFeed3_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Guarded__notGranted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Guarded__notRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"Math__mul_overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"Math__sub_overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__encodeNonce_activeDisputeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__encodeNonce_invalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__encodeNonce_staleProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__fetchLatestValue_invalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__push_inactiveRateId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Optimistic3PoolChainlinkOracle__validate_invalidData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"OptimisticOracle__activateRateId_activeRateId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"OptimisticOracle__bond_bondedProposer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"OptimisticOracle__bond_inactiveRateId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"OptimisticOracle__deactivateRateId_inactiveRateId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__dispute_inactiveRateId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__dispute_invalidDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__recover_notLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__recover_unbondedProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__settleDispute_alreadyDisputed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__settleDispute_unknownProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__shift_invalidPreviousProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__shift_unbondedProposer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__unbond_invalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__unbond_isProposing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OptimisticOracle__unbond_unbondedProposer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"AllowCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"BlockCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"rateIds\",\"type\":\"bytes32[]\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ClaimBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"validValue\",\"type\":\"uint256\"}],\"name\":\"Dispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Lock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"Propose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Push\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"token\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"}],\"name\":\"Validate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ANY_CALLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ANY_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"activateRateId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"activeRateIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregatorFeed1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregatorFeed2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aggregatorFeed3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"allowCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"allowProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"blockCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rateIds\",\"type\":\"bytes32[]\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"rateIds\",\"type\":\"bytes32[]\"}],\"name\":\"bond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sig\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"canCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"canDispute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"computeProposalId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"deactivateRateId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"decodeNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"noncePrefix\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"proposeTimestamp\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disputeWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"prevNonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"encodeNonce\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"isBonded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"rateIds\",\"type\":\"bytes32[]\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleType\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"}],\"name\":\"push\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"prevProposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"prevNonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"shift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"rateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"lastProposerForRateId\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"unbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"result\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"validData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Optimistic3PoolChainlinkOracle","CompilerVersion":"v0.8.13+commit.abaa5c0e","OptimizationUsed":"1","Runs":"8000","ConstructorArguments":"000000000000000000000000d503383ffabbec8eb85eaed448fe1ffec0a8148a1d65a117bd6bc48ee38899f85cba36a5603cce476e41e7f93c1fb1940ec1b35d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000003782dace9d900000000000000000000000000000000000000000000000000000000000000001c200000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f6000000000000000000000000aed0c38402a5d19df6e4c03f4e2dced6e29c1ee90000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]