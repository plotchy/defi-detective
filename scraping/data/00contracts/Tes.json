[{"SourceCode":"pragma solidity ^ 0.4 .2;\r\ncontract owned {\r\n\taddress public owner;\r\n\r\n\tfunction owned() public {\r\n\t\towner = msg.sender;\r\n\t}\r\n\r\n\tmodifier onlyOwner {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership(address newAdmin) onlyOwner public {\r\n\t\towner = newAdmin;\r\n\t}\r\n}\r\n\r\ncontract tokenRecipient {\r\n\tfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\r\n}\r\n\r\ncontract token {\r\n\t// Public variables of the token\r\n\tstring public name;\r\n\tstring public symbol;\r\n\tuint8 public decimals = 18;\r\n\tuint256 public totalSupply;\r\n\r\n\t// This creates an array with all balances\r\n\tmapping(address => uint256) public balanceOf;\r\n\tmapping(address => mapping(address => uint256)) public allowance;\r\n\r\n\t// This generates a public event on the blockchain that will notify clients\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\t// This notifies clients about the amount burnt\r\n\tevent Burn(address indexed from, uint256 value);\r\n\r\n\tfunction token(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tstring tokenSymbol\r\n\t) public {\r\n\t\ttotalSupply = initialSupply * 10 ** uint256(decimals); // Update total supply with the decimal amount\r\n\t\tbalanceOf[msg.sender] = totalSupply; // Give the creator all initial tokens\r\n\t\tname = tokenName; // Set the name for display purposes\r\n\t\tsymbol = tokenSymbol; // Set the symbol for display purposes\r\n\t}\r\n\r\n\t//Transfer tokens\r\n\tfunction transfer(address _to, uint256 _value) {\r\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\r\n\t\tTransfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n\t}\r\n\r\n\t//A contract attempts to get tokens\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n\t\tif (balanceOf[_from] < _value) throw; // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tif (_value > allowance[_from][msg.sender]) throw; // Check allowance\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//Set allowance for another address\r\n\tfunction approve(address _spender, uint256 _value) public\r\n\treturns(bool success) {\r\n\t\tallowance[msg.sender][_spender] = _value;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//Set allowance for another address and call a function\r\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool success) {\r\n\t\ttokenRecipient spender = tokenRecipient(_spender);\r\n\t\tif (approve(_spender, _value)) {\r\n\t\t\tspender.receiveApproval(msg.sender, _value, this, _extraData);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\r\n\t//Destroy tokens\r\n\tfunction burn(uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[msg.sender] >= _value); // Check if the sender has enough\r\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\n\t\ttotalSupply -= _value; // Updates totalSupply\r\n\t\tBurn(msg.sender, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//Destroy tokens from another account\r\n\tfunction burnFrom(address _from, uint256 _value) public returns(bool success) {\r\n\t\trequire(balanceOf[_from] >= _value); // Check if the targeted balance is enough\r\n\t\trequire(_value <= allowance[_from][msg.sender]); // Check allowance\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the targeted balance\r\n\t\tallowance[_from][msg.sender] -= _value; // Subtract from the sender's allowance\r\n\t\ttotalSupply -= _value; // Update totalSupply\r\n\t\tBurn(_from, _value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\ncontract Test is owned, token {\r\n\r\n\tuint256 public sellPrice;\r\n\tuint256 public buyPrice;\r\n\tbool public deprecated;\r\n\taddress public currentVersion;\r\n\tmapping(address => bool) public frozenAccount;\r\n\r\n\t/* This generates a public event on the blockchain that will notify clients */\r\n\tevent FrozenFunds(address target, bool frozen);\r\n\r\n\t/* Initializes contract with initial supply tokens to the creator of the contract */\r\n\tfunction Test(\r\n\t\tuint256 initialSupply,\r\n\t\tstring tokenName,\r\n\t\tuint8 decimalUnits,\r\n\t\tstring tokenSymbol\r\n\t) token(initialSupply, tokenName, tokenSymbol) {}\r\n\r\n\tfunction update(address newAddress, bool depr) onlyOwner {\r\n\t\tif (msg.sender != owner) throw;\r\n\t\tcurrentVersion = newAddress;\r\n\t\tdeprecated = depr;\r\n\t}\r\n\r\n\tfunction checkForUpdates() private {\r\n\t\tif (deprecated) {\r\n\t\t\tif (!currentVersion.delegatecall(msg.data)) throw;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction withdrawETH(uint256 amount) onlyOwner {\r\n\t\tmsg.sender.send(amount);\r\n\t}\r\n\r\n\tfunction airdrop(address[] recipients, uint256 value) public onlyOwner {\r\n\t\tfor (uint256 i = 0; i < recipients.length; i++) {\r\n\t\t\ttransfer(recipients[i], value);\r\n\t\t}\r\n\t}\r\n\r\n\t/* Send coins */\r\n\tfunction transfer(address _to, uint256 _value) {\r\n\t\tcheckForUpdates();\r\n\t\tif (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tif (frozenAccount[msg.sender]) throw; // Check if frozen\r\n\t\tbalanceOf[msg.sender] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\r\n\t\tTransfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\r\n\t}\r\n\r\n\r\n\t/* A contract attempts to get the coins */\r\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\r\n\t\tcheckForUpdates();\r\n\t\tif (frozenAccount[_from]) throw; // Check if frozen            \r\n\t\tif (balanceOf[_from] < _value) throw; // Check if the sender has enough\r\n\t\tif (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\r\n\t\tif (_value > allowance[_from][msg.sender]) throw; // Check allowance\r\n\t\tbalanceOf[_from] -= _value; // Subtract from the sender\r\n\t\tbalanceOf[_to] += _value; // Add the same to the recipient\r\n\t\tallowance[_from][msg.sender] -= _value;\r\n\t\tTransfer(_from, _to, _value);\r\n\t\treturn true;\r\n\t}\r\n\r\n    function merge(address target) onlyOwner {\r\n        checkForUpdates();\r\n        token old = token(address(0x7F2176cEB16dcb648dc924eff617c3dC2BEfd30d));\r\n        balanceOf[target] = old.balanceOf(target) / 10;\r\n    }\r\n\r\n\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner {\r\n\t\tcheckForUpdates();\r\n\t\tbalanceOf[target] += mintedAmount;\r\n\t\ttotalSupply += mintedAmount;\r\n\t\tTransfer(0, this, mintedAmount);\r\n\t\tTransfer(this, target, mintedAmount);\r\n\t}\r\n\r\n\tfunction freezeAccount(address target, bool freeze) onlyOwner {\r\n\t\tcheckForUpdates();\r\n\t\tfrozenAccount[target] = freeze;\r\n\t\tFrozenFunds(target, freeze);\r\n\t}\r\n\r\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\r\n\t\tcheckForUpdates();\r\n\t\tsellPrice = newSellPrice;\r\n\t\tbuyPrice = newBuyPrice;\r\n\t}\r\n\r\n\tfunction buy() payable {\r\n\t\tcheckForUpdates();\r\n\t\tif (buyPrice == 0) throw;\r\n\t\tuint amount = msg.value / buyPrice; // calculates the amount\r\n\t\tif (balanceOf[this] < amount) throw; // checks if it has enough to sell\r\n\t\tbalanceOf[msg.sender] += amount; // adds the amount to buyer's balance\r\n\t\tbalanceOf[this] -= amount; // subtracts amount from seller's balance\r\n\t\tTransfer(this, msg.sender, amount); // execute an event reflecting the change\r\n\t}\r\n\r\n\tfunction sell(uint256 amount) {\r\n\t\tcheckForUpdates();\r\n\t\tif (sellPrice == 0) throw;\r\n\t\tif (balanceOf[msg.sender] < amount) throw; // checks if the sender has enough to sell\r\n\t\tbalanceOf[this] += amount; // adds the amount to owner's balance\r\n\t\tbalanceOf[msg.sender] -= amount; // subtracts the amount from seller's balance\r\n\t\tif (!msg.sender.send(amount * sellPrice)) { // sends ether to the seller. It's important\r\n\t\t\tthrow; // to do this last to avoid recursion attacks\r\n\t\t} else {\r\n\t\t\tTransfer(msg.sender, this, amount); // executes an event reflecting on the change\r\n\t\t}\r\n\t}\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"newSellPrice\",\"type\":\"uint256\"},{\"name\":\"newBuyPrice\",\"type\":\"uint256\"}],\"name\":\"setPrices\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"}],\"name\":\"merge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"mintedAmount\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"currentVersion\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"frozenAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipients\",\"type\":\"address[]\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"freezeAccount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAddress\",\"type\":\"address\"},{\"name\":\"depr\",\"type\":\"bool\"}],\"name\":\"update\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"decimalUnits\",\"type\":\"uint8\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"FrozenFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"Test","CompilerVersion":"v0.4.20+commit.3155dd80","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000004546573740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045445535400000000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://c527e97da2de757369bc19f510f19ca1b383cec1871376bebb408e11ac376e8d"}]