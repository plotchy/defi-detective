[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n/*\r\nhttps://www.youtube.com/watch?v=cZYNADOHhVY\r\nhttps://twitter.com/VitalikButerin\r\nIt relates the misery inflicted by a dragon-tyrant (a personification of the ageing process and death), \r\nwho demands a tribute of thousands of people's lives per day and the actions of the people, including the king, who come together to fight back, eventually killing the dragon-tyrant.\r\n*/\r\n\r\npragma solidity ^0.8.9;\r\ncontract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ncontract ERC20Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"ERC20Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"ERC20Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\nlibrary SafeMath {\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance >= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n    function functionCall(address target, bytes memory data)\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance >= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\r\n            data\r\n        );\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            if (returndata.length > 0) {\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint256);\r\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\r\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint256);\r\n    function price1CumulativeLast() external view returns (uint256);\r\n    function kLast() external view returns (uint256);\r\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\r\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n    function initialize(address, address) external;\r\n}\r\n\r\ncontract TYRANT is Context, IERC20, ERC20Ownable {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    string private constant tokenName = \"Fable of the Dragon\";\r\n    string private constant tokenSymbol = \"TYRANT\";\r\n    uint8 private constant tokenDecimal = 18;\r\n    uint256 private constant tokenSupply = 1e12 * 10**tokenDecimal;\r\n\r\n    mapping(address => mapping(address => uint256)) private tokenAllowances;\r\n    mapping(address => uint256) private tokenBalance;\r\n    mapping(address => bool) private isContractsExcluded;\r\n    mapping(address => bool) private isMaxWalletExcluded;\r\n    mapping(address => bool) private isTaxExcluded;\r\n    mapping(address => bool) public isSniper;\r\n    mapping(address => bool) public isBot;\r\n\r\n    address payable liquidityAddress;\r\n    address payable marketingAddress;\r\n    address payable devAddress;\r\n    address dead = address(0xdead);\r\n    address public uniV2Pair;\r\n    IUniswapV2Router02 public uniV2Router;\r\n    address public uniV3Router;\r\n    \r\n    uint256 private maxWallet;\r\n    uint256 private minTaxSwap;\r\n    uint256 private marketingTokens;\r\n    uint256 private liquidityTokens;\r\n\tuint256 private totalBurnedTokens;\r\n\r\n    uint256 private marketingTax;\r\n    uint256 private liquidityTax;\r\n    uint256 private divForSplitTax;\r\n    uint256 private taxBuyMarketing;\r\n    uint256 private taxBuyLiquidity;\r\n    uint256 private taxSellMarketing;\r\n    uint256 private taxSellTreasury;\r\n    uint256 private taxSellLiquidity;\r\n\r\n    uint256 public activeTradingBlock;\r\n    uint256 public sniperPenaltyEnd;\r\n\r\n    bool public limitsOn = false;\r\n    bool public maxWalletOn = false;\r\n    bool public live = false;\r\n    bool public contractBlocker = false;\r\n    bool inSwapAndLiquify;\r\n    bool private swapAndLiquifyStatus = false;\r\n    modifier lockTheSwap() {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    constructor() payable {\r\n        tokenBalance[address(this)] = tokenSupply;\r\n        maxWallet = tokenSupply.mul(4).div(100);\r\n        minTaxSwap = tokenSupply.mul(5).div(10000);\r\n\r\n        marketingAddress = payable(0xd02b2269319e2c3C10cd35b42936bE5A5df75600);\r\n        devAddress = payable(0xd02b2269319e2c3C10cd35b42936bE5A5df75600);\r\n\r\n        liquidityAddress = payable(owner()); //LEAVE AS OWNER\r\n\r\n        taxBuyMarketing = 25;\r\n        taxBuyLiquidity = 0;\r\n        taxSellMarketing = 25;\r\n        taxSellLiquidity = 0;\r\n\r\n        isContractsExcluded[address(this)] = true;\r\n        isTaxExcluded[owner()] = true;\r\n        isTaxExcluded[dead] = true;\r\n        isTaxExcluded[address(this)] = true;\r\n        isTaxExcluded[marketingAddress] = true;\r\n        isTaxExcluded[liquidityAddress] = true;\r\n        isMaxWalletExcluded[address(this)] = true;\r\n        isMaxWalletExcluded[owner()] = true;\r\n        isMaxWalletExcluded[marketingAddress] = true;\r\n        isMaxWalletExcluded[liquidityAddress] = true;\r\n        isMaxWalletExcluded[dead] = true;\r\n        \r\n        emit Transfer(address(0), address(this), tokenSupply);\r\n    }\r\n    receive() external payable {}\r\n    function name() external pure override returns (string memory) {\r\n        return tokenName;\r\n    }\r\n    function symbol() external pure override returns (string memory) {\r\n        return tokenSymbol;\r\n    }\r\n    function decimals() external pure override returns (uint8) {\r\n        return tokenDecimal;\r\n    }\r\n    function totalSupply() external pure override returns (uint256) {\r\n        return tokenSupply;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenBalance[account];\r\n    }\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return tokenAllowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        require(_msgSender() != address(0), \"ERC20: Can not approve from zero address\");\r\n        require(spender != address(0), \"ERC20: Can not approve to zero address\");\r\n        tokenAllowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function internalApprove(address owner,address spender,uint256 amount) internal {\r\n        require(owner != address(0), \"ERC20: Can not approve from zero address\");\r\n        require(spender != address(0), \"ERC20: Can not approve to zero address\");\r\n        tokenAllowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        internalTransfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address sender,address recipient,uint256 amount) external override returns (bool) {\r\n        internalTransfer(sender, recipient, amount);\r\n        internalApprove(sender,_msgSender(),\r\n        tokenAllowances[sender][_msgSender()].sub(amount, \"ERC20: Can not transfer. Amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    function AirDrop(address[] memory wallets, uint256[] memory percent) external onlyOwner{\r\n        require(wallets.length < 100, \"Can only airdrop 100 wallets per txn due to gas limits\");\r\n        for(uint256 i = 0; i < wallets.length; i++){\r\n            address wallet = wallets[i];\r\n            uint256 amount = tokenSupply.mul(percent[i]).div(100);\r\n            internalTransfer(_msgSender(), wallet, amount);\r\n        }\r\n    }\r\n    function GoLive() external onlyOwner returns (bool){\r\n        require(!live, \"ERC20: Trades already Live!\");\r\n        activeTradingBlock = block.number;\r\n        sniperPenaltyEnd = block.timestamp.add(2 days);\r\n        IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniV2Router = _uniV2Router;\r\n        uniV3Router = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\r\n        isContractsExcluded[address(uniV2Router)] = true;\r\n        isContractsExcluded[address(uniV3Router)] = true;\r\n        isMaxWalletExcluded[address(uniV2Router)] = true;\r\n        internalApprove(address(this), address(uniV2Router), tokenSupply);\r\n        uniV2Pair = IUniswapV2Factory(_uniV2Router.factory()).createPair(address(this), _uniV2Router.WETH());\r\n        isContractsExcluded[address(uniV2Pair)] = true;\r\n        isMaxWalletExcluded[address(uniV2Pair)] = true;\r\n        require(address(this).balance > 0, \"ERC20: Must have ETH on contract to Go Live!\");\r\n        addLiquidity(balanceOf(address(this)), address(this).balance);\r\n        launchSetLiquidityAddress(dead);\r\n        maxWalletOn = true;\r\n        swapAndLiquifyStatus = true;\r\n        limitsOn = true;\r\n        live = true;\r\n        return true;\r\n    }\r\n    function internalTransfer(address from, address to, uint256 amount) internal {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero\");\r\n        require(!isBot[from], \"ERC20: Can not transfer from BOT\");\r\n        if(!live){\r\n            require(isTaxExcluded[from] || isTaxExcluded[to], \"ERC20: Trading Is Not Live!\");\r\n        }\r\n        if (maxWalletOn == true && ! isMaxWalletExcluded[to]) {\r\n            require(balanceOf(to).add(amount) <= maxWallet, \"ERC20: Max amount of tokens for wallet reached\");\r\n        }\r\n        if(limitsOn){\r\n            if (from != owner() && to != owner() && to != address(0) && to != dead && to != uniV2Pair) {\r\n                for (uint x = 0; x < 3; x++) {\r\n                    if(block.number == activeTradingBlock.add(x)) {\r\n                        isSniper[to] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(contractBlocker) {\r\n            require(\r\n                !isContract(to) && isContractsExcluded[from] ||\r\n                !isContract(from) && isContractsExcluded[to] || \r\n                isContract(from) && isContractsExcluded[to] || \r\n                isContract(to) && isContractsExcluded[from]\r\n                );\r\n        }\r\n        uint256 totalTokensToSwap = liquidityTokens.add(marketingTokens);\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minTaxSwap;\r\n        if (!inSwapAndLiquify && swapAndLiquifyStatus && balanceOf(uniV2Pair) > 0 && totalTokensToSwap > 0 && !isTaxExcluded[to] && !isTaxExcluded[from] && to == uniV2Pair && overMinimumTokenBalance) {\r\n            taxTokenSwap();\r\n            }\r\n        if (isTaxExcluded[from] || isTaxExcluded[to]) {\r\n            marketingTax = 0;\r\n            liquidityTax = 0;\r\n            divForSplitTax = marketingTax.add(liquidityTax);\r\n        } else {\r\n            if (from == uniV2Pair) {\r\n                marketingTax = taxBuyMarketing;\r\n                liquidityTax = taxBuyLiquidity;\r\n                divForSplitTax = taxBuyMarketing.add(taxBuyLiquidity);\r\n            }else if (to == uniV2Pair) {\r\n                marketingTax = taxSellMarketing;\r\n                liquidityTax = taxSellLiquidity;\r\n                divForSplitTax = taxSellMarketing.add(taxSellLiquidity);\r\n                if(isSniper[from] && sniperPenaltyEnd >= block.timestamp){\r\n                    marketingTax = 85;\r\n                    liquidityTax = 10;\r\n                    divForSplitTax = marketingTax.add(liquidityTax);\r\n                }\r\n            }else {\r\n                require(!isSniper[from] || sniperPenaltyEnd <= block.timestamp, \"ERC20: Snipers can not transfer till penalty time is over\");\r\n                marketingTax = 0;\r\n                liquidityTax = 0;\r\n            }\r\n        }\r\n        tokenTransfer(from, to, amount);\r\n    }\r\n    function taxTokenSwap() internal lockTheSwap {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = marketingTokens.add(liquidityTokens);\r\n        uint256 swapLiquidityTokens = liquidityTokens.div(2);\r\n        uint256 amountToSwapForETH = contractBalance.sub(swapLiquidityTokens);\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForETH(amountToSwapForETH); \r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n        uint256 ethForMarketing = ethBalance.mul(marketingTokens).div(totalTokensToSwap);\r\n        uint256 ethForLiquidity = ethBalance.sub(ethForMarketing);\r\n        marketingTokens = 0;\r\n        liquidityTokens = 0;\r\n        (bool success,) = address(marketingAddress).call{value: ethForMarketing}(\"\");\r\n        if(ethForLiquidity != 0 && swapLiquidityTokens != 0) {\r\n            addLiquidity(swapLiquidityTokens, ethForLiquidity);\r\n        }\r\n        if(address(this).balance > 5 * 1e17){\r\n            (success,) = address(devAddress).call{value: address(this).balance}(\"\");\r\n        }\r\n    }\r\n    function swapTokensForETH(uint256 tokenAmount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniV2Router.WETH();\r\n        internalApprove(address(this), address(uniV2Router), tokenAmount);\r\n        uniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\r\n        internalApprove(address(this), address(uniV2Router), tokenAmount);\r\n        uniV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            liquidityAddress,\r\n            block.timestamp\r\n        );\r\n    }\r\n    function calculateTax(uint256 amount) internal view returns (uint256) {\r\n        return amount.mul(marketingTax.add(liquidityTax)).div(100);\r\n    }\r\n    function splitTaxTokens(uint256 taxTokens) internal {\r\n        marketingTokens += taxTokens.mul(marketingTax).div(divForSplitTax);\r\n        liquidityTokens += taxTokens.mul(liquidityTax).div(divForSplitTax);\r\n    }\r\n    function tokenTransfer(address sender,address recipient,uint256 amount) internal {\r\n        if(divForSplitTax != 0){\r\n            uint256 taxTokens = calculateTax(amount);\r\n            uint256 transferTokens = amount.sub(taxTokens);\r\n            splitTaxTokens(taxTokens);\r\n            tokenBalance[sender] -= amount;\r\n            tokenBalance[recipient] += transferTokens;\r\n            tokenBalance[address(this)] += taxTokens;\r\n            emit Transfer(sender, recipient, transferTokens);\r\n        }else{\r\n            tokenBalance[sender] -= amount;\r\n            tokenBalance[recipient] += amount;\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n    function launchSetLiquidityAddress(address LPAddress) internal {\r\n        liquidityAddress = payable(LPAddress);\r\n        isTaxExcluded[liquidityAddress] = true;\r\n    }\r\n    function isContract(address account) public view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n    function addRemoveContract(address account, bool trueORfalse) external onlyOwner {\r\n        isContractsExcluded[account] = trueORfalse;\r\n    }\r\n    function isExcludedContract(address account) public view returns (bool) {\r\n        return isContractsExcluded[account];\r\n    }\r\n    function withdrawStuckETH() external onlyOwner {\r\n        bool success;\r\n        (success,) = address(owner()).call{value: address(this).balance}(\"\");\r\n    }\r\n    function withdrawStuckTokens(uint256 percent) external onlyOwner {\r\n        internalTransfer(address(this), owner(), tokenSupply*percent/100);\r\n    }\r\n    function manualBurnTokensFromLP(uint256 percent) external onlyOwner returns (bool){\r\n        require(percent <= 10, \"ERC20: May not nuke more than 10% of tokens in LP\");\r\n        uint256 liquidityPairBalance = this.balanceOf(uniV2Pair);\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10**2);\r\n        if (amountToBurn > 0){\r\n            internalTransfer(uniV2Pair, dead, amountToBurn);\r\n        }\r\n        totalBurnedTokens = balanceOf(dead);\r\n        require(totalBurnedTokens <= tokenSupply * 50 / 10**2, \"ERC20: Can not burn more then 50% of supply\");\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniV2Pair);\r\n        pair.sync();\r\n        return true;\r\n    }\r\n    function manualSwapTax() external onlyOwner {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        require(contractBalance >= tokenSupply.mul(5).div(10000), \"ERC20: Can only swap back if more than 0.05% of tokens stuck on contract\");\r\n        taxTokenSwap();\r\n    }\r\n    function addBot(address account) external onlyOwner {\r\n        require(!isBot[account], \"ERC20: Account already added\");\r\n        isBot[account] = true;\r\n    }\r\n\tfunction removeBot(address account) external onlyOwner {\r\n        require(isBot[account], \"ERC20: Account is not bot\");\r\n        isBot[account] = false;\r\n    }\r\n\tfunction removeSniper(address account) external onlyOwner {\r\n        require(isSniper[account], \"ERC20: Account is not sniper\");\r\n        isSniper[account] = false;\r\n    }\r\n    function setExcludedContractAccount(address account, bool trueORfalse) external onlyOwner {\r\n        isContractsExcluded[address(account)] = trueORfalse;\r\n    }\r\n    function setExcludedFromTax(address account, bool trueORfalse) external onlyOwner {\r\n        isTaxExcluded[address(account)] = trueORfalse;\r\n    }\r\n    function setExcludedFromMaxWallet(address account, bool trueORfalse) external onlyOwner {\r\n        isMaxWalletExcluded[address(account)] = trueORfalse;\r\n    }\r\n    function setMaxWalletAmount(uint256 percent, uint256 divider) external onlyOwner {\r\n        maxWallet = tokenSupply.mul(percent).div(divider);\r\n        require(maxWallet <=tokenSupply.mul(100).div(100), \"ERC20: Can not set max wallet more than 4%\");\r\n    }\r\n    function setStatusLimits(bool trueORfalse) external onlyOwner {\r\n        limitsOn = trueORfalse;\r\n    }\r\n    function setStatusMaxWallet(bool trueORfalse) external onlyOwner {\r\n       maxWalletOn = trueORfalse;\r\n    }\r\n    function setStatusContractBlocker(bool trueORfalse) external onlyOwner {\r\n        contractBlocker = trueORfalse;\r\n    }\r\n    function setSwapAndLiquifyStatus(bool trueORfalse) external onlyOwner {\r\n        swapAndLiquifyStatus = trueORfalse;\r\n    }\r\n    function setTaxes(uint256 buyMarketingTax, uint256 buyLiquidityTax, uint256 sellMarketingTax, uint256 sellLiquidityTax) external onlyOwner {\r\n        taxBuyMarketing = buyMarketingTax;\r\n        taxBuyLiquidity = buyLiquidityTax;\r\n        taxSellMarketing = sellMarketingTax;\r\n        taxSellLiquidity = sellLiquidityTax;\r\n    }\r\n    function viewTaxes() public view returns(uint256 marketingBuy, uint256 liquidityBuy, uint256 marketingSell, uint256 liquiditySell) {\r\n        return(taxBuyMarketing,taxBuyLiquidity,taxSellMarketing,taxSellLiquidity);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"percent\",\"type\":\"uint256[]\"}],\"name\":\"AirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GoLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeTradingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"addRemoveContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBlocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isSniper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"manualBurnTokensFromLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSniper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setExcludedContractAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setExcludedFromMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setExcludedFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divider\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setStatusContractBlocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setStatusLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setStatusMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"trueORfalse\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyLiquidityTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellMarketingTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellLiquidityTax\",\"type\":\"uint256\"}],\"name\":\"setTaxes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniperPenaltyEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniV3Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewTaxes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidityBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketingSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquiditySell\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"TYRANT","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://27335e36dde60a71e8a7f733680812d7088170c9f116b8a41b514882c4aeae87"}]