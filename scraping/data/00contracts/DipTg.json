[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/tokensale/DipTgeInterface.sol\r\n\r\ncontract DipTgeInterface {\r\n    function tokenIsLocked(address _contributor) public constant returns (bool);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/BasicToken.sol\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n\r\n    uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = _allowance.sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue)\r\n    returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue)\r\n    returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/MintableToken.sol\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(0x0, _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/PausableToken.sol\r\n\r\n/**\r\n * @title Pausable token\r\n *\r\n * @dev StandardToken modified with pausable transfers.\r\n **/\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\n// File: contracts/token/DipToken.sol\r\n\r\n/**\r\n * @title DIP Token\r\n * @dev The Decentralized Insurance Platform Token.\r\n * @author Christoph Mussenbrock\r\n * @copyright 2017 Etherisc GmbH\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract DipToken is PausableToken, MintableToken {\r\n\r\n  string public constant name = \"Decentralized Insurance Protocol\";\r\n  string public constant symbol = \"DIP\";\r\n  uint256 public constant decimals = 18;\r\n  uint256 public constant MAXIMUM_SUPPLY = 10**9 * 10**18; // 1 Billion 1'000'000'000\r\n\r\n  DipTgeInterface public DipTokensale;\r\n\r\n  constructor() public {\r\n    DipTokensale = DipTgeInterface(owner);\r\n  }\r\n\r\n  modifier shouldNotBeLockedIn(address _contributor) {\r\n    // after LockIntTime2, we don't need to check anymore, and\r\n    // the DipTokensale contract is no longer required.\r\n    require(DipTokensale.tokenIsLocked(_contributor) == false);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) public returns (bool) {\r\n    if (totalSupply.add(_amount) > MAXIMUM_SUPPLY) {\r\n      return false;\r\n    }\r\n\r\n    return super.mint(_to, _amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can transfer back tokens which have been sent to this contract by mistake.\r\n   * @param  _token address of token contract of the respective tokens\r\n   * @param  _to where to send the tokens\r\n   */\r\n  function salvageTokens(ERC20Basic _token, address _to) onlyOwner public {\r\n    _token.transfer(_to, _token.balanceOf(this));\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) shouldNotBeLockedIn(_from) public returns (bool) {\r\n      return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function transfer(address to, uint256 value) shouldNotBeLockedIn(msg.sender) public returns (bool) {\r\n      return super.transfer(to, value);\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\r\n\r\n/**\r\n * @title Crowdsale\r\n * @dev Crowdsale is a base contract for managing a token crowdsale.\r\n * Crowdsales have a start and end timestamps, where investors can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Crowdsale {\r\n  using SafeMath for uint256;\r\n\r\n  // The token being sold\r\n  MintableToken public token;\r\n\r\n  // start and end timestamps where investments are allowed (both inclusive)\r\n  uint256 public startTime;\r\n  uint256 public endTime;\r\n\r\n  // address where funds are collected\r\n  address public wallet;\r\n\r\n  // how many token units a buyer gets per wei\r\n  uint256 public rate;\r\n\r\n  // amount of raised money in wei\r\n  uint256 public weiRaised;\r\n\r\n  /**\r\n   * event for token purchase logging\r\n   * @param purchaser who paid for the tokens\r\n   * @param beneficiary who got the tokens\r\n   * @param value weis paid for purchase\r\n   * @param amount amount of tokens purchased\r\n   */\r\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n\r\n  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\r\n    require(_startTime >= now);\r\n    require(_endTime >= _startTime);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    token = createTokenContract();\r\n    startTime = _startTime;\r\n    endTime = _endTime;\r\n    rate = _rate;\r\n    wallet = _wallet;\r\n  }\r\n\r\n  // creates the token to be sold.\r\n  // override this method to have crowdsale of a specific mintable token.\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new MintableToken();\r\n  }\r\n\r\n\r\n  // fallback function can be used to buy tokens\r\n  function () payable {\r\n    buyTokens(msg.sender);\r\n  }\r\n\r\n  // low level token purchase function\r\n  function buyTokens(address beneficiary) public payable {\r\n    require(beneficiary != 0x0);\r\n    require(validPurchase());\r\n\r\n    uint256 weiAmount = msg.value;\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = weiAmount.mul(rate);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    token.mint(beneficiary, tokens);\r\n    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    forwardFunds();\r\n  }\r\n\r\n  // send ether to the fund collection wallet\r\n  // override to create custom fund forwarding mechanisms\r\n  function forwardFunds() internal {\r\n    wallet.transfer(msg.value);\r\n  }\r\n\r\n  // @return true if the transaction can buy tokens\r\n  function validPurchase() internal constant returns (bool) {\r\n    bool withinPeriod = now >= startTime && now <= endTime;\r\n    bool nonZeroPurchase = msg.value != 0;\r\n    return withinPeriod && nonZeroPurchase;\r\n  }\r\n\r\n  // @return true if crowdsale event has ended\r\n  function hasEnded() public constant returns (bool) {\r\n    return now > endTime;\r\n  }\r\n\r\n\r\n}\r\n\r\n// File: contracts/tokensale/DipWhitelistedCrowdsale.sol\r\n\r\n/**\r\n * @title DIP Token Generating Event\r\n * @dev The Decentralized Insurance Platform Token.\r\n * @author Christoph Mussenbrock\r\n * @copyright 2017 Etherisc GmbH\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract DipWhitelistedCrowdsale is Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  struct ContributorData {\r\n    uint256 allowance;\r\n    uint256 contributionAmount;\r\n    uint256 tokensIssued;\r\n    bool airdrop;\r\n    uint256 bonus;        // 0 == 0%, 4 == 25%, 10 == 10%\r\n    uint256 lockupPeriod; // 0, 1 or 2 (years)\r\n  }\r\n\r\n  mapping (address => ContributorData) public contributorList;\r\n\r\n  event Whitelisted(address indexed _contributor, uint256 _allowance, bool _airdrop, uint256 _bonus, uint256 _lockupPeriod);\r\n\r\n  /**\r\n   * Push contributor data to the contract before the crowdsale\r\n   */\r\n  function editContributors (\r\n    address[] _contributorAddresses,\r\n    uint256[] _contributorAllowance,\r\n    bool[] _airdrop,\r\n    uint256[] _bonus,\r\n    uint256[] _lockupPeriod\r\n  ) onlyOwner public {\r\n    // Check if input data is consistent\r\n    require(\r\n      _contributorAddresses.length == _contributorAllowance.length &&\r\n      _contributorAddresses.length == _airdrop.length &&\r\n      _contributorAddresses.length == _bonus.length &&\r\n      _contributorAddresses.length == _lockupPeriod.length\r\n    );\r\n\r\n    for (uint256 cnt = 0; cnt < _contributorAddresses.length; cnt = cnt.add(1)) {\r\n      require(_bonus[cnt] == 0 || _bonus[cnt] == 4 || _bonus[cnt] == 10);\r\n      require(_lockupPeriod[cnt] <= 2);\r\n\r\n      address contributor = _contributorAddresses[cnt];\r\n      contributorList[contributor].allowance = _contributorAllowance[cnt];\r\n      contributorList[contributor].airdrop = _airdrop[cnt];\r\n      contributorList[contributor].bonus = _bonus[cnt];\r\n      contributorList[contributor].lockupPeriod = _lockupPeriod[cnt];\r\n\r\n      emit Whitelisted(\r\n        _contributorAddresses[cnt],\r\n        _contributorAllowance[cnt],\r\n        _airdrop[cnt],\r\n        _bonus[cnt],\r\n        _lockupPeriod[cnt]\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\r\n\r\n/**\r\n * @title FinalizableCrowdsale\r\n * @dev Extension of Crowdsale where an owner can do extra work\r\n * after finishing.\r\n */\r\ncontract FinalizableCrowdsale is Crowdsale, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  bool public isFinalized = false;\r\n\r\n  event Finalized();\r\n\r\n  /**\r\n   * @dev Must be called after crowdsale ends, to do some extra finalization\r\n   * work. Calls the contract's finalization function.\r\n   */\r\n  function finalize() onlyOwner public {\r\n    require(!isFinalized);\r\n    require(hasEnded());\r\n\r\n    finalization();\r\n    Finalized();\r\n\r\n    isFinalized = true;\r\n  }\r\n\r\n  /**\r\n   * @dev Can be overridden to add finalization logic. The overriding function\r\n   * should call super.finalization() to ensure the chain of finalization is\r\n   * executed entirely.\r\n   */\r\n  function finalization() internal {\r\n  }\r\n}\r\n\r\n// File: contracts/tokensale/DipTge.sol\r\n\r\n/**\r\n * @title DIP Token Generating Event\r\n * @notice The Decentralized Insurance Platform Token.\r\n * @author Christoph Mussenbrock\r\n *\r\n * @copyright 2017 Etherisc GmbH\r\n */\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DipTge is DipWhitelistedCrowdsale, FinalizableCrowdsale {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  enum state { pendingStart, priorityPass, crowdsale, crowdsaleEnded }\r\n\r\n  uint256 public startOpenPpTime;\r\n  uint256 public hardCap;\r\n  uint256 public lockInTime1; // token lock-in period for team, ECA, US accredited investors\r\n  uint256 public lockInTime2; // token lock-in period for founders\r\n  state public crowdsaleState = state.pendingStart;\r\n\r\n  event DipTgeStarted(uint256 _time);\r\n  event CrowdsaleStarted(uint256 _time);\r\n  event HardCapReached(uint256 _time);\r\n  event DipTgeEnded(uint256 _time);\r\n  event TokenAllocated(address _beneficiary, uint256 _amount);\r\n\r\n  constructor(\r\n    uint256 _startTime,\r\n    uint256 _startOpenPpTime,\r\n    uint256 _endTime,\r\n    uint256 _lockInTime1,\r\n    uint256 _lockInTime2,\r\n    uint256 _hardCap,\r\n    uint256 _rate,\r\n    address _wallet\r\n  )\r\n    Crowdsale(_startTime, _endTime, _rate, _wallet)\r\n    public\r\n  {\r\n    // Check arguments\r\n    require(_startTime >= block.timestamp);\r\n    require(_startOpenPpTime >= _startTime);\r\n    require(_endTime >= _startOpenPpTime);\r\n    require(_lockInTime1 >= _endTime);\r\n    require(_lockInTime2 > _lockInTime1);\r\n    require(_hardCap > 0);\r\n    require(_rate > 0);\r\n    require(_wallet != 0x0);\r\n\r\n    // Set contract fields\r\n    startOpenPpTime = _startOpenPpTime;\r\n    hardCap = _hardCap;\r\n    lockInTime1 = _lockInTime1;\r\n    lockInTime2 = _lockInTime2;\r\n    DipToken(token).pause();\r\n  }\r\n\r\n  function setRate(uint256 _rate) onlyOwner public {\r\n    require(crowdsaleState == state.pendingStart);\r\n\r\n    rate = _rate;\r\n  }\r\n\r\n  function unpauseToken() onlyOwner external {\r\n    DipToken(token).unpause();\r\n  }\r\n\r\n  /**\r\n   * Calculate the maximum remaining contribution allowed for an address\r\n   * @param  _contributor the address of the contributor\r\n   * @return maxContribution maximum allowed amount in wei\r\n   */\r\n  function calculateMaxContribution(address _contributor) public constant returns (uint256 _maxContribution) {\r\n    uint256 maxContrib = 0;\r\n\r\n    if (crowdsaleState == state.priorityPass) {\r\n      maxContrib = contributorList[_contributor].allowance.sub(contributorList[_contributor].contributionAmount);\r\n\r\n      if (maxContrib > hardCap.sub(weiRaised)) {\r\n        maxContrib = hardCap.sub(weiRaised);\r\n      }\r\n    } else if (crowdsaleState == state.crowdsale) {\r\n      if (contributorList[_contributor].allowance > 0) {\r\n        maxContrib = hardCap.sub(weiRaised);\r\n      }\r\n    }\r\n\r\n    return maxContrib;\r\n  }\r\n\r\n  /**\r\n   * Calculate amount of tokens\r\n   * This is used twice:\r\n   * 1) For calculation of token amount plus optional bonus from wei amount contributed\r\n   * In this case, rate is the defined exchange rate of ETH against DIP.\r\n   * 2) For calculation of token amount plus optional bonus from DIP token amount\r\n   * In the second case, rate == 1 because we have already calculated DIP tokens from RSC amount\r\n   * by applying a factor of 10/32.\r\n   * @param _contributor the address of the contributor\r\n   * @param _amount contribution amount\r\n   * @return _tokens amount of tokens\r\n   */\r\n  function calculateTokens(address _contributor, uint256 _amount, uint256 _rate) public constant returns (uint256 _tokens) {\r\n    uint256 bonus = contributorList[_contributor].bonus;\r\n\r\n    assert(bonus == 0 || bonus == 4 || bonus == 10);\r\n\r\n    if (bonus > 0) {\r\n      _tokens = _amount.add(_amount.div(bonus)).mul(_rate);\r\n    } else {\r\n      _tokens = _amount.mul(_rate);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current state of the crowdsale.\r\n   */\r\n  function setCrowdsaleState() public {\r\n    if (weiRaised >= hardCap && crowdsaleState != state.crowdsaleEnded) {\r\n\r\n      crowdsaleState = state.crowdsaleEnded;\r\n      emit HardCapReached(block.timestamp);\r\n      emit DipTgeEnded(block.timestamp);\r\n\r\n    } else if (\r\n      block.timestamp >= startTime &&\r\n      block.timestamp < startOpenPpTime &&\r\n      crowdsaleState != state.priorityPass\r\n    ) {\r\n\r\n      crowdsaleState = state.priorityPass;\r\n      emit DipTgeStarted(block.timestamp);\r\n\r\n    } else if (\r\n      block.timestamp >= startOpenPpTime &&\r\n      block.timestamp <= endTime &&\r\n      crowdsaleState != state.crowdsale\r\n    ) {\r\n\r\n      crowdsaleState = state.crowdsale;\r\n      emit CrowdsaleStarted(block.timestamp);\r\n\r\n    } else if (\r\n      crowdsaleState != state.crowdsaleEnded &&\r\n      block.timestamp > endTime\r\n    ) {\r\n\r\n      crowdsaleState = state.crowdsaleEnded;\r\n      emit DipTgeEnded(block.timestamp);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The token buying function.\r\n   * @param  _beneficiary  receiver of tokens.\r\n   */\r\n  function buyTokens(address _beneficiary) public payable {\r\n    require(_beneficiary != 0x0);\r\n    require(validPurchase());\r\n    require(contributorList[_beneficiary].airdrop == false);\r\n\r\n    setCrowdsaleState();\r\n\r\n    uint256 weiAmount = msg.value;\r\n    uint256 maxContrib = calculateMaxContribution(_beneficiary);\r\n    uint256 refund;\r\n\r\n    if (weiAmount > maxContrib) {\r\n      refund = weiAmount.sub(maxContrib);\r\n      weiAmount = maxContrib;\r\n    }\r\n\r\n    // stop here if transaction does not yield tokens\r\n    require(weiAmount > 0);\r\n\r\n    // calculate token amount to be created\r\n    uint256 tokens = calculateTokens(_beneficiary, weiAmount, rate);\r\n\r\n    assert(tokens > 0);\r\n\r\n    // update state\r\n    weiRaised = weiRaised.add(weiAmount);\r\n\r\n    require(token.mint(_beneficiary, tokens));\r\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\r\n\r\n    contributorList[_beneficiary].contributionAmount = contributorList[_beneficiary].contributionAmount.add(weiAmount);\r\n    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(tokens);\r\n\r\n    wallet.transfer(weiAmount);\r\n\r\n    if (refund != 0) _beneficiary.transfer(refund);\r\n  }\r\n\r\n  /**\r\n   * Check if token is locked.\r\n   */\r\n  function tokenIsLocked(address _contributor) public constant returns (bool) {\r\n\r\n    if (block.timestamp < lockInTime1 && contributorList[_contributor].lockupPeriod == 1) {\r\n      return true;\r\n    } else if (block.timestamp < lockInTime2 && contributorList[_contributor].lockupPeriod == 2) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n\r\n  /**\r\n   * Distribute tokens to selected team members & founders.\r\n   * Unit of Allowance is ETH and is converted in number of tokens by multiplying with Rate.\r\n   * This can be called by any whitelisted beneficiary.\r\n   */\r\n  function airdrop() public {\r\n    airdropFor(msg.sender);\r\n  }\r\n\r\n\r\n  /**\r\n   * Alternatively to airdrop(); tokens can be directly sent to beneficiaries by this function\r\n   * This can be called only once.\r\n   */\r\n  function airdropFor(address _beneficiary) public {\r\n    require(_beneficiary != 0x0);\r\n    require(contributorList[_beneficiary].airdrop == true);\r\n    require(contributorList[_beneficiary].tokensIssued == 0);\r\n    require(contributorList[_beneficiary].allowance > 0);\r\n\r\n    setCrowdsaleState();\r\n\r\n    require(crowdsaleState == state.crowdsaleEnded);\r\n\r\n    uint256 amount = contributorList[_beneficiary].allowance.mul(rate);\r\n    require(token.mint(_beneficiary, amount));\r\n    emit TokenAllocated(_beneficiary, amount);\r\n\r\n    contributorList[_beneficiary].tokensIssued = contributorList[_beneficiary].tokensIssued.add(amount);\r\n  }\r\n\r\n  /**\r\n   * Creates an new ERC20 Token contract for the DIP Token.\r\n   * Overrides Crowdsale function\r\n   * @return the created token\r\n   */\r\n  function createTokenContract() internal returns (MintableToken) {\r\n    return new DipToken();\r\n  }\r\n\r\n  /**\r\n   * Finalize sale and perform cleanup actions.\r\n   */\r\n  function finalization() internal {\r\n    uint256 maxSupply = DipToken(token).MAXIMUM_SUPPLY();\r\n    token.mint(wallet, maxSupply.sub(token.totalSupply())); // Alternativly, hardcode remaining token distribution.\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  /**\r\n   * Owner can transfer back tokens which have been sent to this contract by mistake.\r\n   * @param  _token address of token contract of the respective tokens\r\n   * @param  _to where to send the tokens\r\n   */\r\n  function salvageTokens(ERC20Basic _token, address _to) onlyOwner external {\r\n    _token.transfer(_to, _token.balanceOf(this));\r\n  }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"calculateTokens\",\"outputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"tokenIsLocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"airdropFor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpauseToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"calculateMaxContribution\",\"outputs\":[{\"name\":\"_maxContribution\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributorList\",\"outputs\":[{\"name\":\"allowance\",\"type\":\"uint256\"},{\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"name\":\"tokensIssued\",\"type\":\"uint256\"},{\"name\":\"airdrop\",\"type\":\"bool\"},{\"name\":\"bonus\",\"type\":\"uint256\"},{\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockInTime2\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"setCrowdsaleState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributorAddresses\",\"type\":\"address[]\"},{\"name\":\"_contributorAllowance\",\"type\":\"uint256[]\"},{\"name\":\"_airdrop\",\"type\":\"bool[]\"},{\"name\":\"_bonus\",\"type\":\"uint256[]\"},{\"name\":\"_lockupPeriod\",\"type\":\"uint256[]\"}],\"name\":\"editContributors\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"salvageTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startOpenPpTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crowdsaleState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lockInTime1\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hardCap\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_startOpenPpTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_lockInTime1\",\"type\":\"uint256\"},{\"name\":\"_lockInTime2\",\"type\":\"uint256\"},{\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"name\":\"_rate\",\"type\":\"uint256\"},{\"name\":\"_wallet\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DipTgeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"CrowdsaleStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"HardCapReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"DipTgeEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"TokenAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_allowance\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_airdrop\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"_bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"DipTge","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005b310370000000000000000000000000000000000000000000000000000000005b379af0000000000000000000000000000000000000000000000000000000005b55ed70000000000000000000000000000000000000000000000000000000005d3720f0000000000000000000000000000000000000000000000000000000005f19a5f0000000000000000000000000000000000000000000000cb49b44ba602d80000000000000000000000000000000000000000000000000000000000000000013880000000000000000000000005c3095c53743b8857d6e1d107e5014cdc7b44efc","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://dcbfff5de4a3b0f5ca6944f78565e29b6302d9417dd58bc7746af97037c3c370"}]