[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n      \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IChiToken {\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function freeUpTo(uint256 value) external returns (uint256 freed);\r\n    \r\n    function freeFromUpTo(address from, uint256 value)\r\n        external\r\n        returns (uint256 freed);\r\n}\r\n\r\ninterface IVNFT {\r\n    function fatality(uint256 _deadId, uint256 _tokenId) external;\r\n    function buyAccesory(uint256 nftId, uint256 itemId) external;\r\n    function claimMiningRewards(uint256 nftId) external;\r\n    function addCareTaker(uint256 _tokenId, address _careTaker) external;\r\n    function careTaker(uint256 _tokenId, address _user)\r\n        external\r\n        view\r\n        returns (address _careTaker);\r\n    function ownerOf(uint256 _tokenId) external view returns (address _owner);\r\n    function itemPrice(uint256 itemId) external view returns (uint256 _amount);\r\n}\r\n\r\ncontract VNFTMulti {\r\n\r\n    IVNFT public vnft;\r\n    IERC20 public muse;\r\n    IChiToken public constant chi = IChiToken(\r\n        0x0000000000004946c0e9F43F4Dee607b0eF1fA1c\r\n    );\r\n    \r\n    address public owner;\r\n    bool public paused;\r\n    \r\n    constructor(IVNFT _vnft, IERC20 _muse) public {\r\n        vnft = _vnft;\r\n        muse = _muse;\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    modifier notPaused() {\r\n        require(!paused, \"PAUSED\");\r\n        _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier discountCHI(bool shouldBurn) {\r\n        uint256 gasStart = gasleft();\r\n        _;\r\n    \r\n        if(shouldBurn){\r\n              uint256 tokensToBurn = (21000 +\r\n                    (gasStart - gasleft()) +\r\n                    16 *\r\n                    msg.data.length +\r\n                    14154) / 41947;\r\n    \r\n             if (chi.balanceOf(address(this)) > 0)\r\n                    chi.freeUpTo(tokensToBurn);\r\n                    //if not, try to burn from the users own wallet\r\n              else chi.freeFromUpTo(msg.sender, tokensToBurn);\r\n        }\r\n    }\r\n\r\n    function claimMultiple(uint256[] calldata ids, bool shouldBurn) \r\n        external \r\n        notPaused \r\n        discountCHI(shouldBurn)\r\n    {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n              require(vnft.ownerOf(ids[i]) == msg.sender, \"Only owner of VNFT can claim\");\r\n              vnft.claimMiningRewards(ids[i]);\r\n        }\r\n        require(muse.transfer(msg.sender, muse.balanceOf(address(this))));\r\n    }\r\n    \r\n    function feedMultiple(uint museCost, uint256[] calldata ids, uint256[] calldata itemIds, bool shouldBurn)\r\n        external\r\n        notPaused\r\n        discountCHI(shouldBurn)\r\n    {\r\n        require(\r\n              muse.transferFrom(msg.sender, address(this), museCost),\r\n              \"Not enough muse to Feed\"\r\n        );\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n              vnft.buyAccesory(ids[i], itemIds[i]);\r\n        }\r\n    }\r\n\r\n    function claimAndFeed(uint256[] calldata ids, uint256[] calldata itemIds, bool shouldBurn) \r\n        external \r\n        notPaused \r\n        discountCHI(shouldBurn)\r\n    {\r\n        for (uint256 i = 0; i < ids.length; i++) {\r\n        require(vnft.ownerOf(ids[i]) == msg.sender, \"Only owner of VNFT can claim\");\r\n              vnft.claimMiningRewards(ids[i]);\r\n        }\r\n    for (uint256 i = 0; i < ids.length; i++) {\r\n              vnft.buyAccesory(ids[i], itemIds[i]);\r\n        }\r\n        require(muse.transfer(msg.sender, muse.balanceOf(address(this))));\r\n    }\r\n    \r\n    function setVNFT(IVNFT _vnft) public onlyOwner {\r\n        vnft = _vnft;\r\n    }\r\n    \r\n    function setMUSE(IERC20 _muse) public onlyOwner {\r\n        muse = _muse;\r\n    }\r\n    \r\n    function setPause(bool _paused) public onlyOwner {\r\n        paused = _paused;\r\n    }\r\n    \r\n    function approveContractMax() public onlyOwner {\r\n        require(muse.approve(address(vnft), uint(-1)), \"MUSE:approve\");\r\n    }\r\n    \r\n    function withdraw(IERC20 token) public onlyOwner{\r\n        require(token.transfer(msg.sender, token.balanceOf(address(this))));\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IVNFT\",\"name\":\"_vnft\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_muse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"approveContractMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IChiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldBurn\",\"type\":\"bool\"}],\"name\":\"claimAndFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldBurn\",\"type\":\"bool\"}],\"name\":\"claimMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"museCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"shouldBurn\",\"type\":\"bool\"}],\"name\":\"feedMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"muse\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_muse\",\"type\":\"address\"}],\"name\":\"setMUSE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVNFT\",\"name\":\"_vnft\",\"type\":\"address\"}],\"name\":\"setVNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vnft\",\"outputs\":[{\"internalType\":\"contract IVNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VNFTMulti","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000057f0b53926dd62f2e26bc40b30140abea474da94000000000000000000000000b6ca7399b4f9ca56fc27cbff44f4d2e4eef1fc81","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://e2e8778fa61c4b258f22d623859c86e9ee709f57c89a88747f1bae828e6d7005"}]