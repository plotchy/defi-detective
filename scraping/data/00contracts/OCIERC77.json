[{"SourceCode":"{\"BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah\\u0027s DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | \\u003e= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year \\u003e= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year \\u003e= 1970 \\u0026\\u0026 month \\u003e 0 \\u0026\\u0026 month \\u003c= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day \\u003e 0 \\u0026\\u0026 day \\u003c= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour \\u003c 24 \\u0026\\u0026 minute \\u003c 60 \\u0026\\u0026 second \\u003c 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) \\u0026\\u0026 (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) \\u003c= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) \\u003e= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        uint year;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        uint year;\\n        uint month;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day \\u003e daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day \\u003e daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp \\u003e= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day \\u003e daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day \\u003e daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp \\u003c= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp \\u003c= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\"},\"ConstantsHolder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ConstantsHolder.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title Contains constants and common variables for Skale Manager system\\n * @author Artem Payvin\\n */\\ncontract ConstantsHolder is Permissions {\\n\\n    // initial price for creating Node (100 SKL)\\n    uint public constant NODE_DEPOSIT = 100 * 1e18;\\n\\n    uint8 public constant TOTAL_SPACE_ON_NODE = 128;\\n\\n    // part of Node for Small Skale-chain (1/128 of Node)\\n    uint8 public constant SMALL_DIVISOR = 128;\\n\\n    // part of Node for Medium Skale-chain (1/8 of Node)\\n    uint8 public constant MEDIUM_DIVISOR = 8;\\n\\n    // part of Node for Large Skale-chain (full Node)\\n    uint8 public constant LARGE_DIVISOR = 1;\\n\\n    // part of Node for Medium Test Skale-chain (1/4 of Node)\\n    uint8 public constant MEDIUM_TEST_DIVISOR = 4;\\n\\n    // typically number of Nodes for Skale-chain (16 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\\n\\n    // number of Nodes for Test Skale-chain (2 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\\n\\n    // number of Nodes for Test Skale-chain (4 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;    \\n\\n    // number of seconds in one year\\n    uint32 public constant SECONDS_TO_YEAR = 31622400;\\n\\n    // initial number of monitors\\n    uint public constant NUMBER_OF_MONITORS = 24;\\n\\n    uint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\\n\\n    uint public constant ADJUSTMENT_SPEED = 1000;\\n\\n    uint public constant COOLDOWN_TIME = 60;\\n\\n    uint public constant MIN_PRICE = 10**6;\\n\\n    uint public constant MSR_REDUCING_COEFFICIENT = 2;\\n\\n    uint public constant DOWNTIME_THRESHOLD_PART = 30;\\n\\n    uint public constant BOUNTY_LOCKUP_MONTHS = 3;\\n\\n    // MSR - Minimum staking requirement\\n    uint public msr;\\n\\n    // Reward period - 30 days (each 30 days Node would be granted for bounty)\\n    uint32 public rewardPeriod;\\n\\n    // Allowable latency - 150000 ms by default\\n    uint32 public allowableLatency;\\n\\n    /**\\n     * Delta period - 1 hour (1 hour before Reward period became Monitors need\\n     * to send Verdicts and 1 hour after Reward period became Node need to come\\n     * and get Bounty)\\n     */\\n    uint32 public deltaPeriod;\\n\\n    /**\\n     * Check time - 2 minutes (every 2 minutes monitors should check metrics\\n     * from checked nodes)\\n     */\\n    uint public checkTime;\\n\\n    //Need to add minimal allowed parameters for verdicts\\n\\n    uint public launchTimestamp;\\n\\n    uint public rotationDelay;\\n\\n    uint public proofOfUseLockUpPeriodDays;\\n\\n    uint public proofOfUseDelegationPercentage;\\n\\n    /**\\n     * Set reward and delta periods to new one, run only by owner. This function\\n     * only for tests.\\n     * @param newRewardPeriod - new Reward period\\n     * @param newDeltaPeriod - new Delta period\\n     */\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external onlyOwner {\\n        require(\\n            newRewardPeriod \\u003e= newDeltaPeriod \\u0026\\u0026 newRewardPeriod - newDeltaPeriod \\u003e= checkTime,\\n            \\\"Incorrect Periods\\\"\\n        );\\n        rewardPeriod = newRewardPeriod;\\n        deltaPeriod = newDeltaPeriod;\\n    }\\n\\n    /**\\n     * Set new check time. This function only for tests.\\n     * @param newCheckTime - new check time\\n     */\\n    function setCheckTime(uint newCheckTime) external onlyOwner {\\n        require(rewardPeriod - deltaPeriod \\u003e= checkTime, \\\"Incorrect check time\\\");\\n        checkTime = newCheckTime;\\n    }    \\n\\n    /**\\n     * Set latency new one in ms, run only by owner. This function\\n     * only for tests.\\n     * @param newAllowableLatency - new Allowable Latency\\n     */\\n    function setLatency(uint32 newAllowableLatency) external onlyOwner {\\n        allowableLatency = newAllowableLatency;\\n    }\\n\\n    function setMSR(uint newMSR) external onlyOwner {\\n        msr = newMSR;\\n    }\\n\\n    function setLaunchTimestamp(uint timestamp) external onlyOwner {\\n        require(now \\u003c launchTimestamp, \\\"Can\\u0027t set network launch timestamp because network is already launched\\\");\\n        launchTimestamp = timestamp;\\n    }\\n\\n    function setRotationDelay(uint newDelay) external onlyOwner {\\n        rotationDelay = newDelay;\\n    }\\n\\n    function setProofOfUseLockUpPeriod(uint periodDays) external onlyOwner {\\n        proofOfUseLockUpPeriodDays = periodDays;\\n    }\\n\\n    function setProofOfUseDelegationPercentage(uint percentage) external onlyOwner {\\n        require(percentage \\u003c= 100, \\\"Percentage value is incorrect\\\");\\n        proofOfUseDelegationPercentage = percentage;\\n    }\\n\\n    /**\\n     * @dev constructor in Permissions approach\\n     * @param contractsAddress needed in Permissions constructor\\n     */\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        msr = 0;\\n        rewardPeriod = 86400;\\n        allowableLatency = 150000;\\n        deltaPeriod = 3600;\\n        checkTime = 300;\\n        launchTimestamp = uint(-1);\\n        rotationDelay = 12 hours;\\n        proofOfUseLockUpPeriodDays = 90;\\n        proofOfUseDelegationPercentage = 50;\\n    }\\n}\\n\"},\"ContractManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ContractManager.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OEPOwnable.sol\\\";\\nimport \\\"./OEPAddress.sol\\\";\\n\\nimport \\\"./StringUtils.sol\\\";\\n\\n\\n/**\\n * @title Main contract in upgradeable approach. This contract contains the actual\\n * current mapping from contract IDs (in the form of human-readable strings) to addresses.\\n * @author Artem Payvin\\n */\\ncontract ContractManager is OwnableUpgradeSafe {\\n    using StringUtils for string;\\n    using Address for address;\\n\\n    // mapping of actual smart contracts addresses\\n    mapping (bytes32 =\\u003e address) public contracts;\\n\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n    }\\n\\n    /**\\n     * Adds actual contract to mapping of actual contract addresses\\n     * @param contractsName - contracts name in skale manager system\\n     * @param newContractsAddress - contracts address in skale manager system\\n     */\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external onlyOwner {\\n        // check newContractsAddress is not equal to zero\\n        require(newContractsAddress != address(0), \\\"New address is equal zero\\\");\\n        // create hash of contractsName\\n        bytes32 contractId = keccak256(abi.encodePacked(contractsName));\\n        // check newContractsAddress is not equal the previous contract\\u0027s address\\n        require(contracts[contractId] != newContractsAddress, \\\"Contract is already added\\\");\\n        require(newContractsAddress.isContract(), \\\"Given contracts address does not contain code\\\");\\n        // add newContractsAddress to mapping of actual contract addresses\\n        contracts[contractId] = newContractsAddress;\\n        emit ContractUpgraded(contractsName, newContractsAddress);\\n    }\\n\\n    function getContract(string calldata name) external view returns (address contractAddress) {\\n        contractAddress = contracts[keccak256(abi.encodePacked(name))];\\n        require(contractAddress != address(0), name.strConcat(\\\" contract has not been found\\\"));\\n    }\\n}\\n\"},\"DelegationController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DelegationController.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./SkaleToken.sol\\\";\\nimport \\\"./Nodes.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\nimport \\\"./FractionUtils.sol\\\";\\n\\nimport \\\"./DelegationPeriodManager.sol\\\";\\nimport \\\"./Punisher.sol\\\";\\nimport \\\"./TokenLaunchLocker.sol\\\";\\nimport \\\"./TokenState.sol\\\";\\nimport \\\"./ValidatorService.sol\\\";\\nimport \\\"./PartialDifferences.sol\\\";\\n\\n/**\\n * @title Delegation Controller\\n * @dev This contract performs all delegation functions including delegation\\n * requests, undelegation, slashing, etc.\\n *\\n * Delegators and validators may both perform delegations. Validators who perform\\n * delegations to themselves are effectively self-delegating or self-bonding.\\n *\\n * Delegated tokens may be in one of several states:\\n *\\n * - PROPOSED: token holder proposes tokens to delegate to a validator\\n * - ACCEPTED: token delegations are accepted by a validator and are locked-by-delegation\\n * - CANCELED: token holder cancels delegation proposal. Only allowed before the proposal is accepted by the validator\\n * - REJECTED: token proposal expires at the UTC start of the next month\\n * - DELEGATED: accepted delegations are delegated at the UTC start of the month\\n * - UNDELEGATION_REQUESTED: token holder requests delegations to undelegate from the validator\\n * - COMPLETED: undelegation request is completed at the end of the delegation period\\n */\\ncontract DelegationController is Permissions, ILocker {\\n    using MathUtils for uint;\\n    using PartialDifferences for PartialDifferences.Sequence;\\n    using PartialDifferences for PartialDifferences.Value;\\n    using FractionUtils for FractionUtils.Fraction;\\n\\n    enum State {\\n        PROPOSED,\\n        ACCEPTED,\\n        CANCELED,\\n        REJECTED,\\n        DELEGATED,\\n        UNDELEGATION_REQUESTED,\\n        COMPLETED\\n    }\\n\\n    struct Delegation {\\n        address holder; // address of token owner\\n        uint validatorId;\\n        uint amount;\\n        uint delegationPeriod;\\n        uint created; // time of delegation creation\\n        uint started; // month when a delegation becomes active\\n        uint finished; // first month after a delegation ends\\n        string info;\\n    }\\n\\n    struct SlashingLogEvent {\\n        FractionUtils.Fraction reducingCoefficient;\\n        uint nextMonth;\\n    }\\n\\n    struct SlashingLog {\\n        //      month =\\u003e slashing event\\n        mapping (uint =\\u003e SlashingLogEvent) slashes;\\n        uint firstMonth;\\n        uint lastMonth;\\n    }\\n\\n    struct DelegationExtras {\\n        uint lastSlashingMonthBeforeDelegation;\\n    }\\n\\n    struct SlashingEvent {\\n        FractionUtils.Fraction reducingCoefficient;\\n        uint validatorId;\\n        uint month;\\n    }\\n\\n    struct SlashingSignal {\\n        address holder;\\n        uint penalty;\\n    }\\n\\n    struct LockedInPending {\\n        uint amount;\\n        uint month;\\n    }\\n\\n    struct FirstDelegationMonth {\\n        // month\\n        uint value;\\n        //validatorId =\\u003e month\\n        mapping (uint =\\u003e uint) byValidator;\\n    }\\n\\n    /**\\n     * @dev Emitted when a delegation is proposed to a validator.\\n     */\\n    event DelegationProposed(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is accepted by a validator.\\n     */\\n    event DelegationAccepted(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is cancelled by the delegator.\\n     */\\n    event DelegationRequestCanceledByUser(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is requested to undelegate.\\n     */\\n    event UndelegationRequested(\\n        uint delegationId\\n    );\\n\\n    /// @dev delegations will never be deleted to index in this array may be used like delegation id\\n    Delegation[] public delegations;\\n\\n    // validatorId =\\u003e delegationId[]\\n    mapping (uint =\\u003e uint[]) public delegationsByValidator;\\n\\n    //        holder =\\u003e delegationId[]\\n    mapping (address =\\u003e uint[]) public delegationsByHolder;\\n\\n    // delegationId =\\u003e extras\\n    mapping(uint =\\u003e DelegationExtras) private _delegationExtras;\\n\\n    // validatorId =\\u003e sequence\\n    mapping (uint =\\u003e PartialDifferences.Value) private _delegatedToValidator;\\n    // validatorId =\\u003e sequence\\n    mapping (uint =\\u003e PartialDifferences.Sequence) private _effectiveDelegatedToValidator;\\n\\n    // validatorId =\\u003e slashing log\\n    mapping (uint =\\u003e SlashingLog) private _slashesOfValidator;\\n\\n    //        holder =\\u003e sequence\\n    mapping (address =\\u003e PartialDifferences.Value) private _delegatedByHolder;\\n    //        holder =\\u003e   validatorId =\\u003e sequence\\n    mapping (address =\\u003e mapping (uint =\\u003e PartialDifferences.Value)) private _delegatedByHolderToValidator;\\n    //        holder =\\u003e   validatorId =\\u003e sequence\\n    mapping (address =\\u003e mapping (uint =\\u003e PartialDifferences.Sequence)) private _effectiveDelegatedByHolderToValidator;\\n\\n    SlashingEvent[] private _slashes;\\n    //        holder =\\u003e index in _slashes;\\n    mapping (address =\\u003e uint) private _firstUnprocessedSlashByHolder;\\n\\n    //        holder =\\u003e   validatorId =\\u003e month\\n    mapping (address =\\u003e FirstDelegationMonth) private _firstDelegationMonth;\\n\\n    //        holder =\\u003e locked in pending\\n    mapping (address =\\u003e LockedInPending) private _lockedInPendingDelegations;\\n\\n    /**\\n     * @dev Modifier to make a function callable only if delegation exists.\\n     */\\n    modifier checkDelegationExists(uint delegationId) {\\n        require(delegationId \\u003c delegations.length, \\\"Delegation does not exist\\\");\\n        _;\\n    }\\n\\n    function getAndUpdateDelegatedToValidatorNow(uint validatorId) external returns (uint) {\\n        return getAndUpdateDelegatedToValidator(validatorId, _getCurrentMonth());\\n    }\\n\\n    function getAndUpdateDelegatedAmount(address holder) external returns (uint) {\\n        return _getAndUpdateDelegatedByHolder(holder);\\n    }\\n\\n    function getAndUpdateEffectiveDelegatedByHolderToValidator(address holder, uint validatorId, uint month) external\\n        allow(\\\"Distributor\\\") returns (uint effectiveDelegated)\\n    {\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(holder);\\n        effectiveDelegated = _effectiveDelegatedByHolderToValidator[holder][validatorId]\\n            .getAndUpdateValueInSequence(month);\\n        _sendSlashingSignals(slashingSignals);\\n    }\\n\\n    /**\\n     * @dev Allows a token holder to create a delegation proposal of an `amount`\\n     * and `delegationPeriod` to a `validatorId`. Delegation must be accepted\\n     * by the validator before the UTC start of the month, otherwise the\\n     * delegation will be rejected.\\n     *\\n     * The token holder may add additional information in each proposal.\\n     *\\n     * @param validatorId uint ID of validator to receive delegation proposal\\n     * @param amount uint amount of proposed delegation\\n     * @param delegationPeriod uint period of proposed delegation\\n     * @param info string extra information provided by the token holder (if any)\\n     */\\n    function delegate(\\n        uint validatorId,\\n        uint amount,\\n        uint delegationPeriod,\\n        string calldata info\\n    )\\n        external\\n    {\\n\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        DelegationPeriodManager delegationPeriodManager = DelegationPeriodManager(\\n            contractManager.getContract(\\\"DelegationPeriodManager\\\"));\\n        SkaleToken skaleToken = SkaleToken(contractManager.getContract(\\\"SkaleToken\\\"));\\n        TokenState tokenState = TokenState(contractManager.getContract(\\\"TokenState\\\"));\\n\\n        require(\\n            validatorService.checkMinimumDelegation(validatorId, amount),\\n            \\\"Amount does not meet the validator\\u0027s minimum delegation amount\\\");\\n        require(\\n            validatorService.isAuthorizedValidator(validatorId),\\n            \\\"Validator is not authorized to accept delegation request\\\");\\n        require(\\n            delegationPeriodManager.isDelegationPeriodAllowed(delegationPeriod),\\n            \\\"This delegation period is not allowed\\\");\\n        require(\\n            validatorService.isAcceptingNewRequests(validatorId),\\n            \\\"The validator is not currently accepting new requests\\\");\\n\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(msg.sender);\\n\\n        uint delegationId = _addDelegation(\\n            msg.sender,\\n            validatorId,\\n            amount,\\n            delegationPeriod,\\n            info);\\n\\n        // check that there is enough money\\n        uint holderBalance = skaleToken.balanceOf(msg.sender);\\n        uint forbiddenForDelegation = tokenState.getAndUpdateForbiddenForDelegationAmount(msg.sender);\\n        require(holderBalance \\u003e= forbiddenForDelegation, \\\"Token holder does not have enough tokens to delegate\\\");\\n\\n        emit DelegationProposed(delegationId);\\n\\n        _sendSlashingSignals(slashingSignals);\\n    }\\n\\n    /**\\n     * @dev See ILocker.\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev See ILocker.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev Allows a token holder to cancel a delegation proposal.\\n     *\\n     * Requirements:\\n     *\\n     * - the sender must be the token holder of the delegation proposal.\\n     * - the delegation must still be in a PROPOSED state.\\n     *\\n     * Emits a DelegationRequestCanceledByUser event.\\n     *\\n     * @param delegationId uint ID of delegation proposal\\n     */\\n    function cancelPendingDelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        require(msg.sender == delegations[delegationId].holder, \\\"Only token holders can cancel delegation request\\\");\\n        require(getState(delegationId) == State.PROPOSED, \\\"Token holders are only able to cancel PROPOSED delegations\\\");\\n\\n        delegations[delegationId].finished = _getCurrentMonth();\\n        _subtractFromLockedInPendingDelegations(delegations[delegationId].holder, delegations[delegationId].amount);\\n\\n        emit DelegationRequestCanceledByUser(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows a validator to accept a proposed delegation.\\n     * Successful acceptance of delegations transition the tokens from a\\n     * PROPOSED state to ACCEPTED, and tokens are locked for the remainder of the\\n     * delegation period.\\n     *\\n     * Emits a DelegationAccepted event.\\n     *\\n     * @param delegationId uint ID of delegation proposal\\n     */\\n    function acceptPendingDelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        require(\\n            validatorService.checkValidatorAddressToId(msg.sender, delegations[delegationId].validatorId),\\n            \\\"No permissions to accept request\\\");\\n        \\n        State currentState = getState(delegationId);\\n        if (currentState != State.PROPOSED) {\\n            if (currentState == State.ACCEPTED ||\\n                currentState == State.DELEGATED ||\\n                currentState == State.UNDELEGATION_REQUESTED ||\\n                currentState == State.COMPLETED)\\n            {\\n                revert(\\\"The delegation has been already accepted\\\");\\n            } else if (currentState == State.CANCELED) {\\n                revert(\\\"The delegation has been cancelled by token holder\\\");\\n            } else if (currentState == State.REJECTED) {\\n                revert(\\\"The delegation request is outdated\\\");\\n            }\\n        }\\n        require(currentState == State.PROPOSED, \\\"Cannot set delegation state to accepted\\\");\\n        \\n        TokenLaunchLocker tokenLaunchLocker = TokenLaunchLocker(contractManager.getContract(\\\"TokenLaunchLocker\\\"));\\n\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(delegations[delegationId].holder);\\n\\n        _addToAllStatistics(delegationId);\\n\\n        tokenLaunchLocker.handleDelegationAdd(\\n            delegations[delegationId].holder,\\n            delegationId,\\n            delegations[delegationId].amount,\\n            delegations[delegationId].started);\\n\\n        _sendSlashingSignals(slashingSignals);\\n\\n        emit DelegationAccepted(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows a delegator to undelegate a specific delegation.\\n     *\\n     * Requirements:\\n     *\\n     * - the sender must be the delegator.\\n     * - the delegation must be in DELEGATED state.\\n     *\\n     * Emits an UndelegationRequested event.\\n     *\\n     * @param delegationId uint ID of delegation to undelegate\\n     */\\n    function requestUndelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        require(getState(delegationId) == State.DELEGATED, \\\"Cannot request undelegation\\\");\\n\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        require(\\n            delegations[delegationId].holder == msg.sender ||\\n            (validatorService.validatorAddressExists(msg.sender) \\u0026\\u0026\\n            delegations[delegationId].validatorId == validatorService.getValidatorId(msg.sender)),\\n            \\\"Permission denied to request undelegation\\\");\\n\\n        TokenLaunchLocker tokenLaunchLocker = TokenLaunchLocker(contractManager.getContract(\\\"TokenLaunchLocker\\\"));\\n        DelegationPeriodManager delegationPeriodManager = DelegationPeriodManager(\\n            contractManager.getContract(\\\"DelegationPeriodManager\\\"));\\n\\n        processAllSlashes(msg.sender);\\n        delegations[delegationId].finished = _calculateDelegationEndMonth(delegationId);\\n        uint amountAfterSlashing = _calculateDelegationAmountAfterSlashing(delegationId);\\n\\n        _removeFromDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        _removeFromDelegatedByHolder(\\n            delegations[delegationId].holder,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        _removeFromDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        uint effectiveAmount = amountAfterSlashing.mul(delegationPeriodManager.stakeMultipliers(\\n            delegations[delegationId].delegationPeriod));\\n        _removeFromEffectiveDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            delegations[delegationId].finished);\\n        _removeFromEffectiveDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            delegations[delegationId].finished);\\n\\n        tokenLaunchLocker.handleDelegationRemoving(\\n            delegations[delegationId].holder,\\n            delegationId,\\n            delegations[delegationId].finished);\\n\\n        emit UndelegationRequested(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows the Punisher to confiscate an `amount` of stake from\\n     * `validatorId` by slashing. This slashes all delegations of the validator,\\n     * which reduces the amount that the validator has staked. This consequence\\n     * may force the SKALE Manger to reduce the number of nodes a validator is\\n     * operating so the validator can meet the Minimum Staking Requirement.\\n     *\\n     * See Punisher.\\n     *\\n     * Emits a SlashingEvent.\\n     *\\n     * @param validatorId uint validator to slash\\n     * @param amount uint amount to slash\\n     *\\n     */\\n    function confiscate(uint validatorId, uint amount) external allow(\\\"Punisher\\\") {\\n        uint currentMonth = _getCurrentMonth();\\n        FractionUtils.Fraction memory coefficient =\\n            _delegatedToValidator[validatorId].reduceValue(amount, currentMonth);\\n        _effectiveDelegatedToValidator[validatorId].reduceSequence(coefficient, currentMonth);\\n        _putToSlashingLog(_slashesOfValidator[validatorId], coefficient, currentMonth);\\n        _slashes.push(SlashingEvent({reducingCoefficient: coefficient, validatorId: validatorId, month: currentMonth}));\\n    }\\n\\n    function getAndUpdateEffectiveDelegatedToValidator(uint validatorId, uint month)\\n        external allow(\\\"Distributor\\\") returns (uint)\\n    {\\n        return _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(month);\\n    }\\n\\n    function getAndUpdateDelegatedByHolderToValidatorNow(address holder, uint validatorId) external returns (uint) {\\n        return _getAndUpdateDelegatedByHolderToValidator(holder, validatorId, _getCurrentMonth());\\n    }\\n\\n    function getDelegation(uint delegationId)\\n        external view checkDelegationExists(delegationId) returns (Delegation memory)\\n    {\\n        return delegations[delegationId];\\n    }\\n\\n    function getFirstDelegationMonth(address holder, uint validatorId) external view returns(uint) {\\n        return _firstDelegationMonth[holder].byValidator[validatorId];\\n    }\\n\\n    function getDelegationsByValidatorLength(uint validatorId) external view returns (uint) {\\n        return delegationsByValidator[validatorId].length;\\n    }\\n\\n    function getDelegationsByHolderLength(address holder) external view returns (uint) {\\n        return delegationsByHolder[holder].length;\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n    }\\n\\n    function getAndUpdateDelegatedToValidator(uint validatorId, uint month)\\n        public allow(\\\"Nodes\\\") returns (uint)\\n    {\\n        return _delegatedToValidator[validatorId].getAndUpdateValue(month);\\n    }\\n\\n    function processSlashes(address holder, uint limit) public {\\n        _sendSlashingSignals(_processSlashesWithoutSignals(holder, limit));\\n    }\\n\\n    function processAllSlashes(address holder) public {\\n        processSlashes(holder, 0);\\n    }\\n\\n    /**\\n     * @dev Returns the token state of a given delegation.\\n     *\\n     * @param delegationId uint ID of the delegation\\n     */\\n    function getState(uint delegationId) public view checkDelegationExists(delegationId) returns (State state) {\\n        if (delegations[delegationId].started == 0) {\\n            if (delegations[delegationId].finished == 0) {\\n                TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n                if (_getCurrentMonth() == timeHelpers.timestampToMonth(delegations[delegationId].created)) {\\n                    return State.PROPOSED;\\n                } else {\\n                    return State.REJECTED;\\n                }\\n            } else {\\n                return State.CANCELED;\\n            }\\n        } else {\\n            if (_getCurrentMonth() \\u003c delegations[delegationId].started) {\\n                return State.ACCEPTED;\\n            } else {\\n                if (delegations[delegationId].finished == 0) {\\n                    return State.DELEGATED;\\n                } else {\\n                    if (_getCurrentMonth() \\u003c delegations[delegationId].finished) {\\n                        return State.UNDELEGATION_REQUESTED;\\n                    } else {\\n                        return State.COMPLETED;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function getLockedInPendingDelegations(address holder) public view returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        if (_lockedInPendingDelegations[holder].month \\u003c currentMonth) {\\n            return 0;\\n        } else {\\n            return _lockedInPendingDelegations[holder].amount;\\n        }\\n    }\\n\\n    function hasUnprocessedSlashes(address holder) public view returns (bool) {\\n        return _everDelegated(holder) \\u0026\\u0026 _firstUnprocessedSlashByHolder[holder] \\u003c _slashes.length;\\n    }\\n\\n    // private\\n\\n    function _addDelegation(\\n        address holder,\\n        uint validatorId,\\n        uint amount,\\n        uint delegationPeriod,\\n        string memory info\\n    )\\n        private\\n        returns (uint delegationId)\\n    {\\n        delegationId = delegations.length;\\n        delegations.push(Delegation(\\n            holder,\\n            validatorId,\\n            amount,\\n            delegationPeriod,\\n            now,\\n            0,\\n            0,\\n            info\\n        ));\\n        delegationsByValidator[validatorId].push(delegationId);\\n        delegationsByHolder[holder].push(delegationId);\\n        _addToLockedInPendingDelegations(delegations[delegationId].holder, delegations[delegationId].amount);\\n    }\\n\\n    function _calculateDelegationEndMonth(uint delegationId) private view returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        uint started = delegations[delegationId].started;\\n\\n        if (currentMonth \\u003c started) {\\n            return started.add(delegations[delegationId].delegationPeriod);\\n        } else {\\n            uint completedPeriods = currentMonth.sub(started).div(delegations[delegationId].delegationPeriod);\\n            return started.add(completedPeriods.add(1).mul(delegations[delegationId].delegationPeriod));\\n        }\\n    }\\n\\n    function _addToDelegatedToValidator(uint validatorId, uint amount, uint month) private {\\n        _delegatedToValidator[validatorId].addToValue(amount, month);\\n    }\\n\\n    function _addToEffectiveDelegatedToValidator(uint validatorId, uint effectiveAmount, uint month) private {\\n        _effectiveDelegatedToValidator[validatorId].addToSequence(effectiveAmount, month);\\n    }\\n\\n    function _addToDelegatedByHolder(address holder, uint amount, uint month) private {\\n        _delegatedByHolder[holder].addToValue(amount, month);\\n    }\\n\\n    function _addToDelegatedByHolderToValidator(\\n        address holder, uint validatorId, uint amount, uint month) private\\n    {\\n        _delegatedByHolderToValidator[holder][validatorId].addToValue(amount, month);\\n    }\\n\\n    function _removeFromDelegatedByHolder(address holder, uint amount, uint month) private {\\n        _delegatedByHolder[holder].subtractFromValue(amount, month);\\n    }\\n\\n    function _removeFromDelegatedByHolderToValidator(\\n        address holder, uint validatorId, uint amount, uint month) private\\n    {\\n        _delegatedByHolderToValidator[holder][validatorId].subtractFromValue(amount, month);\\n    }\\n\\n    function _addToEffectiveDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint effectiveAmount,\\n        uint month)\\n        private\\n    {\\n        _effectiveDelegatedByHolderToValidator[holder][validatorId].addToSequence(effectiveAmount, month);\\n    }\\n\\n    function _removeFromEffectiveDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint effectiveAmount,\\n        uint month)\\n        private\\n    {\\n        _effectiveDelegatedByHolderToValidator[holder][validatorId].subtractFromSequence(effectiveAmount, month);\\n    }\\n\\n    function _getAndUpdateDelegatedByHolder(address holder) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        processAllSlashes(holder);\\n        return _delegatedByHolder[holder].getAndUpdateValue(currentMonth);\\n    }\\n\\n    function _getAndUpdateDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint month)\\n        private returns (uint)\\n    {\\n        return _delegatedByHolderToValidator[holder][validatorId].getAndUpdateValue(month);\\n    }\\n\\n    function _addToLockedInPendingDelegations(address holder, uint amount) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        if (_lockedInPendingDelegations[holder].month \\u003c currentMonth) {\\n            _lockedInPendingDelegations[holder].amount = amount;\\n            _lockedInPendingDelegations[holder].month = currentMonth;\\n        } else {\\n            assert(_lockedInPendingDelegations[holder].month == currentMonth);\\n            _lockedInPendingDelegations[holder].amount = _lockedInPendingDelegations[holder].amount.add(amount);\\n        }\\n    }\\n\\n    function _subtractFromLockedInPendingDelegations(address holder, uint amount) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        require(\\n            _lockedInPendingDelegations[holder].month == currentMonth,\\n            \\\"There are no delegation requests this month\\\");\\n        require(_lockedInPendingDelegations[holder].amount \\u003e= amount, \\\"Unlocking amount is too big\\\");\\n        _lockedInPendingDelegations[holder].amount = _lockedInPendingDelegations[holder].amount.sub(amount);\\n    }\\n\\n    function _getCurrentMonth() private view returns (uint) {\\n        TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        return timeHelpers.getCurrentMonth();\\n    }\\n\\n    function _getAndUpdateLockedAmount(address wallet) private returns (uint) {\\n        return _getAndUpdateDelegatedByHolder(wallet).add(getLockedInPendingDelegations(wallet));\\n    }\\n\\n    function _updateFirstDelegationMonth(address holder, uint validatorId, uint month) private {\\n        if (_firstDelegationMonth[holder].value == 0) {\\n            _firstDelegationMonth[holder].value = month;\\n            _firstUnprocessedSlashByHolder[holder] = _slashes.length;\\n        }\\n        if (_firstDelegationMonth[holder].byValidator[validatorId] == 0) {\\n            _firstDelegationMonth[holder].byValidator[validatorId] = month;\\n        }\\n    }\\n\\n    function _everDelegated(address holder) private view returns (bool) {\\n        return _firstDelegationMonth[holder].value \\u003e 0;\\n    }\\n\\n    function _removeFromDelegatedToValidator(uint validatorId, uint amount, uint month) private {\\n        _delegatedToValidator[validatorId].subtractFromValue(amount, month);\\n    }\\n\\n    function _removeFromEffectiveDelegatedToValidator(uint validatorId, uint effectiveAmount, uint month) private {\\n        _effectiveDelegatedToValidator[validatorId].subtractFromSequence(effectiveAmount, month);\\n    }\\n\\n    function _calculateDelegationAmountAfterSlashing(uint delegationId) private view returns (uint) {\\n        uint startMonth = _delegationExtras[delegationId].lastSlashingMonthBeforeDelegation;\\n        uint validatorId = delegations[delegationId].validatorId;\\n        uint amount = delegations[delegationId].amount;\\n        if (startMonth == 0) {\\n            startMonth = _slashesOfValidator[validatorId].firstMonth;\\n            if (startMonth == 0) {\\n                return amount;\\n            }\\n        }\\n        for (uint i = startMonth;\\n            i \\u003e 0 \\u0026\\u0026 i \\u003c delegations[delegationId].finished;\\n            i = _slashesOfValidator[validatorId].slashes[i].nextMonth) {\\n            if (i \\u003e= delegations[delegationId].started) {\\n                amount = amount\\n                    .mul(_slashesOfValidator[validatorId].slashes[i].reducingCoefficient.numerator)\\n                    .div(_slashesOfValidator[validatorId].slashes[i].reducingCoefficient.denominator);\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    function _putToSlashingLog(\\n        SlashingLog storage log,\\n        FractionUtils.Fraction memory coefficient,\\n        uint month)\\n        private\\n    {\\n        if (log.firstMonth == 0) {\\n            log.firstMonth = month;\\n            log.lastMonth = month;\\n            log.slashes[month].reducingCoefficient = coefficient;\\n            log.slashes[month].nextMonth = 0;\\n        } else {\\n            require(log.lastMonth \\u003c= month, \\\"Cannot put slashing event in the past\\\");\\n            if (log.lastMonth == month) {\\n                log.slashes[month].reducingCoefficient =\\n                    log.slashes[month].reducingCoefficient.multiplyFraction(coefficient);\\n            } else {\\n                log.slashes[month].reducingCoefficient = coefficient;\\n                log.slashes[month].nextMonth = 0;\\n                log.slashes[log.lastMonth].nextMonth = month;\\n                log.lastMonth = month;\\n            }\\n        }\\n    }\\n\\n    function _processSlashesWithoutSignals(address holder, uint limit)\\n        private returns (SlashingSignal[] memory slashingSignals)\\n    {\\n        if (hasUnprocessedSlashes(holder)) {\\n            uint index = _firstUnprocessedSlashByHolder[holder];\\n            uint end = _slashes.length;\\n            if (limit \\u003e 0 \\u0026\\u0026 index.add(limit) \\u003c end) {\\n                end = index.add(limit);\\n            }\\n            slashingSignals = new SlashingSignal[](end.sub(index));\\n            uint begin = index;\\n            for (; index \\u003c end; ++index) {\\n                uint validatorId = _slashes[index].validatorId;\\n                uint month = _slashes[index].month;\\n                uint oldValue = _getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month);\\n                if (oldValue.muchGreater(0)) {\\n                    _delegatedByHolderToValidator[holder][validatorId].reduceValueByCoefficientAndUpdateSum(\\n                        _delegatedByHolder[holder],\\n                        _slashes[index].reducingCoefficient,\\n                        month);\\n                    _effectiveDelegatedByHolderToValidator[holder][validatorId].reduceSequence(\\n                        _slashes[index].reducingCoefficient,\\n                        month);\\n                    slashingSignals[index.sub(begin)].holder = holder;\\n                    slashingSignals[index.sub(begin)].penalty\\n                        = oldValue.boundedSub(_getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month));\\n                }\\n            }\\n            _firstUnprocessedSlashByHolder[holder] = end;\\n        }\\n    }\\n\\n    function _processAllSlashesWithoutSignals(address holder)\\n        private returns (SlashingSignal[] memory slashingSignals)\\n    {\\n        return _processSlashesWithoutSignals(holder, 0);\\n    }\\n\\n    function _sendSlashingSignals(SlashingSignal[] memory slashingSignals) private {\\n        Punisher punisher = Punisher(contractManager.getContract(\\\"Punisher\\\"));\\n        address previousHolder = address(0);\\n        uint accumulatedPenalty = 0;\\n        for (uint i = 0; i \\u003c slashingSignals.length; ++i) {\\n            if (slashingSignals[i].holder != previousHolder) {\\n                if (accumulatedPenalty \\u003e 0) {\\n                    punisher.handleSlash(previousHolder, accumulatedPenalty);\\n                }\\n                previousHolder = slashingSignals[i].holder;\\n                accumulatedPenalty = slashingSignals[i].penalty;\\n            } else {\\n                accumulatedPenalty = accumulatedPenalty.add(slashingSignals[i].penalty);\\n            }\\n        }\\n        if (accumulatedPenalty \\u003e 0) {\\n            punisher.handleSlash(previousHolder, accumulatedPenalty);\\n        }\\n    }\\n\\n    function _addToAllStatistics(uint delegationId) private {\\n        DelegationPeriodManager delegationPeriodManager = DelegationPeriodManager(\\n            contractManager.getContract(\\\"DelegationPeriodManager\\\"));\\n\\n        uint currentMonth = _getCurrentMonth();\\n        delegations[delegationId].started = currentMonth.add(1);\\n        if (_slashesOfValidator[delegations[delegationId].validatorId].lastMonth \\u003e 0) {\\n            _delegationExtras[delegationId].lastSlashingMonthBeforeDelegation =\\n                _slashesOfValidator[delegations[delegationId].validatorId].lastMonth;\\n        }\\n\\n        _addToDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _addToDelegatedByHolder(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _addToDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _updateFirstDelegationMonth(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            currentMonth.add(1));\\n        uint effectiveAmount = delegations[delegationId].amount.mul(delegationPeriodManager.stakeMultipliers(\\n            delegations[delegationId].delegationPeriod));\\n        _addToEffectiveDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            currentMonth.add(1));\\n        _addToEffectiveDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            currentMonth.add(1));\\n    }\\n}\\n\"},\"DelegationPeriodManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DelegationPeriodManager.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../Permissions.sol\\\";\\n\\n/**\\n * @title Delegation Period Manager\\n * @dev This contract handles all delegation offerings. Delegations are held for\\n * a specified period (months), and different durations can have different\\n * returns or `stakeMultiplier`. Currently, only delegation periods can be added.\\n */\\ncontract DelegationPeriodManager is Permissions {\\n\\n    /**\\n     * @dev Emitted when a new delegation period is specified.\\n     */\\n    event DelegationPeriodWasSet(\\n        uint length,\\n        uint stakeMultiplier\\n    );\\n\\n    mapping (uint =\\u003e uint) public stakeMultipliers;\\n\\n    /**\\n     * @dev Creates a new available delegation period and return in the network.\\n     * Only the owner may set new delegation period and returns in the network.\\n     *\\n     * Emits a DelegationPeriodWasSet event.\\n     *\\n     * @param monthsCount uint delegation duration in months\\n     * @param stakeMultiplier uint return for delegation\\n     */\\n    function setDelegationPeriod(uint monthsCount, uint stakeMultiplier) external onlyOwner {\\n        stakeMultipliers[monthsCount] = stakeMultiplier;\\n\\n        emit DelegationPeriodWasSet(monthsCount, stakeMultiplier);\\n    }\\n\\n    /**\\n     * @dev Checks whether given delegation period is allowed.\\n     *\\n     * @param monthsCount uint delegation duration in months\\n     * @return bool True if delegation period is allowed\\n     */\\n    function isDelegationPeriodAllowed(uint monthsCount) external view returns (bool) {\\n        return stakeMultipliers[monthsCount] != 0 ? true : false;\\n    }\\n\\n    /**\\n     * @dev Initial delegation period and multiplier settings.\\n     */\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n        stakeMultipliers[3] = 100;  // 3 months at 100\\n        stakeMultipliers[6] = 150;  // 6 months at 150\\n        stakeMultipliers[12] = 200; // 12 months at 200\\n    }\\n}\"},\"ERC777.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./OCContext.sol\\\";\\nimport \\\"./OCIERC777.sol\\\";\\nimport \\\"./OCIERC777Recipient.sol\\\";\\nimport \\\"./OCIERC777Sender.sol\\\";\\nimport \\\"./OCIERC20.sol\\\";\\nimport \\\"./OCSafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/Address.sol\\\"; Removed by SKALE\\nimport \\\"./OCIERC1820Registry.sol\\\";\\n\\n/* Added by SKALE */\\nimport \\\"./Permissions.sol\\\";\\n/* End of added by SKALE */\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777 is Context, IERC777, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    IERC1820Registry constant internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    // We inline the result of the following hashes because Solidity doesn\\u0027t resolve them at compile time.\\n    // See https://github.com/ethereum/solidity/issues/4024.\\n\\n    // keccak256(\\\"ERC777TokensSender\\\")\\n    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\\n\\n    // keccak256(\\\"ERC777TokensRecipient\\\")\\n    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\\n\\n    // This isn\\u0027t ever read from - it\\u0027s only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address =\\u003e bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operators;\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address[] memory defaultOperators\\n    ) public {\\n        _name = name;\\n        _symbol = symbol;\\n\\n        _defaultOperatorsArray = defaultOperators;\\n        for (uint256 i = 0; i \\u003c _defaultOperatorsArray.length; i++) {\\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public override  {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address from = _msgSender();\\n\\n        _callTokensToSend(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(from, from, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _callTokensReceived(from, from, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public override  {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(\\n        address operator,\\n        address tokenHolder\\n    ) public view override returns (bool) {\\n        return operator == tokenHolder ||\\n            (_defaultOperators[operator] \\u0026\\u0026 !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public override  {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public override  {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n    public override\\n    {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n   /**\\n    * @dev See {IERC20-transferFrom}.\\n    *\\n    * Note that operator and allowance concepts are orthogonal: operators cannot\\n    * call `transferFrom` (unless they have allowance), and accounts with\\n    * allowance cannot call `operatorSend` (unless they are operators).\\n    *\\n    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n    */\\n    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\\n        require(recipient != address(0), \\\"ERC777: transfer to the zero address\\\");\\n        require(holder != address(0), \\\"ERC777: transfer from the zero address\\\");\\n\\n        address spender = _msgSender();\\n\\n        _callTokensToSend(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n\\n        _move(spender, holder, recipient, amount, \\\"\\\", \\\"\\\");\\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \\\"ERC777: transfer amount exceeds allowance\\\"));\\n\\n        _callTokensReceived(spender, holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n    internal virtual\\n    {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        internal\\n    {\\n        require(from != address(0), \\\"ERC777: send from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: send to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    )\\n        internal virtual\\n    {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        /* Chaged by SKALE: we swapped these lines to prevent delegation of burning tokens */\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        /* End of changed by SKALE */\\n\\n        // Update state variables\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        private\\n    {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        _balances[from] = _balances[from].sub(amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        _balances[to] = _balances[to].add(amount);\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(address holder, address spender, uint256 value) internal {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    )\\n        /* Chaged by SKALE from private */ internal /* End of changed by SKALE */\\n        /* Added by SKALE */ virtual /* End of added by SKALE */\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    )\\n        /* Chaged by SKALE from private */ internal /* End of changed by SKALE */\\n        /* Added by SKALE */ virtual /* End of added by SKALE */\\n    {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - when `from` is zero, `tokenId` will be minted for `to`.\\n     * - when `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\"},\"FractionUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    FractionUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\n\\nlibrary FractionUtils {\\n    using SafeMath for uint;\\n\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n\\n    function createFraction(uint numerator, uint denominator) internal pure returns (Fraction memory) {\\n        require(denominator \\u003e 0, \\\"Division by zero\\\");\\n        Fraction memory fraction = Fraction({numerator: numerator, denominator: denominator});\\n        reduceFraction(fraction);\\n        return fraction;\\n    }\\n\\n    function createFraction(uint value) internal pure returns (Fraction memory) {\\n        return createFraction(value, 1);\\n    }\\n\\n    function reduceFraction(Fraction memory fraction) internal pure {\\n        uint _gcd = gcd(fraction.numerator, fraction.denominator);\\n        fraction.numerator = fraction.numerator.div(_gcd);\\n        fraction.denominator = fraction.denominator.div(_gcd);\\n    }\\n\\n    function multiplyFraction(Fraction memory a, Fraction memory b) internal pure returns (Fraction memory) {\\n        return createFraction(a.numerator.mul(b.numerator), a.denominator.mul(b.denominator));\\n    }\\n\\n    function gcd(uint a, uint b) internal pure returns (uint) {\\n        uint _a = a;\\n        uint _b = b;\\n        if (_b \\u003e _a) {\\n            (_a, _b) = swap(_a, _b);\\n        }\\n        while (_b \\u003e 0) {\\n            _a = _a.mod(_b);\\n            (_a, _b) = swap (_a, _b);\\n        }\\n        return _a;\\n    }\\n\\n    function swap(uint a, uint b) internal pure returns (uint, uint) {\\n        return (b, a);\\n    }\\n}\"},\"IDelegatableToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    IDelegatableToken.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Delegatable Token operations.\\n */\\ninterface IDelegatableToken {\\n    /**\\n     * @dev Updates and returns the amount of locked tokens of a given account (`wallet`).\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external returns (uint);\\n    /**\\n     * @dev Updates and returns the amount of delegated tokens of a given account (`wallet`).\\n     */\\n    function getAndUpdateDelegatedAmount(address wallet) external returns (uint);\\n    /**\\n     * @dev Updates and returns the amount of slashed tokens of a given account (`wallet`).\\n     */\\n    function getAndUpdateSlashedAmount(address wallet) external returns (uint);\\n}\"},\"ILocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ILocker.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of Locker functions of the {TokenState} contract.\\n *\\n * The SKALE Network has three types of locked tokens:\\n *\\n * - Tokens that are transferrable but are currently locked into delegation with\\n * a validator. See {DelegationController};\\n *\\n * - Tokens that are not transferable from one address to another, but may be\\n * delegated to a validator {getAndUpdateLockedAmount}. This lock enforces\\n * Proof-of-Use requirements. See {TokenLaunchLocker}; and,\\n *\\n * - Tokens that are neither transferable nor delegatable\\n * {getAndUpdateForbiddenForDelegationAmount}. This lock enforces slashing.\\n * See {Punisher}.\\n */\\ninterface ILocker {\\n    /**\\n     * @dev Returns the locked amount of untransferable tokens of a given `wallet`\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external returns (uint);\\n\\n    /**\\n     * @dev Returns the locked amount of untransferable and un-delegatable tokens of a given `wallet`.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external returns (uint);\\n}\\n\"},\"MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    StringUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n\\nlibrary MathUtils {\\n    event UnderflowError(\\n        uint a,\\n        uint b\\n    );\\n\\n    uint constant private _EPS = 1e6;\\n\\n    function boundedSub(uint256 a, uint256 b) internal returns (uint256) {\\n        if (a \\u003e= b) {\\n            return a - b;\\n        } else {\\n            emit UnderflowError(a, b);\\n            return 0;\\n        }\\n    }\\n\\n    function boundedSubWithoutEvent(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a \\u003e= b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function muchGreater(uint256 a, uint256 b) internal pure returns (bool) {\\n        assert(uint(-1) - _EPS \\u003e b);\\n        return a \\u003e b + _EPS;\\n    }\\n\\n    function approximatelyEqual(uint256 a, uint256 b) internal pure returns (bool) {\\n        if (a \\u003e b) {\\n            return a - b \\u003c _EPS;\\n        } else {\\n            return b - a \\u003c _EPS;\\n        }\\n    }\\n}\"},\"Nodes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Nodes.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./OCSafeCast.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./ValidatorService.sol\\\";\\nimport \\\"./DelegationController.sol\\\";\\n\\n\\n/**\\n * @title Nodes - contract contains all functionality logic to manage Nodes\\n */\\ncontract Nodes is Permissions {\\n    \\n    using SafeCast for uint;\\n\\n    // All Nodes states\\n    enum NodeStatus {Active, Leaving, Left}\\n\\n    struct Node {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIP;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint startBlock;\\n        uint lastRewardDate;\\n        uint finishTime;\\n        NodeStatus status;\\n        uint validatorId;\\n    }\\n\\n    // struct to note which Nodes and which number of Nodes owned by user\\n    struct CreatedNodes {\\n        mapping (uint =\\u003e bool) isNodeExist;\\n        uint numberOfNodes;\\n    }\\n\\n    struct SpaceManaging {\\n        uint8 freeSpace;\\n        uint indexInSpaceMap;\\n    }\\n\\n    // TODO: move outside the contract\\n    struct NodeCreationParams {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIp;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint16 nonce;\\n    }\\n\\n    // array which contain all Nodes\\n    Node[] public nodes;\\n\\n    SpaceManaging[] public spaceOfNodes;\\n\\n    // mapping for checking which Nodes and which number of Nodes owned by user\\n    mapping (address =\\u003e CreatedNodes) public nodeIndexes;\\n    // mapping for checking is IP address busy\\n    mapping (bytes4 =\\u003e bool) public nodesIPCheck;\\n    // mapping for checking is Name busy\\n    mapping (bytes32 =\\u003e bool) public nodesNameCheck;\\n    // mapping for indication from Name to Index\\n    mapping (bytes32 =\\u003e uint) public nodesNameToIndex;\\n    // mapping for indication from space to Nodes\\n    mapping (uint8 =\\u003e uint[]) public spaceToNodes;\\n\\n    mapping (uint =\\u003e uint[]) public validatorToNodeIndexes;\\n\\n    uint public numberOfActiveNodes;\\n    uint public numberOfLeavingNodes;\\n    uint public numberOfLeftNodes;\\n\\n    // informs that Node is created\\n    event NodeCreated(\\n        uint nodeIndex,\\n        address owner,\\n        string name,\\n        bytes4 ip,\\n        bytes4 publicIP,\\n        uint16 port,\\n        uint16 nonce,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    // informs that node is fully finished quitting from the system\\n    event ExitCompleted(\\n        uint nodeIndex,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    // informs that owner starts the procedure of quitting the Node from the system\\n    event ExitInited(\\n        uint nodeIndex,\\n        uint startLeavingPeriod,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    /**\\n     * @dev removeSpaceFromFractionalNode - occupies space from Fractional Node\\n     * function could be run only by Schains\\n     * @param nodeIndex - index of Node at array of Fractional Nodes\\n     * @param space - space which should be occupied\\n     */\\n    function removeSpaceFromNode(uint nodeIndex, uint8 space)\\n        external\\n        allowTwo(\\\"NodeRotation\\\", \\\"SchainsInternal\\\")\\n        returns (bool)\\n    {\\n        if (spaceOfNodes[nodeIndex].freeSpace \\u003c space) {\\n            return false;\\n        }\\n        if (space \\u003e 0) {\\n            _moveNodeToNewSpaceMap(\\n                nodeIndex,\\n                uint(spaceOfNodes[nodeIndex].freeSpace).sub(space).toUint8()\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev adSpaceToFractionalNode - returns space to Fractional Node\\n     * function could be run only be Schains\\n     * @param nodeIndex - index of Node at array of Fractional Nodes\\n     * @param space - space which should be returned\\n     */\\n    function addSpaceToNode(uint nodeIndex, uint8 space) external allow(\\\"Schains\\\") {\\n        if (space \\u003e 0) {\\n            _moveNodeToNewSpaceMap(\\n                nodeIndex,\\n                uint(spaceOfNodes[nodeIndex].freeSpace).add(space).toUint8()\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev changeNodeLastRewardDate - changes Node\\u0027s last reward date\\n     * function could be run only by SkaleManager\\n     * @param nodeIndex - index of Node\\n     */\\n    function changeNodeLastRewardDate(uint nodeIndex) external allow(\\\"SkaleManager\\\") {\\n        nodes[nodeIndex].lastRewardDate = block.timestamp;\\n    }\\n\\n    function changeNodeFinishTime(uint nodeIndex, uint time) external allow(\\\"SkaleManager\\\") {\\n        nodes[nodeIndex].finishTime = time;\\n    }\\n\\n    /**\\n     * @dev createNode - creates new Node and add it to the Nodes contract\\n     * function could be only run by SkaleManager\\n     * @param from - owner of Node\\n     * @return nodeIndex - index of Node\\n     */\\n    function createNode(address from, NodeCreationParams calldata params)\\n        external\\n        allow(\\\"SkaleManager\\\")\\n        returns (uint nodeIndex)\\n    {\\n        // checks that Node has correct data\\n        require(params.ip != 0x0 \\u0026\\u0026 !nodesIPCheck[params.ip], \\\"IP address is zero or is not available\\\");\\n        require(!nodesNameCheck[keccak256(abi.encodePacked(params.name))], \\\"Name has already registered\\\");\\n        require(params.port \\u003e 0, \\\"Port is zero\\\");\\n\\n        uint validatorId = ValidatorService(\\n            contractManager.getContract(\\\"ValidatorService\\\")).getValidatorIdByNodeAddress(from);\\n\\n        // adds Node to Nodes contract\\n        nodeIndex = _addNode(\\n            from,\\n            params.name,\\n            params.ip,\\n            params.publicIp,\\n            params.port,\\n            params.publicKey,\\n            validatorId);\\n\\n        emit NodeCreated(\\n            nodeIndex,\\n            from,\\n            params.name,\\n            params.ip,\\n            params.publicIp,\\n            params.port,\\n            params.nonce,\\n            block.timestamp,\\n            gasleft());\\n    }\\n\\n    /**\\n     * @dev initExit - initiate a procedure of quitting the system\\n     * function could be only run by SkaleManager\\n     * @param nodeIndex - index of Node\\n     * @return true - if everything OK\\n     */\\n    function initExit(uint nodeIndex) external allow(\\\"SkaleManager\\\") returns (bool) {\\n\\n        _setNodeLeaving(nodeIndex);\\n\\n        emit ExitInited(\\n            nodeIndex,\\n            block.timestamp,\\n            block.timestamp,\\n            gasleft());\\n        return true;\\n    }\\n\\n    /**\\n     * @dev completeExit - finish a procedure of quitting the system\\n     * function could be run only by SkaleManager\\n     * @param nodeIndex - index of Node\\n     * @return amount of SKL which be returned\\n     */\\n    function completeExit(uint nodeIndex) external allow(\\\"SkaleManager\\\") returns (bool) {\\n        require(isNodeLeaving(nodeIndex), \\\"Node is not Leaving\\\");\\n\\n        _setNodeLeft(nodeIndex);\\n        _deleteNode(nodeIndex);\\n\\n        emit ExitCompleted(\\n            nodeIndex,\\n            block.timestamp,\\n            gasleft());\\n        return true;\\n    }\\n\\n    function deleteNodeForValidator(uint validatorId, uint nodeIndex) external allow(\\\"SkaleManager\\\") {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        require(validatorService.validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        uint[] memory validatorNodes = validatorToNodeIndexes[validatorId];\\n        uint position = _findNode(validatorNodes, nodeIndex);\\n        if (position \\u003c validatorNodes.length) {\\n            validatorToNodeIndexes[validatorId][position] =\\n                validatorToNodeIndexes[validatorId][validatorNodes.length.sub(1)];\\n        }\\n        validatorToNodeIndexes[validatorId].pop();\\n    }\\n\\n    function checkPossibilityCreatingNode(address nodeAddress) external allow(\\\"SkaleManager\\\") {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        uint validatorId = validatorService.getValidatorIdByNodeAddress(nodeAddress);\\n        require(validatorService.isAuthorizedValidator(validatorId), \\\"Validator is not authorized to create a node\\\");\\n        uint[] memory validatorNodes = validatorToNodeIndexes[validatorId];\\n        uint delegationsTotal = delegationController.getAndUpdateDelegatedToValidatorNow(validatorId);\\n        uint msr = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\")).msr();\\n        require(\\n            validatorNodes.length.add(1).mul(msr) \\u003c= delegationsTotal,\\n            \\\"Validator must meet the Minimum Staking Requirement\\\");\\n    }\\n\\n    function checkPossibilityToMaintainNode(\\n        uint validatorId,\\n        uint nodeIndex\\n    )\\n        external\\n        allow(\\\"Bounty\\\")\\n        returns (bool)\\n    {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        require(validatorService.validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        uint[] memory validatorNodes = validatorToNodeIndexes[validatorId];\\n        uint position = _findNode(validatorNodes, nodeIndex);\\n        require(position \\u003c validatorNodes.length, \\\"Node does not exist for this Validator\\\");\\n        uint delegationsTotal = delegationController.getAndUpdateDelegatedToValidatorNow(validatorId);\\n        uint msr = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\")).msr();\\n        return position.add(1).mul(msr) \\u003c= delegationsTotal;\\n    }\\n\\n    function getNodesWithFreeSpace(uint8 freeSpace) external view returns (uint[] memory) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        uint[] memory nodesWithFreeSpace = new uint[](countNodesWithFreeSpace(freeSpace));\\n        uint cursor = 0;\\n        for (uint8 i = freeSpace; i \\u003c= constantsHolder.TOTAL_SPACE_ON_NODE(); ++i) {\\n            for (uint j = 0; j \\u003c spaceToNodes[i].length; j++) {\\n                nodesWithFreeSpace[cursor] = spaceToNodes[i][j];\\n                ++cursor;\\n            }\\n        }\\n        return nodesWithFreeSpace;\\n    }\\n\\n    /**\\n     * @dev isTimeForReward - checks if time for reward has come\\n     * @param nodeIndex - index of Node\\n     * @return if time for reward has come - true, else - false\\n     */\\n    function isTimeForReward(uint nodeIndex) external view returns (bool) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        return uint(nodes[nodeIndex].lastRewardDate).add(constantsHolder.rewardPeriod()) \\u003c= block.timestamp;\\n    }\\n\\n    /**\\n     * @dev isNodeExist - checks existence of Node at this address\\n     * @param from - account address\\n     * @param nodeIndex - index of Node\\n     * @return if exist - true, else - false\\n     */\\n    function isNodeExist(address from, uint nodeIndex) external view returns (bool) {\\n        return nodeIndexes[from].isNodeExist[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev getNodeIP - get ip address of Node\\n     * @param nodeIndex - index of Node\\n     * @return ip address\\n     */\\n    function getNodeIP(uint nodeIndex) external view returns (bytes4) {\\n        require(nodeIndex \\u003c nodes.length, \\\"Node does not exist\\\");\\n        return nodes[nodeIndex].ip;\\n    }\\n\\n    /**\\n     * @dev getNodePort - get Node\\u0027s port\\n     * @param nodeIndex - index of Node\\n     * @return port\\n     */\\n    function getNodePort(uint nodeIndex) external view returns (uint16) {\\n        return nodes[nodeIndex].port;\\n    }\\n\\n    function getNodePublicKey(uint nodeIndex) external view returns (bytes32[2] memory) {\\n        return nodes[nodeIndex].publicKey;\\n    }\\n\\n    function getNodeFinishTime(uint nodeIndex) external view returns (uint) {\\n        return nodes[nodeIndex].finishTime;\\n    }\\n\\n    /**\\n     * @dev isNodeLeft - checks if Node status Left\\n     * @param nodeIndex - index of Node\\n     * @return if Node status Left - true, else - false\\n     */\\n    function isNodeLeft(uint nodeIndex) external view returns (bool) {\\n        return nodes[nodeIndex].status == NodeStatus.Left;\\n    }\\n\\n    /**\\n     * @dev getNodeLastRewardDate - get Node last reward date\\n     * @param nodeIndex - index of Node\\n     * @return Node last reward date\\n     */\\n    function getNodeLastRewardDate(uint nodeIndex) external view returns (uint) {\\n        return nodes[nodeIndex].lastRewardDate;\\n    }\\n\\n    /**\\n     * @dev getNodeNextRewardDate - get Node next reward date\\n     * @param nodeIndex - index of Node\\n     * @return Node next reward date\\n     */\\n    function getNodeNextRewardDate(uint nodeIndex) external view returns (uint) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        return nodes[nodeIndex].lastRewardDate.add(constantsHolder.rewardPeriod());\\n    }\\n\\n    /**\\n     * @dev getNumberOfNodes - get number of Nodes\\n     * @return number of Nodes\\n     */\\n    function getNumberOfNodes() external view returns (uint) {\\n        return nodes.length;\\n    }\\n\\n    /**\\n     * @dev getNumberOfFullNodes - get number Online Nodes\\n     * @return number of active nodes plus number of leaving nodes\\n     */\\n    function getNumberOnlineNodes() external view returns (uint) {\\n        return numberOfActiveNodes.add(numberOfLeavingNodes);\\n    }\\n\\n    /**\\n     * @dev getActiveNodeIPs - get array of ips of Active Nodes\\n     * @return activeNodeIPs - array of ips of Active Nodes\\n     */\\n    function getActiveNodeIPs() external view returns (bytes4[] memory activeNodeIPs) {\\n        activeNodeIPs = new bytes4[](numberOfActiveNodes);\\n        uint indexOfActiveNodeIPs = 0;\\n        for (uint indexOfNodes = 0; indexOfNodes \\u003c nodes.length; indexOfNodes++) {\\n            if (isNodeActive(indexOfNodes)) {\\n                activeNodeIPs[indexOfActiveNodeIPs] = nodes[indexOfNodes].ip;\\n                indexOfActiveNodeIPs++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev getActiveNodesByAddress - get array of indexes of Active Nodes, which were\\n     * created by msg.sender\\n     * @return activeNodesByAddress Array of indexes of Active Nodes, which were created by msg.sender\\n     */\\n    function getActiveNodesByAddress() external view returns (uint[] memory activeNodesByAddress) {\\n        activeNodesByAddress = new uint[](nodeIndexes[msg.sender].numberOfNodes);\\n        uint indexOfActiveNodesByAddress = 0;\\n        for (uint indexOfNodes = 0; indexOfNodes \\u003c nodes.length; indexOfNodes++) {\\n            if (nodeIndexes[msg.sender].isNodeExist[indexOfNodes] \\u0026\\u0026 isNodeActive(indexOfNodes)) {\\n                activeNodesByAddress[indexOfActiveNodesByAddress] = indexOfNodes;\\n                indexOfActiveNodesByAddress++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev getActiveNodeIds - get array of indexes of Active Nodes\\n     * @return activeNodeIds - array of indexes of Active Nodes\\n     */\\n    function getActiveNodeIds() external view returns (uint[] memory activeNodeIds) {\\n        activeNodeIds = new uint[](numberOfActiveNodes);\\n        uint indexOfActiveNodeIds = 0;\\n        for (uint indexOfNodes = 0; indexOfNodes \\u003c nodes.length; indexOfNodes++) {\\n            if (isNodeActive(indexOfNodes)) {\\n                activeNodeIds[indexOfActiveNodeIds] = indexOfNodes;\\n                indexOfActiveNodeIds++;\\n            }\\n        }\\n    }\\n\\n    function getValidatorId(uint nodeIndex) external view returns (uint) {\\n        require(nodeIndex \\u003c nodes.length, \\\"Node does not exist\\\");\\n        return nodes[nodeIndex].validatorId;\\n    }\\n\\n    function getNodeStatus(uint nodeIndex) external view returns (NodeStatus) {\\n        return nodes[nodeIndex].status;\\n    }\\n\\n    function getValidatorNodeIndexes(uint validatorId) external view returns (uint[] memory) {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        require(validatorService.validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        return validatorToNodeIndexes[validatorId];\\n    }\\n\\n    /**\\n     * @dev constructor in Permissions approach\\n     * @param contractsAddress needed in Permissions constructor\\n    */\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        numberOfActiveNodes = 0;\\n        numberOfLeavingNodes = 0;\\n        numberOfLeftNodes = 0;\\n    }\\n\\n    /**\\n     * @dev isNodeActive - checks if Node status Active\\n     * @param nodeIndex - index of Node\\n     * @return if Node status Active - true, else - false\\n     */\\n    function isNodeActive(uint nodeIndex) public view returns (bool) {\\n        return nodes[nodeIndex].status == NodeStatus.Active;\\n    }\\n\\n    /**\\n     * @dev isNodeLeaving - checks if Node status Leaving\\n     * @param nodeIndex - index of Node\\n     * @return if Node status Leaving - true, else - false\\n     */\\n    function isNodeLeaving(uint nodeIndex) public view returns (bool) {\\n        return nodes[nodeIndex].status == NodeStatus.Leaving;\\n    }\\n\\n    function countNodesWithFreeSpace(uint8 freeSpace) public view returns (uint count) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        count = 0;\\n        for (uint8 i = freeSpace; i \\u003c= constantsHolder.TOTAL_SPACE_ON_NODE(); ++i) {\\n            count = count.add(spaceToNodes[i].length);\\n        }\\n    }\\n\\n    function _findNode(uint[] memory validatorNodeIndexes, uint nodeIndex) private pure returns (uint) {\\n        uint i;\\n        for (i = 0; i \\u003c validatorNodeIndexes.length; i++) {\\n            if (validatorNodeIndexes[i] == nodeIndex) {\\n                return i;\\n            }\\n        }\\n        return validatorNodeIndexes.length;\\n    }\\n\\n    function _moveNodeToNewSpaceMap(uint nodeIndex, uint8 newSpace) private {\\n        uint8 previousSpace = spaceOfNodes[nodeIndex].freeSpace;\\n        uint indexInArray = spaceOfNodes[nodeIndex].indexInSpaceMap;\\n        if (indexInArray \\u003c spaceToNodes[previousSpace].length.sub(1)) {\\n            uint shiftedIndex = spaceToNodes[previousSpace][spaceToNodes[previousSpace].length.sub(1)];\\n            spaceToNodes[previousSpace][indexInArray] = shiftedIndex;\\n            spaceOfNodes[shiftedIndex].indexInSpaceMap = indexInArray;\\n            spaceToNodes[previousSpace].pop();\\n        } else {\\n            spaceToNodes[previousSpace].pop();\\n        }\\n        spaceToNodes[newSpace].push(nodeIndex);\\n        spaceOfNodes[nodeIndex].freeSpace = newSpace;\\n        spaceOfNodes[nodeIndex].indexInSpaceMap = spaceToNodes[newSpace].length.sub(1);\\n    }\\n\\n    /**\\n     * @dev _setNodeLeft - set Node Left\\n     * function could be run only by Nodes\\n     * @param nodeIndex - index of Node\\n     */\\n    function _setNodeLeft(uint nodeIndex) private {\\n        nodesIPCheck[nodes[nodeIndex].ip] = false;\\n        nodesNameCheck[keccak256(abi.encodePacked(nodes[nodeIndex].name))] = false;\\n        delete nodesNameToIndex[keccak256(abi.encodePacked(nodes[nodeIndex].name))];\\n        if (nodes[nodeIndex].status == NodeStatus.Active) {\\n            numberOfActiveNodes--;\\n        } else {\\n            numberOfLeavingNodes--;\\n        }\\n        nodes[nodeIndex].status = NodeStatus.Left;\\n        numberOfLeftNodes++;\\n    }\\n\\n    /**\\n     * @dev _setNodeLeaving - set Node Leaving\\n     * function could be run only by Nodes\\n     * @param nodeIndex - index of Node\\n     */\\n    function _setNodeLeaving(uint nodeIndex) private {\\n        nodes[nodeIndex].status = NodeStatus.Leaving;\\n        numberOfActiveNodes--;\\n        numberOfLeavingNodes++;\\n    }\\n\\n    /**\\n     * @dev _addNode - adds Node to array\\n     * function could be run only by executor\\n     * @param from - owner of Node\\n     * @param name - Node name\\n     * @param ip - Node ip\\n     * @param publicIP - Node public ip\\n     * @param port - Node public port\\n     * @param publicKey - Ethereum public key\\n     * @return nodeIndex Index of Node\\n     */\\n    function _addNode(\\n        address from,\\n        string memory name,\\n        bytes4 ip,\\n        bytes4 publicIP,\\n        uint16 port,\\n        bytes32[2] memory publicKey,\\n        uint validatorId\\n    )\\n        private\\n        returns (uint nodeIndex)\\n    {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        nodes.push(Node({\\n            name: name,\\n            ip: ip,\\n            publicIP: publicIP,\\n            port: port,\\n            //owner: from,\\n            publicKey: publicKey,\\n            startBlock: block.number,\\n            lastRewardDate: block.timestamp,\\n            finishTime: 0,\\n            status: NodeStatus.Active,\\n            validatorId: validatorId\\n        }));\\n        nodeIndex = nodes.length.sub(1);\\n        validatorToNodeIndexes[validatorId].push(nodeIndex);\\n        bytes32 nodeId = keccak256(abi.encodePacked(name));\\n        nodesIPCheck[ip] = true;\\n        nodesNameCheck[nodeId] = true;\\n        nodesNameToIndex[nodeId] = nodeIndex;\\n        nodeIndexes[from].isNodeExist[nodeIndex] = true;\\n        nodeIndexes[from].numberOfNodes++;\\n        spaceOfNodes.push(SpaceManaging({\\n            freeSpace: constantsHolder.TOTAL_SPACE_ON_NODE(),\\n            indexInSpaceMap: spaceToNodes[constantsHolder.TOTAL_SPACE_ON_NODE()].length\\n        }));\\n        spaceToNodes[constantsHolder.TOTAL_SPACE_ON_NODE()].push(nodeIndex);\\n        numberOfActiveNodes++;\\n    }\\n\\n    function _deleteNode(uint nodeIndex) private {\\n        uint8 space = spaceOfNodes[nodeIndex].freeSpace;\\n        uint indexInArray = spaceOfNodes[nodeIndex].indexInSpaceMap;\\n        if (indexInArray \\u003c spaceToNodes[space].length.sub(1)) {\\n            uint shiftedIndex = spaceToNodes[space][spaceToNodes[space].length.sub(1)];\\n            spaceToNodes[space][indexInArray] = shiftedIndex;\\n            spaceOfNodes[shiftedIndex].indexInSpaceMap = indexInArray;\\n            spaceToNodes[space].pop();\\n        } else {\\n            spaceToNodes[space].pop();\\n        }\\n        delete spaceOfNodes[nodeIndex].freeSpace;\\n        delete spaceOfNodes[nodeIndex].indexInSpaceMap;\\n    }\\n\\n}\\n\"},\"OCContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"},\"OCECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 \\u003c s \\u003c secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) \\u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature \\u0027s\\u0027 value\\\");\\n        }\\n\\n        if (v != 27 \\u0026\\u0026 v != 28) {\\n            revert(\\\"ECDSA: invalid signature \\u0027v\\u0027 value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"},\"OCIERC1820Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820Registry {\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``\\u0027s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller\\u0027s address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller\\u0027s address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     *  @param account Address of the contract for which to update the cache.\\n     *  @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\\n     *  If the result is not cached a direct lookup on the contract address is performed.\\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     *  {updateERC165Cache} with the contract address.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\\n     *  @param account Address of the contract to check.\\n     *  @param interfaceId ERC165 interface to check.\\n     *  @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n}\\n\"},\"OCIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"},\"OCIERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller\\u0027s account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account\\u0027s operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"},\"OCIERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract\\u0027s state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"OCIERC777Sender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n *  their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Sender {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder\\u0027s\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract\\u0027s state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\"},\"OCReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"},\"OCSafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value \\u003c 2**128, \\\"SafeCast: value doesn\\\\\\u0027t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value \\u003c 2**64, \\\"SafeCast: value doesn\\\\\\u0027t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value \\u003c 2**32, \\\"SafeCast: value doesn\\\\\\u0027t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value \\u003c 2**16, \\\"SafeCast: value doesn\\\\\\u0027t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity\\u0027s `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value \\u003c 2**8, \\\"SafeCast: value doesn\\\\\\u0027t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value \\u003e= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity\\u0027s `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value \\u003e= -2**127 \\u0026\\u0026 value \\u003c 2**127, \\\"SafeCast: value doesn\\\\\\u0027t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity\\u0027s `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value \\u003e= -2**63 \\u0026\\u0026 value \\u003c 2**63, \\\"SafeCast: value doesn\\\\\\u0027t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity\\u0027s `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value \\u003e= -2**31 \\u0026\\u0026 value \\u003c 2**31, \\\"SafeCast: value doesn\\\\\\u0027t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity\\u0027s `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value \\u003e= -2**15 \\u0026\\u0026 value \\u003c 2**15, \\\"SafeCast: value doesn\\\\\\u0027t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity\\u0027s `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value \\u003e= -2**7 \\u0026\\u0026 value \\u003c 2**7, \\\"SafeCast: value doesn\\\\\\u0027t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value \\u003c 2**255, \\\"SafeCast: value doesn\\u0027t fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"},\"OCSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003c= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b \\u003e 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"},\"OEPAccessControl.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./OEPEnumerableSet.sol\\\";\\nimport \\\"./OEPAddress.sol\\\";\\nimport \\\"./OEPContext.sol\\\";\\nimport \\\"./OEPInitializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``\\u0027s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"},\"OEPAddress.sol\":{\"content\":\"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"},\"OEPContext.sol\":{\"content\":\"pragma solidity ^0.6.0;\\nimport \\\"./OEPInitializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"},\"OEPEnumerableSet.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"},\"OEPInitializable.sol\":{\"content\":\"pragma solidity \\u003e=0.4.24 \\u003c0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"},\"OEPOwnable.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./OEPContext.sol\\\";\\nimport \\\"./OEPInitializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"},\"PartialDifferences.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    PartialDifferences.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./MathUtils.sol\\\";\\nimport \\\"./FractionUtils.sol\\\";\\n\\n/**\\n * @title Partial Differences Library\\n * @dev This library contains functions to manage Partial Differences data\\n * structure. Partial Differences is an array of value differences over time.\\n *\\n * For example: assuming an array [3, 6, 3, 1, 2], partial differences can\\n * represent this array as [_, 3, -3, -2, 1].\\n *\\n * This data structure allows adding values on an open interval with O(1)\\n * complexity.\\n *\\n * For example: add +5 to [3, 6, 3, 1, 2] starting from the second element (3),\\n * instead of performing [3, 6, 3+5, 1+5, 2+5] partial differences allows\\n * performing [_, 3, -3+5, -2, 1]. The original array can be restored by\\n * adding values from partial differences.\\n */\\nlibrary PartialDifferences {\\n    using SafeMath for uint;\\n    using MathUtils for uint;\\n\\n    struct Sequence {\\n             // month =\\u003e diff\\n        mapping (uint =\\u003e uint) addDiff;\\n             // month =\\u003e diff\\n        mapping (uint =\\u003e uint) subtractDiff;\\n             // month =\\u003e value\\n        mapping (uint =\\u003e uint) value;\\n\\n        uint firstUnprocessedMonth;\\n        uint lastChangedMonth;\\n    }\\n\\n    struct Value {\\n             // month =\\u003e diff\\n        mapping (uint =\\u003e uint) addDiff;\\n             // month =\\u003e diff\\n        mapping (uint =\\u003e uint) subtractDiff;\\n\\n        uint value;\\n        uint firstUnprocessedMonth;\\n        uint lastChangedMonth;\\n    }\\n\\n    // functions for sequence\\n\\n    function addToSequence(Sequence storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth \\u003c= month, \\\"Cannot add to the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n        }\\n        sequence.addDiff[month] = sequence.addDiff[month].add(diff);\\n        if (sequence.lastChangedMonth != month) {\\n            sequence.lastChangedMonth = month;\\n        }\\n    }\\n\\n    function subtractFromSequence(Sequence storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth \\u003c= month, \\\"Cannot subtract from the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n        }\\n        sequence.subtractDiff[month] = sequence.subtractDiff[month].add(diff);\\n        if (sequence.lastChangedMonth != month) {\\n            sequence.lastChangedMonth = month;\\n        }\\n    }\\n\\n    function getAndUpdateValueInSequence(Sequence storage sequence, uint month) internal returns (uint) {\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth \\u003c= month) {\\n            for (uint i = sequence.firstUnprocessedMonth; i \\u003c= month; ++i) {\\n                uint nextValue = sequence.value[i.sub(1)].add(sequence.addDiff[i]).boundedSub(sequence.subtractDiff[i]);\\n                if (sequence.value[i] != nextValue) {\\n                    sequence.value[i] = nextValue;\\n                }\\n                if (sequence.addDiff[i] \\u003e 0) {\\n                    delete sequence.addDiff[i];\\n                }\\n                if (sequence.subtractDiff[i] \\u003e 0) {\\n                    delete sequence.subtractDiff[i];\\n                }\\n            }\\n            sequence.firstUnprocessedMonth = month.add(1);\\n        }\\n\\n        return sequence.value[month];\\n    }\\n\\n    function reduceSequence(\\n        Sequence storage sequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month) internal\\n    {\\n        require(month.add(1) \\u003e= sequence.firstUnprocessedMonth, \\\"Can\\u0027t reduce value in the past\\\");\\n        require(\\n            reducingCoefficient.numerator \\u003c= reducingCoefficient.denominator,\\n            \\\"Increasing of values is not implemented\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return;\\n        }\\n        uint value = getAndUpdateValueInSequence(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return;\\n        }\\n\\n        sequence.value[month] = sequence.value[month]\\n            .mul(reducingCoefficient.numerator)\\n            .div(reducingCoefficient.denominator);\\n\\n        for (uint i = month.add(1); i \\u003c= sequence.lastChangedMonth; ++i) {\\n            sequence.subtractDiff[i] = sequence.subtractDiff[i]\\n                .mul(reducingCoefficient.numerator)\\n                .div(reducingCoefficient.denominator);\\n        }\\n    }\\n\\n    // functions for value\\n\\n    function addToValue(Value storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth \\u003c= month, \\\"Cannot add to the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n            sequence.lastChangedMonth = month;\\n        }\\n        if (month \\u003e sequence.lastChangedMonth) {\\n            sequence.lastChangedMonth = month;\\n        }\\n\\n        if (month \\u003e= sequence.firstUnprocessedMonth) {\\n            sequence.addDiff[month] = sequence.addDiff[month].add(diff);\\n        } else {\\n            sequence.value = sequence.value.add(diff);\\n        }\\n    }\\n\\n    function subtractFromValue(Value storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth \\u003c= month.add(1), \\\"Cannot subtract from the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n            sequence.lastChangedMonth = month;\\n        }\\n        if (month \\u003e sequence.lastChangedMonth) {\\n            sequence.lastChangedMonth = month;\\n        }\\n\\n        if (month \\u003e= sequence.firstUnprocessedMonth) {\\n            sequence.subtractDiff[month] = sequence.subtractDiff[month].add(diff);\\n        } else {\\n            sequence.value = sequence.value.boundedSub(diff);\\n        }\\n    }\\n\\n    function getAndUpdateValue(Value storage sequence, uint month) internal returns (uint) {\\n        require(\\n            month.add(1) \\u003e= sequence.firstUnprocessedMonth,\\n            \\\"Cannot calculate value in the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth \\u003c= month) {\\n            for (uint i = sequence.firstUnprocessedMonth; i \\u003c= month; ++i) {\\n                uint newValue = sequence.value.add(sequence.addDiff[i]).boundedSub(sequence.subtractDiff[i]);\\n                if (sequence.value != newValue) {\\n                    sequence.value = newValue;\\n                }\\n                if (sequence.addDiff[i] \\u003e 0) {\\n                    delete sequence.addDiff[i];\\n                }\\n                if (sequence.subtractDiff[i] \\u003e 0) {\\n                    delete sequence.subtractDiff[i];\\n                }\\n            }\\n            sequence.firstUnprocessedMonth = month.add(1);\\n        }\\n\\n        return sequence.value;\\n    }\\n\\n    function reduceValue(\\n        Value storage sequence,\\n        uint amount,\\n        uint month)\\n        internal returns (FractionUtils.Fraction memory)\\n    {\\n        require(month.add(1) \\u003e= sequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return FractionUtils.createFraction(0);\\n        }\\n        uint value = getAndUpdateValue(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return FractionUtils.createFraction(0);\\n        }\\n\\n        uint _amount = amount;\\n        if (value \\u003c amount) {\\n            _amount = value;\\n        }\\n\\n        FractionUtils.Fraction memory reducingCoefficient =\\n            FractionUtils.createFraction(value.boundedSub(_amount), value);\\n        reduceValueByCoefficient(sequence, reducingCoefficient, month);\\n        return reducingCoefficient;\\n    }\\n\\n    function reduceValueByCoefficient(\\n        Value storage sequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month)\\n        internal\\n    {\\n        reduceValueByCoefficientAndUpdateSumIfNeeded(\\n            sequence,\\n            sequence,\\n            reducingCoefficient,\\n            month,\\n            false);\\n    }\\n\\n    function reduceValueByCoefficientAndUpdateSum(\\n        Value storage sequence,\\n        Value storage sumSequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month) internal\\n    {\\n        reduceValueByCoefficientAndUpdateSumIfNeeded(\\n            sequence,\\n            sumSequence,\\n            reducingCoefficient,\\n            month,\\n            true);\\n    }\\n\\n    function reduceValueByCoefficientAndUpdateSumIfNeeded(\\n        Value storage sequence,\\n        Value storage sumSequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month,\\n        bool hasSumSequence) internal\\n    {\\n        require(month.add(1) \\u003e= sequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        if (hasSumSequence) {\\n            require(month.add(1) \\u003e= sumSequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        }\\n        require(\\n            reducingCoefficient.numerator \\u003c= reducingCoefficient.denominator,\\n            \\\"Increasing of values is not implemented\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return;\\n        }\\n        uint value = getAndUpdateValue(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return;\\n        }\\n\\n        uint newValue = sequence.value.mul(reducingCoefficient.numerator).div(reducingCoefficient.denominator);\\n        if (hasSumSequence) {\\n            subtractFromValue(sumSequence, sequence.value.boundedSub(newValue), month);\\n        }\\n        sequence.value = newValue;\\n\\n        for (uint i = month.add(1); i \\u003c= sequence.lastChangedMonth; ++i) {\\n            uint newDiff = sequence.subtractDiff[i]\\n                .mul(reducingCoefficient.numerator)\\n                .div(reducingCoefficient.denominator);\\n            if (hasSumSequence) {\\n                sumSequence.subtractDiff[i] = sumSequence.subtractDiff[i]\\n                    .boundedSub(sequence.subtractDiff[i].boundedSub(newDiff));\\n            }\\n            sequence.subtractDiff[i] = newDiff;\\n        }\\n    }\\n\\n    function clear(Value storage sequence) internal {\\n        for (uint i = sequence.firstUnprocessedMonth; i \\u003c= sequence.lastChangedMonth; ++i) {\\n            if (sequence.addDiff[i] \\u003e 0) {\\n                delete sequence.addDiff[i];\\n            }\\n            if (sequence.subtractDiff[i] \\u003e 0) {\\n                delete sequence.subtractDiff[i];\\n            }\\n        }\\n        if (sequence.value \\u003e 0) {\\n            delete sequence.value;\\n        }\\n        if (sequence.firstUnprocessedMonth \\u003e 0) {\\n            delete sequence.firstUnprocessedMonth;\\n        }\\n        if (sequence.lastChangedMonth \\u003e 0) {\\n            delete sequence.lastChangedMonth;\\n        }\\n    }\\n}\"},\"Permissions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\nimport \\\"./OEPAccessControl.sol\\\";\\n\\nimport \\\"./ContractManager.sol\\\";\\n\\n\\n/**\\n * @title Permissions - connected module for Upgradeable approach, knows ContractManager\\n * @author Artem Payvin\\n */\\ncontract Permissions is AccessControlUpgradeSafe {\\n    using SafeMath for uint;\\n    using Address for address;\\n    \\n    ContractManager public contractManager;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev allow - throws if called by any account and contract other than the owner\\n     * or `contractName` contract\\n     * @param contractName - human readable name of contract\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName))) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName1))) == msg.sender ||\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName2))) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName1))) == msg.sender ||\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName2))) == msg.sender ||\\n            contractManager.contracts(keccak256(abi.encodePacked(contractName3))) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual initializer {\\n        AccessControlUpgradeSafe.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeSafe skaleManager = AccessControlUpgradeSafe(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = ContractManager(contractManagerAddress);\\n    }\\n}\\n\"},\"Punisher.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Punisher.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\n\\nimport \\\"./ValidatorService.sol\\\";\\nimport \\\"./DelegationController.sol\\\";\\n\\n/**\\n * @title Punisher\\n * @dev This contract handles all slashing and forgiving operations.\\n */\\ncontract Punisher is Permissions, ILocker {\\n\\n    /**\\n     * @dev Emitted when a slashing condition occurs.\\n     */\\n    event Slash(\\n        uint validatorId,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a forgive condition occurs.\\n     */\\n    event Forgive(\\n        address wallet,\\n        uint amount\\n    );\\n\\n    //        holder =\\u003e tokens\\n    mapping (address =\\u003e uint) private _locked;\\n\\n    /**\\n     * @dev Executes slashing on a validator and its delegations by an `amount`\\n     * of tokens. Currently, SkaleDKG is the only service allowed to execute\\n     * slashing.\\n     *\\n     * Emits a Slash event.\\n     *\\n     * @param validatorId uint validator to be slashed\\n     * @param amount uint slashed amount\\n    */\\n    function slash(uint validatorId, uint amount) external allow(\\\"SkaleDKG\\\") {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        require(validatorService.validatorExists(validatorId), \\\"Validator does not exist\\\");\\n\\n        delegationController.confiscate(validatorId, amount);\\n\\n        emit Slash(validatorId, amount);\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to forgive a slashing condition.\\n     *\\n     * Emits a Forgive event.\\n     *\\n     * @param holder address of the slashed\\n     * @param amount uint amount to be forgiven\\n     */\\n    function forgive(address holder, uint amount) external onlyAdmin {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        require(!delegationController.hasUnprocessedSlashes(holder), \\\"Not all slashes were calculated\\\");\\n\\n        if (amount \\u003e _locked[holder]) {\\n            delete _locked[holder];\\n        } else {\\n            _locked[holder] = _locked[holder].sub(amount);\\n        }\\n\\n        emit Forgive(holder, amount);\\n    }\\n\\n    /**\\n     * @dev See ILocker-getAndUpdateLockedAmount\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev See ILocker-getAndUpdateForbiddenForDelegationAmount\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    function handleSlash(address holder, uint amount) external allow(\\\"DelegationController\\\") {\\n        _locked[holder] = _locked[holder].add(amount);\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n    // private\\n\\n    function _getAndUpdateLockedAmount(address wallet) private returns (uint) {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        delegationController.processAllSlashes(wallet);\\n        return _locked[wallet];\\n    }\\n\\n}\"},\"SkaleToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SkaleToken.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\nimport \\\"./OCReentrancyGuard.sol\\\";\\n\\nimport \\\"./ERC777.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./IDelegatableToken.sol\\\";\\nimport \\\"./Punisher.sol\\\";\\nimport \\\"./TokenState.sol\\\";\\n\\n\\n/**\\n * @title SkaleToken is ERC777 Token implementation, also this contract in skale\\n * manager system\\n */\\ncontract SkaleToken is ERC777, Permissions, ReentrancyGuard, IDelegatableToken {\\n    using SafeMath for uint;\\n\\n    string public constant NAME = \\\"SKALE\\\";\\n\\n    string public constant SYMBOL = \\\"SKL\\\";\\n\\n    uint public constant DECIMALS = 18;\\n\\n    uint public constant CAP = 7 * 1e9 * (10 ** DECIMALS); // the maximum amount of tokens that can ever be created\\n\\n    constructor(address contractsAddress, address[] memory defOps) public\\n    ERC777(\\\"SKALE\\\", \\\"SKL\\\", defOps)\\n    {\\n        Permissions.initialize(contractsAddress);\\n    }\\n\\n    /**\\n     * @dev mint - create some amount of token and transfer it to the specified address\\n     * @param account - address where some amount of token would be created\\n     * @param amount - amount of tokens to mine\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @return returns success of function call.\\n     */\\n    function mint(\\n        address account,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    )\\n        external\\n        allow(\\\"SkaleManager\\\")\\n        //onlyAuthorized\\n        returns (bool)\\n    {\\n        require(amount \\u003c= CAP.sub(totalSupply()), \\\"Amount is too big\\\");\\n        _mint(\\n            account,\\n            amount,\\n            userData,\\n            operatorData\\n        );\\n\\n        return true;\\n    }\\n\\n    function getAndUpdateDelegatedAmount(address wallet) external override returns (uint) {\\n        return DelegationController(contractManager.getContract(\\\"DelegationController\\\"))\\n            .getAndUpdateDelegatedAmount(wallet);\\n    }\\n\\n    function getAndUpdateSlashedAmount(address wallet) external override returns (uint) {\\n        return Punisher(contractManager.getContract(\\\"Punisher\\\")).getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    function getAndUpdateLockedAmount(address wallet) public override returns (uint) {\\n        return TokenState(contractManager.getContract(\\\"TokenState\\\")).getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    // internal\\n\\n    function _beforeTokenTransfer(\\n        address, // operator\\n        address from,\\n        address, // to\\n        uint256 tokenId)\\n        internal override\\n    {\\n        uint locked = getAndUpdateLockedAmount(from);\\n        if (locked \\u003e 0) {\\n            require(balanceOf(from) \\u003e= locked.add(tokenId), \\\"Token should be unlocked for transferring\\\");\\n        }\\n    }\\n\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal override nonReentrant {\\n        super._callTokensToSend(operator, from, to, amount, userData, operatorData);\\n    }\\n\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal override nonReentrant {\\n        super._callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    // we have to override _msgData() and _msgSender() functions because of collision in Context and ContextUpgradeSafe\\n\\n    function _msgData() internal view override(Context, ContextUpgradeSafe) returns (bytes memory) {\\n        return Context._msgData();\\n    }\\n\\n    function _msgSender() internal view override(Context, ContextUpgradeSafe) returns (address payable) {\\n        return Context._msgSender();\\n    }\\n}\\n\"},\"StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    StringUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\n\\nlibrary StringUtils {\\n    using SafeMath for uint;\\n\\n    function strConcat(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(a);\\n        bytes memory _bb = bytes(b);\\n\\n        string memory ab = new string(_ba.length.add(_bb.length));\\n        bytes memory strBytes = bytes(ab);\\n        uint k = 0;\\n        uint i = 0;\\n        for (i = 0; i \\u003c _ba.length; i++) {\\n            strBytes[k++] = _ba[i];\\n        }\\n        for (i = 0; i \\u003c _bb.length; i++) {\\n            strBytes[k++] = _bb[i];\\n        }\\n        return string(strBytes);\\n    }\\n\\n    function uint2str(uint i) internal pure returns (string memory) {\\n        if (i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = i;\\n        uint _i = i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len.sub(1);\\n        while (_i != 0) {\\n            bstr[k--] = byte(uint8(48 + _i % 10));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\"},\"TimeHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TimeHelpers.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\nimport \\\"./BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\n/**\\n * @title TimeHelpers\\n * @dev The contract performs time operations.\\n *\\n * These functions are used to calculate monthly and Proof of Use epochs.\\n */\\ncontract TimeHelpers {\\n    using SafeMath for uint;\\n\\n    uint constant private _ZERO_YEAR = 2020;\\n\\n    function calculateProofOfUseLockEndTime(uint month, uint lockUpPeriodDays) external view returns (uint timestamp) {\\n        timestamp = BokkyPooBahsDateTimeLibrary.addDays(monthToTimestamp(month), lockUpPeriodDays);\\n    }\\n\\n    function addMonths(uint fromTimestamp, uint n) external pure returns (uint) {\\n        return BokkyPooBahsDateTimeLibrary.addMonths(fromTimestamp, n);\\n    }\\n\\n    function getCurrentMonth() external view virtual returns (uint) {\\n        return timestampToMonth(now);\\n    }\\n\\n    function timestampToMonth(uint timestamp) public view virtual returns (uint) {\\n        uint year;\\n        uint month;\\n        (year, month, ) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n        require(year \\u003e= _ZERO_YEAR, \\\"Timestamp is too far in the past\\\");\\n        month = month.sub(1).add(year.sub(_ZERO_YEAR).mul(12));\\n        require(month \\u003e 0, \\\"Timestamp is too far in the past\\\");\\n        return month;\\n    }\\n\\n    function monthToTimestamp(uint month) public view virtual returns (uint timestamp) {\\n        uint year = _ZERO_YEAR;\\n        uint _month = month;\\n        year = year.add(_month.div(12));\\n        _month = _month.mod(12);\\n        _month = _month.add(1);\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, _month, 1);\\n    }\\n}\\n\"},\"TokenLaunchLocker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TokenLaunchLocker.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./MathUtils.sol\\\";\\n\\nimport \\\"./DelegationController.sol\\\";\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./PartialDifferences.sol\\\";\\n\\n\\ncontract TokenLaunchLocker is Permissions, ILocker {\\n    using MathUtils for uint;\\n    using PartialDifferences for PartialDifferences.Value;\\n\\n    /**\\n     * @dev Emitted when an `amount` is unlocked.\\n     */\\n    event Unlocked(\\n        address holder,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted when an `amount` is locked.\\n     */\\n    event Locked(\\n        address holder,\\n        uint amount\\n    );\\n\\n    struct DelegatedAmountAndMonth {\\n        uint delegated;\\n        uint month;\\n    }\\n\\n    //        holder =\\u003e tokens\\n    mapping (address =\\u003e uint) private _locked;\\n\\n    //        holder =\\u003e tokens\\n    mapping (address =\\u003e PartialDifferences.Value) private _delegatedAmount;\\n\\n    mapping (address =\\u003e DelegatedAmountAndMonth) private _totalDelegatedAmount;\\n\\n    // delegationId =\\u003e tokens\\n    mapping (uint =\\u003e uint) private _delegationAmount;\\n\\n    function lock(address holder, uint amount) external allow(\\\"TokenLaunchManager\\\") {\\n        _locked[holder] = _locked[holder].add(amount);\\n\\n        emit Locked(holder, amount);\\n    }\\n\\n    function handleDelegationAdd(\\n        address holder, uint delegationId, uint amount, uint month)\\n        external allow(\\\"DelegationController\\\")\\n    {\\n        if (_locked[holder] \\u003e 0) {\\n            TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n\\n            uint currentMonth = timeHelpers.getCurrentMonth();\\n            uint fromLocked = amount;\\n            uint locked = _locked[holder].boundedSub(_getAndUpdateDelegatedAmount(holder, currentMonth));\\n            if (fromLocked \\u003e locked) {\\n                fromLocked = locked;\\n            }\\n            if (fromLocked \\u003e 0) {\\n                require(_delegationAmount[delegationId] == 0, \\\"Delegation was already added\\\");\\n                _addToDelegatedAmount(holder, fromLocked, month);\\n                _addToTotalDelegatedAmount(holder, fromLocked, month);\\n                _delegationAmount[delegationId] = fromLocked;\\n            }\\n        }\\n    }\\n\\n    function handleDelegationRemoving(\\n        address holder,\\n        uint delegationId,\\n        uint month)\\n        external allow(\\\"DelegationController\\\")\\n    {\\n        if (_delegationAmount[delegationId] \\u003e 0) {\\n            if (_locked[holder] \\u003e 0) {\\n                _removeFromDelegatedAmount(holder, _delegationAmount[delegationId], month);\\n            }\\n            delete _delegationAmount[delegationId];\\n        }\\n    }\\n\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        if (_locked[wallet] \\u003e 0) {\\n            DelegationController delegationController = DelegationController(\\n                contractManager.getContract(\\\"DelegationController\\\"));\\n            TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n            ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n\\n            uint currentMonth = timeHelpers.getCurrentMonth();\\n            if (_totalDelegatedSatisfiesProofOfUserCondition(wallet) \\u0026\\u0026\\n                timeHelpers.calculateProofOfUseLockEndTime(\\n                    _totalDelegatedAmount[wallet].month,\\n                    constantsHolder.proofOfUseLockUpPeriodDays()\\n                ) \\u003c= now) {\\n                _unlock(wallet);\\n                return 0;\\n            } else {\\n                uint lockedByDelegationController = _getAndUpdateDelegatedAmount(wallet, currentMonth)\\n                    .add(delegationController.getLockedInPendingDelegations(wallet));\\n                if (_locked[wallet] \\u003e lockedByDelegationController) {\\n                    return _locked[wallet].boundedSub(lockedByDelegationController);\\n                } else {\\n                    return 0;\\n                }\\n            }\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function getAndUpdateForbiddenForDelegationAmount(address) external override returns (uint) {\\n        return 0;\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n    // private\\n\\n    function _getAndUpdateDelegatedAmount(address holder, uint currentMonth) private returns (uint) {\\n        return _delegatedAmount[holder].getAndUpdateValue(currentMonth);\\n    }\\n\\n    function _addToDelegatedAmount(address holder, uint amount, uint month) private {\\n        _delegatedAmount[holder].addToValue(amount, month);\\n    }\\n\\n    function _removeFromDelegatedAmount(address holder, uint amount, uint month) private {\\n        _delegatedAmount[holder].subtractFromValue(amount, month);\\n    }\\n\\n    function _addToTotalDelegatedAmount(address holder, uint amount, uint month) private {\\n        require(\\n            _totalDelegatedAmount[holder].month == 0 || _totalDelegatedAmount[holder].month \\u003c= month,\\n            \\\"Can\\u0027t add to total delegated in the past\\\");\\n\\n        // do not update counter if it is big enough\\n        // because it will override month value\\n        if (!_totalDelegatedSatisfiesProofOfUserCondition(holder)) {\\n            _totalDelegatedAmount[holder].delegated = _totalDelegatedAmount[holder].delegated.add(amount);\\n            _totalDelegatedAmount[holder].month = month;\\n        }\\n    }\\n\\n    function _unlock(address holder) private {\\n        emit Unlocked(holder, _locked[holder]);\\n        delete _locked[holder];\\n        _deleteDelegatedAmount(holder);\\n        _deleteTotalDelegatedAmount(holder);\\n    }\\n\\n    function _deleteDelegatedAmount(address holder) private {\\n        _delegatedAmount[holder].clear();\\n    }\\n\\n    function _deleteTotalDelegatedAmount(address holder) private {\\n        delete _totalDelegatedAmount[holder].delegated;\\n        delete _totalDelegatedAmount[holder].month;\\n    }\\n\\n    function _totalDelegatedSatisfiesProofOfUserCondition(address holder) private view returns (bool) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n\\n        return _totalDelegatedAmount[holder].delegated.mul(100) \\u003e=\\n            _locked[holder].mul(constantsHolder.proofOfUseDelegationPercentage());\\n    }\\n}\"},\"TokenState.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TokenState.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./DelegationController.sol\\\";\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./ILocker.sol\\\";\\n\\n\\n/**\\n * @title Token State\\n * @dev This contract manages lockers to control token transferability.\\n *\\n * See ILocker.\\n */\\ncontract TokenState is Permissions, ILocker {\\n\\n    /**\\n     * @dev Emitted when a contract is added to the locker.\\n     */\\n    event LockerWasAdded(\\n        string locker\\n    );\\n\\n    /**\\n     * @dev Emitted when a contract is removed from the locker.\\n     */\\n    event LockerWasRemoved(\\n        string locker\\n    );\\n\\n    string[] private _lockers;\\n\\n    /**\\n     *  @dev Return and update the total locked amount of a given `holder`.\\n     *\\n     *  @param holder address of the token holder\\n     *  @return total locked amount\\n    */\\n    function getAndUpdateLockedAmount(address holder) external override returns (uint) {\\n        uint locked = 0;\\n        for (uint i = 0; i \\u003c _lockers.length; ++i) {\\n            ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n            locked = locked.add(locker.getAndUpdateLockedAmount(holder));\\n        }\\n        return locked;\\n    }\\n\\n    /**\\n     * @dev Return and update the total locked and un-delegatable amount of a given `holder`.\\n     *\\n     * @param holder address of the token holder\\n     * @return amount total slashed amount (non-transferable and non-delegatable)\\n    */\\n    function getAndUpdateForbiddenForDelegationAmount(address holder) external override returns (uint amount) {\\n        uint forbidden = 0;\\n        for (uint i = 0; i \\u003c _lockers.length; ++i) {\\n            ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n            forbidden = forbidden.add(locker.getAndUpdateForbiddenForDelegationAmount(holder));\\n        }\\n        return forbidden;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to remove a contract from the locker.\\n     *\\n     * Emits a LockerWasRemoved event.\\n     *\\n     * @param locker string name of contract to remove from locker\\n     */\\n    function removeLocker(string calldata locker) external onlyOwner {\\n        uint index;\\n        bytes32 hash = keccak256(abi.encodePacked(locker));\\n        for (index = 0; index \\u003c _lockers.length; ++index) {\\n            if (keccak256(abi.encodePacked(_lockers[index])) == hash) {\\n                break;\\n            }\\n        }\\n        if (index \\u003c _lockers.length) {\\n            if (index \\u003c _lockers.length.sub(1)) {\\n                _lockers[index] = _lockers[_lockers.length.sub(1)];\\n            }\\n            delete _lockers[_lockers.length.sub(1)];\\n            _lockers.pop();\\n            emit LockerWasRemoved(locker);\\n        }\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        addLocker(\\\"DelegationController\\\");\\n        addLocker(\\\"Punisher\\\");\\n        addLocker(\\\"TokenLaunchLocker\\\");\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to add a contract to the Locker.\\n     *\\n     * Emits a LockerWasAdded event.\\n     *\\n     * @param locker string name of contract to add to locker\\n     */\\n    function addLocker(string memory locker) public onlyOwner {\\n        _lockers.push(locker);\\n        emit LockerWasAdded(locker);\\n    }\\n}\\n\"},\"ValidatorService.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ValidatorService.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see \\u003chttps://www.gnu.org/licenses/\\u003e.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./OCSafeMath.sol\\\";\\nimport \\\"./OCECDSA.sol\\\";\\n\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\n\\nimport \\\"./DelegationController.sol\\\";\\n\\n/**\\n * @title ValidatorService\\n * @dev This contract handles all validator operations including registration,\\n * node management, validator-specific delegation parameters, and more.\\n *\\n * Validators register an address, and use this address to accept delegations and\\n * register nodes.\\n *\\n */\\ncontract ValidatorService is Permissions {\\n\\n    using ECDSA for bytes32;\\n\\n    struct Validator {\\n        string name;\\n        address validatorAddress;\\n        address requestedAddress;\\n        string description;\\n        uint feeRate;\\n        uint registrationTime;\\n        uint minimumDelegationAmount;\\n        bool acceptNewRequests;\\n    }\\n\\n    /**\\n     * @dev Emitted when a validator registers.\\n     */\\n    event ValidatorRegistered(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator address changes.\\n     */\\n    event ValidatorAddressChanged(\\n        uint validatorId,\\n        address newAddress\\n    );\\n\\n    event ValidatorWasEnabled(\\n        uint validatorId\\n    );\\n\\n    event ValidatorWasDisabled(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is linked to a validator.\\n     */\\n    event NodeAddressWasAdded(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is unlinked from a validator.\\n     */\\n    event NodeAddressWasRemoved(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    mapping (uint =\\u003e Validator) public validators;\\n    mapping (uint =\\u003e bool) private _trustedValidators;\\n    uint[] public trustedValidatorsList;\\n    //       address =\\u003e validatorId\\n    mapping (address =\\u003e uint) private _validatorAddressToId;\\n    //       address =\\u003e validatorId\\n    mapping (address =\\u003e uint) private _nodeAddressToValidatorId;\\n    // validatorId =\\u003e nodeAddress[]\\n    mapping (uint =\\u003e address[]) private _nodeAddresses;\\n    uint public numberOfValidators;\\n    bool public useWhitelist;\\n\\n    modifier checkValidatorExists(uint validatorId) {\\n        require(validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new validator Id.\\n     *\\n     * Requirements:\\n     *\\n     * - sender must not already have registered a validator Id.\\n     * - fee rate must be between 0 - 1000‰. Note: per mille!\\n     *\\n     * Emits ValidatorRegistered event.\\n     *\\n     * @param name string\\n     * @param description string\\n     * @param feeRate uint Fee charged on delegations by the validator per mille\\n     * @param minimumDelegationAmount uint Minimum delegation amount accepted by the validator\\n     */\\n    function registerValidator(\\n        string calldata name,\\n        string calldata description,\\n        uint feeRate,\\n        uint minimumDelegationAmount\\n    )\\n        external\\n        returns (uint validatorId)\\n    {\\n        require(!validatorAddressExists(msg.sender), \\\"Validator with such address already exists\\\");\\n        require(feeRate \\u003c 1000, \\\"Fee rate of validator should be lower than 100%\\\");\\n        validatorId = ++numberOfValidators;\\n        validators[validatorId] = Validator(\\n            name,\\n            msg.sender,\\n            address(0),\\n            description,\\n            feeRate,\\n            now,\\n            minimumDelegationAmount,\\n            true\\n        );\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorRegistered(validatorId);\\n    }\\n\\n    function enableValidator(uint validatorId) external checkValidatorExists(validatorId) onlyAdmin {\\n        require(!_trustedValidators[validatorId], \\\"Validator is already enabled\\\");\\n        _trustedValidators[validatorId] = true;\\n        trustedValidatorsList.push(validatorId);\\n        emit ValidatorWasEnabled(validatorId);\\n    }\\n\\n    function disableValidator(uint validatorId) external checkValidatorExists(validatorId) onlyAdmin {\\n        require(_trustedValidators[validatorId], \\\"Validator is already disabled\\\");\\n        _trustedValidators[validatorId] = false;\\n        uint position = _find(trustedValidatorsList, validatorId);\\n        if (position \\u003c trustedValidatorsList.length) {\\n            trustedValidatorsList[position] =\\n                trustedValidatorsList[trustedValidatorsList.length.sub(1)];\\n        }\\n        trustedValidatorsList.pop();\\n        emit ValidatorWasDisabled(validatorId);\\n    }\\n\\n    /**\\n     * @dev Owner can disable the validator whitelist. Once turned off the\\n     * whitelist cannot be re-enabled.\\n     */\\n    function disableWhitelist() external onlyOwner {\\n        useWhitelist = false;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to request a new address.\\n     *\\n     * Requirements:\\n     *\\n     * - new address must not be null\\n     * - new address must not be already registered as a validator\\n     *\\n     * @param newValidatorAddress address\\n     */\\n    function requestForNewAddress(address newValidatorAddress) external {\\n        require(newValidatorAddress != address(0), \\\"New address cannot be null\\\");\\n        require(_validatorAddressToId[newValidatorAddress] == 0, \\\"Address already registered\\\");\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].requestedAddress = newValidatorAddress;\\n    }\\n\\n    function confirmNewAddress(uint validatorId)\\n        external\\n        checkValidatorExists(validatorId)\\n    {\\n        require(\\n            getValidator(validatorId).requestedAddress == msg.sender,\\n            \\\"The validator address cannot be changed because it is not the actual owner\\\"\\n        );\\n        delete validators[validatorId].requestedAddress;\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorAddressChanged(validatorId, validators[validatorId].validatorAddress);\\n    }\\n\\n    /**\\n     * @dev Links a given node address.\\n     *\\n     * Requirements:\\n     *\\n     * - the given signature must be valid.\\n     * - the address must not be assigned to a validator.\\n     *\\n     * Emits NodeAddressWasAdded event.\\n     *\\n     * @param nodeAddress address\\n     * @param sig bytes signature of validator Id by node operator.\\n     */\\n    function linkNodeAddress(address nodeAddress, bytes calldata sig) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(\\n            keccak256(abi.encodePacked(validatorId)).toEthSignedMessageHash().recover(sig) == nodeAddress,\\n            \\\"Signature is not pass\\\"\\n        );\\n        require(_validatorAddressToId[nodeAddress] == 0, \\\"Node address is a validator\\\");\\n\\n        _addNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasAdded(validatorId, nodeAddress);\\n    }\\n\\n    /**\\n     * @dev Unlinks a given node address from a validator.\\n     *\\n     * Emits NodeAddressWasRemoved event.\\n     *\\n     * @param nodeAddress address\\n     */\\n    function unlinkNodeAddress(address nodeAddress) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        _removeNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasRemoved(validatorId, nodeAddress);\\n    }\\n\\n    function setValidatorMDA(uint minimumDelegationAmount) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].minimumDelegationAmount = minimumDelegationAmount;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator name.\\n     *\\n     * @param newName string\\n     */\\n    function setValidatorName(string calldata newName) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].name = newName;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator description.\\n     *\\n     * @param newDescription string\\n     */\\n    function setValidatorDescription(string calldata newDescription) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].description = newDescription;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to start accepting new delegation requests.\\n     *\\n     * Requirements:\\n     *\\n     * - validator must not have already enabled accepting new requests\\n     */\\n    function startAcceptingNewRequests() external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(!isAcceptingNewRequests(validatorId), \\\"Accepting request is already enabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = true;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to stop accepting new delegation requests.\\n     *\\n     * Requirements:\\n     *\\n     * - validator must not have already stopped accepting new requests\\n     */\\n    function stopAcceptingNewRequests() external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(isAcceptingNewRequests(validatorId), \\\"Accepting request is already disabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = false;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of validator bond.\\n     *\\n     * @param validatorId uint ID of validator to return the amount of locked funds\\n     * @return bondAmount uint the amount of self-delegated funds by the validator\\n    */\\n    function getAndUpdateBondAmount(uint validatorId)\\n        external\\n        returns (uint)\\n    {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        return delegationController.getAndUpdateDelegatedByHolderToValidatorNow(\\n            getValidator(validatorId).validatorAddress,\\n            validatorId\\n        );\\n    }\\n\\n    function getMyNodesAddresses() external view returns (address[] memory) {\\n        return getNodeAddresses(getValidatorId(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Returns a list of trusted validators.\\n     *\\n     * @return uint[] trusted validators\\n     */\\n    function getTrustedValidators() external view returns (uint[] memory) {\\n        return trustedValidatorsList;\\n    }\\n\\n    function checkMinimumDelegation(uint validatorId, uint amount)\\n        external\\n        view\\n        checkValidatorExists(validatorId)\\n        allow(\\\"DelegationController\\\")\\n        returns (bool)\\n    {\\n        return validators[validatorId].minimumDelegationAmount \\u003c= amount ? true : false;\\n    }\\n\\n    function checkValidatorAddressToId(address validatorAddress, uint validatorId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return getValidatorId(validatorAddress) == validatorId ? true : false;\\n    }\\n\\n    function getValidatorIdByNodeAddress(address nodeAddress) external view returns (uint validatorId) {\\n        validatorId = _nodeAddressToValidatorId[nodeAddress];\\n        require(validatorId != 0, \\\"Node address is not assigned to a validator\\\");\\n    }\\n\\n\\n    function isAuthorizedValidator(uint validatorId) external view checkValidatorExists(validatorId) returns (bool) {\\n        return _trustedValidators[validatorId] || !useWhitelist;\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        useWhitelist = true;\\n    }\\n\\n    function getNodeAddresses(uint validatorId) public view returns (address[] memory) {\\n        return _nodeAddresses[validatorId];\\n    }\\n\\n    function validatorExists(uint validatorId) public view returns (bool) {\\n        return validatorId \\u003c= numberOfValidators \\u0026\\u0026 validatorId != 0;\\n    }\\n\\n    function validatorAddressExists(address validatorAddress) public view returns (bool) {\\n        return _validatorAddressToId[validatorAddress] != 0;\\n    }\\n\\n    function checkIfValidatorAddressExists(address validatorAddress) public view {\\n        require(validatorAddressExists(validatorAddress), \\\"Validator with given address does not exist\\\");\\n    }\\n\\n    function getValidator(uint validatorId) public view checkValidatorExists(validatorId) returns (Validator memory) {\\n        return validators[validatorId];\\n    }\\n\\n    function getValidatorId(address validatorAddress) public view returns (uint) {\\n        checkIfValidatorAddressExists(validatorAddress);\\n        return _validatorAddressToId[validatorAddress];\\n    }\\n\\n    function isAcceptingNewRequests(uint validatorId) public view checkValidatorExists(validatorId) returns (bool) {\\n        return validators[validatorId].acceptNewRequests;\\n    }\\n\\n    // private\\n    function _setValidatorAddress(uint validatorId, address validatorAddress) private {\\n        if (_validatorAddressToId[validatorAddress] == validatorId) {\\n            return;\\n        }\\n        require(_validatorAddressToId[validatorAddress] == 0, \\\"Address is in use by another validator\\\");\\n        address oldAddress = validators[validatorId].validatorAddress;\\n        delete _validatorAddressToId[oldAddress];\\n        _nodeAddressToValidatorId[validatorAddress] = validatorId;\\n        validators[validatorId].validatorAddress = validatorAddress;\\n        _validatorAddressToId[validatorAddress] = validatorId;\\n    }\\n\\n    function _addNodeAddress(uint validatorId, address nodeAddress) private {\\n        if (_nodeAddressToValidatorId[nodeAddress] == validatorId) {\\n            return;\\n        }\\n        require(_nodeAddressToValidatorId[nodeAddress] == 0, \\\"Validator cannot override node address\\\");\\n        _nodeAddressToValidatorId[nodeAddress] = validatorId;\\n        _nodeAddresses[validatorId].push(nodeAddress);\\n    }\\n\\n    function _removeNodeAddress(uint validatorId, address nodeAddress) private {\\n        require(_nodeAddressToValidatorId[nodeAddress] == validatorId,\\n            \\\"Validator does not have permissions to unlink node\\\");\\n        delete _nodeAddressToValidatorId[nodeAddress];\\n        for (uint i = 0; i \\u003c _nodeAddresses[validatorId].length; ++i) {\\n            if (_nodeAddresses[validatorId][i] == nodeAddress) {\\n                if (i + 1 \\u003c _nodeAddresses[validatorId].length) {\\n                    _nodeAddresses[validatorId][i] =\\n                        _nodeAddresses[validatorId][_nodeAddresses[validatorId].length.sub(1)];\\n                }\\n                delete _nodeAddresses[validatorId][_nodeAddresses[validatorId].length.sub(1)];\\n                _nodeAddresses[validatorId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _find(uint[] memory array, uint index) private pure returns (uint) {\\n        uint i;\\n        for (i = 0; i \\u003c array.length; i++) {\\n            if (array[i] == index) {\\n                return i;\\n            }\\n        }\\n        return array.length;\\n    }\\n}\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractsAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"defOps\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract ContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAndUpdateDelegatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAndUpdateLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getAndUpdateSlashedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractManagerAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"SkaleToken","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c04a10fd5e6513242558f47331568abd6185a31000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000","EVMVersion":"petersburg","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7e5f1c2c6a420293c676e424c82885d0e98e0a21cd8c324df31173071dba01eb"}]