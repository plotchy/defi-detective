[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/USDTAirdrop.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interface/IRDS.sol\\\";\\nimport \\\"../interface/IERC20TokenBank.sol\\\";\\n\\ncontract USDTAirdrop is Ownable {\\n    IRDS public rds;\\n    IERC20TokenBank public usdtBank;\\n    uint256 public startTime;\\n    uint256 public endTime;\\n    uint256 public totalAward;\\n    uint256 public creationBlock;\\n    mapping(address => bool) public claimed;\\n\\n    constructor(\\n        address _rdsAddr,\\n        address _usdtBank,\\n        uint256 _totalAward,\\n        uint256 _startAt,\\n        uint256 _endAt\\n    ) {\\n        rds = IRDS(_rdsAddr);\\n        usdtBank = IERC20TokenBank(_usdtBank);\\n        totalAward = _totalAward * 10**6;\\n        startTime = _startAt;\\n        endTime = _endAt;\\n        require(startTime < endTime, \\\"invalid input!\\\");\\n        creationBlock = _startAt;\\n    }\\n\\n    event Claim(address indexed addr, uint256 amount);\\n\\n    modifier isDuringAirdrop(bool _is) {\\n        if (_is) {\\n            require(\\n                block.number > startTime && block.number < endTime,\\n                \\\"not started or already ended\\\"\\n            );\\n        } else {\\n            require(\\n                block.number < startTime || block.number > endTime,\\n                \\\"during airdrop\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    function claim() external isDuringAirdrop(true) {\\n        uint256 amount = (rds.balanceOfAt(msg.sender, creationBlock) *\\n            totalAward) / rds.totalSupplyAt(creationBlock);\\n        require(amount > 0, \\\"no airdrop\\\");\\n        require(!claimed[msg.sender], \\\"already claimed\\\");\\n        claimed[msg.sender] = true;\\n        bool success = usdtBank.issue(msg.sender, amount);\\n        require(success);\\n\\n        emit Claim(msg.sender, amount);\\n    }\\n\\n    function changeParams(uint256 _creationBlock, uint256 _totalAward)\\n        external\\n        isDuringAirdrop(false)\\n        onlyOwner\\n    {\\n        creationBlock = _creationBlock;\\n        totalAward = _totalAward;\\n    }\\n\\n    function changePeriod(uint256 _startAt, uint256 _endAt) external onlyOwner {\\n        startTime = _startAt;\\n        endTime = _endAt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IERC20TokenBank.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IERC20TokenBank {\\n    function issue(address _to, uint256 _amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IRDS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IRDS {\\n    function totalSupplyAt(uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOfAt(address _owner, uint256 _blockNumber)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rdsAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdtBank\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_totalAward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_creationBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAward\",\"type\":\"uint256\"}],\"name\":\"changeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endAt\",\"type\":\"uint256\"}],\"name\":\"changePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creationBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rds\",\"outputs\":[{\"internalType\":\"contract IRDS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtBank\",\"outputs\":[{\"internalType\":\"contract IERC20TokenBank\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"USDTAirdrop","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c06a9758d89289d72e09e412bb51913206a183fe00000000000000000000000021a3dbee594a3419d6037d6d8cee0b1e10bf345c00000000000000000000000000000000000000000000000000000000000075300000000000000000000000000000000000000000000000000000000000fab7200000000000000000000000000000000000000000000000000000000000fe1f00","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]