[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances.\r\n */\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address => uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[msg.sender]);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address => mapping (address => uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value <= balances[_from]);\r\n    require(_value <= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue > oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n  event Mint(address indexed to, uint256 amount);\r\n  event MintFinished();\r\n\r\n  bool public mintingFinished = false;\r\n\r\n\r\n  modifier canMint() {\r\n    require(!mintingFinished);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will receive the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n    totalSupply = totalSupply.add(_amount);\r\n    balances[_to] = balances[_to].add(_amount);\r\n    Mint(_to, _amount);\r\n    Transfer(address(0), _to, _amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n  function finishMinting() onlyOwner public returns (bool) {\r\n    mintingFinished = true;\r\n    MintFinished();\r\n    return true;\r\n  }\r\n}\r\n\r\ncontract GOToken is MintableToken {\t\r\n    \r\n  string public constant name = \"2GO Token\";\r\n   \r\n  string public constant symbol = \"2GO\";\r\n    \r\n  uint32 public constant decimals = 18;\r\n\r\n  mapping(address => bool) public locked;\r\n\r\n  modifier notLocked() {\r\n    require(msg.sender == owner || (mintingFinished && !locked[msg.sender]));\r\n    _;\r\n  }\r\n\r\n  function lock(address to) public onlyOwner {\r\n    require(!mintingFinished);\r\n    locked[to] = true;\r\n  }\r\n  \r\n  function unlock(address to) public onlyOwner {\r\n    locked[to] = false;\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(owner, alienToken.balanceOf(this));\r\n  }\r\n\r\n  function transfer(address _to, uint256 _value) public notLocked returns (bool) {\r\n    return super.transfer(_to, _value); \r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 value) public notLocked returns (bool) {\r\n    return super.transferFrom(from, to, value); \r\n  }\r\n\r\n}\r\n\r\ncontract CommonCrowdsale is Ownable {\r\n\r\n  using SafeMath for uint256;\r\n\r\n  uint public constant PERCENT_RATE = 100;\r\n\r\n  uint public price = 5000000000000000000000;\r\n\r\n  uint public minInvestedLimit = 100000000000000000;\r\n\r\n  uint public maxInvestedLimit = 20000000000000000000;\r\n\r\n  uint public hardcap = 114000000000000000000000;\r\n\r\n  uint public start = 1513342800;\r\n\r\n  uint public invested;\r\n  \r\n  uint public extraTokensPercent;\r\n\r\n  address public wallet;\r\n\r\n  address public directMintAgent;\r\n\r\n  address public bountyTokensWallet;\r\n\r\n  address public foundersTokensWallet;\r\n\r\n  uint public bountyTokensPercent = 5;\r\n\r\n  uint public foundersTokensPercent = 15;\r\n  \r\n  uint public index;\r\n \r\n  bool public isITOFinished;\r\n\r\n  bool public extraTokensTransferred;\r\n  \r\n  address[] public tokenHolders;\r\n  \r\n  mapping (address => uint) public balances;\r\n  \r\n  struct Milestone {\r\n    uint periodInDays;\r\n    uint discount;\r\n  }\r\n\r\n  Milestone[] public milestones;\r\n\r\n  GOToken public token = new GOToken();\r\n\r\n  modifier onlyDirectMintAgentOrOwner() {\r\n    require(directMintAgent == msg.sender || owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier saleIsOn(uint value) {\r\n    require(value >= minInvestedLimit && now >= start && now < end() && invested < hardcap);\r\n    _;\r\n  }\r\n\r\n  function tokenHoldersCount() public view returns(uint) {\r\n    return tokenHolders.length;\r\n  }\r\n\r\n  function setDirectMintAgent(address newDirectMintAgent) public onlyOwner {\r\n    directMintAgent = newDirectMintAgent;\r\n  }\r\n\r\n  function setHardcap(uint newHardcap) public onlyOwner { \r\n    hardcap = newHardcap;\r\n  }\r\n \r\n  function setStart(uint newStart) public onlyOwner { \r\n    start = newStart;\r\n  }\r\n\r\n  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner { \r\n    bountyTokensPercent = newBountyTokensPercent;\r\n  }\r\n\r\n  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner { \r\n    foundersTokensPercent = newFoundersTokensPercent;\r\n  }\r\n\r\n  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner { \r\n    bountyTokensWallet = newBountyTokensWallet;\r\n  }\r\n\r\n  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner { \r\n    foundersTokensWallet = newFoundersTokensWallet;\r\n  }\r\n\r\n  function setWallet(address newWallet) public onlyOwner { \r\n    wallet = newWallet;\r\n  }\r\n\r\n  function setPrice(uint newPrice) public onlyOwner {\r\n    price = newPrice;\r\n  }\r\n\r\n  function setMaxInvestedLimit(uint naxMinInvestedLimit) public onlyOwner {\r\n    maxInvestedLimit = naxMinInvestedLimit;\r\n  }\r\n\r\n  function setMinInvestedLimit(uint newMinInvestedLimit) public onlyOwner {\r\n    minInvestedLimit = newMinInvestedLimit;\r\n  }\r\n \r\n  function milestonesCount() public view returns(uint) {\r\n    return milestones.length;\r\n  }\r\n\r\n  function end() public constant returns(uint) {\r\n    uint last = start;\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      Milestone storage milestone = milestones[i];\r\n      last += milestone.periodInDays * 1 days;\r\n    }\r\n    return last;\r\n  }\r\n\r\n  function addMilestone(uint periodInDays, uint discount) public onlyOwner {\r\n    milestones.push(Milestone(periodInDays, discount));\r\n  }\r\n\r\n  function setExtraTokensPercent(uint newExtraTokensPercent) public onlyOwner {\r\n    extraTokensPercent = newExtraTokensPercent;\r\n  }\r\n\r\n  function payExtraTokens(uint count) public onlyOwner {\r\n    require(isITOFinished && !extraTokensTransferred);\r\n    if(extraTokensPercent == 0) {\r\n      extraTokensTransferred = true;\r\n    } else {\r\n      for(uint i = 0; index < tokenHolders.length && i < count; i++) {\r\n        address tokenHolder = tokenHolders[index];\r\n        uint value = token.balanceOf(tokenHolder);\r\n        if(value != 0) {\r\n          uint targetValue = value.mul(extraTokensPercent).div(PERCENT_RATE);\r\n          token.mint(this, targetValue);\r\n          token.transfer(tokenHolder, targetValue);\r\n        }\r\n        index++;\r\n      }\r\n      if(index == tokenHolders.length) extraTokensTransferred = true;\r\n    }\r\n  }\r\n\r\n  function finishITO() public onlyOwner {\r\n    require(!isITOFinished);\r\n      \r\n    uint extendedTokensPercent = bountyTokensPercent.add(foundersTokensPercent);      \r\n    uint totalSupply = token.totalSupply();\r\n    uint allTokens = totalSupply.mul(PERCENT_RATE).div(PERCENT_RATE.sub(extendedTokensPercent));\r\n\r\n    uint bountyTokens = allTokens.mul(bountyTokensPercent).div(PERCENT_RATE);\r\n    mint(bountyTokensWallet, bountyTokens);\r\n\r\n    uint foundersTokens = allTokens.mul(foundersTokensPercent).div(PERCENT_RATE);\r\n    mint(foundersTokensWallet, foundersTokens);\r\n\r\n    isITOFinished = true;\r\n  }\r\n\r\n  function tokenOperationsFinished() public onlyOwner {\r\n    require(extraTokensTransferred);\r\n    token.finishMinting();\r\n    token.transferOwnership(owner);\r\n  }\r\n\r\n  function getDiscount() public view returns(uint) {\r\n    uint prevTimeLimit = start;\r\n    for (uint i = 0; i < milestones.length; i++) {\r\n      Milestone storage milestone = milestones[i];\r\n      prevTimeLimit += milestone.periodInDays * 1 days;\r\n      if (now < prevTimeLimit)\r\n        return milestone.discount;\r\n    }\r\n    revert();\r\n  }\r\n\r\n  function mint(address to, uint value) internal {\r\n    if(token.balanceOf(to) == 0) tokenHolders.push(to);\r\n    token.mint(to, value);\r\n  }\r\n\r\n  function calculateAndTransferTokens(address to, uint investedInWei) internal {\r\n    invested = invested.add(msg.value);\r\n    uint tokens = investedInWei.mul(price.mul(PERCENT_RATE)).div(PERCENT_RATE.sub(getDiscount())).div(1 ether);\r\n    mint(to, tokens);\r\n    balances[to] = balances[to].add(investedInWei);\r\n    if(balances[to] >= maxInvestedLimit) token.lock(to);\r\n  }\r\n\r\n  function directMint(address to, uint investedWei) public onlyDirectMintAgentOrOwner saleIsOn(investedWei) {\r\n    calculateAndTransferTokens(to, investedWei);\r\n  }\r\n\r\n  function createTokens() public payable saleIsOn(msg.value) {\r\n    require(!isITOFinished);\r\n    wallet.transfer(msg.value);\r\n    calculateAndTransferTokens(msg.sender, msg.value);\r\n  }\r\n\r\n  function() external payable {\r\n    createTokens();\r\n  }\r\n\r\n  function retrieveTokens(address anotherToken) public onlyOwner {\r\n    ERC20 alienToken = ERC20(anotherToken);\r\n    alienToken.transfer(wallet, alienToken.balanceOf(this));\r\n  }\r\n  \r\n  function unlock(address to) public onlyOwner {\r\n    token.unlock(to);\r\n  }\r\n\r\n}\r\n\r\ncontract GOTokenCrowdsale is CommonCrowdsale {\r\n\r\n  function GOTokenCrowdsale() public {\r\n    hardcap = 54000000000000000000000;\r\n    price = 50000000000000000000000;\r\n    start = 1530230400;\r\n    wallet = 0x727436A7E7B836f3AB8d1caF475fAfEaeb25Ff27;\r\n    bountyTokensWallet = 0x38e4f2A7625A391bFE59D6ac74b26D8556d6361E;\r\n    foundersTokensWallet = 0x76A13d4F571107f363FF253E80706DAcE889aDED;\r\n    addMilestone(7, 30);\r\n    addMilestone(21, 15);\r\n    addMilestone(56, 0);\r\n  }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"anotherToken\",\"type\":\"address\"}],\"name\":\"retrieveTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}]","ContractName":"GOToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9fba6f2227e7cf86da171b496b0d9f77a25881c92b661d0490505f489f03b06d"}]