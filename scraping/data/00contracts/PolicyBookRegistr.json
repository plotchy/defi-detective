[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/PolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"./interfaces/IPolicyBook.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyBookFacade.sol\\\";\\r\\nimport \\\"./interfaces/IPolicyBookRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IContractsRegistry.sol\\\";\\r\\n\\r\\nimport \\\"./abstract/AbstractDependant.sol\\\";\\r\\n\\r\\ncontract PolicyBookRegistry is IPolicyBookRegistry, AbstractDependant {\\r\\n    using Math for uint256;\\r\\n    using SafeMath for uint256;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n\\r\\n    address public policyBookFabricAddress;\\r\\n    address public policyBookAdminAddress;\\r\\n\\r\\n    // insured contract address => proxy address\\r\\n    mapping(address => address) public override policyBooksByInsuredAddress;\\r\\n    mapping(address => address) public override policyBookFacades;\\r\\n\\r\\n    EnumerableSet.AddressSet internal _policyBooks;\\r\\n    mapping(IPolicyBookFabric.ContractType => EnumerableSet.AddressSet)\\r\\n        internal _policyBooksByType;\\r\\n\\r\\n    EnumerableSet.AddressSet internal _whitelistedPolicyBooks;\\r\\n    mapping(IPolicyBookFabric.ContractType => EnumerableSet.AddressSet)\\r\\n        internal _whitelistedPolicyBooksByType;\\r\\n\\r\\n    event Added(address insured, address at);\\r\\n\\r\\n    modifier onlyPolicyBookFabric() {\\r\\n        require(\\r\\n            msg.sender == policyBookFabricAddress,\\r\\n            \\\"PolicyBookRegistry: Not a PolicyBookFabric\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyPolicyBookAdmin() {\\r\\n        require(msg.sender == policyBookAdminAddress, \\\"PolicyBookRegistry: Not a PolicyBookAdmin\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setDependencies(IContractsRegistry _contractsRegistry)\\r\\n        external\\r\\n        override\\r\\n        onlyInjectorOrZero\\r\\n    {\\r\\n        policyBookFabricAddress = _contractsRegistry.getPolicyBookFabricContract();\\r\\n        policyBookAdminAddress = _contractsRegistry.getPolicyBookAdminContract();\\r\\n    }\\r\\n\\r\\n    function add(\\r\\n        address insuredContract,\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        address policyBook,\\r\\n        address facadeAddress\\r\\n    ) external override onlyPolicyBookFabric {\\r\\n        require(policyBook != address(0), \\\"PolicyBookRegistry: No PB at address zero\\\");\\r\\n        require(\\r\\n            policyBooksByInsuredAddress[insuredContract] == address(0),\\r\\n            \\\"PolicyBookRegistry: PolicyBook for the contract is already created\\\"\\r\\n        );\\r\\n\\r\\n        policyBooksByInsuredAddress[insuredContract] = policyBook;\\r\\n        policyBookFacades[facadeAddress] = policyBook;\\r\\n\\r\\n        _policyBooks.add(policyBook);\\r\\n        _policyBooksByType[contractType].add(policyBook);\\r\\n\\r\\n        emit Added(insuredContract, policyBook);\\r\\n    }\\r\\n\\r\\n    function whitelist(address policyBookAddress, bool whitelisted)\\r\\n        external\\r\\n        override\\r\\n        onlyPolicyBookAdmin\\r\\n    {\\r\\n        IPolicyBookFabric.ContractType contractType =\\r\\n            IPolicyBook(policyBookAddress).contractType();\\r\\n\\r\\n        if (whitelisted) {\\r\\n            _whitelistedPolicyBooks.add(policyBookAddress);\\r\\n            _whitelistedPolicyBooksByType[contractType].add(policyBookAddress);\\r\\n        } else {\\r\\n            _whitelistedPolicyBooks.remove(policyBookAddress);\\r\\n            _whitelistedPolicyBooksByType[contractType].remove(policyBookAddress);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getPoliciesPrices(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external view override returns (uint256[] memory _durations, uint256[] memory _allowances) {\\r\\n        require(\\r\\n            policyBooks.length == epochsNumbers.length &&\\r\\n                policyBooks.length == coversTokens.length,\\r\\n            \\\"PolicyBookRegistry: Lengths mismatch\\\"\\r\\n        );\\r\\n\\r\\n        _durations = new uint256[](policyBooks.length);\\r\\n        _allowances = new uint256[](policyBooks.length);\\r\\n\\r\\n        for (uint256 i = 0; i < policyBooks.length; i++) {\\r\\n            require(\\r\\n                isPolicyBook(policyBooks[i]) && !isUserLeveragePool(policyBooks[i]),\\r\\n                \\\"PolicyBookRegistry: Not a PolicyBook\\\"\\r\\n            );\\r\\n\\r\\n            (_durations[i], _allowances[i], ) = IPolicyBookFacade(\\r\\n                IPolicyBook(policyBooks[i]).policyBookFacade()\\r\\n            )\\r\\n                .getPolicyPrice(epochsNumbers[i], coversTokens[i], msg.sender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function buyPolicyBatch(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external override {\\r\\n        require(\\r\\n            policyBooks.length == epochsNumbers.length &&\\r\\n                policyBooks.length == coversTokens.length,\\r\\n            \\\"PolicyBookRegistry: Lengths mismatch\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < policyBooks.length; i++) {\\r\\n            require(\\r\\n                isPolicyBook(policyBooks[i]) && !isUserLeveragePool(policyBooks[i]),\\r\\n                \\\"PolicyBookRegistry: Not a PolicyBook\\\"\\r\\n            );\\r\\n\\r\\n            IPolicyBook(policyBooks[i]).policyBookFacade().buyPolicyFor(\\r\\n                msg.sender,\\r\\n                epochsNumbers[i],\\r\\n                coversTokens[i]\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isPolicyBook(address policyBook) public view override returns (bool) {\\r\\n        return _policyBooks.contains(policyBook);\\r\\n    }\\r\\n\\r\\n    function isPolicyBookFacade(address _facadeAddress) public view override returns (bool) {\\r\\n        address _policyBookAddress = policyBookFacades[_facadeAddress];\\r\\n        return isPolicyBook(_policyBookAddress);\\r\\n    }\\r\\n\\r\\n    function isUserLeveragePool(address policyBookAddress) public view override returns (bool) {\\r\\n        bool _isLeveragePool;\\r\\n        if (_policyBooks.contains(policyBookAddress)) {\\r\\n            _isLeveragePool = (IPolicyBook(policyBookAddress).contractType() ==\\r\\n                IPolicyBookFabric.ContractType.VARIOUS);\\r\\n        }\\r\\n        return _isLeveragePool;\\r\\n    }\\r\\n\\r\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _policyBooksByType[contractType].length();\\r\\n    }\\r\\n\\r\\n    function count() external view override returns (uint256) {\\r\\n        return _policyBooks.length();\\r\\n    }\\r\\n\\r\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return _whitelistedPolicyBooksByType[contractType].length();\\r\\n    }\\r\\n\\r\\n    function countWhitelisted() external view override returns (uint256) {\\r\\n        return _whitelistedPolicyBooks.length();\\r\\n    }\\r\\n\\r\\n    /// @notice use with countByType()\\r\\n    function listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) public view override returns (address[] memory _policyBooksArr) {\\r\\n        return _listByType(contractType, offset, limit, _policyBooksByType);\\r\\n    }\\r\\n\\r\\n    /// @notice use with count()\\r\\n    function list(uint256 offset, uint256 limit)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr)\\r\\n    {\\r\\n        return _list(offset, limit, _policyBooks);\\r\\n    }\\r\\n\\r\\n    /// @notice use with countByTypeWhitelisted()\\r\\n    function listByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) public view override returns (address[] memory _policyBooksArr) {\\r\\n        return _listByType(contractType, offset, limit, _whitelistedPolicyBooksByType);\\r\\n    }\\r\\n\\r\\n    /// @notice use with countWhitelisted()\\r\\n    function listWhitelisted(uint256 offset, uint256 limit)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr)\\r\\n    {\\r\\n        return _list(offset, limit, _whitelistedPolicyBooks);\\r\\n    }\\r\\n\\r\\n    function listWithStatsByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _policyBooksArr = listByType(contractType, offset, limit);\\r\\n        _stats = stats(_policyBooksArr);\\r\\n    }\\r\\n\\r\\n    function listWithStats(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _policyBooksArr = list(offset, limit);\\r\\n        _stats = stats(_policyBooksArr);\\r\\n    }\\r\\n\\r\\n    function listWithStatsByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _policyBooksArr = listByTypeWhitelisted(contractType, offset, limit);\\r\\n        _stats = stats(_policyBooksArr);\\r\\n    }\\r\\n\\r\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _policyBooksArr = listWhitelisted(offset, limit);\\r\\n        _stats = stats(_policyBooksArr);\\r\\n    }\\r\\n\\r\\n    function _listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit,\\r\\n        mapping(IPolicyBookFabric.ContractType => EnumerableSet.AddressSet) storage map\\r\\n    ) internal view returns (address[] memory _policyBooksArr) {\\r\\n        uint256 to = (offset.add(limit)).min(map[contractType].length()).max(offset);\\r\\n\\r\\n        _policyBooksArr = new address[](to - offset);\\r\\n\\r\\n        for (uint256 i = offset; i < to; i++) {\\r\\n            _policyBooksArr[i - offset] = map[contractType].at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _list(\\r\\n        uint256 offset,\\r\\n        uint256 limit,\\r\\n        EnumerableSet.AddressSet storage set\\r\\n    ) internal view returns (address[] memory _policyBooksArr) {\\r\\n        uint256 to = (offset.add(limit)).min(set.length()).max(offset);\\r\\n\\r\\n        _policyBooksArr = new address[](to - offset);\\r\\n\\r\\n        for (uint256 i = offset; i < to; i++) {\\r\\n            _policyBooksArr[i - offset] = set.at(i);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function stats(address[] memory policyBooks)\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _stats = new PolicyBookStats[](policyBooks.length);\\r\\n\\r\\n        for (uint256 i = 0; i < policyBooks.length; i++) {\\r\\n            address policyBookAddress;\\r\\n            if (isUserLeveragePool(policyBooks[i])) {\\r\\n                policyBookAddress = policyBooks[i];\\r\\n            } else {\\r\\n                policyBookAddress = address(IPolicyBook(policyBooks[i]).policyBookFacade());\\r\\n            }\\r\\n            (\\r\\n                _stats[i].symbol,\\r\\n                _stats[i].insuredContract,\\r\\n                _stats[i].contractType,\\r\\n                _stats[i].whitelisted\\r\\n            ) = IPolicyBookFacade(policyBookAddress).info();\\r\\n\\r\\n            (\\r\\n                _stats[i].maxCapacity,\\r\\n                ,\\r\\n                _stats[i].totalSTBLLiquidity,\\r\\n                _stats[i].totalLeveragedLiquidity,\\r\\n                _stats[i].stakedSTBL,\\r\\n                _stats[i].APY,\\r\\n                _stats[i].annualInsuranceCost,\\r\\n                _stats[i].bmiXRatio\\r\\n            ) = IPolicyBook(policyBooks[i]).numberStats();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function policyBookFor(address insuredContract) external view override returns (address) {\\r\\n        return policyBooksByInsuredAddress[insuredContract];\\r\\n    }\\r\\n\\r\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (PolicyBookStats[] memory _stats)\\r\\n    {\\r\\n        _stats = new PolicyBookStats[](insuredContracts.length);\\r\\n\\r\\n        for (uint256 i = 0; i < insuredContracts.length; i++) {\\r\\n            (\\r\\n                _stats[i].symbol,\\r\\n                _stats[i].insuredContract,\\r\\n                _stats[i].contractType,\\r\\n                _stats[i].whitelisted\\r\\n            ) = IPolicyBookFacade(\\r\\n                IPolicyBook(policyBooksByInsuredAddress[insuredContracts[i]]).policyBookFacade()\\r\\n            )\\r\\n                .info();\\r\\n\\r\\n            (\\r\\n                _stats[i].maxCapacity,\\r\\n                ,\\r\\n                _stats[i].totalSTBLLiquidity,\\r\\n                _stats[i].totalLeveragedLiquidity,\\r\\n                _stats[i].stakedSTBL,\\r\\n                _stats[i].APY,\\r\\n                _stats[i].annualInsuranceCost,\\r\\n                _stats[i].bmiXRatio\\r\\n            ) = IPolicyBook(policyBooksByInsuredAddress[insuredContracts[i]]).numberStats();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IPolicyBookRegistry {\\r\\n    struct PolicyBookStats {\\r\\n        string symbol;\\r\\n        address insuredContract;\\r\\n        IPolicyBookFabric.ContractType contractType;\\r\\n        uint256 maxCapacity;\\r\\n        uint256 totalSTBLLiquidity;\\r\\n        uint256 totalLeveragedLiquidity;\\r\\n        uint256 stakedSTBL;\\r\\n        uint256 APY;\\r\\n        uint256 annualInsuranceCost;\\r\\n        uint256 bmiXRatio;\\r\\n        bool whitelisted;\\r\\n    }\\r\\n\\r\\n    function policyBooksByInsuredAddress(address insuredContract) external view returns (address);\\r\\n\\r\\n    function policyBookFacades(address facadeAddress) external view returns (address);\\r\\n\\r\\n    /// @notice Adds PolicyBook to registry, access: PolicyFabric\\r\\n    function add(\\r\\n        address insuredContract,\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        address policyBook,\\r\\n        address facadeAddress\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(address policyBookAddress, bool whitelisted) external;\\r\\n\\r\\n    /// @notice returns required allowances for the policybooks\\r\\n    function getPoliciesPrices(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external view returns (uint256[] memory _durations, uint256[] memory _allowances);\\r\\n\\r\\n    /// @notice Buys a batch of policies\\r\\n    function buyPolicyBatch(\\r\\n        address[] calldata policyBooks,\\r\\n        uint256[] calldata epochsNumbers,\\r\\n        uint256[] calldata coversTokens\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Checks if provided address is a PolicyBook\\r\\n    function isPolicyBook(address policyBook) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a policyBookFacade\\r\\n    function isPolicyBookFacade(address _facadeAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Checks if provided address is a user leverage pool\\r\\n    function isUserLeveragePool(address policyBookAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks with certain contract type\\r\\n    function countByType(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice Returns number of registered PolicyBooks, access: ANY\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function countByTypeWhitelisted(IPolicyBookFabric.ContractType contractType)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    function countWhitelisted() external view returns (uint256);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with certain contract type, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses with certain contract type\\r\\n    function listByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks, access: ANY\\r\\n    /// @return _policyBooksArr is array of registered PolicyBook addresses\\r\\n    function list(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    function listWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats and certain contract type, access: ANY\\r\\n    function listWithStatsByType(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Listing registered PolicyBooks with stats, access: ANY\\r\\n    function listWithStats(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsByTypeWhitelisted(\\r\\n        IPolicyBookFabric.ContractType contractType,\\r\\n        uint256 offset,\\r\\n        uint256 limit\\r\\n    ) external view returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    function listWithStatsWhitelisted(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _policyBooksArr, PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param policyBooks is list of PolicyBooks addresses\\r\\n    function stats(address[] calldata policyBooks)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n\\r\\n    /// @notice Return existing Policy Book contract, access: ANY\\r\\n    /// @param insuredContract is contract address to lookup for created IPolicyBook\\r\\n    function policyBookFor(address insuredContract) external view returns (address);\\r\\n\\r\\n    /// @notice Getting stats from policy books, access: ANY\\r\\n    /// @param insuredContracts is list of insuredContracts in registry\\r\\n    function statsByInsuredContracts(address[] calldata insuredContracts)\\r\\n        external\\r\\n        view\\r\\n        returns (PolicyBookStats[] memory _stats);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFacade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\nimport \\\"./IPolicyBook.sol\\\";\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./ILeveragePortfolio.sol\\\";\\r\\n\\r\\ninterface IPolicyBookFacade {\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicy(uint256 _epochsNumber, uint256 _coverTokens) external;\\r\\n\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    function buyPolicyFor(\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens\\r\\n    ) external;\\r\\n\\r\\n    function policyBook() external view returns (IPolicyBook);\\r\\n\\r\\n    function userLiquidity(address account) external view returns (uint256);\\r\\n\\r\\n    /// @notice forces an update of RewardsGenerator multiplier\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n\\r\\n    /// @notice view function to get precise policy price\\r\\n    /// @param _epochsNumber is number of epochs to cover\\r\\n    /// @param _coverTokens is number of tokens to cover\\r\\n    /// @param _buyer address of the user who buy the policy\\r\\n    /// @return totalSeconds is number of seconds to cover\\r\\n    /// @return totalPrice is the policy price which will pay by the buyer\\r\\n    function getPolicyPrice(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _buyer\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 totalSeconds,\\r\\n            uint256 totalPrice,\\r\\n            uint256 pricePercentage\\r\\n        );\\r\\n\\r\\n    function secondsToEndCurrentEpoch() external view returns (uint256);\\r\\n\\r\\n    /// @notice virtual funds deployed by reinsurance pool\\r\\n    function VUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by reinsurance pool\\r\\n    function LUreinsurnacePool() external view returns (uint256);\\r\\n\\r\\n    /// @notice leverage funds deployed by user leverage pool\\r\\n    function LUuserLeveragePool(address userLeveragePool) external view returns (uint256);\\r\\n\\r\\n    /// @notice total leverage funds deployed to the pool sum of (VUreinsurnacePool,LUreinsurnacePool,LUuserLeveragePool)\\r\\n    function totalLeveragedLiquidity() external view returns (uint256);\\r\\n\\r\\n    function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    function rebalancingThreshold() external view returns (uint256);\\r\\n\\r\\n    function safePricingModel() external view returns (bool);\\r\\n\\r\\n    /// @notice policyBookFacade initializer\\r\\n    /// @param pbProxy polciybook address upgreadable cotnract.\\r\\n    function __PolicyBookFacade_init(\\r\\n        address pbProxy,\\r\\n        address liquidityProvider,\\r\\n        uint256 initialDeposit\\r\\n    ) external;\\r\\n\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributor(\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @param _buyer who is buying the coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicyFromDistributorFor(\\r\\n        address _buyer,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        address _distributor\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidity(uint256 _liquidityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _user the one taht add liquidity\\r\\n    /// @param _liquidityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFromDistributorFor(address _user, uint256 _liquidityAmount) external;\\r\\n\\r\\n    function addLiquidityAndStakeFor(\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin and stake it,\\r\\n    /// @dev access: ANY\\r\\n    function addLiquidityAndStake(uint256 _liquidityAmount, uint256 _stakeSTBLAmount) external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity() external;\\r\\n\\r\\n    /// @notice deploy leverage funds (RP lStable, ULP lStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added or substracted from the total liquidity\\r\\n    /// @param leveragePool whether user leverage or reinsurance leverage\\r\\n    function deployLeverageFundsAfterRebalance(\\r\\n        uint256 deployedAmount,\\r\\n        ILeveragePortfolio.LeveragePortfolio leveragePool\\r\\n    ) external;\\r\\n\\r\\n    /// @notice deploy virtual funds (RP vStable)\\r\\n    /// @param  deployedAmount uint256 the deployed amount to be added to the liquidity\\r\\n    function deployVirtualFundsAfterRebalance(uint256 deployedAmount) external;\\r\\n\\r\\n    ///@dev in case ur changed of the pools by commit a claim or policy expired\\r\\n    function reevaluateProvidedLeverageStable() external;\\r\\n\\r\\n    /// @notice set the MPL for the user leverage and the reinsurance leverage\\r\\n    /// @param _userLeverageMPL uint256 value of the user leverage MPL\\r\\n    /// @param _reinsuranceLeverageMPL uint256  value of the reinsurance leverage MPL\\r\\n    function setMPLs(uint256 _userLeverageMPL, uint256 _reinsuranceLeverageMPL) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _newRebalancingThreshold uint256 rebalancing threshhold value\\r\\n    function setRebalancingThreshold(uint256 _newRebalancingThreshold) external;\\r\\n\\r\\n    /// @notice sets the rebalancing threshold value\\r\\n    /// @param _safePricingModel bool is pricing model safe (true) or not (false)\\r\\n    function setSafePricingModel(bool _safePricingModel) external;\\r\\n\\r\\n    /// @notice returns how many BMI tokens needs to approve in order to submit a claim\\r\\n    function getClaimApprovalAmount(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice upserts a withdraw request\\r\\n    /// @dev prevents adding a request if an already pending or ready request is open.\\r\\n    /// @param _tokensToWithdraw uint256 amount of tokens to withdraw\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw) external;\\r\\n\\r\\n    function listUserLeveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _userLeveragePools);\\r\\n\\r\\n    function countUserLeveragePools() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting info, access: ANY\\r\\n    /// @return _symbol is the symbol of PolicyBook (bmiXCover)\\r\\n    /// @return _insuredContract is an addres of insured contract\\r\\n    /// @return _contractType is a type of insured contract\\r\\n    /// @return _whitelisted is a state of whitelisting\\r\\n    function info()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory _symbol,\\r\\n            address _insuredContract,\\r\\n            IPolicyBookFabric.ContractType _contractType,\\r\\n            bool _whitelisted\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBookFabric.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface IPolicyBookFabric {\\r\\n    enum ContractType {CONTRACT, STABLECOIN, SERVICE, EXCHANGE, VARIOUS}\\r\\n\\r\\n    /// @notice Create new Policy Book contract, access: ANY\\r\\n    /// @param _contract is Contract to create policy book for\\r\\n    /// @param _contractType is Contract to create policy book for\\r\\n    /// @param _description is bmiXCover token desription for this policy book\\r\\n    /// @param _projectSymbol replaces x in bmiXCover token symbol\\r\\n    /// @param _initialDeposit is an amount user deposits on creation (addLiquidity())\\r\\n    /// @return _policyBook is address of created contract\\r\\n    function create(\\r\\n        address _contract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol,\\r\\n        uint256 _initialDeposit,\\r\\n        address _shieldMiningToken\\r\\n    ) external returns (address);\\r\\n\\r\\n    function createLeveragePools(\\r\\n        address _insuranceContract,\\r\\n        ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IPolicyBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\nimport \\\"./IClaimingRegistry.sol\\\";\\r\\nimport \\\"./IPolicyBookFacade.sol\\\";\\r\\n\\r\\ninterface IPolicyBook {\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    struct PolicyHolder {\\r\\n        uint256 coverTokens;\\r\\n        uint256 startEpochNumber;\\r\\n        uint256 endEpochNumber;\\r\\n        uint256 paid;\\r\\n        uint256 reinsurancePrice;\\r\\n    }\\r\\n\\r\\n    struct WithdrawalInfo {\\r\\n        uint256 withdrawalAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool withdrawalAllowed;\\r\\n    }\\r\\n\\r\\n    struct BuyPolicyParameters {\\r\\n        address buyer;\\r\\n        address holder;\\r\\n        uint256 epochsNumber;\\r\\n        uint256 coverTokens;\\r\\n        uint256 distributorFee;\\r\\n        address distributor;\\r\\n    }\\r\\n\\r\\n    function policyHolders(address _holder)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256,\\r\\n            uint256\\r\\n        );\\r\\n\\r\\n    function policyBookFacade() external view returns (IPolicyBookFacade);\\r\\n\\r\\n    function setPolicyBookFacade(address _policyBookFacade) external;\\r\\n\\r\\n    function EPOCH_DURATION() external view returns (uint256);\\r\\n\\r\\n    function stblDecimals() external view returns (uint256);\\r\\n\\r\\n    function READY_TO_WITHDRAW_PERIOD() external view returns (uint256);\\r\\n\\r\\n    function whitelisted() external view returns (bool);\\r\\n\\r\\n    function epochStartTime() external view returns (uint256);\\r\\n\\r\\n    // @TODO: should we let DAO to change contract address?\\r\\n    /// @notice Returns address of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _contract is address of covered contract\\r\\n    function insuranceContractAddress() external view returns (address _contract);\\r\\n\\r\\n    /// @notice Returns type of contract this PolicyBook covers, access: ANY\\r\\n    /// @return _type is type of contract\\r\\n    function contractType() external view returns (IPolicyBookFabric.ContractType _type);\\r\\n\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    function totalCoverTokens() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for user leverage pool\\r\\n    // function userleveragedMPL() external view returns (uint256);\\r\\n\\r\\n    // /// @notice return MPL for reinsurance pool\\r\\n    // function reinsurancePoolMPL() external view returns (uint256);\\r\\n\\r\\n    // function bmiRewardMultiplier() external view returns (uint256);\\r\\n\\r\\n    function withdrawalsInfo(address _userAddr)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _withdrawalAmount,\\r\\n            uint256 _readyToWithdrawDate,\\r\\n            bool _withdrawalAllowed\\r\\n        );\\r\\n\\r\\n    function __PolicyBook_init(\\r\\n        address _insuranceContract,\\r\\n        IPolicyBookFabric.ContractType _contractType,\\r\\n        string calldata _description,\\r\\n        string calldata _projectSymbol\\r\\n    ) external;\\r\\n\\r\\n    function whitelist(bool _whitelisted) external;\\r\\n\\r\\n    function getEpoch(uint256 time) external view returns (uint256);\\r\\n\\r\\n    /// @notice get STBL equivalent\\r\\n    function convertBMIXToSTBL(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice get BMIX equivalent\\r\\n    function convertSTBLToBMIX(uint256 _amount) external view returns (uint256);\\r\\n\\r\\n    /// @notice submits new claim of the policy book\\r\\n    function submitClaimAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice submits new appeal claim of the policy book\\r\\n    function submitAppealAndInitializeVoting(string calldata evidenceURI) external;\\r\\n\\r\\n    /// @notice updates info on claim when not accepted\\r\\n    function commitClaim(\\r\\n        address claimer,\\r\\n        uint256 claimEndTime,\\r\\n        IClaimingRegistry.ClaimStatus status\\r\\n    ) external;\\r\\n\\r\\n    /// @notice withdraw the claim after requested\\r\\n    function commitWithdrawnClaim(address claimer) external;\\r\\n\\r\\n    /// @notice function to get precise current cover and liquidity\\r\\n    function getNewCoverAndLiquidity()\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 newTotalCoverTokens, uint256 newTotalLiquidity);\\r\\n\\r\\n    /// @notice Let user to buy policy by supplying stable coin, access: ANY\\r\\n    /// @param _buyer who is transferring funds\\r\\n    /// @param _holder who owns coverage\\r\\n    /// @param _epochsNumber period policy will cover\\r\\n    /// @param _coverTokens amount paid for the coverage\\r\\n    /// @param _distributorFee distributor fee (commission). It can't be greater than PROTOCOL_PERCENTAGE\\r\\n    /// @param _distributor if it was sold buy a whitelisted distributor, it is distributor address to receive fee (commission)\\r\\n    function buyPolicy(\\r\\n        address _buyer,\\r\\n        address _holder,\\r\\n        uint256 _epochsNumber,\\r\\n        uint256 _coverTokens,\\r\\n        uint256 _distributorFee,\\r\\n        address _distributor\\r\\n    ) external returns (uint256, uint256);\\r\\n\\r\\n    /// @notice end active policy from ClaimingRegistry in case of a new bought policy\\r\\n    function endActivePolicy(address _holder) external;\\r\\n\\r\\n    function updateEpochsInfo() external;\\r\\n\\r\\n    /// @notice Let eligible contracts add liqiudity for another user by supplying stable coin\\r\\n    /// @param _liquidityHolderAddr is address of address to assign cover\\r\\n    /// @param _liqudityAmount is amount of stable coin tokens to secure\\r\\n    function addLiquidityFor(address _liquidityHolderAddr, uint256 _liqudityAmount) external;\\r\\n\\r\\n    /// @notice Let user to add liquidity by supplying stable coin, access: ANY\\r\\n    /// @param _liquidityBuyerAddr address the one that transfer funds\\r\\n    /// @param _liquidityHolderAddr address the one that owns liquidity\\r\\n    /// @param _liquidityAmount uint256 amount to be added on behalf the sender\\r\\n    /// @param _stakeSTBLAmount uint256 the staked amount if add liq and stake\\r\\n    function addLiquidity(\\r\\n        address _liquidityBuyerAddr,\\r\\n        address _liquidityHolderAddr,\\r\\n        uint256 _liquidityAmount,\\r\\n        uint256 _stakeSTBLAmount\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function getAvailableBMIXWithdrawableAmount(address _userAddr) external view returns (uint256);\\r\\n\\r\\n    function getWithdrawalStatus(address _userAddr) external view returns (WithdrawalStatus);\\r\\n\\r\\n    function requestWithdrawal(uint256 _tokensToWithdraw, address _user) external;\\r\\n\\r\\n    // function requestWithdrawalWithPermit(\\r\\n    //     uint256 _tokensToWithdraw,\\r\\n    //     uint8 _v,\\r\\n    //     bytes32 _r,\\r\\n    //     bytes32 _s\\r\\n    // ) external;\\r\\n\\r\\n    function unlockTokens() external;\\r\\n\\r\\n    /// @notice Let user to withdraw deposited liqiudity, access: ANY\\r\\n    function withdrawLiquidity(address sender) external returns (uint256);\\r\\n\\r\\n    ///@notice for doing defi hard rebalancing, access: policyBookFacade\\r\\n    function updateLiquidity(uint256 _newLiquidity) external;\\r\\n\\r\\n    function getAPY() external view returns (uint256);\\r\\n\\r\\n    /// @notice Getting user stats, access: ANY\\r\\n    function userStats(address _user) external view returns (PolicyHolder memory);\\r\\n\\r\\n    /// @notice Getting number stats, access: ANY\\r\\n    /// @return _maxCapacities is a max token amount that a user can buy\\r\\n    /// @return _buyPolicyCapacity new capacity which is a max token amount that a user can buy including withdraw amount\\r\\n    /// @return _totalSTBLLiquidity is PolicyBook's liquidity\\r\\n    /// @return _totalLeveragedLiquidity is PolicyBook's leveraged liquidity\\r\\n    /// @return _stakedSTBL is how much stable coin are staked on this PolicyBook\\r\\n    /// @return _annualProfitYields is its APY\\r\\n    /// @return _annualInsuranceCost is percentage of cover tokens that is required to be paid for 1 year of insurance\\r\\n    function numberStats()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 _maxCapacities,\\r\\n            uint256 _buyPolicyCapacity,\\r\\n            uint256 _totalSTBLLiquidity,\\r\\n            uint256 _totalLeveragedLiquidity,\\r\\n            uint256 _stakedSTBL,\\r\\n            uint256 _annualProfitYields,\\r\\n            uint256 _annualInsuranceCost,\\r\\n            uint256 _bmiXRatio\\r\\n        );\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/ILeveragePortfolio.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\n\\r\\ninterface ILeveragePortfolio {\\r\\n    enum LeveragePortfolio {USERLEVERAGEPOOL, REINSURANCEPOOL}\\r\\n    struct LevFundsFactors {\\r\\n        uint256 netMPL;\\r\\n        uint256 netMPLn;\\r\\n        address policyBookAddr;\\r\\n    }\\r\\n\\r\\n    function targetUR() external view returns (uint256);\\r\\n\\r\\n    function d_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function a_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    function max_ProtocolConstant() external view returns (uint256);\\r\\n\\r\\n    /// @notice deploy lStable from user leverage pool or reinsurance pool using 2 formulas: access by policybook.\\r\\n    /// @param leveragePoolType LeveragePortfolio is determine the pool which call the function\\r\\n    function deployLeverageStableToCoveragePools(LeveragePortfolio leveragePoolType)\\r\\n        external\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice deploy the vStable from RP in v2 and for next versions it will be from RP and LP : access by policybook.\\r\\n    function deployVirtualStableToCoveragePools() external returns (uint256);\\r\\n\\r\\n    /// @notice set the threshold % for re-evaluation of the lStable provided across all Coverage pools : access by owner\\r\\n    /// @param threshold uint256 is the reevaluatation threshold\\r\\n    function setRebalancingThreshold(uint256 threshold) external;\\r\\n\\r\\n    /// @notice set the protocol constant : access by owner\\r\\n    /// @param _targetUR uint256 target utitlization ration\\r\\n    /// @param _d_ProtocolConstant uint256 D protocol constant\\r\\n    /// @param  _a1_ProtocolConstant uint256 A1 protocol constant\\r\\n    /// @param _max_ProtocolConstant uint256 the max % included\\r\\n    function setProtocolConstant(\\r\\n        uint256 _targetUR,\\r\\n        uint256 _d_ProtocolConstant,\\r\\n        uint256 _a1_ProtocolConstant,\\r\\n        uint256 _max_ProtocolConstant\\r\\n    ) external;\\r\\n\\r\\n    /// @notice calc M factor by formual M = min( abs((1/ (Tur-UR))*d) /a, max)\\r\\n    /// @param poolUR uint256 utitilization ratio for a coverage pool\\r\\n    /// @return uint256 M facotr\\r\\n    //function calcM(uint256 poolUR) external returns (uint256);\\r\\n\\r\\n    /// @return uint256 the amount of vStable stored in the pool\\r\\n    function totalLiquidity() external view returns (uint256);\\r\\n\\r\\n    /// @notice add the portion of 80% of premium to user leverage pool where the leverage provide lstable : access policybook\\r\\n    /// add the 20% of premium + portion of 80% of premium where reisnurance pool participate in coverage pools (vStable)  : access policybook\\r\\n    /// @param epochsNumber uint256 the number of epochs which the policy holder will pay a premium for\\r\\n    /// @param  premiumAmount uint256 the premium amount which is a portion of 80% of the premium\\r\\n    function addPolicyPremium(uint256 epochsNumber, uint256 premiumAmount) external;\\r\\n\\r\\n    /// @notice Used to get a list of coverage pools which get leveraged , use with count()\\r\\n    /// @return _coveragePools a list containing policybook addresses\\r\\n    function listleveragedCoveragePools(uint256 offset, uint256 limit)\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory _coveragePools);\\r\\n\\r\\n    /// @notice get count of coverage pools which get leveraged\\r\\n    function countleveragedCoveragePools() external view returns (uint256);\\r\\n\\r\\n    function updateLiquidity(uint256 _lostLiquidity) external;\\r\\n\\r\\n    function forceUpdateBMICoverStakingRewardMultiplier() external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IContractsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\ninterface IContractsRegistry {\\r\\n    function getAMMRouterContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToETHPairContract() external view returns (address);\\r\\n\\r\\n    function getAMMBMIToUSDTPairContract() external view returns (address);\\r\\n\\r\\n    function getSushiSwapMasterChefV2Contract() external view returns (address);\\r\\n\\r\\n    function getWrappedTokenContract() external view returns (address);\\r\\n\\r\\n    function getUSDTContract() external view returns (address);\\r\\n\\r\\n    function getBMIContract() external view returns (address);\\r\\n\\r\\n    function getPriceFeedContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookFabricContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingContract() external view returns (address);\\r\\n\\r\\n    function getBMICoverStakingViewContract() external view returns (address);\\r\\n\\r\\n    function getBMITreasury() external view returns (address);\\r\\n\\r\\n    function getRewardsGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getBMIUtilityNFTContract() external view returns (address);\\r\\n\\r\\n    function getNFTStakingContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityBridgeContract() external view returns (address);\\r\\n\\r\\n    function getClaimingRegistryContract() external view returns (address);\\r\\n\\r\\n    function getPolicyRegistryContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityRegistryContract() external view returns (address);\\r\\n\\r\\n    function getClaimVotingContract() external view returns (address);\\r\\n\\r\\n    function getReinsurancePoolContract() external view returns (address);\\r\\n\\r\\n    function getLeveragePortfolioViewContract() external view returns (address);\\r\\n\\r\\n    function getCapitalPoolContract() external view returns (address);\\r\\n\\r\\n    function getPolicyBookAdminContract() external view returns (address);\\r\\n\\r\\n    function getPolicyQuoteContract() external view returns (address);\\r\\n\\r\\n    function getBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getSTKBMIContract() external view returns (address);\\r\\n\\r\\n    function getStkBMIStakingContract() external view returns (address);\\r\\n\\r\\n    function getVBMIContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingETHContract() external view returns (address);\\r\\n\\r\\n    function getLiquidityMiningStakingUSDTContract() external view returns (address);\\r\\n\\r\\n    function getReputationSystemContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol1Contract() external view returns (address);\\r\\n\\r\\n    function getAaveLendPoolAddressProvdierContract() external view returns (address);\\r\\n\\r\\n    function getAaveATokenContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol2Contract() external view returns (address);\\r\\n\\r\\n    function getCompoundCTokenContract() external view returns (address);\\r\\n\\r\\n    function getCompoundComptrollerContract() external view returns (address);\\r\\n\\r\\n    function getDefiProtocol3Contract() external view returns (address);\\r\\n\\r\\n    function getYearnVaultContract() external view returns (address);\\r\\n\\r\\n    function getYieldGeneratorContract() external view returns (address);\\r\\n\\r\\n    function getShieldMiningContract() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interfaces/IClaimingRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.7.4;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./IPolicyBookFabric.sol\\\";\\r\\n\\r\\ninterface IClaimingRegistry {\\r\\n    enum ClaimStatus {\\r\\n        CAN_CLAIM,\\r\\n        UNCLAIMABLE,\\r\\n        PENDING,\\r\\n        AWAITING_CALCULATION,\\r\\n        REJECTED_CAN_APPEAL,\\r\\n        REJECTED,\\r\\n        ACCEPTED,\\r\\n        EXPIRED\\r\\n    }\\r\\n\\r\\n    struct ClaimInfo {\\r\\n        address claimer;\\r\\n        address policyBookAddress;\\r\\n        string evidenceURI;\\r\\n        uint256 dateSubmitted;\\r\\n        uint256 dateEnded;\\r\\n        bool appeal;\\r\\n        ClaimStatus status;\\r\\n        uint256 claimAmount;\\r\\n        uint256 claimRefund;\\r\\n    }\\r\\n\\r\\n    struct ClaimWithdrawalInfo {\\r\\n        uint256 readyToWithdrawDate;\\r\\n        bool committed;\\r\\n    }\\r\\n\\r\\n    struct RewardWithdrawalInfo {\\r\\n        uint256 rewardAmount;\\r\\n        uint256 readyToWithdrawDate;\\r\\n    }\\r\\n\\r\\n    enum WithdrawalStatus {NONE, PENDING, READY, EXPIRED}\\r\\n\\r\\n    function claimWithdrawalInfo(uint256 index)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 readyToWithdrawDate, bool committed);\\r\\n\\r\\n    function rewardWithdrawalInfo(address voter)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 rewardAmount, uint256 readyToWithdrawDate);\\r\\n\\r\\n    /// @notice returns anonymous voting duration\\r\\n    function anonymousVotingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration\\r\\n    function votingDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns the whole voting duration + view verdict duration\\r\\n    function validityDuration(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many time should pass before anyone could calculate a claim result\\r\\n    function anyoneCanCalculateClaimResultAfter(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice check if a user can buy new policy of specified PolicyBook and end the active one if there is\\r\\n    function canBuyNewPolicy(address buyer, address policyBookAddress) external;\\r\\n\\r\\n    /// @notice returns withdrawal status of requested claim\\r\\n    function getClaimWithdrawalStatus(uint256 index) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns withdrawal status of requested reward\\r\\n    function getRewardWithdrawalStatus(address voter) external view returns (WithdrawalStatus);\\r\\n\\r\\n    /// @notice returns true if there is ongoing claiming procedure\\r\\n    function hasProcedureOngoing(address poolAddress) external view returns (bool);\\r\\n\\r\\n    /// @notice submits new PolicyBook claim for the user\\r\\n    function submitClaim(\\r\\n        address user,\\r\\n        address policyBookAddress,\\r\\n        string calldata evidenceURI,\\r\\n        uint256 cover,\\r\\n        bool appeal\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim with this index exists\\r\\n    function claimExists(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns claim submition time\\r\\n    function claimSubmittedTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim end time or zero in case it is pending\\r\\n    function claimEndTime(uint256 index) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is anonymously votable\\r\\n    function isClaimAnonymouslyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if the claim is exposably votable\\r\\n    function isClaimExposablyVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if claim is anonymously votable or exposably votable\\r\\n    function isClaimVotable(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if a claim can be calculated by anyone\\r\\n    function canClaimBeCalculatedByAnyone(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns true if this claim is pending or awaiting\\r\\n    function isClaimPending(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns how many claims the holder has\\r\\n    function countPolicyClaimerClaims(address user) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many pending claims are there\\r\\n    function countPendingClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns how many claims are there\\r\\n    function countClaims() external view returns (uint256);\\r\\n\\r\\n    /// @notice returns a claim index of it's claimer and an ordinal number\\r\\n    function claimOfOwnerIndexAt(address claimer, uint256 orderIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns pending claim index by its ordinal index\\r\\n    function pendingClaimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns claim index by its ordinal index\\r\\n    function claimIndexAt(uint256 orderIndex) external view returns (uint256);\\r\\n\\r\\n    /// @notice returns current active claim index by policybook and claimer\\r\\n    function claimIndex(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256);\\r\\n\\r\\n    /// @notice returns true if the claim is appealed\\r\\n    function isClaimAppeal(uint256 index) external view returns (bool);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function policyStatus(address claimer, address policyBookAddress)\\r\\n        external\\r\\n        view\\r\\n        returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns current status of a claim\\r\\n    function claimStatus(uint256 index) external view returns (ClaimStatus);\\r\\n\\r\\n    /// @notice returns the claim owner (claimer)\\r\\n    function claimOwner(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns the claim PolicyBook\\r\\n    function claimPolicyBook(uint256 index) external view returns (address);\\r\\n\\r\\n    /// @notice returns claim info by its index\\r\\n    function claimInfo(uint256 index) external view returns (ClaimInfo memory _claimInfo);\\r\\n\\r\\n    function getAllPendingClaimsAmount() external view returns (uint256 _totalClaimsAmount);\\r\\n\\r\\n    function getAllPendingRewardsAmount() external view returns (uint256 _totalRewardsAmount);\\r\\n\\r\\n    function getClaimableAmounts(uint256[] memory _claimIndexes) external view returns (uint256);\\r\\n\\r\\n    /// @notice marks the user's claim as Accepted\\r\\n    function acceptClaim(uint256 index, uint256 amount) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Rejected\\r\\n    function rejectClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice marks the user's claim as Expired\\r\\n    function expireClaim(uint256 index) external;\\r\\n\\r\\n    /// @notice Update Image Uri in case it contains material that is ilegal\\r\\n    ///         or offensive.\\r\\n    /// @dev Only the owner of the PolicyBookAdmin can erase/update evidenceUri.\\r\\n    /// @param claim_Index Claim Index that is going to be updated\\r\\n    /// @param _newEvidenceURI New evidence uri. It can be blank.\\r\\n    function updateImageUriOfClaim(uint256 claim_Index, string calldata _newEvidenceURI) external;\\r\\n\\r\\n    function requestClaimWithdrawal(uint256 index) external;\\r\\n\\r\\n    function requestRewardWithdrawal(address voter, uint256 rewardAmount) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/abstract/AbstractDependant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.4;\\n\\nimport \\\"../interfaces/IContractsRegistry.sol\\\";\\n\\nabstract contract AbstractDependant {\\n    /// @dev keccak256(AbstractDependant.setInjector(address)) - 1\\n    bytes32 private constant _INJECTOR_SLOT =\\n        0xd6b8f2e074594ceb05d47c27386969754b6ad0c15e5eb8f691399cd0be980e76;\\n\\n    modifier onlyInjectorOrZero() {\\n        address _injector = injector();\\n\\n        require(_injector == address(0) || _injector == msg.sender, \\\"Dependant: Not an injector\\\");\\n        _;\\n    }\\n\\n    function setInjector(address _injector) external onlyInjectorOrZero {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            sstore(slot, _injector)\\n        }\\n    }\\n\\n    /// @dev has to apply onlyInjectorOrZero() modifier\\n    function setDependencies(IContractsRegistry) external virtual;\\n\\n    function injector() public view returns (address _injector) {\\n        bytes32 slot = _INJECTOR_SLOT;\\n\\n        assembly {\\n            _injector := sload(slot)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insured\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"}],\"name\":\"Added\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"policyBook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"facadeAddress\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"policyBooks\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"epochsNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"coversTokens\",\"type\":\"uint256[]\"}],\"name\":\"buyPolicyBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"countByType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"name\":\"countByTypeWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countWhitelisted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"policyBooks\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"epochsNumbers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"coversTokens\",\"type\":\"uint256[]\"}],\"name\":\"getPoliciesPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_durations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allowances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"injector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBook\",\"type\":\"address\"}],\"name\":\"isPolicyBook\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_facadeAddress\",\"type\":\"address\"}],\"name\":\"isPolicyBookFacade\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"}],\"name\":\"isUserLeveragePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listByType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listByTypeWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listWithStats\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listWithStatsByType\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listWithStatsByTypeWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"listWithStatsWhitelisted\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_policyBooksArr\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policyBookFabricAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyBookFacades\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"}],\"name\":\"policyBookFor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"policyBooksByInsuredAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IContractsRegistry\",\"name\":\"_contractsRegistry\",\"type\":\"address\"}],\"name\":\"setDependencies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_injector\",\"type\":\"address\"}],\"name\":\"setInjector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"policyBooks\",\"type\":\"address[]\"}],\"name\":\"stats\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"insuredContracts\",\"type\":\"address[]\"}],\"name\":\"statsByInsuredContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"insuredContract\",\"type\":\"address\"},{\"internalType\":\"enum IPolicyBookFabric.ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSTBLLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLeveragedLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedSTBL\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"APY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"annualInsuranceCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bmiXRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"internalType\":\"struct IPolicyBookRegistry.PolicyBookStats[]\",\"name\":\"_stats\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"policyBookAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"whitelisted\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"PolicyBookRegistry","CompilerVersion":"v0.7.4+commit.3f05b770","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]