[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/operator/OpLong.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OpCommon.sol\\\";\\nimport {ProtocolAaveV2Interface} from \\\"../protocol/interface/IProtocolAaveV2.sol\\\";\\nimport {ProtocolERC20Interface} from \\\"../protocol/interface/IProtocolERC20.sol\\\";\\nimport {OperationCenterInterface} from \\\"../interfaces/IOperationCenter.sol\\\";\\nimport {AccountCenterInterface} from \\\"../interfaces/IAccountCenter.sol\\\";\\nimport {EventCenterLeveragePositionInterface} from \\\"../interfaces/IEventCenterLeveragePosition.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface ProtocolCenterInterface {\\n    function getProtocol(string memory protocolName)\\n        external\\n        view\\n        returns (address protocol);\\n}\\n\\ninterface ConnectorAaveV2Interface {\\n    function deposit(\\n        address token,\\n        uint256 amt,\\n        uint256 getId,\\n        uint256 setId\\n    ) external payable;\\n}\\n\\ninterface ConnectorCenterInterface {\\n    function getConnector(string calldata connectorNames)\\n        external\\n        view\\n        returns (bool, address);\\n}\\n\\ninterface EventCenterInterface {\\n    function emitAddMarginEvent(\\n        address collateralToken,\\n        uint256 amountCollateralToken\\n    ) external;\\n}\\n\\nstruct Token {\\n    address token;\\n    string symbol;\\n}\\n\\ninterface TokenCenterInterface {\\n    function listLongToken() external view returns (Token[] memory tokenList);\\n\\n    function isLongable(address token) external view returns (bool longable);\\n}\\n\\ninterface IERC3156FlashLender {\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    function flashFee(address token, uint256 amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function flashLoan(\\n        address receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata _spells\\n    ) external returns (bool);\\n}\\n\\ncontract OpLong is OpCommon {\\n    using SafeERC20 for IERC20;\\n\\n    address internal constant ethAddr =\\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address public immutable lender;\\n    address public immutable opCenterAddress;\\n    uint256 public flashBalance;\\n    address public flashInitiator;\\n    address public flashToken;\\n    uint256 public flashAmount;\\n    uint256 public flashFee;\\n\\n    AaveLendingPoolProviderInterface internal constant aaveProvider =\\n        AaveLendingPoolProviderInterface(\\n            0x88757f2f99175387aB4C6a4b3067c77A695b0349\\n        );\\n\\n    constructor(address _opCenterAddress, address _lender) {\\n        lender = _lender;\\n        opCenterAddress = _opCenterAddress;\\n    }\\n\\n    function openLong(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 amountLeverageToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) public payable onlyAuth {\\n\\n        bool _isLongable = TokenCenterInterface(\\n            OperationCenterInterface(opCenterAddress).tokenCenterAddress()\\n        ).isLongable(targetToken);\\n        require(\\n            _isLongable,\\n            \\\"CHFY: target token not support to do longleverage\\\"\\n        );\\n\\n        require(\\n            rateMode == 1 || rateMode == 2,\\n            \\\"CHFRY: rateMode should be 1 or 2\\\"\\n        );\\n\\n        (bool success, ) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"ERC20\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"push(address,uint256)\\\",\\n                    leverageToken,\\n                    amountLeverageToken\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: push coin fail\\\");\\n\\n        uint8 operation;\\n        bytes memory arguments;\\n        bytes memory data;\\n\\n        operation = 1;\\n\\n        arguments = abi.encode(\\n            leverageToken,\\n            targetToken,\\n            amountLeverageToken,\\n            amountFlashLoan,\\n            unitAmt,\\n            rateMode\\n        );\\n\\n        data = abi.encode(operation, arguments);\\n        _flash(leverageToken, amountFlashLoan, data);\\n    }\\n\\n    function closeLong(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 amountTargetToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) public payable onlyAuth{\\n        require(\\n            rateMode == 1 || rateMode == 2,\\n            \\\"CHFRY: rateMode should be 1 or 2\\\"\\n        );\\n\\n        bool isLastPosition = true;\\n\\n        bool success;\\n        bytes memory _data;\\n        Token[] memory tokenList = TokenCenterInterface(\\n            OperationCenterInterface(opCenterAddress).tokenCenterAddress()\\n        ).listLongToken();\\n\\n        for (uint256 i = 0; i < tokenList.length; i++) {\\n            if (\\n                tokenList[i].token != targetToken &&\\n                tokenList[i].token != address(0)\\n            ) {\\n                (success, _data) = ProtocolCenterInterface(\\n                    OperationCenterInterface(opCenterAddress)\\n                        .protocolCenterAddress()\\n                ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                        abi.encodeWithSignature(\\n                            \\\"getCollateralBalance(address)\\\",\\n                            tokenList[i].token\\n                        )\\n                    );\\n\\n                require(\\n                    success == true,\\n                    \\\"CHFRY: call AAVEV2 protocol getCollateralBalance fail 2\\\"\\n                );\\n                if (abi.decode(_data, (uint256)) != 0) {\\n                    isLastPosition = false;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        (success, _data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"getPaybackBalance(address,uint256)\\\",\\n                    leverageToken,\\n                    2\\n                )\\n            );\\n\\n        require(\\n            success == true,\\n            \\\"CHFRY: call AAVEV2 protocol getPaybackBalance fail\\\"\\n        );\\n\\n        uint256 amountLeverageTokenBorrow = abi.decode(_data, (uint256));\\n\\n        if (\\n            isLastPosition == true ||\\n            (amountFlashLoan > amountLeverageTokenBorrow)\\n        ) {\\n            amountFlashLoan = amountLeverageTokenBorrow;\\n        }\\n\\n        uint8 operation;\\n        bytes memory arguments;\\n        bytes memory data;\\n\\n        operation = 2;\\n\\n        arguments = abi.encode(\\n            leverageToken,\\n            targetToken,\\n            amountTargetToken,\\n            amountFlashLoan,\\n            isLastPosition,\\n            unitAmt,\\n            rateMode\\n        );\\n\\n        data = abi.encode(operation, arguments);\\n        _flash(leverageToken, amountFlashLoan, data);\\n    }\\n\\n    function cleanLong(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) public payable onlyAuth {\\n\\n        (bool success, bytes memory _data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralBalance(address)\\\",\\n                    targetToken\\n                )\\n            );\\n\\n        require(\\n            success == true,\\n            \\\"CHFRY: call AAVEV2 protocol getCollateralBalance fail 1\\\"\\n        );\\n\\n        uint256 amountTargetToken = abi.decode(_data, (uint256));\\n\\n        closeLong(\\n            leverageToken,\\n            targetToken,\\n            amountTargetToken,\\n            amountFlashLoan,\\n            unitAmt,\\n            rateMode\\n        );\\n    }\\n\\n    function repay(address paybackToken) external payable onlyAuth {\\n        bool success;\\n        bytes memory data;\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"getPaybackBalance(address,uint256)\\\",\\n                    paybackToken,\\n                    2\\n                )\\n            );\\n\\n        require(\\n            success == true,\\n            \\\"CHFRY: call AAVEV2 protocol getPaybackBalance fail\\\"\\n        );\\n\\n        uint256 amountPaybackToken = abi.decode(data, (uint256));\\n\\n        if (amountPaybackToken > 0) {\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"ERC20\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"push(address,uint256)\\\",\\n                        paybackToken,\\n                        amountPaybackToken\\n                    )\\n                );\\n\\n            require(success == true, \\\"CHFRY: push token fail\\\");\\n\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"paybackToken(address,uint256,uint256)\\\",\\n                        paybackToken,\\n                        amountPaybackToken,\\n                        2\\n                    )\\n                );\\n            require(success == true, \\\"CHFRY: call AAVEV2 paybackToken fail\\\");\\n            EventCenterLeveragePositionInterface(\\n                OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n            ).emitRepayEvent(paybackToken, amountPaybackToken);\\n        }\\n    }\\n\\n    function withdraw(address collateralToken) external payable onlyAuth{\\n        bool success;\\n        bytes memory data;\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"getCollateralBalance(address)\\\",\\n                    collateralToken\\n                )\\n            );\\n\\n        require(\\n            success == true,\\n            \\\"CHFRY: call AAVEV2 protocol getCollateralBalance of leverageToken fail \\\"\\n        );\\n\\n        if (abi.decode(data, (uint256)) > 0) {\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"withdrawToken(address,uint256)\\\",\\n                        collateralToken,\\n                        type(uint256).max\\n                    )\\n                );\\n            require(success == true, \\\"CHFRY: call AAVEV2 withdrawToken fail 2\\\");\\n\\n            uint256 amountWithDraw = abi.decode(data, (uint256));\\n\\n            address EOA = AccountCenterInterface(accountCenter).getEOA(\\n                address(this)\\n            );\\n\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"ERC20\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"pull(address,uint256,address)\\\",\\n                        collateralToken,\\n                        amountWithDraw,\\n                        EOA\\n                    )\\n                );\\n\\n            require(success == true, \\\"CHFRY: pull back coin fail\\\");\\n            EventCenterLeveragePositionInterface(\\n                OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n            ).emitWithDrawEvent(collateralToken, amountWithDraw);\\n        }\\n    }\\n\\n    function addMargin(address collateralToken, uint256 amountCollateralToken)\\n        external\\n        payable\\n        onlyAuth\\n    {\\n\\n        (bool success, bytes memory data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"ERC20\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"push(address,uint256)\\\",\\n                    collateralToken,\\n                    amountCollateralToken\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: push token fail\\\");\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"depositToken(address,uint256)\\\",\\n                    collateralToken,\\n                    amountCollateralToken\\n                )\\n            );\\n\\n        require(\\n            success == true,\\n            \\\"CHFRY: call AAVEV2 protocol depositToken fail\\\"\\n        );\\n\\n        EventCenterInterface(\\n            OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n        ).emitAddMarginEvent(collateralToken, amountCollateralToken);\\n    }\\n\\n    function _flash(\\n        address token,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n\\n        uint256 allowance = IERC20(token).allowance(\\n            address(this),\\n            address(lender)\\n        );\\n        \\n        uint256 fee = IERC3156FlashLender(lender).flashFee(token, amount);\\n\\n        (bool notOverflow, uint256 repayment) = SafeMath.tryAdd(amount, fee);\\n        require(notOverflow == true, \\\"CHFRY: overflow\\\");\\n\\n        (notOverflow, allowance) = SafeMath.tryAdd(allowance, repayment);\\n        require(notOverflow == true, \\\"CHFRY: overflow\\\");\\n\\n        IERC20(token).approve(address(lender), allowance);\\n\\n        IERC3156FlashLender(lender).flashLoan(\\n            address(this),\\n            token,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external payable returns (bytes32) {\\n        require(msg.sender == address(lender), \\\"onFlashLoan: Untrusted lender\\\");\\n\\n        require(\\n            initiator == address(this),\\n            \\\"onFlashLoan: Untrusted loan initiator\\\"\\n        );\\n\\n        uint8 operation;\\n        bytes memory arguments;\\n\\n        flashInitiator = initiator;\\n        flashToken = token;\\n        flashAmount = amount;\\n        flashFee = fee;\\n\\n        (operation, arguments) = abi.decode(data, (uint8, bytes));\\n\\n        if (operation == uint8(1)) {\\n            handleOpenLong(arguments);\\n        } else if (operation == uint8(2)) {\\n            handleCloseLong(arguments);\\n        }\\n\\n        EventCenterLeveragePositionInterface(\\n            OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n        ).emitUseFlashLoanForLeverageEvent(token, amount);\\n\\n        return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    }\\n\\n    function handleOpenLong(bytes memory arguments) internal {\\n        bool notOverflow;\\n        uint256 _temp;\\n        uint256 pay;\\n\\n        bool success;\\n        bytes memory data;\\n\\n        (\\n            address leverageToken,\\n            address targetToken,\\n            uint256 amountLeverageToken,\\n            uint256 amountFlashLoan,\\n            uint256 unitAmt,\\n            uint256 rateMode\\n        ) = abi.decode(\\n                arguments,\\n                (address, address, uint256, uint256, uint256, uint256)\\n            );\\n\\n        (notOverflow, pay) = SafeMath.tryAdd(\\n            amountLeverageToken,\\n            amountFlashLoan\\n        );\\n\\n        require(notOverflow == true, \\\"CHFRY: overflow 1\\\");\\n\\n        uint256 flashLoanFee = IERC3156FlashLender(lender).flashFee(\\n            leverageToken,\\n            amountFlashLoan\\n        );\\n\\n        (notOverflow, _temp) = SafeMath.trySub(pay, flashLoanFee);\\n\\n        require(notOverflow == true, \\\"CHFRY: overflow 2\\\");\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"UniswapV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"sellToken(address,address,uint256,uint256)\\\",\\n                    targetToken,\\n                    leverageToken,\\n                    _temp,\\n                    unitAmt\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: call UniswapV2 sellToken fail\\\");\\n\\n        uint256 buyAmount = abi.decode(data, (uint256));\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"depositToken(address,uint256)\\\",\\n                    targetToken,\\n                    buyAmount\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: call AAVEV2 depositToken fail\\\");\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"borrowToken(address,uint256,uint256)\\\",\\n                    leverageToken,\\n                    amountFlashLoan,\\n                    rateMode\\n                )\\n            );\\n        require(success == true, \\\"CHFRY: call AAVEV2 borrowToken fail\\\");\\n\\n        EventCenterLeveragePositionInterface(\\n            OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n        ).emitOpenLongLeverageEvent(\\n                leverageToken,\\n                targetToken,\\n                pay,\\n                buyAmount,\\n                amountLeverageToken,\\n                amountFlashLoan,\\n                unitAmt,\\n                rateMode\\n            );\\n    }\\n\\n    function handleCloseLong(bytes memory arguments) internal {\\n        uint256 _temp;\\n        uint256 gain;\\n        bool notOverflow;\\n        bool success;\\n        bytes memory data;\\n        (\\n            address leverageToken,\\n            address targetToken,\\n            uint256 amountTargetToken,\\n            uint256 amountFlashLoan,\\n            bool isLastPosition,\\n            uint256 unitAmt,\\n            uint256 rateMode\\n        ) = abi.decode(\\n                arguments,\\n                (address, address, uint256, uint256, bool, uint256, uint256)\\n            );\\n\\n        uint256 flashLoanFee = IERC3156FlashLender(lender).flashFee(\\n            leverageToken,\\n            amountFlashLoan\\n        );\\n\\n        if (amountFlashLoan > 0) {\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"paybackToken(address,uint256,uint256)\\\",\\n                        leverageToken,\\n                        amountFlashLoan,\\n                        rateMode\\n                    )\\n                );\\n            require(success == true, \\\"CHFRY: call AAVEV2 paybackToken fail\\\");\\n        }\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"withdrawToken(address,uint256)\\\",\\n                    targetToken,\\n                    amountTargetToken\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: call AAVEV2 withdrawToken fail 1\\\");\\n\\n        (success, data) = ProtocolCenterInterface(\\n            OperationCenterInterface(opCenterAddress).protocolCenterAddress()\\n        ).getProtocol(\\\"UniswapV2\\\").delegatecall(\\n                abi.encodeWithSignature(\\n                    \\\"sellToken(address,address,uint256,uint256)\\\",\\n                    leverageToken,\\n                    targetToken,\\n                    amountTargetToken,\\n                    unitAmt\\n                )\\n            );\\n\\n        require(success == true, \\\"CHFRY: call UniswapV2 protocol fail\\\");\\n\\n        gain = abi.decode(data, (uint256));\\n\\n        (notOverflow, gain) = SafeMath.trySub(gain, flashLoanFee);\\n\\n        require(notOverflow == true, \\\"CHFRY: gain not cover flashLoanFee\\\");\\n\\n        if (isLastPosition == true) {\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"getCollateralBalance(address)\\\",\\n                        leverageToken\\n                    )\\n                );\\n\\n            require(\\n                success == true,\\n                \\\"CHFRY: call AAVEV2 protocol getCollateralBalance of leverageToken fail \\\"\\n            );\\n\\n            if (abi.decode(data, (uint256)) > 0) {\\n                (success, data) = ProtocolCenterInterface(\\n                    OperationCenterInterface(opCenterAddress)\\n                        .protocolCenterAddress()\\n                ).getProtocol(\\\"AAVEV2\\\").delegatecall(\\n                        abi.encodeWithSignature(\\n                            \\\"withdrawToken(address,uint256)\\\",\\n                            leverageToken,\\n                            type(uint256).max\\n                        )\\n                    );\\n                require(\\n                    success == true,\\n                    \\\"CHFRY: call AAVEV2 withdrawToken fail 2\\\"\\n                );\\n\\n                uint256 amountWithDraw = abi.decode(data, (uint256));\\n\\n                EventCenterLeveragePositionInterface(\\n                    OperationCenterInterface(opCenterAddress)\\n                        .eventCenterAddress()\\n                ).emitRemoveMarginEvent(leverageToken, amountWithDraw);\\n\\n                (notOverflow, _temp) = SafeMath.tryAdd(gain, amountWithDraw);\\n                require(notOverflow == true, \\\"CHFRY: overflow\\\");\\n\\n                (notOverflow, _temp) = SafeMath.trySub(_temp, amountFlashLoan);\\n\\n                require(notOverflow == true, \\\"CHFRY: gain not cover flashloan\\\");\\n            } else {\\n                (notOverflow, _temp) = SafeMath.trySub(gain, amountFlashLoan);\\n                require(notOverflow == true, \\\"CHFRY: gain not cover flashloan\\\");\\n            }\\n        } else {\\n            (notOverflow, _temp) = SafeMath.trySub(gain, amountFlashLoan);\\n            require(notOverflow == true, \\\"CHFRY: gain not cover flashloan\\\");\\n        }\\n\\n        if (_temp > uint256(0)) {\\n            address EOA = AccountCenterInterface(accountCenter).getEOA(\\n                address(this)\\n            );\\n\\n            (success, data) = ProtocolCenterInterface(\\n                OperationCenterInterface(opCenterAddress)\\n                    .protocolCenterAddress()\\n            ).getProtocol(\\\"ERC20\\\").delegatecall(\\n                    abi.encodeWithSignature(\\n                        \\\"pull(address,uint256,address)\\\",\\n                        leverageToken,\\n                        _temp,\\n                        EOA\\n                    )\\n                );\\n\\n            require(success == true, \\\"CHFRY: pull back coin fail\\\");\\n        }\\n\\n        EventCenterLeveragePositionInterface(\\n            OperationCenterInterface(opCenterAddress).eventCenterAddress()\\n        ).emitCloseLongLeverageEvent(\\n                leverageToken,\\n                targetToken,\\n                gain,\\n                amountTargetToken,\\n                amountFlashLoan,\\n                amountFlashLoan,\\n                unitAmt,\\n                rateMode\\n            );\\n    }\\n\\n    function getUserAccountData()\\n        internal\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        )\\n    {\\n        AaveInterface aave = AaveInterface(aaveProvider.getLendingPool());\\n        (\\n            totalCollateralETH,\\n            totalDebtETH,\\n            availableBorrowsETH,\\n            currentLiquidationThreshold,\\n            ltv,\\n            healthFactor\\n        ) = aave.getUserAccountData(address(this));\\n    }\\n}\\n\\ninterface AaveLendingPoolProviderInterface {\\n    function getLendingPool() external view returns (address);\\n\\n    function getPriceOracle() external view returns (address);\\n}\\n\\ninterface AaveInterface {\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function setUserUseReserveAsCollateral(\\n        address _asset,\\n        bool _useAsCollateral\\n    ) external;\\n\\n    function swapBorrowRateMode(address _asset, uint256 _rateMode) external;\\n}\\n\"\r\n    },\r\n    \"contracts/operator/OpCommon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract OpCommon {\\n    // auth is shared storage with AccountProxy and any OpCode.\\n    mapping(address => bool) internal _auth;\\n    address internal accountCenter;\\n\\n    receive() external payable {}\\n\\n    modifier onlyAuth() {\\n        require(_auth[msg.sender], \\\"CHFRY: Permission Denied\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/interface/IProtocolAaveV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ProtocolAaveV2Interface {\\n    function depositToken(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n\\n    function withdrawToken(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n\\n    function borrowToken(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode\\n    ) external payable returns (uint256 _amt);\\n\\n    function paybackToken(\\n        address token,\\n        uint256 amt,\\n        uint256 rateMode\\n    ) external payable returns (uint256 _amt);\\n\\n    function enableTokenCollateral(address[] calldata tokens) external payable;\\n\\n    function swapTokenBorrowRateMode(address token, uint256 rateMode)\\n        external\\n        payable;\\n\\n    function getPaybackBalance(address token, uint256 rateMode)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getCollateralBalance(address token)\\n        external\\n        view\\n        returns (uint256 bal);\\n}\\n\"\r\n    },\r\n    \"contracts/protocol/interface/IProtocolERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ProtocolERC20Interface {\\n    function push(address token, uint256 amt)\\n        external\\n        payable\\n        returns (uint256 _amt);\\n\\n    function pull(\\n        address token,\\n        uint256 amt,\\n        address to\\n    ) external payable returns (uint256 _amt);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperationCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OperationCenterInterface {\\n    function eventCenterAddress() external view returns (address);\\n    function connectorCenterAddress() external view returns (address);\\n    function tokenCenterAddress() external view returns (address);\\n    function protocolCenterAddress() external view returns (address);\\n    function getOpCodeAddress(bytes4 _sig) external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IAccountCenter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AccountCenterInterface {\\n    function accountCount() external view returns (uint256);\\n\\n    function accountTypeCount() external view returns (uint256);\\n\\n    function createAccount(uint256 accountTypeID)\\n        external\\n        returns (address _account);\\n\\n    function getAccount(uint256 accountTypeID)\\n        external\\n        view\\n        returns (address _account);\\n\\n    function getEOA(address account)\\n        external\\n        view\\n        returns (address payable _eoa);\\n\\n    function isSmartAccount(address _address)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function isSmartAccountofTypeN(address _address, uint256 accountTypeID)\\n        external\\n        view\\n        returns (bool _isAccount);\\n\\n    function getAccountCountOfTypeN(uint256 accountTypeID)\\n        external\\n        view\\n        returns (uint256 count);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEventCenterLeveragePosition.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface EventCenterLeveragePositionInterface {\\n    // function emitCreateAccountEvent(address EOA, address account) external;\\n\\n    function epochRound() external view returns (uint256);\\n\\n    function emitUseFlashLoanForLeverageEvent(address token, uint256 amount)\\n        external;\\n\\n    function emitOpenLongLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 pay,\\n        uint256 amountTargetToken,\\n        uint256 amountLeverageToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitCloseLongLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 gain,\\n        uint256 amountTargetToken,\\n        uint256 amountFlashLoan,\\n        uint256 amountRepay,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitOpenShortLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 pay,\\n        uint256 amountTargetToken,\\n        uint256 amountLeverageToken,\\n        uint256 amountFlashLoan,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitCloseShortLeverageEvent(\\n        address leverageToken,\\n        address targetToken,\\n        uint256 gain,\\n        uint256 amountTargetToken,\\n        uint256 amountFlashLoan,\\n        uint256 amountWithDraw,\\n        uint256 unitAmt,\\n        uint256 rateMode\\n    ) external;\\n\\n    function emitAddMarginEvent(\\n        address leverageToken,\\n        uint256 amountLeverageToken\\n    ) external;\\n\\n    function emitRemoveMarginEvent(\\n        address leverageToken,\\n        uint256 amountLeverageToken\\n    ) external;\\n\\n    function startEpoch(uint256 _rewardAmount) external;\\n\\n    function isInRewardEpoch() external view returns (bool);\\n\\n    function emitWithDrawEvent(address token, uint256 amount) external;\\n\\n    function emitRepayEvent(address token, uint256 amount) external;\\n\\n    function emitReleasePositionRewardEvent(\\n        address owner,\\n        uint256 epochRound,\\n        bytes32 merkelRoot\\n    ) external;\\n\\n    function emitClaimPositionRewardEvent(\\n        address EOA,\\n        uint256 epochRound,\\n        uint256 amount\\n    ) external;\\n\\n    function emitClaimOpenAccountRewardEvent(\\n        address EOA,\\n        address account,\\n        uint256 amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_opCenterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountCollateralToken\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leverageToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountFlashLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"cleanLong\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leverageToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTargetToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFlashLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"closeLong\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashInitiator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opCenterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"leverageToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"targetToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountLeverageToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFlashLoan\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unitAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"openLong\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paybackToken\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"OpLong","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c9c82d209a9b588b5985038d896f9992ed222aaf0000000000000000000000007e271eb034dfc47b041adf74b24fb88e687aba9c","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]