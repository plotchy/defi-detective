[{"SourceCode":"// File: @openzeppelin/contracts/math/Math.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow, so we distribute\r\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.5;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following \r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` into `address payable`. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/Gauge.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface Gauge {\r\n    function deposit(uint) external;\r\n    function balanceOf(address) external view returns (uint);\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface Mintr {\r\n    function mint(address) external;\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/ISwerveFi.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface ISwerveFi {\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[4] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[4] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n  function calc_token_amount(\r\n    uint256[4] calldata amounts,\r\n    bool deposit\r\n  ) external view returns(uint);\r\n  function calc_withdraw_one_coin(\r\n    uint256 _token_amount, int128 i) external view returns (uint256);\r\n  function remove_liquidity_one_coin(uint256 _token_amount, int128 i,\r\n    uint256 min_amount) external;\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/yVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/strategies/curve/interfaces/IPriceConvertor.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IPriceConvertor {\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 i) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/hardworkInterface/IController.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ninterface IController {\r\n    // [Grey list]\r\n    // An EOA can safely interact with the system no matter what.\r\n    // If you're using Metamask, you're using an EOA.\r\n    // Only smart contracts may be affected by this grey list.\r\n    //\r\n    // This contract will not be able to ban any EOA from the system\r\n    // even if an EOA is being added to the greyList, he/she will still be able\r\n    // to interact with the whole system as if nothing happened.\r\n    // Only smart contracts will be affected by being added to the greyList.\r\n    // This grey list is only used in Vault.sol, see the code there for reference\r\n    function greyList(address _target) external returns(bool);\r\n\r\n    function addVaultAndStrategy(address _vault, address _strategy) external;\r\n    function doHardWork(address _vault) external;\r\n    function hasVault(address _vault) external returns(bool);\r\n\r\n    function salvage(address _token, uint256 amount) external;\r\n    function salvageStrategy(address _strategy, address _token, uint256 amount) external;\r\n\r\n    function notifyFee(address _underlying, uint256 fee) external;\r\n    function profitSharingNumerator() external view returns (uint256);\r\n    function profitSharingDenominator() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/Storage.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\ncontract Storage {\r\n\r\n  address public governance;\r\n  address public controller;\r\n\r\n  constructor() public {\r\n    governance = msg.sender;\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setGovernance(address _governance) public onlyGovernance {\r\n    require(_governance != address(0), \"new governance shouldn't be empty\");\r\n    governance = _governance;\r\n  }\r\n\r\n  function setController(address _controller) public onlyGovernance {\r\n    require(_controller != address(0), \"new controller shouldn't be empty\");\r\n    controller = _controller;\r\n  }\r\n\r\n  function isGovernance(address account) public view returns (bool) {\r\n    return account == governance;\r\n  }\r\n\r\n  function isController(address account) public view returns (bool) {\r\n    return account == controller;\r\n  }\r\n}\r\n\r\n// File: contracts/Governable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Governable {\r\n\r\n  Storage public store;\r\n\r\n  constructor(address _store) public {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  modifier onlyGovernance() {\r\n    require(store.isGovernance(msg.sender), \"Not governance\");\r\n    _;\r\n  }\r\n\r\n  function setStorage(address _store) public onlyGovernance {\r\n    require(_store != address(0), \"new storage shouldn't be empty\");\r\n    store = Storage(_store);\r\n  }\r\n\r\n  function governance() public view returns (address) {\r\n    return store.governance();\r\n  }\r\n}\r\n\r\n// File: contracts/Controllable.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ncontract Controllable is Governable {\r\n\r\n  constructor(address _storage) Governable(_storage) public {\r\n  }\r\n\r\n  modifier onlyController() {\r\n    require(store.isController(msg.sender), \"Not a controller\");\r\n    _;\r\n  }\r\n\r\n  modifier onlyControllerOrGovernance(){\r\n    require((store.isController(msg.sender) || store.isGovernance(msg.sender)),\r\n      \"The caller must be controller or governance\");\r\n    _;\r\n  }\r\n\r\n  function controller() public view returns (address) {\r\n    return store.controller();\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/ProfitNotifier.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract ProfitNotifier is Controllable {\r\n  using SafeMath for uint256;\r\n  using SafeERC20 for IERC20;\r\n\r\n  uint256 public profitSharingNumerator;\r\n  uint256 public profitSharingDenominator;\r\n  address public underlying;\r\n\r\n  event ProfitLog(\r\n    uint256 oldBalance,\r\n    uint256 newBalance,\r\n    uint256 feeAmount,\r\n    uint256 timestamp\r\n  );\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _underlying\r\n  ) public Controllable(_storage){\r\n    underlying = _underlying;\r\n    // persist in the state for immutability of the fee\r\n    profitSharingNumerator = 30; // IController(controller()).profitSharingNumerator();\r\n    profitSharingDenominator = 100; // IController(controller()).profitSharingDenominator();\r\n    require(profitSharingNumerator < profitSharingDenominator, \"invalid profit share\");\r\n  }\r\n\r\n  function notifyProfit(uint256 oldBalance, uint256 newBalance) internal {\r\n    if (newBalance > oldBalance) {\r\n      uint256 profit = newBalance.sub(oldBalance);\r\n      uint256 feeAmount = profit.mul(profitSharingNumerator).div(profitSharingDenominator);\r\n      emit ProfitLog(oldBalance, newBalance, feeAmount, block.timestamp);\r\n\r\n      IERC20(underlying).safeApprove(controller(), 0);\r\n      IERC20(underlying).safeApprove(controller(), feeAmount);\r\n      IController(controller()).notifyFee(\r\n        underlying,\r\n        feeAmount\r\n      );\r\n    } else {\r\n      emit ProfitLog(oldBalance, newBalance, 0, block.timestamp);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/hardworkInterface/IVault.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ninterface IVault {\r\n    // the IERC20 part is the share\r\n\r\n    function underlyingBalanceInVault() external view returns (uint256);\r\n    function underlyingBalanceWithInvestment() external view returns (uint256);\r\n\r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function strategy() external view returns (address);\r\n\r\n    function setStrategy(address _strategy) external;\r\n    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\r\n\r\n    function deposit(uint256 amountWei) external;\r\n    function depositFor(uint256 amountWei, address holder) external;\r\n\r\n    function withdrawAll() external;\r\n    function withdraw(uint256 numberOfShares) external;\r\n    function getPricePerFullShare() external view returns (uint256);\r\n\r\n    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\r\n\r\n    // hard work should be callable only by the controller (by the hard worker) or by governance\r\n    function doHardWork() external;\r\n    function rebalance() external;\r\n}\r\n\r\n// File: contracts/hardworkInterface/IStrategy.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ninterface IStrategy {\r\n    \r\n    function unsalvagableTokens(address tokens) external view returns (bool);\r\n    \r\n    function governance() external view returns (address);\r\n    function controller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function vault() external view returns (address);\r\n\r\n    function withdrawAllToVault() external;\r\n    function withdrawToVault(uint256 amount) external;\r\n\r\n    function investedUnderlyingBalance() external view returns (uint256); // itsNotMuch()\r\n\r\n    // should only be called by controller\r\n    function salvage(address recipient, address token, uint256 amount) external;\r\n\r\n    function doHardWork() external;\r\n    function depositArbCheck() external view returns(bool);\r\n}\r\n\r\n// File: contracts/uniswap/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: contracts/uniswap/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\n\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/strategies/curve/CRVStrategySwerve.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This is an exact clone of the WBTC strategy\r\n// Naming was not adjusted for easy diff\r\ncontract CRVStrategySwerve is IStrategy, ProfitNotifier {\r\n\r\n  enum TokenIndex {DAI, USDC, USDT, TUSD}\r\n\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  // wbtc token address (or ren if we want both)\r\n  address public wbtc;\r\n\r\n  // the matching enum record used to determine the index\r\n  TokenIndex tokenIndex;\r\n\r\n  // our vault holding the wbtc asset\r\n  address public vault;\r\n\r\n  // our vault for depositing the mixToken tokens\r\n  address public mixVault;\r\n\r\n  // the address of mixToken token\r\n  address public mixToken;\r\n\r\n  // the address of the Curve protocol's pool for REN + WBTC\r\n  address public curve;\r\n\r\n  // these tokens cannot be claimed by the governance\r\n  mapping(address => bool) public unsalvagableTokens;\r\n\r\n  // the wbtc gauge in Curve\r\n  address public gauge;\r\n\r\n  // the reward minter\r\n  address public mintr;\r\n\r\n  // the address for the CRV token\r\n  address public crv;\r\n\r\n  // uniswap router address\r\n  address public uni;\r\n\r\n  // price checkpoint preventing attacks\r\n  uint256 public wbtcPriceCheckpoint;\r\n\r\n  // a unit for the price checkpoint\r\n  uint256 public mixTokenUnit;\r\n\r\n  // settable arbitrage tolerance\r\n  uint256 public arbTolerance = 3;\r\n\r\n  // liquidation path to be used\r\n  address[] public uniswap_CRV2WBTC;\r\n\r\n  // a flag for disabling selling for simplified emergency exit\r\n  bool public sell = true;\r\n\r\n  // minimum CRV amount to be liquidation\r\n  uint256 public sellFloor = 30e18;\r\n\r\n  event Liquidating(uint256 amount);\r\n  event ProfitsNotCollected();\r\n\r\n\r\n  modifier restricted() {\r\n    require(msg.sender == vault || msg.sender == controller()\r\n      || msg.sender == governance(),\r\n      \"The sender has to be the controller, governance, or vault\");\r\n    _;\r\n  }\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _wbtc,\r\n    address _vault,\r\n    uint256 _tokenIndex,\r\n    address _mixToken,\r\n    address _curvePool,\r\n    address _crv,\r\n    address _weth,\r\n    address _gauge,\r\n    address _mintr,\r\n    address _uniswap\r\n  )\r\n  ProfitNotifier(_storage, _wbtc) public {\r\n    vault = _vault;\r\n    wbtc = _wbtc;\r\n    tokenIndex = TokenIndex(_tokenIndex);\r\n    mixToken = _mixToken;\r\n    curve = _curvePool;\r\n    gauge = _gauge;\r\n    crv = _crv;\r\n    uni = _uniswap;\r\n    mintr = _mintr;\r\n\r\n    uniswap_CRV2WBTC = [_crv, _weth, _wbtc];\r\n\r\n    // set these tokens to be not salvageable\r\n    unsalvagableTokens[wbtc] = true;\r\n    unsalvagableTokens[mixToken] = true;\r\n    unsalvagableTokens[crv] = true;\r\n\r\n    mixTokenUnit = 10 ** 18;\r\n    \r\n    // starting with a stable price, the mainnet will override this value\r\n    wbtcPriceCheckpoint = mixTokenUnit;\r\n  }\r\n\r\n  function depositArbCheck() public view returns(bool) {\r\n    uint256 currentPrice = wbtcValueFromMixToken(mixTokenUnit);\r\n    if (currentPrice > wbtcPriceCheckpoint) {\r\n      return currentPrice.mul(100).div(wbtcPriceCheckpoint) > 100 - arbTolerance;\r\n    } else {\r\n      return wbtcPriceCheckpoint.mul(100).div(currentPrice) > 100 - arbTolerance;\r\n    }\r\n  }\r\n\r\n  function setArbTolerance(uint256 tolerance) external onlyGovernance {\r\n    require(tolerance <= 100, \"at most 100\");\r\n    arbTolerance = tolerance;\r\n  }\r\n\r\n  /**\r\n  * Uses the Curve protocol to convert the wbtc asset into to mixed renwbtc token.\r\n  */\r\n  function mixFromWBTC() internal {\r\n    uint256 wbtcBalance = IERC20(wbtc).balanceOf(address(this));\r\n    if (wbtcBalance > 0) {\r\n      IERC20(wbtc).safeApprove(curve, 0);\r\n      IERC20(wbtc).safeApprove(curve, wbtcBalance);\r\n      // we can accept 0 as minimum because this is called only by a trusted role\r\n      uint256 minimum = 0;\r\n      uint256[4] memory coinAmounts = wrapCoinAmount(wbtcBalance);\r\n      ISwerveFi(curve).add_liquidity(\r\n        coinAmounts, minimum\r\n      );\r\n    }\r\n    // now we have the mixed token\r\n  }\r\n\r\n  /**\r\n  * Uses the Curve protocol to convert the mixed token back into the wbtc asset. If it cannot\r\n  * acquire the limit amount, it will acquire the maximum it can.\r\n  */\r\n  function mixToWBTC(uint256 wbtcLimit) internal {\r\n    uint256 mixTokenBalance = IERC20(mixToken).balanceOf(address(this));\r\n\r\n    // this is the maximum number of wbtc we can get for our mixed token\r\n    uint256 wbtcMaximumAmount = wbtcValueFromMixToken(mixTokenBalance);\r\n    if (wbtcMaximumAmount == 0) {\r\n      return;\r\n    }\r\n\r\n    if (wbtcLimit < wbtcMaximumAmount) {\r\n      // we want less than what we can get, we ask for the exact amount\r\n      // now we can remove the liquidity\r\n      uint256[4] memory tokenAmounts = wrapCoinAmount(wbtcLimit);\r\n      IERC20(mixToken).safeApprove(curve, 0);\r\n      IERC20(mixToken).safeApprove(curve, mixTokenBalance);\r\n      ISwerveFi(curve).remove_liquidity_imbalance(\r\n        tokenAmounts, mixTokenBalance\r\n      );\r\n    } else {\r\n      // we want more than we can get, so we withdraw everything\r\n      IERC20(mixToken).safeApprove(curve, 0);\r\n      IERC20(mixToken).safeApprove(curve, mixTokenBalance);\r\n      ISwerveFi(curve).remove_liquidity_one_coin(mixTokenBalance, int128(tokenIndex), 0);\r\n    }\r\n    // now we have wbtc asset\r\n  }\r\n\r\n  /**\r\n  * Withdraws an wbtc asset from the strategy to the vault in the specified amount by asking\r\n  * by removing imbalanced liquidity from the Curve protocol. The rest is deposited back to the\r\n  * Curve protocol pool. If the amount requested cannot be obtained, the method will get as much\r\n  * as we have.\r\n  */\r\n  function withdrawToVault(uint256 amountWbtc) external restricted {\r\n    // withdraw all from gauge\r\n    Gauge(gauge).withdraw(Gauge(gauge).balanceOf(address(this)));\r\n    // convert the mix to WBTC, but get at most amountWbtc\r\n    mixToWBTC(amountWbtc);\r\n    // we can transfer the asset to the vault\r\n    uint256 actualBalance = IERC20(wbtc).balanceOf(address(this));\r\n    if (actualBalance > 0) {\r\n      IERC20(wbtc).safeTransfer(vault, Math.min(amountWbtc, actualBalance));\r\n    }\r\n\r\n    // invest back the rest\r\n    investAllUnderlying();\r\n  }\r\n\r\n  /**\r\n  * Withdraws all assets from the vault.\r\n  */\r\n  function withdrawAllToVault() external restricted {\r\n    // withdraw all from gauge\r\n    Gauge(gauge).withdraw(Gauge(gauge).balanceOf(address(this)));\r\n    // convert the mix to WBTC, we want the entire balance\r\n    mixToWBTC(uint256(~0));\r\n    // we can transfer the asset to the vault\r\n    uint256 actualBalance = IERC20(wbtc).balanceOf(address(this));\r\n    if (actualBalance > 0) {\r\n      IERC20(wbtc).safeTransfer(vault, actualBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Invests all wbtc assets into our mixToken vault.\r\n  */\r\n  function investAllUnderlying() internal {\r\n    // convert the entire balance not yet invested into mixToken first\r\n    mixFromWBTC();\r\n\r\n    // then deposit into the mixToken vault\r\n    uint256 mixTokenBalance = IERC20(mixToken).balanceOf(address(this));\r\n    if (mixTokenBalance > 0) {\r\n      IERC20(mixToken).safeApprove(gauge, 0);\r\n      IERC20(mixToken).safeApprove(gauge, mixTokenBalance);\r\n      Gauge(gauge).deposit(mixTokenBalance);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * The hard work only invests all wbtc assets, and then tells the controller to call hard\r\n  * work on the mixToken vault.\r\n  */\r\n  function doHardWork() public restricted {\r\n    claimAndLiquidateCrv();\r\n    investAllUnderlying();\r\n    wbtcPriceCheckpoint = wbtcValueFromMixToken(mixTokenUnit);\r\n  }\r\n\r\n  /**\r\n  * Salvages a token. We cannot salvage mixToken tokens, CRV, or wbtc assets.\r\n  */\r\n  function salvage(address recipient, address token, uint256 amount) public onlyGovernance {\r\n    // To make sure that governance cannot come in and take away the coins\r\n    require(!unsalvagableTokens[token], \"token is defined as not salvageable\");\r\n    IERC20(token).safeTransfer(recipient, amount);\r\n  }\r\n\r\n  /**\r\n  * Returns the wbtc invested balance. The is the wbtc amount in this stragey, plus the gauge\r\n  * amount of the mixed token converted back to wbtc.\r\n  */\r\n  function investedUnderlyingBalance() public view returns (uint256) {\r\n    uint256 gaugeBalance = Gauge(gauge).balanceOf(address(this));\r\n    uint256 wbtcBalance = IERC20(wbtc).balanceOf(address(this));\r\n    if (gaugeBalance == 0) {\r\n      // !!! if we have 0 balance in gauge, the conversion to wbtc reverts in Curve\r\n      // !!! this if-statement is necessary to avoid transaction reverts\r\n      return wbtcBalance;\r\n    }\r\n    uint256 investedBalance = wbtcValueFromMixToken(gaugeBalance);\r\n    return investedBalance.add(wbtcBalance);\r\n  }\r\n\r\n  function wbtcValueFromMixToken(uint256 mixTokenBalance) public view returns (uint256) {\r\n    return ISwerveFi(curve).calc_withdraw_one_coin(mixTokenBalance,\r\n      int128(tokenIndex));\r\n  }\r\n\r\n  /**\r\n  * Wraps the coin amount in the array for interacting with the Curve protocol\r\n  */\r\n  function wrapCoinAmount(uint256 amount) internal view returns (uint256[4] memory) {\r\n    uint256[4] memory amounts = [uint256(0), uint256(0), uint256(0), uint256(0)];\r\n    amounts[uint56(tokenIndex)] = amount;\r\n    return amounts;\r\n  }\r\n\r\n  /**\r\n  * Claims the CRV crop, converts it to WBTC/renWBTC on Uniswap\r\n  */\r\n  function claimAndLiquidateCrv() internal {\r\n    if (!sell) {\r\n      // Profits can be disabled for possible simplified and rapid exit\r\n      emit ProfitsNotCollected();\r\n      return;\r\n    }\r\n    Mintr(mintr).mint(gauge);\r\n    // claiming rewards and liquidating them\r\n    uint256 crvBalance = IERC20(crv).balanceOf(address(this));\r\n    emit Liquidating(crvBalance);\r\n    if (crvBalance > sellFloor) {\r\n      uint256 wbtcBalanceBefore = IERC20(wbtc).balanceOf(address(this));\r\n      IERC20(crv).safeApprove(uni, 0);\r\n      IERC20(crv).safeApprove(uni, crvBalance);\r\n      // we can accept 1 as the minimum because this will be called only by a trusted worker\r\n      IUniswapV2Router02(uni).swapExactTokensForTokens(\r\n        crvBalance, 1, uniswap_CRV2WBTC, address(this), block.timestamp\r\n      );\r\n\r\n      // now we have WBTC\r\n      notifyProfit(wbtcBalanceBefore, IERC20(wbtc).balanceOf(address(this)));\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Can completely disable claiming CRV rewards and selling. Good for emergency withdraw in the\r\n  * simplest possible way.\r\n  */\r\n  function setSell(bool s) public onlyGovernance {\r\n    sell = s;\r\n  }\r\n\r\n  /**\r\n  * Sets the minimum amount of CRV needed to trigger a sale.\r\n  */\r\n  function setSellFloor(uint256 floor) public onlyGovernance {\r\n    sellFloor = floor;\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/curve/PriceConvertor.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\ninterface IConvertor {\r\n  function calc_withdraw_one_coin(uint256 _token_amount, int128 i) external view returns (uint256);\r\n}\r\n\r\ncontract PriceConvertor is IPriceConvertor {\r\n\r\n  IConvertor public zap = IConvertor(0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3);\r\n\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 i) public view returns (uint256) {\r\n    // this returning the DAI amount, not yDAI\r\n    return zap.calc_withdraw_one_coin(_token_amount, int128(i));\r\n  }\r\n}\r\n\r\ncontract MockPriceConvertor is IPriceConvertor {\r\n  function yCrvToUnderlying(uint256 _token_amount, uint256 /* i */) public view returns (uint256) {\r\n    // counting 1:1\r\n    return _token_amount;\r\n  }\r\n}\r\n\r\n// File: contracts/strategies/curve/CRVStrategySwerveUSDCMainnet.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n/**\r\n* Adds the mainnet addresses to the CRVStrategyWBTC\r\n*/\r\ncontract CRVStrategySwerveUSDCMainnet is CRVStrategySwerve {\r\n\r\n  // token addresses\r\n  // using USDC here\r\n  address constant public __usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n  // mixed token (swerve combo Swerve.fi DAI/USDC/USDT/TUSD (swUSD))\r\n  address constant public __stableMix = address(0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059);\r\n  // the dao reward token for swerve\r\n  address constant public __swrv = address(0xB8BAa0e4287890a5F79863aB62b7F175ceCbD433);\r\n  address constant public __weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n  // swerve gauge\r\n  address constant public __gauge = address(0xb4d0C929cD3A1FbDc6d57E7D3315cF0C4d6B4bFa);\r\n  // swerve minter\r\n  address constant public __mintr = address(0x2c988c3974AD7E604E276AE0294a7228DEf67974); // _mintr\r\n\r\n  // protocols\r\n  // delegate to zap\r\n  address constant public __poolZap = address(0xa746c67eB7915Fa832a4C2076D403D4B68085431);\r\n  address constant public __uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n  uint256 constant public __tokenIndex = 1;\r\n\r\n  constructor(\r\n    address _storage,\r\n    address _vault\r\n  )\r\n  CRVStrategySwerve(\r\n    _storage,\r\n    __usdc,\r\n    _vault,\r\n    __tokenIndex, // token index for USDC\r\n    __stableMix,\r\n    __poolZap, // curve protocol's pool for WBTC\r\n    __swrv, // the reward DAO token address\r\n    __weth,\r\n    __gauge,\r\n    __mintr,\r\n    __uniswap // uniswap\r\n  )\r\n  public {\r\n    wbtcPriceCheckpoint = wbtcValueFromMixToken(mixTokenUnit);\r\n  }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Liquidating\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProfitLog\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ProfitsNotCollected\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"__gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__poolZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__stableMix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__swrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__tokenIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__uniswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"__weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"depositArbCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"doHardWork\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investedUnderlyingBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mixToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mixTokenUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mixVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"profitSharingNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"salvage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellFloor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tolerance\",\"type\":\"uint256\"}],\"name\":\"setArbTolerance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"s\",\"type\":\"bool\"}],\"name\":\"setSell\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floor\",\"type\":\"uint256\"}],\"name\":\"setSellFloor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_store\",\"type\":\"address\"}],\"name\":\"setStorage\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"store\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"uni\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uniswap_CRV2WBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unsalvagableTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wbtcPriceCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mixTokenBalance\",\"type\":\"uint256\"}],\"name\":\"wbtcValueFromMixToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAllToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWbtc\",\"type\":\"uint256\"}],\"name\":\"withdrawToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"CRVStrategySwerveUSDCMainnet","CompilerVersion":"v0.5.16+commit.9c3226ce","OptimizationUsed":"1","Runs":"150","ConstructorArguments":"000000000000000000000000c95cbe4ca30055c787cb784be99d6a8494d0d197000000000000000000000000c3f7ffb5d5869b3ade9448d094d81b0521e8326f","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://70caafe77ca0056e0dbf241fc187e63bc082523a5c2298de0b67fa4a061011d5"}]