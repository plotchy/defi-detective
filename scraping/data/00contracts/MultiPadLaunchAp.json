[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.4.24;\r\n\r\ncontract IMainToken{\r\n    function transfer(address, uint256) public pure  returns (bool);\r\n    function transferFrom(address, address, uint256) public pure  returns (bool);\r\n }\r\n \r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0,\"Invalid values\");\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a,\"Invalid values\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a,\"Invalid values\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0,\"Invalid values\");\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract MultiPadLaunchApp {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    IMainToken iMainToken;\r\n    \r\n    //variable declaration\r\n    address private _owner = msg.sender;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowed;\r\n\r\n    address private tokenContractAddress;\r\n    \r\n\r\n\r\n    function setTokenAddress(address _ITokenContract) onlyOwner external returns(bool){\r\n        tokenContractAddress = _ITokenContract;\r\n        iMainToken = IMainToken(_ITokenContract);\r\n    }\r\n\r\n    \r\n    /*----------------------------------------------------------------------------\r\n     * Functions for owner\r\n     *----------------------------------------------------------------------------\r\n    */\r\n\r\n    /**\r\n    * @dev get address of smart contract owner\r\n    * @return address of owner\r\n    */\r\n    function getowner() external view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n    * @dev modifier to check if the message sender is owner\r\n    */\r\n    modifier onlyOwner() {\r\n        require(isOwner(),\"You are not authenticate to make this transfer\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function for modifier\r\n     */\r\n    function isOwner() internal view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ownership of the smart contract. For owner only\r\n     * @return request status\r\n      */\r\n    function transferOwnership(address newOwner) external onlyOwner returns (bool){\r\n        require(newOwner != address(0), \"Owner address cant be zero\");\r\n        _owner = newOwner;\r\n        return true;\r\n    }\r\n    \r\n    \r\n     /**\r\n      * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\r\n      * @param _addresses array of address in serial order\r\n      * @param _amount amount in serial order with respect to address array\r\n      */\r\n      function airdropByOwner(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\r\n          require(_addresses.length == _amount.length,\"Invalid Array\");\r\n          uint256 count = _addresses.length;\r\n          uint256 airdropcount = 0;\r\n          for (uint256 i = 0; i < count; i++){\r\n               iMainToken.transfer(_addresses[i],_amount[i]);\r\n               airdropcount = airdropcount + 1;\r\n          }\r\n          return true;\r\n      }\r\n      \r\n    function withdrawPeningTokens(uint256 _amount) external onlyOwner returns(bool){\r\n       iMainToken.transfer(msg.sender, _amount);\r\n       return true;\r\n         \r\n    }\r\n    \r\n    /*\r\n     * @dev Admin can withdraw the bnb  \r\n     */\r\n    function withdrawCurrency(uint256 _amount) external onlyOwner returns(bool){\r\n        msg.sender.transfer(_amount);\r\n        return true;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"_ITokenContract\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCurrency\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPeningTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addresses\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"airdropByOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getowner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MultiPadLaunchApp","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"bzzr://355470d5dd5dc30cf862f727f76b45ec5cb34d768fc05141d1e87513ccc8650a"}]