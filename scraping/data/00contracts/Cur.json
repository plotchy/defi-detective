[{"SourceCode":"// SPDX-License-Identifier: AGPL-3.0-or-later\r\n\r\n/// cure.sol -- Debt Rectifier contract\r\n\r\n// Copyright (C) 2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\npragma solidity >=0.6.12;\r\n\r\ninterface SourceLike {\r\n    function cure() external view returns (uint256);\r\n}\r\n\r\ncontract Cure {\r\n    mapping (address => uint256) public wards;\r\n    uint256 public live;\r\n    address[] public srcs;\r\n    uint256 public wait;\r\n    uint256 public when;\r\n    mapping (address => uint256) public pos; // position in srcs + 1, 0 means a source does not exist\r\n    mapping (address => uint256) public amt;\r\n    mapping (address => uint256) public loaded;\r\n    uint256 public lCount;\r\n    uint256 public say;\r\n\r\n    // --- Events ---\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event File(bytes32 indexed what, uint256 data);\r\n    event Lift(address indexed src);\r\n    event Drop(address indexed src);\r\n    event Load(address indexed src);\r\n    event Cage();\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"Cure/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Internal ---\r\n    function _add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x + y) >= x, \"Cure/add-overflow\");\r\n    }\r\n\r\n    function _sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require((z = x - y) <= x, \"Cure/sub-underflow\");\r\n    }\r\n\r\n    constructor() public {\r\n        live = 1;\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n    }\r\n\r\n    function tCount() external view returns (uint256 count_) {\r\n        count_ = srcs.length;\r\n    }\r\n\r\n    function list() external view returns (address[] memory) {\r\n        return srcs;\r\n    }\r\n\r\n    function tell() external view returns (uint256) {\r\n        require(live == 0 && (lCount == srcs.length || block.timestamp >= when), \"Cure/missing-load-and-time-not-passed\");\r\n        return say;\r\n    }\r\n\r\n    function rely(address usr) external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        wards[usr] = 1;\r\n        emit Rely(usr);\r\n    }\r\n\r\n    function deny(address usr) external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        wards[usr] = 0;\r\n        emit Deny(usr);\r\n    }\r\n\r\n    function file(bytes32 what, uint256 data) external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        if (what == \"wait\") wait = data;\r\n        else revert(\"Cure/file-unrecognized-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    function lift(address src) external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        require(pos[src] == 0, \"Cure/already-existing-source\");\r\n        srcs.push(src);\r\n        pos[src] = srcs.length;\r\n        emit Lift(src);\r\n    }\r\n\r\n    function drop(address src) external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        uint256 pos_ = pos[src];\r\n        require(pos_ > 0, \"Cure/non-existing-source\");\r\n        uint256 last = srcs.length;\r\n        if (pos_ < last) {\r\n            address move = srcs[last - 1];\r\n            srcs[pos_ - 1] = move;\r\n            pos[move] = pos_;\r\n        }\r\n        srcs.pop();\r\n        delete pos[src];\r\n        delete amt[src];\r\n        emit Drop(src);\r\n    }\r\n\r\n    function cage() external auth {\r\n        require(live == 1, \"Cure/not-live\");\r\n        live = 0;\r\n        when = _add(block.timestamp, wait);\r\n        emit Cage();\r\n    }\r\n\r\n    function load(address src) external {\r\n        require(live == 0, \"Cure/still-live\");\r\n        require(pos[src] > 0, \"Cure/non-existing-source\");\r\n        uint256 oldAmt_ = amt[src];\r\n        uint256 newAmt_ = amt[src] = SourceLike(src).cure();\r\n        say = _add(_sub(say, oldAmt_), newAmt_);\r\n        if (loaded[src] == 0) {\r\n            loaded[src] = 1;\r\n            lCount++;\r\n        }\r\n        emit Load(src);\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Cage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"Drop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"Lift\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"Load\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"amt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"drop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"lift\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"}],\"name\":\"load\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loaded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pos\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"say\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"srcs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"when\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Cure","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unknown","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07fe1f800d2bb5f9153fbfd05e78d9d13759a2748f7e665448fe8c75fb281f99"}]