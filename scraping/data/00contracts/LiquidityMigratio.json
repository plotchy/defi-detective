[{"SourceCode":"//SPDX-License-Identifier: GPL-3.0-or-later\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface IERC20NonStandard {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\ninterface IEstimator {\r\n    function estimateItem(\r\n        uint256 balance,\r\n        address token\r\n    ) external view returns (int256);\r\n}\r\n\r\n\r\n\r\ninterface StrategyTypes {\r\n\r\n    enum ItemCategory {BASIC, SYNTH, DEBT, RESERVE}\r\n    enum EstimatorCategory {\r\n      DEFAULT_ORACLE,\r\n      CHAINLINK_ORACLE,\r\n      UNISWAP_TWAP_ORACLE,\r\n      SUSHI_TWAP_ORACLE,\r\n      STRATEGY,\r\n      BLOCKED,\r\n      AAVE_V1,\r\n      AAVE_V2,\r\n      AAVE_DEBT,\r\n      BALANCER,\r\n      COMPOUND,\r\n      CURVE,\r\n      CURVE_GAUGE,\r\n      SUSHI_LP,\r\n      SUSHI_FARM,\r\n      UNISWAP_V2_LP,\r\n      UNISWAP_V3_LP,\r\n      YEARN_V1,\r\n      YEARN_V2\r\n    }\r\n    enum TimelockCategory {RESTRUCTURE, THRESHOLD, REBALANCE_SLIPPAGE, RESTRUCTURE_SLIPPAGE, TIMELOCK, PERFORMANCE}\r\n\r\n    struct StrategyItem {\r\n        address item;\r\n        int256 percentage;\r\n        TradeData data;\r\n    }\r\n\r\n    struct TradeData {\r\n        address[] adapters;\r\n        address[] path;\r\n        bytes cache;\r\n    }\r\n\r\n    struct InitialState {\r\n        uint32 timelock;\r\n        uint16 rebalanceThreshold;\r\n        uint16 rebalanceSlippage;\r\n        uint16 restructureSlippage;\r\n        uint16 performanceFee;\r\n        bool social;\r\n        bool set;\r\n    }\r\n\r\n    struct StrategyState {\r\n        uint32 timelock;\r\n        uint16 rebalanceSlippage;\r\n        uint16 restructureSlippage;\r\n        bool social;\r\n        bool set;\r\n    }\r\n\r\n    /**\r\n        @notice A time lock requirement for changing the state of this Strategy\r\n        @dev WARNING: Only one TimelockCategory can be pending at a time\r\n    */\r\n    struct Timelock {\r\n        TimelockCategory category;\r\n        uint256 timestamp;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\n\r\ninterface IWhitelist {\r\n    function approve(address account) external;\r\n\r\n    function revoke(address account) external;\r\n\r\n    function approved(address account) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface ITokenRegistry {\r\n    function itemCategories(address token) external view returns (uint256);\r\n\r\n    function estimatorCategories(address token) external view returns (uint256);\r\n\r\n    function estimators(uint256 categoryIndex) external view returns (IEstimator);\r\n\r\n    function getEstimator(address token) external view returns (IEstimator);\r\n\r\n    function addEstimator(uint256 estimatorCategoryIndex, address estimator) external;\r\n\r\n    function addItem(uint256 itemCategoryIndex, uint256 estimatorCategoryIndex, address token) external;\r\n}\r\n\r\n\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\ninterface IOracle {\r\n    function weth() external view returns (address);\r\n\r\n    function susd() external view returns (address);\r\n\r\n    function tokenRegistry() external view returns (ITokenRegistry);\r\n\r\n    function estimateStrategy(IStrategy strategy) external view returns (uint256, int256[] memory);\r\n\r\n    function estimateItem(\r\n        uint256 balance,\r\n        address token\r\n    ) external view returns (int256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategyRouter {\r\n    enum RouterCategory {GENERIC, LOOP, SYNTH, BATCH}\r\n\r\n    function rebalance(address strategy, bytes calldata data) external;\r\n\r\n    function restructure(address strategy, bytes calldata data) external;\r\n\r\n    function deposit(address strategy, bytes calldata data) external;\r\n\r\n    function withdraw(address strategy, bytes calldata) external;\r\n\r\n    function controller() external view returns (IStrategyController);\r\n\r\n    function category() external view returns (RouterCategory);\r\n}\r\n\r\n\r\n\r\ninterface IAdapter {\r\n    struct Call {\r\n        address target;\r\n        bytes callData;\r\n    }\r\n\r\n    function outputTokens(address inputToken) external view returns (address[] memory outputs);\r\n\r\n    function encodeMigration(address _genericRouter, address _strategy, address _lp, uint256 _amount)\r\n        external view returns (Call[] memory calls);\r\n\r\n    function encodeWithdraw(address _lp, uint256 _amount) external view returns (Call[] memory calls);\r\n\r\n    function buy(address _lp, address _exchange, uint256 _minAmountOut, uint256 _deadline) external payable;\r\n\r\n    function getAmountOut(address _lp, address _exchange, uint256 _amountIn) external returns (uint256);\r\n\r\n    function isWhitelisted(address _token) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategyProxyFactory is StrategyTypes{\r\n    function createStrategy(\r\n        address manager,\r\n        string memory name,\r\n        string memory symbol,\r\n        StrategyItem[] memory strategyItems,\r\n        InitialState memory strategyInit,\r\n        address router,\r\n        bytes memory data\r\n    ) external payable returns (address);\r\n\r\n    function updateProxyVersion(address proxy) external;\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function oracle() external view returns (address);\r\n\r\n    function whitelist() external view returns (address);\r\n\r\n    function pool() external view returns (address);\r\n\r\n    function version() external view returns (string memory);\r\n\r\n    function getManager(address proxy) external view returns (address);\r\n\r\n    function salt(address manager, string memory name, string memory symbol) external pure returns (bytes32);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategyToken is IERC20NonStandard {\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategy is IStrategyToken, StrategyTypes {\r\n    function approveToken(\r\n        address token,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function approveDebt(\r\n        address token,\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function approveSynths(\r\n        address account,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function setStructure(StrategyItem[] memory newItems) external;\r\n\r\n    function setCollateral(address token) external;\r\n\r\n    function withdrawAll(uint256 amount) external;\r\n\r\n    function mint(address account, uint256 amount) external;\r\n\r\n    function burn(address account, uint256 amount) external returns (uint256);\r\n\r\n    function delegateSwap(\r\n        address adapter,\r\n        uint256 amount,\r\n        address tokenIn,\r\n        address tokenOut\r\n    ) external;\r\n\r\n    function settleSynths() external;\r\n\r\n    function issueStreamingFee() external;\r\n\r\n    function updateTokenValue(uint256 total, uint256 supply) external;\r\n\r\n    function updatePerformanceFee(uint16 fee) external;\r\n\r\n    function updateRebalanceThreshold(uint16 threshold) external;\r\n\r\n    function updateTradeData(address item, TradeData memory data) external;\r\n\r\n    function lock() external;\r\n\r\n    function unlock() external;\r\n\r\n    function locked() external view returns (bool);\r\n\r\n    function items() external view returns (address[] memory);\r\n\r\n    function synths() external view returns (address[] memory);\r\n\r\n    function debt() external view returns (address[] memory);\r\n\r\n    function rebalanceThreshold() external view returns (uint256);\r\n\r\n    function performanceFee() external view returns (uint256);\r\n\r\n    function getPercentage(address item) external view returns (int256);\r\n\r\n    function getTradeData(address item) external view returns (TradeData memory);\r\n\r\n    function getPerformanceFeeOwed(address account) external view returns (uint256);\r\n\r\n    function controller() external view returns (address);\r\n\r\n    function manager() external view returns (address);\r\n\r\n    function oracle() external view returns (IOracle);\r\n\r\n    function whitelist() external view returns (IWhitelist);\r\n\r\n    function supportsSynths() external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface IStrategyController is StrategyTypes {\r\n    function setupStrategy(\r\n        address manager_,\r\n        address strategy_,\r\n        InitialState memory state_,\r\n        address router_,\r\n        bytes memory data_\r\n    ) external payable;\r\n\r\n    function deposit(\r\n        IStrategy strategy,\r\n        IStrategyRouter router,\r\n        uint256 amount,\r\n        uint256 slippage,\r\n        bytes memory data\r\n    ) external payable;\r\n\r\n    function withdrawETH(\r\n        IStrategy strategy,\r\n        IStrategyRouter router,\r\n        uint256 amount,\r\n        uint256 slippage,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function withdrawWETH(\r\n        IStrategy strategy,\r\n        IStrategyRouter router,\r\n        uint256 amount,\r\n        uint256 slippage,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function rebalance(\r\n        IStrategy strategy,\r\n        IStrategyRouter router,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function restructure(\r\n        IStrategy strategy,\r\n        StrategyItem[] memory strategyItems\r\n    ) external;\r\n\r\n    function finalizeStructure(\r\n        IStrategy strategy,\r\n        IStrategyRouter router,\r\n        bytes memory data\r\n    ) external;\r\n\r\n    function updateValue(\r\n        IStrategy strategy,\r\n        TimelockCategory category,\r\n        uint256 newValue\r\n    ) external;\r\n\r\n    function finalizeValue(address strategy) external;\r\n\r\n    function openStrategy(IStrategy strategy, uint256 fee) external;\r\n\r\n    function setStrategy(IStrategy strategy) external;\r\n\r\n    function initialized(address strategy) external view returns (bool);\r\n\r\n    function strategyState(address strategy) external view returns (StrategyState memory);\r\n\r\n    function verifyStructure(address strategy, StrategyItem[] memory newItems)\r\n        external\r\n        view\r\n        returns (bool);\r\n\r\n    function oracle() external view returns (IOracle);\r\n\r\n    function whitelist() external view returns (IWhitelist);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function _setOwner(address owner_) \r\n        internal\r\n    {\r\n        _owner = owner_;\r\n        emit OwnershipTransferred(address(0), owner_);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract Timelocked is Ownable {\r\n\r\n    uint256 public unlocked; // timestamp unlock migration\r\n    uint256 public modify;   // timestamp disallow changes\r\n\r\n    /**\r\n    * @dev Require unlock time met\r\n    */\r\n    modifier onlyUnlocked() {\r\n        require(block.timestamp >= unlocked, \"Timelock#onlyUnlocked: not unlocked\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Require modifier time not met\r\n    */\r\n    modifier onlyModify() {\r\n        require(block.timestamp < modify, \"Timelock#onlyModify: cannot modify\");\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 unlock_, uint256 modify_, address owner_) {\r\n        require(unlock_ > block.timestamp, 'Timelock#not greater');\r\n        unlocked = unlock_;\r\n        modify = modify_;\r\n        _setOwner(owner_);\r\n    }\r\n\r\n    function updateUnlock(\r\n        uint256 unlock_\r\n    ) \r\n        public\r\n        onlyOwner\r\n        onlyModify\r\n    {\r\n        unlocked = unlock_;\r\n    }\r\n}\r\n\r\ncontract LiquidityMigration is Timelocked, StrategyTypes {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public generic;\r\n    address public controller;\r\n    IStrategyProxyFactory public factory;\r\n\r\n    mapping (address => bool) public adapters;\r\n    mapping (address => uint256) public stakedCount;\r\n    mapping (address => mapping (address => uint256)) public staked;\r\n    mapping (address => bool) private _tempIsUnderlying;\r\n\r\n\r\n    event Staked(address adapter, address strategy, uint256 amount, address account);\r\n    event Migrated(address adapter, address lp, address strategy, address account);\r\n    event Created(address adapter, address lp, address strategy, address account);\r\n    event Refunded(address lp, uint256 amount, address account);\r\n\r\n    /**\r\n    * @dev Require adapter registered\r\n    */\r\n    modifier onlyRegistered(address _adapter) {\r\n        require(adapters[_adapter], \"Claimable#onlyState: not registered adapter\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Require adapter allows lp\r\n    */\r\n    modifier onlyWhitelisted(address _adapter, address _lp) {\r\n        require(IAdapter(_adapter).isWhitelisted(_lp), \"Claimable#onlyState: not whitelisted strategy\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address[] memory adapters_,\r\n        address generic_,\r\n        IStrategyProxyFactory factory_,\r\n        address controller_,\r\n        uint256 _unlock,\r\n        uint256 _modify,\r\n        address _owner\r\n    )\r\n        Timelocked(_unlock, _modify, _owner)\r\n    {\r\n        for (uint256 i = 0; i < adapters_.length; i++) {\r\n            adapters[adapters_[i]] = true;\r\n        }\r\n        generic = generic_;\r\n        factory = factory_;\r\n        controller = controller_;\r\n    }\r\n\r\n    function stake(\r\n        address _lp,\r\n        uint256 _amount,\r\n        address _adapter\r\n    )\r\n        public\r\n    {\r\n        IERC20(_lp).safeTransferFrom(msg.sender, address(this), _amount);\r\n        _stake(_lp, _amount, _adapter);\r\n    }\r\n\r\n    function buyAndStake(\r\n        address _lp,\r\n        address _adapter,\r\n        address _exchange,\r\n        uint256 _minAmountOut,\r\n        uint256 _deadline\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        _buyAndStake(_lp, msg.value, _adapter, _exchange, _minAmountOut, _deadline);\r\n    }\r\n\r\n    function batchStake(\r\n        address[] memory _lp,\r\n        uint256[] memory _amount,\r\n        address[] memory _adapter\r\n    )\r\n        external\r\n    {\r\n        require(_lp.length == _amount.length, \"LiquidityMigration#batchStake: not same length\");\r\n        require(_amount.length == _adapter.length, \"LiquidityMigration#batchStake: not same length\");\r\n\r\n        for (uint256 i = 0; i < _lp.length; i++) {\r\n            stake(_lp[i], _amount[i], _adapter[i]);\r\n        }\r\n    }\r\n\r\n    function batchBuyAndStake(\r\n        address[] memory _lp,\r\n        uint256[] memory _amount,\r\n        address[] memory _adapter,\r\n        address[] memory _exchange,\r\n        uint256[] memory _minAmountOut,\r\n        uint256 _deadline\r\n    )\r\n        external\r\n        payable\r\n    {\r\n        require(_amount.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\r\n        require(_adapter.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\r\n        require(_exchange.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\r\n        require(_minAmountOut.length == _lp.length, \"LiquidityMigration#batchBuyAndStake: not same length\");\r\n\r\n        uint256 total = 0;\r\n        for (uint256 i = 0; i < _lp.length; i++) {\r\n            total = total + _amount[i];\r\n            _buyAndStake(_lp[i], _amount[i], _adapter[i], _exchange[i], _minAmountOut[i], _deadline);\r\n        }\r\n        require(msg.value == total, \"LiquidityMigration#batchBuyAndStake: incorrect amounts\");\r\n    }\r\n\r\n    function migrate(\r\n        address _lp,\r\n        address _adapter,\r\n        IStrategy _strategy,\r\n        uint256 _slippage\r\n    )\r\n        external\r\n        onlyUnlocked\r\n    {\r\n        _migrate(msg.sender, _lp, _adapter, _strategy, _slippage);\r\n    }\r\n\r\n    function migrate(\r\n        address _user,\r\n        address _lp,\r\n        address _adapter,\r\n        IStrategy _strategy,\r\n        uint256 _slippage\r\n    )\r\n        external\r\n        onlyOwner\r\n        onlyUnlocked\r\n    {\r\n        _migrate(_user, _lp, _adapter, _strategy, _slippage);\r\n    }\r\n\r\n    function batchMigrate(\r\n        address[] memory _lp,\r\n        address[] memory _adapter,\r\n        IStrategy[] memory _strategy,\r\n        uint256[] memory _slippage\r\n    )\r\n        external\r\n        onlyUnlocked\r\n    {\r\n        require(_lp.length == _adapter.length);\r\n        require(_adapter.length == _strategy.length);\r\n\r\n        for (uint256 i = 0; i < _lp.length; i++) {\r\n            _migrate(msg.sender, _lp[i], _adapter[i], _strategy[i], _slippage[i]);\r\n        }\r\n    }\r\n\r\n    function batchMigrate(\r\n        address[] memory _user,\r\n        address[] memory _lp,\r\n        address[] memory _adapter,\r\n        IStrategy[] memory _strategy,\r\n        uint256[] memory _slippage\r\n    )\r\n        external\r\n        onlyOwner\r\n        onlyUnlocked\r\n    {\r\n        require(_user.length == _lp.length);\r\n        require(_lp.length == _adapter.length);\r\n        require(_adapter.length == _strategy.length);\r\n\r\n        for (uint256 i = 0; i < _lp.length; i++) {\r\n            _migrate(_user[i], _lp[i], _adapter[i], _strategy[i], _slippage[i]);\r\n        }\r\n    }\r\n\r\n    function refund(\r\n        address _user,\r\n        address _lp\r\n    )\r\n        public\r\n        onlyOwner\r\n    {\r\n        _refund(_user, _lp);\r\n    }\r\n\r\n    function batchRefund(address[] memory _users, address _lp)\r\n        public\r\n        onlyOwner\r\n    {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            _refund(_users[i], _lp);\r\n        }\r\n    }\r\n    function _refund(\r\n        address _user,\r\n        address _lp\r\n    )\r\n        internal\r\n    {\r\n        uint256 _amount = staked[_user][_lp];\r\n        require(_amount > 0, 'LiquidityMigration#_refund: no stake');\r\n        delete staked[_user][_lp];\r\n\r\n        IERC20(_lp).safeTransfer(_user, _amount);\r\n        emit Refunded(_lp, _amount, _user);\r\n    }\r\n\r\n    function _migrate(\r\n        address _user,\r\n        address _lp,\r\n        address _adapter,\r\n        IStrategy _strategy,\r\n        uint256 _slippage\r\n    )\r\n        internal\r\n        onlyRegistered(_adapter)\r\n        onlyWhitelisted(_adapter, _lp)\r\n    {\r\n        require(\r\n            IStrategyController(controller).initialized(address(_strategy)),\r\n            \"LiquidityMigration#_migrate: not enso strategy\"\r\n        );\r\n\r\n        uint256 _stakeAmount = staked[_user][_lp];\r\n        require(_stakeAmount > 0, \"LiquidityMigration#_migrate: not staked\");\r\n\r\n        delete staked[_user][_lp];\r\n        IERC20(_lp).safeTransfer(generic, _stakeAmount);\r\n\r\n        uint256 _before = _strategy.balanceOf(address(this));\r\n        bytes memory migrationData =\r\n            abi.encode(IAdapter(_adapter).encodeMigration(generic, address(_strategy), _lp, _stakeAmount));\r\n        IStrategyController(controller).deposit(_strategy, IStrategyRouter(generic), 0, _slippage, migrationData);\r\n        uint256 _after = _strategy.balanceOf(address(this));\r\n\r\n        _strategy.transfer(_user, (_after - _before));\r\n        emit Migrated(_adapter, _lp, address(_strategy), _user);\r\n    }\r\n\r\n    function _stake(\r\n        address _lp,\r\n        uint256 _amount,\r\n        address _adapter\r\n    )\r\n        internal\r\n        onlyRegistered(_adapter)\r\n        onlyWhitelisted(_adapter, _lp)\r\n    {\r\n        staked[msg.sender][_lp] += _amount;\r\n        stakedCount[_adapter] += 1;\r\n        emit Staked(_adapter, _lp, _amount, msg.sender);\r\n    }\r\n\r\n    function _buyAndStake(\r\n        address _lp,\r\n        uint256 _amount,\r\n        address _adapter,\r\n        address _exchange,\r\n        uint256 _minAmountOut,\r\n        uint256 _deadline\r\n    )\r\n        internal\r\n    {\r\n        uint256 balanceBefore = IERC20(_lp).balanceOf(address(this));\r\n        IAdapter(_adapter).buy{value: _amount}(_lp, _exchange, _minAmountOut, _deadline);\r\n        uint256 amountAdded = IERC20(_lp).balanceOf(address(this)) - balanceBefore;\r\n        _stake(_lp, amountAdded, _adapter);\r\n    }\r\n\r\n    function createStrategy(\r\n        address _lp,\r\n        address _adapter,\r\n        bytes calldata data\r\n    )\r\n        public\r\n        onlyRegistered(_adapter)\r\n        onlyWhitelisted(_adapter, _lp)\r\n    {\r\n        ( , , , StrategyItem[] memory strategyItems, , , ) = abi.decode(\r\n            data,\r\n            (address, string, string, StrategyItem[], InitialState, address, bytes)\r\n        );\r\n        _validateItems(_adapter, _lp, strategyItems);\r\n        address strategy = _createStrategy(data);\r\n        emit Created(_adapter, _lp, strategy, msg.sender);\r\n    }\r\n\r\n    function updateController(address _controller)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(controller != _controller, \"LiquidityMigration#updateController: already exists\");\r\n        controller = _controller;\r\n    }\r\n\r\n    function updateGeneric(address _generic)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(generic != _generic, \"LiquidityMigration#updateGeneric: already exists\");\r\n        generic = _generic;\r\n    }\r\n\r\n    function updateFactory(address _factory)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(factory != IStrategyProxyFactory(_factory), \"LiquidityMigration#updateFactory: already exists\");\r\n        factory = IStrategyProxyFactory(_factory);\r\n    }\r\n\r\n    function addAdapter(address _adapter)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(!adapters[_adapter], \"LiquidityMigration#updateAdapter: already exists\");\r\n        adapters[_adapter] = true;\r\n    }\r\n\r\n    function removeAdapter(address _adapter)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(adapters[_adapter], \"LiquidityMigration#updateAdapter: does not exist\");\r\n        adapters[_adapter] = false;\r\n    }\r\n\r\n    function hasStaked(address _account, address _lp)\r\n        external\r\n        view\r\n        returns(bool)\r\n    {\r\n        return staked[_account][_lp] > 0;\r\n    }\r\n\r\n    function getStakeCount(address _adapter)\r\n        external\r\n        view\r\n        returns(uint256)\r\n    {\r\n        return stakedCount[_adapter];\r\n    }\r\n\r\n    function _validateItems(address adapter, address lp, StrategyItem[] memory strategyItems) private {\r\n        address[] memory underlyingTokens = IAdapter(adapter).outputTokens(lp);\r\n        for (uint i = 0; i < underlyingTokens.length; i++) {\r\n            _tempIsUnderlying[underlyingTokens[i]] = true;\r\n        }\r\n        uint256 total = strategyItems.length;\r\n        for (uint i = 0; i < strategyItems.length; i++) {\r\n            // Strategies may have reserve tokens (such as weth) that don't have value\r\n            // So we must be careful not to invalidate a strategy for having them\r\n            if (!_tempIsUnderlying[strategyItems[i].item]) {\r\n                if (strategyItems[i].percentage == 0) {\r\n                    total--;\r\n                } else {\r\n                    revert(\"LiquidityMigration#createStrategy: incorrect length\");\r\n                }\r\n            } else {\r\n                // Otherwise just remove the cached bool after we've checked it\r\n                delete _tempIsUnderlying[strategyItems[i].item];\r\n            }\r\n        }\r\n        // If there are some cached bools that have not been deleted then this check will cause a revert\r\n        require(total == underlyingTokens.length, \"LiquidityMigration#createStrategy: does not exist\");\r\n    }\r\n\r\n    function _createStrategy(bytes memory data) private returns (address) {\r\n        (\r\n            address manager,\r\n            string memory name,\r\n            string memory symbol,\r\n            StrategyItem[] memory strategyItems,\r\n            InitialState memory strategyState,\r\n            address router,\r\n            bytes memory depositData\r\n        ) = abi.decode(\r\n            data,\r\n            (address, string, string, StrategyItem[], InitialState, address, bytes)\r\n        );\r\n        return factory.createStrategy(\r\n            manager,\r\n            name,\r\n            symbol,\r\n            strategyItems,\r\n            strategyState,\r\n            router,\r\n            depositData\r\n        );\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"adapters_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"generic_\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyProxyFactory\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_modify\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Refunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lp\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapter\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_exchange\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmountOut\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"batchBuyAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lp\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapter\",\"type\":\"address[]\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"_strategy\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_slippage\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_user\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_lp\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapter\",\"type\":\"address[]\"},{\"internalType\":\"contract IStrategy[]\",\"name\":\"_strategy\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_slippage\",\"type\":\"uint256[]\"}],\"name\":\"batchMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"batchRefund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_lp\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amount\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapter\",\"type\":\"address[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchange\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"buyAndStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"createStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IStrategyProxyFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"getStakeCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modify\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lp\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"updateController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"updateFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_generic\",\"type\":\"address\"}],\"name\":\"updateGeneric\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unlock_\",\"type\":\"uint256\"}],\"name\":\"updateUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"LiquidityMigration","CompilerVersion":"v0.8.2+commit.661d1103","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000061d7790affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000058ce791454e62f6a5392706745cd863a4f1f52ac00000000000000000000000000000000000000000000000000000000000000060000000000000000000000005f2c716d912ce400a8a49fb87db722e8257257a7000000000000000000000000e149b1f2ef564a289dc094215835f3c8df1695aa0000000000000000000000008f516c0fb0bcf44cfc8d42d60dad3e4cdb35ce260000000000000000000000009c9326c521895c78414bd3c2945e47afc4ef16cc000000000000000000000000ae6859311c341bac4e0bceca0242247c16718ff10000000000000000000000000a883a62660328ead442eb6c2311668ba9c12e57","EVMVersion":"Default","Library":"","LicenseType":"GNU LGPLv3","Proxy":"0","Implementation":"","SwarmSource":"ipfs://814b03edae956f9b21eea6d3058f3302626f767295a322ba00af7ac8f53a1794"}]