[{"SourceCode":"pragma solidity ^0.4.10;\r\n\r\ncontract GasToken2 {\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // RLP.sol\r\n    // Due to some unexplained bug, we get a slightly different bytecode if \r\n    // we use an import, and are then unable to verify the code in Etherscan\r\n    //////////////////////////////////////////////////////////////////////////\r\n    \r\n    uint256 constant ADDRESS_BYTES = 20;\r\n    uint256 constant MAX_SINGLE_BYTE = 128;\r\n    uint256 constant MAX_NONCE = 256**9 - 1;\r\n\r\n    // count number of bytes required to represent an unsigned integer\r\n    function count_bytes(uint256 n) constant internal returns (uint256 c) {\r\n        uint i = 0;\r\n        uint mask = 1;\r\n        while (n >= mask) {\r\n            i += 1;\r\n            mask *= 256;\r\n        }\r\n\r\n        return i;\r\n    }\r\n\r\n    function mk_contract_address(address a, uint256 n) constant internal returns (address rlp) {\r\n        /*\r\n         * make sure the RLP encoding fits in one word:\r\n         * total_length      1 byte\r\n         * address_length    1 byte\r\n         * address          20 bytes\r\n         * nonce_length      1 byte (or 0)\r\n         * nonce           1-9 bytes\r\n         *                ==========\r\n         *                24-32 bytes\r\n         */\r\n        require(n <= MAX_NONCE);\r\n\r\n        // number of bytes required to write down the nonce\r\n        uint256 nonce_bytes;\r\n        // length in bytes of the RLP encoding of the nonce\r\n        uint256 nonce_rlp_len;\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            // nonce fits in a single byte\r\n            // RLP(nonce) = nonce\r\n            nonce_bytes = 1;\r\n            nonce_rlp_len = 1;\r\n        } else {\r\n            // RLP(nonce) = [num_bytes_in_nonce nonce]\r\n            nonce_bytes = count_bytes(n);\r\n            nonce_rlp_len = nonce_bytes + 1;\r\n        }\r\n\r\n        // [address_length(1) address(20) nonce_length(0 or 1) nonce(1-9)]\r\n        uint256 tot_bytes = 1 + ADDRESS_BYTES + nonce_rlp_len;\r\n\r\n        // concatenate all parts of the RLP encoding in the leading bytes of\r\n        // one 32-byte word\r\n        uint256 word = ((192 + tot_bytes) * 256**31) +\r\n                       ((128 + ADDRESS_BYTES) * 256**30) +\r\n                       (uint256(a) * 256**10);\r\n\r\n        if (0 < n && n < MAX_SINGLE_BYTE) {\r\n            word += n * 256**9;\r\n        } else {\r\n            word += (128 + nonce_bytes) * 256**9;\r\n            word += n * 256**(9 - nonce_bytes);\r\n        }\r\n\r\n        uint256 hash;\r\n\r\n        assembly {\r\n            let mem_start := mload(0x40)        // get a pointer to free memory\r\n            mstore(0x40, add(mem_start, 0x20))  // update the pointer\r\n\r\n            mstore(mem_start, word)             // store the rlp encoding\r\n            hash := sha3(mem_start,\r\n                         add(tot_bytes, 1))     // hash the rlp encoding\r\n        }\r\n\r\n        // interpret hash as address (20 least significant bytes)\r\n        return address(hash);\r\n    }\r\n    \r\n    //////////////////////////////////////////////////////////////////////////\r\n    // Generic ERC20\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    // owner -> amount\r\n    mapping(address => uint256) s_balances;\r\n    // owner -> spender -> max amount\r\n    mapping(address => mapping(address => uint256)) s_allowances;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // Spec: Get the account balance of another account with address `owner`\r\n    function balanceOf(address owner) public constant returns (uint256 balance) {\r\n        return s_balances[owner];\r\n    }\r\n\r\n    function internalTransfer(address from, address to, uint256 value) internal returns (bool success) {\r\n        if (value <= s_balances[from]) {\r\n            s_balances[from] -= value;\r\n            s_balances[to] += value;\r\n            Transfer(from, to, value);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens to address `to`\r\n    function transfer(address to, uint256 value) public returns (bool success) {\r\n        address from = msg.sender;\r\n        return internalTransfer(from, to, value);\r\n    }\r\n\r\n    // Spec: Send `value` amount of tokens from address `from` to address `to`\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        if(value <= s_allowances[from][spender] && internalTransfer(from, to, value)) {\r\n            s_allowances[from][spender] -= value;\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Spec: Allow `spender` to withdraw from your account, multiple times, up\r\n    // to the `value` amount. If this function is called again it overwrites the\r\n    // current allowance with `value`.\r\n    function approve(address spender, uint256 value) public returns (bool success) {\r\n        address owner = msg.sender;\r\n        if (value != 0 && s_allowances[owner][spender] != 0) {\r\n            return false;\r\n        }\r\n        s_allowances[owner][spender] = value;\r\n        Approval(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    // Spec: Returns the `amount` which `spender` is still allowed to withdraw\r\n    // from `owner`.\r\n    // What if the allowance is higher than the balance of the `owner`?\r\n    // Callers should be careful to use min(allowance, balanceOf) to make sure\r\n    // that the allowance is actually present in the account!\r\n    function allowance(address owner, address spender) public constant returns (uint256 remaining) {\r\n        return s_allowances[owner][spender];\r\n    }\r\n\r\n    //////////////////////////////////////////////////////////////////////////\r\n    // GasToken specifics\r\n    //////////////////////////////////////////////////////////////////////////\r\n\r\n    uint8 constant public decimals = 2;\r\n    string constant public name = \"Gastoken.io\";\r\n    string constant public symbol = \"GST2\";\r\n\r\n    // We build a queue of nonces at which child contracts are stored. s_head is\r\n    // the nonce at the head of the queue, s_tail is the nonce behind the tail\r\n    // of the queue. The queue grows at the head and shrinks from the tail.\r\n    // Note that when and only when a contract CREATEs another contract, the\r\n    // creating contract's nonce is incremented.\r\n    // The first child contract is created with nonce == 1, the second child\r\n    // contract is created with nonce == 2, and so on...\r\n    // For example, if there are child contracts at nonces [2,3,4],\r\n    // then s_head == 4 and s_tail == 1. If there are no child contracts,\r\n    // s_head == s_tail.\r\n    uint256 s_head;\r\n    uint256 s_tail;\r\n\r\n    // totalSupply gives  the number of tokens currently in existence\r\n    // Each token corresponds to one child contract that can be SELFDESTRUCTed\r\n    // for a gas refund.\r\n    function totalSupply() public constant returns (uint256 supply) {\r\n        return s_head - s_tail;\r\n    }\r\n\r\n    // Creates a child contract that can only be destroyed by this contract.\r\n    function makeChild() internal returns (address addr) {\r\n        assembly {\r\n            // EVM assembler of runtime portion of child contract:\r\n            //     ;; Pseudocode: if (msg.sender != 0x0000000000b3f879cb30fe243b4dfee438691c04) { throw; }\r\n            //     ;;             suicide(msg.sender)\r\n            //     PUSH15 0xb3f879cb30fe243b4dfee438691c04 ;; hardcoded address of this contract\r\n            //     CALLER\r\n            //     XOR\r\n            //     PC\r\n            //     JUMPI\r\n            //     CALLER\r\n            //     SELFDESTRUCT\r\n            // Or in binary: 6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            // Since the binary is so short (22 bytes), we can get away\r\n            // with a very simple initcode:\r\n            //     PUSH22 0x6eb3f879cb30fe243b4dfee438691c043318585733ff\r\n            //     PUSH1 0\r\n            //     MSTORE ;; at this point, memory locations mem[10] through\r\n            //            ;; mem[31] contain the runtime portion of the child\r\n            //            ;; contract. all that's left to do is to RETURN this\r\n            //            ;; chunk of memory.\r\n            //     PUSH1 22 ;; length\r\n            //     PUSH1 10 ;; offset\r\n            //     RETURN\r\n            // Or in binary: 756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3\r\n            // Almost done! All we have to do is put this short (31 bytes) blob into\r\n            // memory and call CREATE with the appropriate offsets.\r\n            let solidity_free_mem_ptr := mload(0x40)\r\n            mstore(solidity_free_mem_ptr, 0x00756eb3f879cb30fe243b4dfee438691c043318585733ff6000526016600af3)\r\n            addr := create(0, add(solidity_free_mem_ptr, 1), 31)\r\n        }\r\n    }\r\n\r\n    // Mints `value` new sub-tokens (e.g. cents, pennies, ...) by creating `value`\r\n    // new child contracts. The minted tokens are owned by the caller of this\r\n    // function.\r\n    function mint(uint256 value) public {\r\n        for (uint256 i = 0; i < value; i++) {\r\n            makeChild();\r\n        }\r\n        s_head += value;\r\n        s_balances[msg.sender] += value;\r\n    }\r\n\r\n    // Destroys `value` child contracts and updates s_tail.\r\n    //\r\n    // This function is affected by an issue in solc: https://github.com/ethereum/solidity/issues/2999\r\n    // The `mk_contract_address(this, i).call();` doesn't forward all available gas, but only GAS - 25710.\r\n    // As a result, when this line is executed with e.g. 30000 gas, the callee will have less than 5000 gas\r\n    // available and its SELFDESTRUCT operation will fail leading to no gas refund occurring.\r\n    // The remaining ~29000 gas left after the call is enough to update s_tail and the caller's balance.\r\n    // Hence tokens will have been destroyed without a commensurate gas refund.\r\n    // Fortunately, there is a simple workaround:\r\n    // Whenever you call free, freeUpTo, freeFrom, or freeUpToFrom, ensure that you pass at least\r\n    // 25710 + `value` * (1148 + 5722 + 150) gas. (It won't all be used)\r\n    function destroyChildren(uint256 value) internal {\r\n        uint256 tail = s_tail;\r\n        // tail points to slot behind the last contract in the queue\r\n        for (uint256 i = tail + 1; i <= tail + value; i++) {\r\n            mk_contract_address(this, i).call();\r\n        }\r\n\r\n        s_tail = tail + value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens (e.g. cents, pennies, ...) belonging to the\r\n    // caller of this function by destroying `value` child contracts, which\r\n    // will trigger a partial gas refund.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function free(uint256 value) public returns (bool success) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens. Returns how many tokens were freed.\r\n    // Otherwise, identical to free.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeUpTo(uint256 value) public returns (uint256 freed) {\r\n        uint256 from_balance = s_balances[msg.sender];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[msg.sender] = from_balance - value;\r\n\r\n        return value;\r\n    }\r\n\r\n    // Frees `value` sub-tokens owned by address `from`. Requires that `msg.sender`\r\n    // has been approved by `from`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFrom(address from, uint256 value) public returns (bool success) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            return false;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            return false;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return true;\r\n    }\r\n\r\n    // Frees up to `value` sub-tokens owned by address `from`. Returns how many tokens were freed.\r\n    // Otherwise, identical to `freeFrom`.\r\n    // You should ensure that you pass at least 25710 + `value` * (1148 + 5722 + 150) gas\r\n    // when calling this function. For details, see the comment above `destroyChilden`.\r\n    function freeFromUpTo(address from, uint256 value) public returns (uint256 freed) {\r\n        address spender = msg.sender;\r\n        uint256 from_balance = s_balances[from];\r\n        if (value > from_balance) {\r\n            value = from_balance;\r\n        }\r\n\r\n        mapping(address => uint256) from_allowances = s_allowances[from];\r\n        uint256 spender_allowance = from_allowances[spender];\r\n        if (value > spender_allowance) {\r\n            value = spender_allowance;\r\n        }\r\n\r\n        destroyChildren(value);\r\n\r\n        s_balances[from] = from_balance - value;\r\n        from_allowances[spender] = spender_allowance - value;\r\n\r\n        return value;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFromUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"supply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"freeUpTo\",\"outputs\":[{\"name\":\"freed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"free\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"GasToken2","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://b86bb85a6e7dcfc4473f394716365fd772c0511b80fdd7833b2966335f3a07b2"}]