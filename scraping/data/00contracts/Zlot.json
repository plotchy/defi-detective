[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n* Zlots.\r\n*\r\n* Written August 2018 by the Zethr team for zethr.io.\r\n*\r\n* Initial code framework written by Norsefire.\r\n*\r\n* Rolling Odds:\r\n*   55.1%  - Lose\r\n*   26.24% - 1.5x Multiplier - Two unmatched pyramids\r\n*   12.24% - 2.5x Multiplier - Two matching pyramids\r\n*    4.08% - 1x   Multiplier - Three unmatched pyramids\r\n*    2.04% - 8x   Multiplier - Three matching pyramids\r\n*    0.29% - 25x  Multiplier - Z T H Jackpot\r\n*\r\n*/\r\n\r\ncontract ZTHReceivingContract {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns (bool);\r\n}\r\n\r\ncontract ZTHInterface {\r\n    function transfer(address _to, uint _value) public returns (bool);\r\n    function approve(address spender, uint tokens) public returns (bool);\r\n}\r\n\r\ncontract Zlots is ZTHReceivingContract {\r\n    using SafeMath for uint;\r\n\r\n    address private owner;\r\n    address private bankroll;\r\n\r\n    // How many bets have been made?\r\n    uint  totalSpins;\r\n    uint  totalZTHWagered;\r\n\r\n    // How many ZTH are in the contract?\r\n    uint contractBalance;\r\n\r\n    // Is betting allowed? (Administrative function, in the event of unforeseen bugs)\r\n    bool    public gameActive;\r\n\r\n    address private ZTHTKNADDR;\r\n    address private ZTHBANKROLL;\r\n    ZTHInterface private     ZTHTKN;\r\n\r\n    mapping (uint => bool) validTokenBet;\r\n\r\n    // Might as well notify everyone when the house takes its cut out.\r\n    event HouseRetrievedTake(\r\n        uint timeTaken,\r\n        uint tokensWithdrawn\r\n    );\r\n\r\n    // Fire an event whenever someone places a bet.\r\n    event TokensWagered(\r\n        address _wagerer,\r\n        uint _wagered\r\n    );\r\n\r\n    event LogResult(\r\n        address _wagerer,\r\n        uint _result,\r\n        uint _profit,\r\n        uint _wagered,\r\n        bool _win\r\n    );\r\n\r\n    event Loss(\r\n        address _wagerer\r\n    );\r\n\r\n    event Jackpot(\r\n        address _wagerer\r\n    );\r\n\r\n    event EightXMultiplier(\r\n        address _wagerer\r\n    );\r\n\r\n    event ReturnBet(\r\n        address _wagerer\r\n    );\r\n\r\n    event TwoAndAHalfXMultiplier(\r\n        address _wagerer\r\n    );\r\n\r\n    event OneAndAHalfXMultiplier(\r\n        address _wagerer\r\n    );\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    modifier onlyBankroll {\r\n        require(msg.sender == bankroll);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwnerOrBankroll {\r\n        require(msg.sender == owner || msg.sender == bankroll);\r\n        _;\r\n    }\r\n\r\n    // Requires game to be currently active\r\n    modifier gameIsActive {\r\n        require(gameActive == true);\r\n        _;\r\n    }\r\n\r\n    constructor(address ZethrAddress, address BankrollAddress) public {\r\n\r\n        // Set Zethr & Bankroll address from constructor params\r\n        ZTHTKNADDR = ZethrAddress;\r\n        ZTHBANKROLL = BankrollAddress;\r\n\r\n        // Set starting variables\r\n        owner         = msg.sender;\r\n        bankroll      = ZTHBANKROLL;\r\n\r\n        // Approve \"infinite\" token transfer to the bankroll, as part of Zethr game requirements.\r\n        ZTHTKN = ZTHInterface(ZTHTKNADDR);\r\n        ZTHTKN.approve(ZTHBANKROLL, 2**256 - 1);\r\n        \r\n        // For testing purposes. This is to be deleted on go-live. (see testingSelfDestruct)\r\n        ZTHTKN.approve(owner, 2**256 - 1);\r\n\r\n        // To start with, we only allow spins of 5, 10, 25 or 50 ZTH.\r\n        validTokenBet[5e18]  = true;\r\n        validTokenBet[10e18] = true;\r\n        validTokenBet[25e18] = true;\r\n        validTokenBet[50e18] = true;\r\n\r\n        gameActive  = true;\r\n    }\r\n\r\n    // Zethr dividends gained are accumulated and sent to bankroll manually\r\n    function() public payable {  }\r\n\r\n    // If the contract receives tokens, bundle them up in a struct and fire them over to _stakeTokens for validation.\r\n    struct TKN { address sender; uint value; }\r\n    function tokenFallback(address _from, uint _value, bytes /* _data */) public returns (bool){\r\n        TKN memory          _tkn;\r\n        _tkn.sender       = _from;\r\n        _tkn.value        = _value;\r\n        _spinTokens(_tkn);\r\n        return true;\r\n    }\r\n\r\n    struct playerSpin {\r\n        uint200 tokenValue; // Token value in uint\r\n        uint48 blockn;      // Block number 48 bits\r\n    }\r\n\r\n    // Mapping because a player can do one spin at a time\r\n    mapping(address => playerSpin) public playerSpins;\r\n\r\n    // Execute spin.\r\n    function _spinTokens(TKN _tkn) private {\r\n\r\n        require(gameActive);\r\n        require(_zthToken(msg.sender));\r\n        require(validTokenBet[_tkn.value]);\r\n        require(jackpotGuard(_tkn.value));\r\n\r\n        require(_tkn.value < ((2 ** 200) - 1));   // Smaller than the storage of 1 uint200;\r\n        require(block.number < ((2 ** 48) - 1));  // Current block number smaller than storage of 1 uint48\r\n\r\n        address _customerAddress = _tkn.sender;\r\n        uint    _wagered         = _tkn.value;\r\n\r\n        playerSpin memory spin = playerSpins[_tkn.sender];\r\n\r\n        contractBalance = contractBalance.add(_wagered);\r\n\r\n        // Cannot spin twice in one block\r\n        require(block.number != spin.blockn);\r\n\r\n        // If there exists a spin, finish it\r\n        if (spin.blockn != 0) {\r\n          _finishSpin(_tkn.sender);\r\n        }\r\n\r\n        // Set struct block number and token value\r\n        spin.blockn = uint48(block.number);\r\n        spin.tokenValue = uint200(_wagered);\r\n\r\n        // Store the roll struct - 20k gas.\r\n        playerSpins[_tkn.sender] = spin;\r\n\r\n        // Increment total number of spins\r\n        totalSpins += 1;\r\n\r\n        // Total wagered\r\n        totalZTHWagered += _wagered;\r\n\r\n        emit TokensWagered(_customerAddress, _wagered);\r\n\r\n    }\r\n\r\n     // Finish the current spin of a player, if they have one\r\n    function finishSpin() public\r\n        gameIsActive\r\n        returns (uint)\r\n    {\r\n      return _finishSpin(msg.sender);\r\n    }\r\n\r\n    /*\r\n    * Pay winners, update contract balance, send rewards where applicable.\r\n    */\r\n    function _finishSpin(address target)\r\n        private returns (uint)\r\n    {\r\n        playerSpin memory spin = playerSpins[target];\r\n\r\n        require(spin.tokenValue > 0); // No re-entrancy\r\n        require(spin.blockn != block.number);\r\n\r\n        uint profit = 0;\r\n\r\n        // If the block is more than 255 blocks old, we can't get the result\r\n        // Also, if the result has already happened, fail as well\r\n        uint result;\r\n        if (block.number - spin.blockn > 255) {\r\n          result = 9999; // Can't win: default to largest number\r\n        } else {\r\n\r\n          // Generate a result - random based ONLY on a past block (future when submitted).\r\n          // Case statement barrier numbers defined by the current payment schema at the top of the contract.\r\n          result = random(10000, spin.blockn, target);\r\n        }\r\n\r\n        if (result > 4489) {\r\n          // Player has lost.\r\n          emit Loss(target);\r\n          emit LogResult(target, result, profit, spin.tokenValue, false);\r\n        } else {\r\n            if (result < 29) {\r\n                // Player has won the 25x jackpot\r\n                profit = SafeMath.mul(spin.tokenValue, 25);\r\n                emit Jackpot(target);\r\n\r\n            } else {\r\n                if (result < 233) {\r\n                    // Player has won a 8x multiplier\r\n                    profit = SafeMath.mul(spin.tokenValue, 8);\r\n                    emit EightXMultiplier(target);\r\n                } else {\r\n\r\n                    if (result < 641) {\r\n                        // Player has won their wager back\r\n                        profit = spin.tokenValue;\r\n                        emit ReturnBet(target);\r\n                    } else {\r\n                        if (result < 1865) {\r\n                            // Player has won a 2.5x multiplier\r\n                            profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 25), 10);\r\n                            emit TwoAndAHalfXMultiplier(target);\r\n                        } else {\r\n                            // Player has won a 1.5x multiplier (result lies between 1865 and 4489\r\n                            profit = SafeMath.div(SafeMath.mul(spin.tokenValue, 15), 10);\r\n                            emit OneAndAHalfXMultiplier(target);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            emit LogResult(target, result, profit, spin.tokenValue, true);\r\n            contractBalance = contractBalance.sub(profit);\r\n            ZTHTKN.transfer(target, profit);\r\n        }\r\n        playerSpins[target] = playerSpin(uint200(0), uint48(0));\r\n        return result;\r\n    }\r\n\r\n    // This sounds like a draconian function, but it actually just ensures that the contract has enough to pay out\r\n    // a jackpot at the rate you've selected (i.e. 1250 ZTH for jackpot on a 50 ZTH roll).\r\n    // We do this by making sure that 25* your wager is no less than 50% of the amount currently held by the contract.\r\n    // If not, you're going to have to use lower betting amounts, we're afraid!\r\n    function jackpotGuard(uint _wager)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint maxProfit = SafeMath.mul(_wager, 25);\r\n        uint halfContractBalance = SafeMath.div(contractBalance, 2);\r\n        return (maxProfit <= halfContractBalance);\r\n    }\r\n\r\n    // Returns a random number using a specified block number\r\n    // Always use a FUTURE block number.\r\n    function maxRandom(uint blockn, address entropy) public view returns (uint256 randomNumber) {\r\n    return uint256(keccak256(\r\n        abi.encodePacked(\r\n        blockhash(blockn),\r\n        entropy)\r\n      ));\r\n    }\r\n\r\n    // Random helper\r\n    function random(uint256 upper, uint256 blockn, address entropy) internal view returns (uint256 randomNumber) {\r\n    return maxRandom(blockn, entropy) % upper;\r\n    }\r\n\r\n    // How many tokens are in the contract overall?\r\n    function balanceOf() public view returns (uint) {\r\n        return contractBalance;\r\n    }\r\n\r\n    function addNewBetAmount(uint _tokenAmount)\r\n        public\r\n        onlyOwner\r\n    {\r\n        validTokenBet[_tokenAmount] = true;\r\n    }\r\n\r\n    // If, for any reason, betting needs to be paused (very unlikely), this will freeze all bets.\r\n    function pauseGame() public onlyOwner {\r\n        gameActive = false;\r\n    }\r\n\r\n    // The converse of the above, resuming betting if a freeze had been put in place.\r\n    function resumeGame() public onlyOwner {\r\n        gameActive = true;\r\n    }\r\n\r\n    // Administrative function to change the owner of the contract.\r\n    function changeOwner(address _newOwner) public onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Administrative function to change the Zethr bankroll contract, should the need arise.\r\n    function changeBankroll(address _newBankroll) public onlyOwner {\r\n        bankroll = _newBankroll;\r\n    }\r\n\r\n    // Any dividends acquired by this contract is automatically triggered.\r\n    function divertDividendsToBankroll()\r\n        public\r\n        onlyOwner\r\n    {\r\n        bankroll.transfer(address(this).balance);\r\n    }\r\n\r\n    function testingSelfDestruct()\r\n        public\r\n        onlyOwner\r\n    {\r\n        // Give me back my testing tokens :)\r\n        ZTHTKN.transfer(owner, contractBalance);\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    // Is the address that the token has come from actually ZTH?\r\n    function _zthToken(address _tokenContract) private view returns (bool) {\r\n       return _tokenContract == ZTHTKNADDR;\r\n    }\r\n}\r\n\r\n// And here's the boring bit.\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"playerSpins\",\"outputs\":[{\"name\":\"tokenValue\",\"type\":\"uint200\"},{\"name\":\"blockn\",\"type\":\"uint48\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"resumeGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pauseGame\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockn\",\"type\":\"uint256\"},{\"name\":\"entropy\",\"type\":\"address\"}],\"name\":\"maxRandom\",\"outputs\":[{\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishSpin\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addNewBetAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"divertDividendsToBankroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newBankroll\",\"type\":\"address\"}],\"name\":\"changeBankroll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"testingSelfDestruct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"tokenFallback\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_wager\",\"type\":\"uint256\"}],\"name\":\"jackpotGuard\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gameActive\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"ZethrAddress\",\"type\":\"address\"},{\"name\":\"BankrollAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"timeTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokensWithdrawn\",\"type\":\"uint256\"}],\"name\":\"HouseRetrievedTake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_wagered\",\"type\":\"uint256\"}],\"name\":\"TokensWagered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_result\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_profit\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_wagered\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_win\",\"type\":\"bool\"}],\"name\":\"LogResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"Jackpot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"EightXMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"ReturnBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"TwoAndAHalfXMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_wagerer\",\"type\":\"address\"}],\"name\":\"OneAndAHalfXMultiplier\",\"type\":\"event\"}]","ContractName":"Zlots","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d48b633045af65ff636f3c6edd744748351e020d0000000000000000000000007430984e1d05d5f447c747123dd26845f6f17544","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://21ffa2f3ed4cf250ccd0eff3df7527dca07b28a0c236a576f0ccf84103f9fda0"}]