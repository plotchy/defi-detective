[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BTBSlock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\n/**\\n * @dev A token holder contract that will allow a beneficiary to extract the\\n * tokens after a given release time.\\n */\\ncontract BitBaseTimeLock is Ownable {\\n\\n    /**\\n     * @dev ERC20 contract being held = BitBase (BTBS)\\n     */\\n    IERC20 public BTBS;\\n    \\n    /**\\n     * @dev timestamp when token unlock logic begins = contract deployment timestamp\\n     */\\n    uint256 public startDate;\\n\\n    address[] private addresessArray;\\n    \\n    /**\\n     * @dev Struct that holds the user data: bought and withdrawn tokens\\n     */\\n    struct User {\\n        uint256 bought;\\n        uint256 withdrawn;\\n    }\\n    \\n    /**\\n     * @dev mapping of an address to a User struct\\n     */\\n    mapping(address => User) public userData;\\n    \\n    /**\\n     * @dev event emitted when a user claims tokens\\n     */\\n    event Claimed(address indexed account, uint256 amount);\\n    \\n    /**\\n     * @dev event emitted when the owner updates the address of a user to a new one.\\n     */\\n    event AddressUpdated(address indexed accountOld, address indexed accountNew);\\n\\n    /**\\n     * @dev event emitted when the owner sets the addresses of the users with the corresponding amount of locked tokens\\n     */\\n    event AddressesSet(bool set);\\n\\n    constructor () {\\n        BTBS = IERC20(0x32E6C34Cd57087aBBD59B5A4AECC4cB495924356);\\n        startDate = block.timestamp;\\n    }\\n\\n\\n    /**\\n     * @dev Percentage of unlocked BTBS from total purchased amount \\n     * Unlocked:\\n     * day 90 = 5%\\n     * day 180 = 10%\\n     * day 300 = 15%\\n     * After day 300 = 0.7%/day\\n     * @return releasePercentage Percentage magnified x100 to decrease precision errors: 500 = 5%\\n     */\\n    function unlocked() public view virtual returns (uint256) {\\n\\n       uint256 startLinearRelease = startDate + 300 days;\\n       uint256 releasePercentage;\\n       \\n       if (block.timestamp <= startDate + 90 days) {\\n           releasePercentage = 0;\\n       } else if (block.timestamp < startDate + 180 days) {\\n           releasePercentage = 500;\\n       } else if (block.timestamp >= startDate + 180 days && block.timestamp < startLinearRelease) {\\n           releasePercentage = 1000;\\n       } else if (block.timestamp >= startLinearRelease) {\\n           uint256 timeSinceLinearRelease = block.timestamp - startLinearRelease;\\n           uint256 linearRelease = timeSinceLinearRelease * 1000 / 1234286; //0.7% Daily\\n           releasePercentage = 1500 + linearRelease;\\n       }\\n       \\n       if (releasePercentage >= 10000) {\\n           releasePercentage = 10000;\\n       }\\n       return releasePercentage;\\n    }\\n    \\n    /**\\n     * @dev Sends the available amount of tokens to withdraw to the caller\\n     */\\n    function _claim(address account) internal virtual {\\n        uint256 withdrawable = availableToWithdraw(account);\\n        userData[account].withdrawn += withdrawable;\\n        BTBS.transfer(account, withdrawable);\\n        emit Claimed(account, withdrawable);\\n    }\\n\\n    /**\\n     * @dev Sends the available amount of tokens to withdraw to the caller\\n     */\\n    function claim() public virtual {\\n        _claim(msg.sender);\\n    }\\n    \\n    /**\\n     * @dev Returns the avilable amount of tokens for an address to withdraw = unlockedTotal - claimedAmount\\n     * @param account The user address\\n     */\\n    function availableToWithdraw(address account) public view virtual returns (uint256) {\\n        return unlockedTotal(account) - claimedAmount(account);\\n    }\\n    \\n    /**\\n     * @dev Returns the total amount of tokens that has been unlocked for an account\\n     * @param account The user address\\n     */\\n    function unlockedTotal(address account) public view virtual returns (uint256) {\\n        return userData[account].bought * unlocked() / 10000;\\n    }\\n    \\n    /**\\n     * @dev Returns the amount of tokens that an address has bought in private sale\\n     * @param account The user address\\n     */\\n    function boughtAmount(address account) public view virtual returns (uint256) {\\n        return userData[account].bought;\\n    }\\n    \\n    /**\\n     * @dev Returns de amount of tokens that an address already claimed\\n     * @param account The user address\\n     */\\n    function claimedAmount(address account) public view virtual returns (uint256) {\\n        return userData[account].withdrawn;\\n    }\\n    \\n    /**\\n     * @dev Returns the amount of tokens that an address has not yet claim = bought - withdrawn\\n     * @param account The user address\\n     */\\n    function leftToClaim(address account) public view virtual returns (uint256) {\\n        return userData[account].bought - userData[account].withdrawn;\\n    }\\n    \\n    \\n    /**\\n     * @dev This function allows the owner to update a user address in case of lost keys or security breach from the user side.\\n     * IMPORTANT: Should only be called after proper KYC examination.\\n     * @param accountOld The old account address\\n     * @param accountNew The old account address\\n     */\\n    function updateAddress(address accountOld, address accountNew) public virtual onlyOwner {\\n        userData[accountNew].withdrawn = userData[accountOld].withdrawn;\\n        userData[accountNew].bought = userData[accountOld].bought;\\n        userData[accountOld].withdrawn = 0;\\n        userData[accountOld].bought = 0;\\n        emit AddressUpdated(accountOld, accountNew);\\n    }\\n    \\n    /**\\n     * @dev Allows owner to recover any ERC20 sent into the contract. Only owner can call this function.\\n     * @param tokenAddress The token contract address\\n     * @param amount The amount to be withdrawn. If the amount is set to 0 it will withdraw all the balance of tokenAddress.\\n     */\\n    function recoverERC20(address tokenAddress, uint256 amount) public virtual onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        if (amount == 0) {\\n            uint256 balance = token.balanceOf(address(this));\\n            token.transfer(owner(), balance);\\n        } else if (amount != 0) {\\n            token.transfer(owner(), amount);\\n        }\\n    }\\n    \\n    /**\\n     * @dev Allows owner to set an array of addresess who bought and the corresponding amounts. Only owner can call this function.\\n     * @param accounts Array of user addresess\\n     * @param amounts Array of user amounts\\n     */\\n    function setBoughtAmounts(address[] memory accounts, uint256[] memory amounts) public virtual onlyOwner {\\n        addresessArray = accounts;\\n        for (uint256 i = 0; i < accounts.length; i++) {\\n            userData[accounts[i]].bought = amounts[i];\\n        }\\n        emit AddressesSet(true);\\n    }\\n\\n    /**\\n     * @dev Allows owner to send the \\\"availableToWithdraw()\\\" tokens to all the addresess at once.\\n     * This function has been implemented to help the less tech-savvy users receive their tokens. Only owner can call this function.\\n     */\\n    function sendToAll() public virtual onlyOwner {\\n        for (uint256 i = 0; i < addresessArray.length; i++) {\\n            _claim(addresessArray[i]);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountOld\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountNew\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"set\",\"type\":\"bool\"}],\"name\":\"AddressesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BTBS\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"availableToWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"boughtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"leftToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendToAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"setBoughtAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unlockedTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accountOld\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"accountNew\",\"type\":\"address\"}],\"name\":\"updateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"BitBaseTimeLock","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]