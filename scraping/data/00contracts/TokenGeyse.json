[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * `SafeMath` restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n\r\n/**\r\n * @title Staking interface, as defined by EIP-900.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\r\n */\r\nabstract contract IStaking {\r\n    event Staked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 amount,\r\n        uint256 total,\r\n        bytes data\r\n    );\r\n\r\n    function stake(uint256 amount) virtual external;\r\n\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount\r\n    ) virtual external;\r\n\r\n    function unstake(uint256 amount) virtual external;\r\n\r\n    function totalStakedFor(address addr) virtual public view returns (uint256);\r\n\r\n    function totalStaked() virtual public view returns (uint256);\r\n\r\n    function token() virtual external view returns (address);\r\n\r\n    /**\r\n     * @return False. This application does not support staking history.\r\n     */\r\n    function supportsHistory() virtual external pure returns (bool) {\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract TokenPool is Ownable {\r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _token) {\r\n        token = _token;\r\n    }\r\n\r\n    function balance() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        return token.transfer(to, value);\r\n    }\r\n\r\n    function rescueFunds(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) external onlyOwner returns (bool) {\r\n        require(\r\n            address(token) != tokenToRescue,\r\n            \"TokenPool: Cannot claim token held by the contract\"\r\n        );\r\n\r\n        return IERC20(tokenToRescue).transfer(to, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Token Geyser\r\n * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\r\n *      Compound and Uniswap.\r\n *\r\n *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\r\n *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\r\n *      claimed by users.\r\n *\r\n *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\r\n *      is a function of the number of tokens deposited as well as the length of time deposited.\r\n *      Specifically, a user's share of the currently-unlocked pool equals their \"deposit-seconds\"\r\n *      divided by the global \"deposit-seconds\". This aligns the new token distribution with long\r\n *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\r\n *\r\n *      More background and motivation available at:\r\n *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\r\n */\r\ncontract TokenGeyser is IStaking, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event TokensClaimed(address indexed user, uint256 amount);\r\n    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\r\n    // amount: Unlocked tokens, total: Total locked tokens\r\n    event TokensUnlocked(uint256 amount, uint256 total);\r\n\r\n    TokenPool private _stakingPool;\r\n    TokenPool private _unlockedPool;\r\n    TokenPool private _lockedPool;\r\n\r\n    //\r\n    // Time-bonus params\r\n    //\r\n    uint256 public constant BONUS_DECIMALS = 2;\r\n    uint256 public startBonus = 0;\r\n    uint256 public bonusPeriodSec = 0;\r\n\r\n    //\r\n    // Global accounting state\r\n    //\r\n    uint256 public totalLockedShares = 0;\r\n    uint256 public totalStakingShares = 0;\r\n    uint256 private _totalStakingShareSeconds = 0;\r\n    uint256 private _lastAccountingTimestampSec = block.timestamp;\r\n    uint256 private _maxUnlockSchedules = 0;\r\n    uint256 private _initialSharesPerToken = 0;\r\n\r\n    //\r\n    // User accounting state\r\n    //\r\n    // Represents a single stake for a user. A user may have multiple.\r\n    struct Stake {\r\n        uint256 stakingShares;\r\n        uint256 timestampSec;\r\n    }\r\n\r\n    // Caches aggregated values from the User->Stake[] map to save computation.\r\n    // If lastAccountingTimestampSec is 0, there's no entry for that user.\r\n    struct UserTotals {\r\n        uint256 stakingShares;\r\n        uint256 stakingShareSeconds;\r\n        uint256 lastAccountingTimestampSec;\r\n    }\r\n\r\n    // Aggregated staking values per user\r\n    mapping(address => UserTotals) private _userTotals;\r\n\r\n    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\r\n    mapping(address => Stake[]) private _userStakes;\r\n\r\n    //\r\n    // Locked/Unlocked Accounting state\r\n    //\r\n    struct UnlockSchedule {\r\n        uint256 initialLockedShares;\r\n        uint256 unlockedShares;\r\n        uint256 lastUnlockTimestampSec;\r\n        uint256 endAtSec;\r\n        uint256 durationSec;\r\n    }\r\n\r\n    UnlockSchedule[] public unlockSchedules;\r\n\r\n    /**\r\n     * @param stakingToken The token users deposit as stake.\r\n     * @param distributionToken The token users receive as they unstake.\r\n     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\r\n     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\r\n     *                    e.g. 25% means user gets 25% of max distribution tokens.\r\n     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\r\n     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\r\n     */\r\n    constructor(\r\n        IERC20 stakingToken,\r\n        IERC20 distributionToken,\r\n        uint256 maxUnlockSchedules,\r\n        uint256 startBonus_,\r\n        uint256 bonusPeriodSec_,\r\n        uint256 initialSharesPerToken\r\n    ) {\r\n        // The start bonus must be some fraction of the max. (i.e. <= 100%)\r\n        require(\r\n            startBonus_ <= 10**BONUS_DECIMALS,\r\n            \"TokenGeyser: start bonus too high\"\r\n        );\r\n        // If no period is desired, instead set startBonus = 100%\r\n        // and bonusPeriod to a small value like 1sec.\r\n        require(bonusPeriodSec_ != 0, \"TokenGeyser: bonus period is zero\");\r\n        require(\r\n            initialSharesPerToken > 0,\r\n            \"TokenGeyser: initialSharesPerToken is zero\"\r\n        );\r\n\r\n        _stakingPool = new TokenPool(stakingToken);\r\n        _unlockedPool = new TokenPool(distributionToken);\r\n        _lockedPool = new TokenPool(distributionToken);\r\n        startBonus = startBonus_;\r\n        bonusPeriodSec = bonusPeriodSec_;\r\n        _maxUnlockSchedules = maxUnlockSchedules;\r\n        _initialSharesPerToken = initialSharesPerToken;\r\n    }\r\n\r\n    /**\r\n     * @return The token users deposit as stake.\r\n     */\r\n    function getStakingToken() public view returns (IERC20) {\r\n        return _stakingPool.token();\r\n    }\r\n\r\n    /**\r\n     * @return The token users receive as they unstake.\r\n     */\r\n    function getDistributionToken() public view returns (IERC20) {\r\n        assert(_unlockedPool.token() == _lockedPool.token());\r\n        return _unlockedPool.token();\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the user.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function stake(uint256 amount) external override {\r\n        _stakeFor(msg.sender, msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\r\n     * @param user User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function stakeFor(\r\n        address user,\r\n        uint256 amount\r\n    ) external override onlyOwner {\r\n        _stakeFor(msg.sender, user, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Private implementation of staking methods.\r\n     * @param staker User address who deposits tokens to stake.\r\n     * @param beneficiary User address who gains credit for this stake operation.\r\n     * @param amount Number of deposit tokens to stake.\r\n     */\r\n    function _stakeFor(\r\n        address staker,\r\n        address beneficiary,\r\n        uint256 amount\r\n    ) private {\r\n        require(amount > 0, \"TokenGeyser: stake amount is zero\");\r\n        require(\r\n            beneficiary != address(0),\r\n            \"TokenGeyser: beneficiary is zero address\"\r\n        );\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do\"\r\n        );\r\n\r\n        uint256 mintedStakingShares =\r\n            (totalStakingShares > 0)\r\n                ? totalStakingShares.mul(amount).div(totalStaked())\r\n                : amount.mul(_initialSharesPerToken);\r\n        require(\r\n            mintedStakingShares > 0,\r\n            \"TokenGeyser: Stake amount is too small\"\r\n        );\r\n\r\n        updateAccounting();\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[beneficiary];\r\n        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\r\n        totals.lastAccountingTimestampSec = block.timestamp;\r\n\r\n        Stake memory newStake = Stake(mintedStakingShares, block.timestamp);\r\n        _userStakes[beneficiary].push(newStake);\r\n\r\n        // 2. Global Accounting\r\n        totalStakingShares = totalStakingShares.add(mintedStakingShares);\r\n        // Already set in updateAccounting()\r\n        // _lastAccountingTimestampSec = block.timestamp;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.token().transferFrom(\r\n                staker,\r\n                address(_stakingPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into staking pool failed\"\r\n        );\r\n\r\n        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     */\r\n    function unstake(uint256 amount) override external {\r\n        _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens that would be rewarded.\r\n     */\r\n    function unstakeQuery(uint256 amount) public returns (uint256) {\r\n        return _unstake(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\r\n     * alotted number of distribution tokens.\r\n     * @param amount Number of deposit tokens to unstake / withdraw.\r\n     * @return The total number of distribution tokens rewarded.\r\n     */\r\n    function _unstake(uint256 amount) private returns (uint256) {\r\n        updateAccounting();\r\n\r\n        // checks\r\n        require(amount > 0, \"TokenGeyser: unstake amount is zero\");\r\n        require(\r\n            totalStakedFor(msg.sender) >= amount,\r\n            \"TokenGeyser: unstake amount is greater than total user stakes\"\r\n        );\r\n        uint256 stakingSharesToBurn =\r\n            totalStakingShares.mul(amount).div(totalStaked());\r\n        require(\r\n            stakingSharesToBurn > 0,\r\n            \"TokenGeyser: Unable to unstake amount this small\"\r\n        );\r\n\r\n        // 1. User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        Stake[] storage accountStakes = _userStakes[msg.sender];\r\n\r\n        // Redeem from most recent stake and go backwards in time.\r\n        uint256 stakingShareSecondsToBurn = 0;\r\n        uint256 sharesLeftToBurn = stakingSharesToBurn;\r\n        uint256 rewardAmount = 0;\r\n        while (sharesLeftToBurn > 0) {\r\n            Stake storage lastStake = accountStakes[accountStakes.length - 1];\r\n            uint256 stakeTimeSec = block.timestamp.sub(lastStake.timestampSec);\r\n            uint256 newStakingShareSecondsToBurn = 0;\r\n            if (lastStake.stakingShares <= sharesLeftToBurn) {\r\n                // fully redeem a past stake\r\n                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                sharesLeftToBurn = sharesLeftToBurn.sub(\r\n                    lastStake.stakingShares\r\n                );\r\n                accountStakes.pop();\r\n            } else {\r\n                // partially redeem a past stake\r\n                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\r\n                    stakeTimeSec\r\n                );\r\n                rewardAmount = computeNewReward(\r\n                    rewardAmount,\r\n                    newStakingShareSecondsToBurn,\r\n                    stakeTimeSec\r\n                );\r\n                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\r\n                    newStakingShareSecondsToBurn\r\n                );\r\n                lastStake.stakingShares = lastStake.stakingShares.sub(\r\n                    sharesLeftToBurn\r\n                );\r\n                sharesLeftToBurn = 0;\r\n            }\r\n        }\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // totals.lastAccountingTimestampSec = block.timestamp;\r\n\r\n        // 2. Global Accounting\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\r\n            stakingShareSecondsToBurn\r\n        );\r\n        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\r\n        // Already set in updateAccounting\r\n        // _lastAccountingTimestampSec = block.timestamp;\r\n\r\n        // interactions\r\n        require(\r\n            _stakingPool.transfer(msg.sender, amount),\r\n            \"TokenGeyser: transfer out of staking pool failed\"\r\n        );\r\n        require(\r\n            _unlockedPool.transfer(msg.sender, rewardAmount),\r\n            \"TokenGeyser: transfer out of unlocked pool failed\"\r\n        );\r\n\r\n        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), \"\");\r\n        emit TokensClaimed(msg.sender, rewardAmount);\r\n\r\n        require(\r\n            totalStakingShares == 0 || totalStaked() > 0,\r\n            \"TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do\"\r\n        );\r\n        return rewardAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\r\n     *      encourage long-term deposits instead of constant unstake/restakes.\r\n     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\r\n     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\r\n     * @param currentRewardTokens The current number of distribution tokens already alotted for this\r\n     *                            unstake op. Any bonuses are already applied.\r\n     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\r\n     *                            distribution tokens.\r\n     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\r\n     *                     the time-bonus.\r\n     * @return Updated amount of distribution tokens to award, with any bonus included on the\r\n     *         newly added tokens.\r\n     */\r\n    function computeNewReward(\r\n        uint256 currentRewardTokens,\r\n        uint256 stakingShareSeconds,\r\n        uint256 stakeTimeSec\r\n    ) private view returns (uint256) {\r\n        uint256 newRewardTokens =\r\n            totalUnlocked().mul(stakingShareSeconds).div(\r\n                _totalStakingShareSeconds\r\n            );\r\n\r\n        if (stakeTimeSec >= bonusPeriodSec) {\r\n            return currentRewardTokens.add(newRewardTokens);\r\n        }\r\n\r\n        uint256 oneHundredPct = 10**BONUS_DECIMALS;\r\n        uint256 bonusedReward =\r\n            startBonus\r\n                .add(\r\n                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\r\n                    bonusPeriodSec\r\n                )\r\n            )\r\n                .mul(newRewardTokens)\r\n                .div(oneHundredPct);\r\n        return currentRewardTokens.add(bonusedReward);\r\n    }\r\n\r\n    /**\r\n     * @param addr The user to look up staking information for.\r\n     * @return The number of staking tokens deposited for addr.\r\n     */\r\n    function totalStakedFor(address addr) public override view returns (uint256) {\r\n        return\r\n            totalStakingShares > 0\r\n                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\r\n                    totalStakingShares\r\n                )\r\n                : 0;\r\n    }\r\n\r\n    /**\r\n     * @return The total number of deposit tokens staked globally, by all users.\r\n     */\r\n    function totalStaked() public override view returns (uint256) {\r\n        return _stakingPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @dev Note that this application has a staking token as well as a distribution token, which\r\n     * may be different. This function is required by EIP-900.\r\n     * @return The deposit token used for staking.\r\n     */\r\n    function token() external override view returns (address) {\r\n        return address(getStakingToken());\r\n    }\r\n\r\n    /**\r\n     * @dev A globally callable function to update the accounting state of the system.\r\n     *      Global state and state for the caller are updated.\r\n     * @return [0] balance of the locked pool\r\n     * @return [1] balance of the unlocked pool\r\n     * @return [2] caller's staking share seconds\r\n     * @return [3] global staking share seconds\r\n     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\r\n     * @return [5] block timestamp\r\n     */\r\n    function updateAccounting()\r\n        public\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        unlockTokens();\r\n\r\n        // Global accounting\r\n        uint256 newStakingShareSeconds =\r\n            block.timestamp.sub(_lastAccountingTimestampSec).mul(\r\n                totalStakingShares\r\n            );\r\n        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\r\n            newStakingShareSeconds\r\n        );\r\n        _lastAccountingTimestampSec = block.timestamp;\r\n\r\n        // User Accounting\r\n        UserTotals storage totals = _userTotals[msg.sender];\r\n        uint256 newUserStakingShareSeconds =\r\n            block.timestamp.sub(totals.lastAccountingTimestampSec).mul(\r\n                totals.stakingShares\r\n            );\r\n        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\r\n            newUserStakingShareSeconds\r\n        );\r\n        totals.lastAccountingTimestampSec = block.timestamp;\r\n\r\n        uint256 totalUserRewards =\r\n            (_totalStakingShareSeconds > 0)\r\n                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\r\n                    _totalStakingShareSeconds\r\n                )\r\n                : 0;\r\n\r\n        return (\r\n            totalLocked(),\r\n            totalUnlocked(),\r\n            totals.stakingShareSeconds,\r\n            _totalStakingShareSeconds,\r\n            totalUserRewards,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @return Total number of locked distribution tokens.\r\n     */\r\n    function totalLocked() public view returns (uint256) {\r\n        return _lockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Total number of unlocked distribution tokens.\r\n     */\r\n    function totalUnlocked() public view returns (uint256) {\r\n        return _unlockedPool.balance();\r\n    }\r\n\r\n    /**\r\n     * @return Number of unlock schedules.\r\n     */\r\n    function unlockScheduleCount() public view returns (uint256) {\r\n        return unlockSchedules.length;\r\n    }\r\n\r\n    /**\r\n     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\r\n     *      with the associated \"unlock schedule\". These locked tokens immediately begin unlocking\r\n     *      linearly over the duraction of durationSec timeframe.\r\n     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\r\n     * @param durationSec Length of time to linear unlock the tokens.\r\n     */\r\n    function lockTokens(uint256 amount, uint256 durationSec)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(\r\n            unlockSchedules.length < _maxUnlockSchedules,\r\n            \"TokenGeyser: reached maximum unlock schedules\"\r\n        );\r\n\r\n        // Update lockedTokens amount before using it in computations after.\r\n        updateAccounting();\r\n\r\n        uint256 lockedTokens = totalLocked();\r\n        uint256 mintedLockedShares =\r\n            (lockedTokens > 0)\r\n                ? totalLockedShares.mul(amount).div(lockedTokens)\r\n                : amount.mul(_initialSharesPerToken);\r\n\r\n        UnlockSchedule memory schedule;\r\n        schedule.initialLockedShares = mintedLockedShares;\r\n        schedule.lastUnlockTimestampSec = block.timestamp;\r\n        schedule.endAtSec = block.timestamp.add(durationSec);\r\n        schedule.durationSec = durationSec;\r\n        unlockSchedules.push(schedule);\r\n\r\n        totalLockedShares = totalLockedShares.add(mintedLockedShares);\r\n\r\n        require(\r\n            _lockedPool.token().transferFrom(\r\n                msg.sender,\r\n                address(_lockedPool),\r\n                amount\r\n            ),\r\n            \"TokenGeyser: transfer into locked pool failed\"\r\n        );\r\n        emit TokensLocked(amount, durationSec, totalLocked());\r\n    }\r\n\r\n    /**\r\n     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\r\n     *      previously defined unlock schedules. Publicly callable.\r\n     * @return Number of newly unlocked distribution tokens.\r\n     */\r\n    function unlockTokens() public returns (uint256) {\r\n        uint256 unlockedTokens = 0;\r\n        uint256 lockedTokens = totalLocked();\r\n\r\n        if (totalLockedShares == 0) {\r\n            unlockedTokens = lockedTokens;\r\n        } else {\r\n            uint256 unlockedShares = 0;\r\n            for (uint256 s = 0; s < unlockSchedules.length; s++) {\r\n                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\r\n            }\r\n            unlockedTokens = unlockedShares.mul(lockedTokens).div(\r\n                totalLockedShares\r\n            );\r\n            totalLockedShares = totalLockedShares.sub(unlockedShares);\r\n        }\r\n\r\n        if (unlockedTokens > 0) {\r\n            require(\r\n                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\r\n                \"TokenGeyser: transfer out of locked pool failed\"\r\n            );\r\n            emit TokensUnlocked(unlockedTokens, totalLocked());\r\n        }\r\n\r\n        return unlockedTokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of unlockable shares from a given schedule. The returned value\r\n     *      depends on the time since the last unlock. This function updates schedule accounting,\r\n     *      but does not actually transfer any tokens.\r\n     * @param s Index of the unlock schedule.\r\n     * @return The number of unlocked shares.\r\n     */\r\n    function unlockScheduleShares(uint256 s) private returns (uint256) {\r\n        UnlockSchedule storage schedule = unlockSchedules[s];\r\n\r\n        if (schedule.unlockedShares >= schedule.initialLockedShares) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 sharesToUnlock = 0;\r\n        // Special case to handle any leftover dust from integer division\r\n        if (block.timestamp >= schedule.endAtSec) {\r\n            sharesToUnlock = (\r\n                schedule.initialLockedShares.sub(schedule.unlockedShares)\r\n            );\r\n            schedule.lastUnlockTimestampSec = schedule.endAtSec;\r\n        } else {\r\n            sharesToUnlock = block\r\n                .timestamp\r\n                .sub(schedule.lastUnlockTimestampSec)\r\n                .mul(schedule.initialLockedShares)\r\n                .div(schedule.durationSec);\r\n            schedule.lastUnlockTimestampSec = block.timestamp;\r\n        }\r\n\r\n        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\r\n        return sharesToUnlock;\r\n    }\r\n\r\n    /**\r\n     * @dev Lets the owner rescue funds air-dropped to the staking pool.\r\n     * @param tokenToRescue Address of the token to be rescued.\r\n     * @param to Address to which the rescued funds are to be sent.\r\n     * @param amount Amount of tokens to be rescued.\r\n     * @return Transfer success.\r\n     */\r\n    function rescueFundsFromStakingPool(\r\n        address tokenToRescue,\r\n        address to,\r\n        uint256 amount\r\n    ) public onlyOwner returns (bool) {\r\n        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"distributionToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxUnlockSchedules\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBonus_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonusPeriodSec_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSharesPerToken\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusPeriodSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenToRescue\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFundsFromStakingPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsHistory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"totalStakedFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockScheduleCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unlockSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialLockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockedShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUnlockTimestampSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAtSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationSec\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstakeQuery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateAccounting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TokenGeyser","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b2d0cad27830d78e95313ef6b3a5383406ae77da0000000000000000000000005166d4ce79b9bf7df477da110c560ce3045aa889000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000004f1a000000000000000000000000000000000000000000000000000000000000000001","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://07e294e4fc19a8dcc993da0d90a82751d2b7dd532757ad7438b461311618db8f"}]