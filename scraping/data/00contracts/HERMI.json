[{"SourceCode":"// File: /Context.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n\r\n        return msg.sender;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n\r\n        return msg.data;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: /Ownable.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\nabstract contract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        _setOwner(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    function owner() public view virtual returns (address) {\r\n\r\n        return _owner;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier onlyOwner() {\r\n\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function renounceOwnership() external virtual onlyOwner {\r\n\r\n        _setOwner(address(0));\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\r\n        _setOwner(newOwner);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _setOwner(address newOwner) private {\r\n\r\n        address oldOwner = _owner;\r\n\r\n        _owner = newOwner;\r\n\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n\r\n    }\r\n\r\n}\r\n// File: /Pausable.sol\r\n\r\n\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\nabstract contract Pausable is Ownable {\r\n\r\n    event Paused(address account);\r\n\r\n\r\n\r\n    event Unpaused(address account);\r\n\r\n\r\n\r\n    bool private _paused;\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        _paused = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    function paused() public view virtual returns (bool) {\r\n\r\n        return _paused;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function pause() external virtual onlyOwner {\r\n\r\n        _pause();\r\n\r\n    }\r\n\r\n    \r\n\r\n    function unpause() external virtual onlyOwner {\r\n\r\n        _unpause();\r\n\r\n    }\r\n\r\n    \r\n\r\n    modifier whenNotPaused() {\r\n\r\n        require(!paused(), \"Pausable: paused\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    modifier whenPaused() {\r\n\r\n        require(paused(), \"Pausable: not paused\");\r\n\r\n        _;\r\n\r\n    }\r\n\r\n\r\n\r\n    function _pause() internal virtual whenNotPaused {\r\n\r\n        _paused = true;\r\n\r\n        emit Paused(_msgSender());\r\n\r\n    }\r\n\r\n\r\n\r\n    function _unpause() internal virtual whenPaused {\r\n\r\n        _paused = false;\r\n\r\n        emit Unpaused(_msgSender());\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n// File: HERMIA.sol\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n███╗░░░███╗███████╗████████╗░█████╗░██╗░░██╗███████╗██████╗░███╗░░░███╗██╗░█████╗░\r\n\r\n████╗░████║██╔════╝╚══██╔══╝██╔══██╗██║░░██║██╔════╝██╔══██╗████╗░████║██║██╔══██╗\r\n\r\n██╔████╔██║█████╗░░░░░██║░░░███████║███████║█████╗░░██████╔╝██╔████╔██║██║███████║\r\n\r\n██║╚██╔╝██║██╔══╝░░░░░██║░░░██╔══██║██╔══██║██╔══╝░░██╔══██╗██║╚██╔╝██║██║██╔══██║\r\n\r\n██║░╚═╝░██║███████╗░░░██║░░░██║░░██║██║░░██║███████╗██║░░██║██║░╚═╝░██║██║██║░░██║\r\n\r\n╚═╝░░░░░╚═╝╚══════╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝╚═╝░░╚═╝╚═╝░░░░░╚═╝╚═╝╚═╝░░╚═╝\r\n\r\n**/\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\ncontract HERMIA is Pausable {\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n\r\n\r\n    uint256 private _totalSupply = 50 * (10 ** 9) * (10 ** 18);     // 50 Billion\r\n\r\n    \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n\r\n    constructor() {\r\n\r\n        _balances[_msgSender()] = _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function name() public view virtual returns (string memory) {\r\n\r\n        return \"Metahermia Token\";\r\n\r\n    }\r\n\r\n\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n\r\n        return \"HERMIA\";\r\n\r\n    }\r\n\r\n\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n\r\n        return 18;\r\n\r\n    }\r\n\r\n\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n\r\n\r\n    function transfer(address recipient, uint256 amount) external virtual returns (bool) {\r\n\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n\r\n\r\n    function approve(address spender, uint256 amount) external virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function transferFrom(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) external virtual returns (bool) {\r\n\r\n        _transfer(sender, recipient, amount);\r\n\r\n\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n\r\n        unchecked {\r\n\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        }\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        unchecked {\r\n\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        }\r\n\r\n\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    \r\n\r\n    function burn(uint256 amount) external virtual {\r\n\r\n        _burn(_msgSender(), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _transfer(\r\n\r\n        address sender,\r\n\r\n        address recipient,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer();\r\n\r\n\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[sender] = senderBalance - amount;\r\n\r\n        }\r\n\r\n        _balances[recipient] += amount;\r\n\r\n\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n  \r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\r\n\r\n        _beforeTokenTransfer();\r\n\r\n\r\n\r\n        uint256 accountBalance = _balances[account];\r\n\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[account] = accountBalance - amount;\r\n\r\n        }\r\n\r\n        _totalSupply -= amount;\r\n\r\n\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n\r\n\r\n    function _beforeTokenTransfer() internal virtual {\r\n\r\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\r\n\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"HERMIA","CompilerVersion":"v0.8.0+commit.c7dfd78e","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7ed8d7f76c262f42dd921e6e4895e693860cf20eab1ee3705e15fb6e9615ab9a"}]