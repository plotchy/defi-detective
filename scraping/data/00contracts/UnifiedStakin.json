[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/UnifiedStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IMintableERC20.sol\\\";\\nimport \\\"./libraries/NftStakingPool.sol\\\";\\nimport \\\"./libraries/MinterAccess.sol\\\";\\n\\n/**\\n * @title Samurai Saga Collections Staking\\n * https://samuraisaga.com\\n */\\ncontract UnifiedStaking is NftStakingPool, MinterAccess {\\n    constructor(IMintableERC20 _rewardToken) NftStakingPool(_rewardToken) {}\\n\\n    function _sendRewards(address destination, uint256 amount) internal override {\\n        uint256 b = rewardToken.balanceOf(address(this));\\n        if (b >= amount) super._sendRewards(destination, amount);\\n        else IMintableERC20(address(rewardToken)).mint(destination, amount);\\n    }\\n\\n    function stakeFrom(\\n        address from,\\n        uint256 poolId,\\n        uint256 tokenId\\n    ) external onlyMinters whenPoolOpened(poolId) {\\n        require(from != address(0), \\\"Stake: address(0)\\\");\\n        Pool memory pool = getPool(poolId);\\n        _stake(from, pool.collection, tokenId, poolId);\\n        emit Stake(from, poolId, pool.collection, tokenId);\\n    }\\n\\n    function batchStakeFrom(\\n        address from,\\n        uint256 poolId,\\n        uint256[] calldata tokenIds\\n    ) external onlyMinters whenPoolOpened(poolId) {\\n        require(from != address(0), \\\"Stake: address(0)\\\");\\n\\n        Pool memory pool = getPool(poolId);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _stake(from, pool.collection, tokenIds[i], poolId);\\n        }\\n\\n        emit BatchStake(from, poolId, pool.collection, tokenIds);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableERC20 is IERC20 {\\n    function mint(address destination, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/NftStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./Poolable.sol\\\";\\nimport \\\"./Recoverable.sol\\\";\\n\\n/** @title NftStakingPool\\n */\\ncontract NftStakingPool is Ownable, Poolable, Recoverable, ReentrancyGuard, ERC721Holder {\\n    using SafeERC20 for IERC20;\\n\\n    struct PoolDeposit {\\n        address owner;\\n        uint64 pool;\\n        uint256 depositDate;\\n        uint256 claimed;\\n    }\\n\\n    struct MultiStakeParam {\\n        uint256[] tokenIds;\\n        uint256 poolId;\\n    }\\n\\n    IERC20 public rewardToken;\\n\\n    // poolDeposit per collection and tokenId\\n    mapping(address => mapping(uint256 => PoolDeposit)) private _deposits;\\n    // user rewards mapping\\n    mapping(address => uint256) private _userRewards;\\n\\n    event Stake(address indexed account, uint256 poolId, address indexed collection, uint256 tokenId);\\n    event Unstake(address indexed account, address indexed collection, uint256 tokenId);\\n\\n    event BatchStake(address indexed account, uint256 poolId, address indexed collection, uint256[] tokenIds);\\n    event BatchUnstake(address indexed account, address indexed collection, uint256[] tokenIds);\\n\\n    event Claimed(address indexed account, address indexed collection, uint256 tokenId, uint256 rewards, uint256 pool);\\n    event ClaimedMulti(address indexed account, MultiStakeParam[] groups, uint256 rewards);\\n\\n    constructor(IERC20 _rewardToken) {\\n        rewardToken = _rewardToken;\\n    }\\n\\n    function _sendRewards(address destination, uint256 amount) internal virtual {\\n        rewardToken.safeTransfer(destination, amount);\\n    }\\n\\n    function _sendAndUpdateRewards(address account, uint256 amount) internal {\\n        if (amount > 0) {\\n            _userRewards[account] = _userRewards[account] + amount;\\n            _sendRewards(account, amount);\\n        }\\n    }\\n\\n    function _getPendingRewardAmounts(PoolDeposit memory deposit, Pool memory pool) internal view returns (uint256) {\\n        uint256 reward = 0;\\n        uint256 dt = deposit.depositDate;\\n\\n        while (dt != 0 && pool.lockDuration != 0) {\\n            dt += pool.lockDuration;\\n            if (dt > block.timestamp) break;\\n            reward += pool.rewardAmount;\\n            if (pool.endRewardDate != 0 && dt > pool.endRewardDate) break;\\n        }\\n\\n        if (reward <= deposit.claimed) {\\n            return 0;\\n        }\\n\\n        return reward - deposit.claimed;\\n    }\\n\\n    function _stake(\\n        address account,\\n        address collection,\\n        uint256 tokenId,\\n        uint256 poolId\\n    ) internal {\\n        require(_deposits[collection][tokenId].owner == address(0), \\\"Stake: Token already staked\\\");\\n\\n        // add deposit\\n        _deposits[collection][tokenId] = PoolDeposit({\\n            owner: account,\\n            pool: uint64(poolId),\\n            depositDate: block.timestamp,\\n            claimed: 0\\n        });\\n\\n        // transfer token\\n        IERC721(collection).safeTransferFrom(account, address(this), tokenId);\\n    }\\n\\n    /**\\n     * @notice Stake a token from the collection\\n     */\\n    function stake(uint256 poolId, uint256 tokenId) external nonReentrant whenPoolOpened(poolId) {\\n        address account = _msgSender();\\n        Pool memory pool = getPool(poolId);\\n        _stake(account, pool.collection, tokenId, poolId);\\n        emit Stake(account, poolId, pool.collection, tokenId);\\n    }\\n\\n    function _unstake(\\n        address account,\\n        address collection,\\n        uint256 tokenId\\n    ) internal returns (uint256) {\\n        PoolDeposit storage deposit = _deposits[collection][tokenId];\\n        require(isUnlockable(deposit.pool, deposit.depositDate), \\\"Stake: Not yet unstakable\\\");\\n\\n        Pool memory pool = getPool(deposit.pool);\\n        uint256 rewards = _getPendingRewardAmounts(deposit, pool);\\n        if (rewards > 0) {\\n            deposit.claimed += rewards;\\n        }\\n\\n        // update deposit\\n        delete _deposits[collection][tokenId];\\n\\n        // transfer token\\n        IERC721(collection).safeTransferFrom(address(this), account, tokenId);\\n\\n        return rewards;\\n    }\\n\\n    /**\\n     * @notice Unstake a token\\n     */\\n    function unstake(address collection, uint256 tokenId) external nonReentrant {\\n        require(_deposits[collection][tokenId].owner == _msgSender(), \\\"Stake: Not owner of token\\\");\\n\\n        address account = _msgSender();\\n        uint256 rewards = _unstake(account, collection, tokenId);\\n        _sendAndUpdateRewards(account, rewards);\\n\\n        emit Unstake(account, collection, tokenId);\\n    }\\n\\n    function _restake(\\n        uint256 newPoolId,\\n        address collection,\\n        uint256 tokenId\\n    ) internal returns (uint256) {\\n        require(isPoolOpened(newPoolId), \\\"Stake: Pool is closed\\\");\\n        require(collectionForPool(newPoolId) == collection, \\\"Stake: Invalid collection\\\");\\n\\n        PoolDeposit storage deposit = _deposits[collection][tokenId];\\n        Pool memory oldPool = getPool(deposit.pool);\\n\\n        require(isUnlockable(deposit.pool, deposit.depositDate), \\\"Stake: Not yet unstakable\\\");\\n        uint256 rewards = _getPendingRewardAmounts(deposit, oldPool);\\n\\n        // update deposit\\n        deposit.pool = uint64(newPoolId);\\n        deposit.depositDate = block.timestamp;\\n        deposit.claimed = 0;\\n\\n        return rewards;\\n    }\\n\\n    /**\\n     * @notice Allow a user to [re]stake a token in a new pool without unstaking it first.\\n     */\\n    function restake(\\n        uint256 newPoolId,\\n        address collection,\\n        uint256 tokenId\\n    ) external nonReentrant {\\n        require(_deposits[collection][tokenId].owner != address(0), \\\"Stake: Token not staked\\\");\\n        require(_deposits[collection][tokenId].owner == _msgSender(), \\\"Stake: Not owner of token\\\");\\n\\n        address account = _msgSender();\\n        uint256 rewards = _restake(newPoolId, collection, tokenId);\\n        _sendAndUpdateRewards(account, rewards);\\n\\n        emit Unstake(account, collection, tokenId);\\n        emit Stake(account, newPoolId, collection, tokenId);\\n    }\\n\\n    function _batchStake(\\n        address account,\\n        uint256 poolId,\\n        uint256[] memory tokenIds\\n    ) internal whenPoolOpened(poolId) {\\n        Pool memory pool = getPool(poolId);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _stake(account, pool.collection, tokenIds[i], poolId);\\n        }\\n\\n        emit BatchStake(account, poolId, pool.collection, tokenIds);\\n    }\\n\\n    function _batchUnstake(\\n        address account,\\n        address collection,\\n        uint256[] memory tokenIds\\n    ) internal {\\n        uint256 rewards = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(_deposits[collection][tokenIds[i]].owner == account, \\\"Stake: Not owner of token\\\");\\n            rewards = rewards + _unstake(account, collection, tokenIds[i]);\\n        }\\n        _sendAndUpdateRewards(account, rewards);\\n\\n        emit BatchUnstake(account, collection, tokenIds);\\n    }\\n\\n    function _batchRestake(\\n        address account,\\n        uint256 poolId,\\n        address collection,\\n        uint256[] memory tokenIds\\n    ) internal {\\n        uint256 rewards = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(_deposits[collection][tokenIds[i]].owner == account, \\\"Stake: Not owner of token\\\");\\n            rewards += _restake(poolId, collection, tokenIds[i]);\\n        }\\n        _sendAndUpdateRewards(account, rewards);\\n\\n        emit BatchUnstake(account, collection, tokenIds);\\n        emit BatchStake(account, poolId, collection, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Batch stake a list of tokens from the collection\\n     */\\n    function batchStake(uint256 poolId, uint256[] calldata tokenIds) external nonReentrant {\\n        _batchStake(_msgSender(), poolId, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Batch unstake tokens\\n     */\\n    function batchUnstake(address collection, uint256[] calldata tokenIds) external nonReentrant {\\n        _batchUnstake(_msgSender(), collection, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Batch restake tokens\\n     */\\n    function batchRestake(\\n        uint256 poolId,\\n        address collection,\\n        uint256[] calldata tokenIds\\n    ) external nonReentrant {\\n        _batchRestake(_msgSender(), poolId, collection, tokenIds);\\n    }\\n\\n    /**\\n     * @notice Batch stake a list of tokens from different collections\\n     */\\n    function stakeMulti(MultiStakeParam[] memory groups) external nonReentrant {\\n        address account = _msgSender();\\n\\n        for (uint256 i = 0; i < groups.length; i++) {\\n            _batchStake(account, groups[i].poolId, groups[i].tokenIds);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch unstake tokens from different collections\\n     */\\n    function unstakeMulti(MultiStakeParam[] memory groups) external nonReentrant {\\n        address account = _msgSender();\\n\\n        for (uint256 i = 0; i < groups.length; i++) {\\n            address collection = getPool(groups[i].poolId).collection;\\n            _batchUnstake(account, collection, groups[i].tokenIds);\\n        }\\n    }\\n\\n    /**\\n     * @notice Batch restake tokens from different collections\\n     */\\n    function restakeMulti(MultiStakeParam[] memory groups) external nonReentrant {\\n        address account = _msgSender();\\n\\n        for (uint256 i = 0; i < groups.length; i++) {\\n            address collection = getPool(groups[i].poolId).collection;\\n            _batchRestake(account, groups[i].poolId, collection, groups[i].tokenIds);\\n        }\\n    }\\n\\n    function claim(address collection, uint256 tokenId) external {\\n        address account = _msgSender();\\n        PoolDeposit storage deposit = _deposits[collection][tokenId];\\n        require(deposit.owner == account, \\\"Stake: Not owner of token\\\");\\n        require(isUnlockable(deposit.pool, deposit.depositDate), \\\"Stake: Not yet unstakable\\\");\\n\\n        Pool memory pool = getPool(deposit.pool);\\n        uint256 rewards = _getPendingRewardAmounts(deposit, pool);\\n        if (rewards > 0) {\\n            deposit.claimed += rewards;\\n        }\\n\\n        _sendAndUpdateRewards(account, rewards);\\n        emit Claimed(account, collection, tokenId, rewards, deposit.pool);\\n    }\\n\\n    function claimMulti(MultiStakeParam[] memory groups) external {\\n        address account = _msgSender();\\n        uint256 rewards = 0;\\n        for (uint256 i = 0; i < groups.length; i++) {\\n            Pool memory pool = getPool(groups[i].poolId);\\n\\n            for (uint256 u = 0; u < groups[i].tokenIds.length; u++) {\\n                PoolDeposit storage deposit = _deposits[pool.collection][groups[i].tokenIds[u]];\\n                require(deposit.owner == _msgSender(), \\\"Stake: Not owner of token\\\");\\n                require(isUnlockable(deposit.pool, deposit.depositDate), \\\"Stake: Not yet unstakable\\\");\\n\\n                uint256 depositRewards = _getPendingRewardAmounts(deposit, pool);\\n                if (depositRewards > 0) {\\n                    deposit.claimed += depositRewards;\\n                    rewards += depositRewards;\\n                }\\n            }\\n        }\\n\\n        _sendAndUpdateRewards(account, rewards);\\n        emit ClaimedMulti(account, groups, rewards);\\n    }\\n\\n    /**\\n     * @notice Checks if a token has been deposited for enough time to get rewards\\n     */\\n    function isTokenUnlocked(address collection, uint256 tokenId) public view returns (bool) {\\n        require(_deposits[collection][tokenId].owner != address(0), \\\"Stake: Token not staked\\\");\\n        return isUnlocked(_deposits[collection][tokenId].pool, _deposits[collection][tokenId].depositDate);\\n    }\\n\\n    /**\\n     * @notice Get the stake detail for a token (owner, poolId, min unstakable date, reward unlock date)\\n     */\\n    function getStakeInfo(address collection, uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            address owner, // owner\\n            uint256 poolId, // poolId\\n            uint256 depositDate, // deposit date\\n            uint256 unlockDate, // unlock date\\n            uint256 rewardDate, // reward date\\n            uint256 totalClaimed // total claimed\\n        )\\n    {\\n        if (_deposits[collection][tokenId].owner == address(0)) {\\n            return (address(0), 0, 0, 0, 0, 0);\\n        }\\n        PoolDeposit memory deposit = _deposits[collection][tokenId];\\n        Pool memory pool = getPool(deposit.pool);\\n        return (\\n            deposit.owner,\\n            deposit.pool,\\n            deposit.depositDate,\\n            deposit.depositDate + pool.minDuration,\\n            deposit.depositDate + pool.lockDuration,\\n            deposit.claimed\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the total reward for a user\\n     */\\n    function getUserTotalRewards(address account) external view returns (uint256) {\\n        return _userRewards[account];\\n    }\\n\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external override onlyOwner {\\n        // staked tokens cannot be recovered by owner\\n        require(_deposits[_token][_tokenId].owner == address(0), \\\"Stake: Cannot recover staked token\\\");\\n        IERC721(_token).transferFrom(address(this), address(msg.sender), _tokenId);\\n        emit NonFungibleTokenRecovery(_token, _tokenId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/MinterAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title MinterAccess\\n */\\nabstract contract MinterAccess is Ownable {\\n    mapping(address => bool) private _minters;\\n\\n    event MinterAdded(address indexed minter);\\n    event MinterRemoved(address indexed minter);\\n\\n    modifier onlyMinters() {\\n        require(_minters[_msgSender()], \\\"Mintable: Caller is not minter\\\");\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters[account];\\n    }\\n\\n    function addMinter(address minter) external onlyOwner {\\n        require(!_minters[minter], \\\"Mintable: Already minter\\\");\\n        _minters[minter] = true;\\n        emit MinterAdded(minter);\\n    }\\n\\n    function removeMinter(address minter) external onlyOwner {\\n        require(_minters[minter], \\\"Mintable: Not minter\\\");\\n        _minters[minter] = false;\\n        emit MinterRemoved(minter);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Poolable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/** @title Poolable.\\n@dev This contract manage configuration of pools\\n*/\\nabstract contract Poolable is Ownable {\\n    struct Pool {\\n        address collection; // nft collection\\n        uint256 lockDuration; // locked timespan\\n        uint256 minDuration; // min deposit timespan\\n        uint256 endRewardDate; // date to end the rewards\\n        uint256 rewardAmount; // amount rewarded when lockDuration is reached\\n    }\\n\\n    // pools mapping\\n    uint256 public poolsLength;\\n    mapping(uint256 => Pool) private _pools;\\n\\n    /**\\n     * @dev Emitted when a pool is created\\n     */\\n    event PoolAdded(uint256 poolIndex, Pool pool);\\n\\n    /**\\n     * @dev Emitted when a pool is updated\\n     */\\n    event PoolUpdated(uint256 poolIndex, Pool pool);\\n\\n    /**\\n     * @dev Modifier that checks that the pool at index `poolIndex` is open\\n     */\\n    modifier whenPoolOpened(uint256 poolIndex) {\\n        require(\\n            isPoolOpened(poolIndex),\\n            \\\"Poolable: Pool is closed\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that the now() - `depositDate` is above or equal to the min lock duration for pool at index `poolIndex`\\n     */\\n    modifier whenUnlocked(uint256 poolIndex, uint256 depositDate) {\\n        require(isUnlocked(poolIndex, depositDate), \\\"Poolable: Not unlocked\\\");\\n        _;\\n    }\\n\\n    function getPool(uint256 poolIndex) public view returns (Pool memory) {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        return _pools[poolIndex];\\n    }\\n\\n    function addPool(Pool calldata pool) external onlyOwner {\\n        uint256 poolIndex = poolsLength;\\n\\n        _pools[poolIndex] = pool;\\n        poolsLength = poolsLength + 1;\\n\\n        emit PoolAdded(poolIndex, _pools[poolIndex]);\\n    }\\n\\n    function updatePool(uint256 poolIndex, Pool calldata pool) external onlyOwner {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        Pool storage editedPool = _pools[poolIndex];\\n\\n        editedPool.lockDuration = pool.lockDuration;\\n        editedPool.minDuration = pool.minDuration;\\n        editedPool.endRewardDate = pool.endRewardDate;\\n        editedPool.rewardAmount = pool.rewardAmount;\\n\\n        emit PoolUpdated(poolIndex, editedPool);\\n    }\\n\\n    function closePool(uint256 poolIndex) external onlyOwner whenPoolOpened(poolIndex) {\\n        Pool storage editedPool = _pools[poolIndex];\\n        editedPool.endRewardDate = block.timestamp;\\n\\n        emit PoolUpdated(poolIndex, editedPool);\\n    }\\n\\n    function isUnlocked(uint256 poolIndex, uint256 depositDate) internal view returns (bool) {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        require(depositDate < block.timestamp, \\\"Poolable: Invalid deposit date\\\");\\n        return block.timestamp - depositDate >= _pools[poolIndex].lockDuration;\\n    }\\n\\n    function isUnlockable(uint256 poolIndex, uint256 depositDate) internal view returns (bool) {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        require(depositDate < block.timestamp, \\\"Poolable: Invalid deposit date\\\");\\n        return block.timestamp - depositDate >= _pools[poolIndex].minDuration;\\n    }\\n\\n    function isPoolOpened(uint256 poolIndex) public view returns (bool) {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        return _pools[poolIndex].endRewardDate == 0 || _pools[poolIndex].endRewardDate > block.timestamp;\\n    }\\n\\n    function collectionForPool(uint256 poolIndex) public view returns (address) {\\n        require(poolIndex < poolsLength, \\\"Poolable: Invalid poolIndex\\\");\\n        return _pools[poolIndex].collection;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Recoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../interfaces/IRecoverable.sol\\\";\\n\\nabstract contract Recoverable is Ownable, IRecoverable {\\n    using SafeERC20 for IERC20;\\n\\n    event NonFungibleTokenRecovery(address indexed token, uint256 tokenId);\\n    event TokenRecovery(address indexed token, uint256 amount);\\n    event EthRecovery(uint256 amount);\\n\\n    /**\\n     * @notice Allows the owner to recover non-fungible tokens sent to the contract by mistake\\n     * @param _token: NFT token address\\n     * @param _tokenId: tokenId\\n     * @dev Callable by owner\\n     */\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external virtual onlyOwner {\\n        IERC721(_token).transferFrom(address(this), address(msg.sender), _tokenId);\\n        emit NonFungibleTokenRecovery(_token, _tokenId);\\n    }\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token) external virtual onlyOwner {\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        require(balance != 0, \\\"Operations: Cannot recover zero balance\\\");\\n\\n        IERC20(_token).safeTransfer(address(msg.sender), balance);\\n        emit TokenRecovery(_token, balance);\\n    }\\n\\n    function recoverEth(address payable _to) external virtual onlyOwner {\\n        uint256 balance = address(this).balance;\\n        _to.transfer(balance);\\n        emit EthRecovery(balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRecoverable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IRecoverable {\\n    /**\\n     * @notice Allows the owner to recover non-fungible tokens sent to the NFT contract by mistake and this contract\\n     * @param _token: NFT token address\\n     * @param _tokenId: tokenId\\n     * @dev Callable by owner\\n     */\\n    function recoverNonFungibleToken(address _token, uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Allows the owner to recover tokens sent to the NFT contract and this contract by mistake\\n     * @param _token: token address\\n     * @dev Callable by owner\\n     */\\n    function recoverToken(address _token) external;\\n\\n    /**\\n     * @notice Allows the owner to recover ETH sent to the NFT contract ans and contract by mistake\\n     * @param _to: target address\\n     * @dev Callable by owner\\n     */\\n    function recoverEth(address payable _to) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"BatchStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"BatchUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pool\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct NftStakingPool.MultiStakeParam[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"ClaimedMulti\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonFungibleTokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Poolable.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct Poolable.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"PoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Poolable.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchRestake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchStakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStakingPool.MultiStakeParam[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"name\":\"claimMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"collectionForPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Poolable.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getUserTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"}],\"name\":\"isPoolOpened\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"recoverNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPoolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStakingPool.MultiStakeParam[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"name\":\"restakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"stakeFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStakingPool.MultiStakeParam[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"name\":\"stakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"internalType\":\"struct NftStakingPool.MultiStakeParam[]\",\"name\":\"groups\",\"type\":\"tuple[]\"}],\"name\":\"unstakeMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endRewardDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Poolable.Pool\",\"name\":\"pool\",\"type\":\"tuple\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UnifiedStaking","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"00000000000000000000000024c487fc99f31181ffdc3b7664b7471ee0506518","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]