[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"VaultSwapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.6;\\nimport \\\"IERC20.sol\\\";\\nimport \\\"SafeERC20.sol\\\";\\nimport \\\"Initializable.sol\\\";\\n\\ninterface Vault is IERC20 {\\n    function decimals() external view returns (uint256);\\n\\n    function deposit() external returns (uint256);\\n\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    function deposit(uint256 amount, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function withdraw() external returns (uint256);\\n\\n    function withdraw(uint256 maxShares) external returns (uint256);\\n\\n    function withdraw(uint256 maxShares, address recipient)\\n        external\\n        returns (uint256);\\n\\n    function token() external view returns (address);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) external returns (bool);\\n}\\n\\ninterface StableSwap {\\n    function remove_liquidity_one_coin(\\n        uint256 amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool is_deposit)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface Registry {\\n    function get_pool_from_lp_token(address lp) external view returns (address);\\n\\n    function get_lp_token(address pool) external view returns (address);\\n\\n    function get_n_coins(address) external view returns (uint256[2] memory);\\n\\n    function get_coins(address) external view returns (address[8] memory);\\n}\\n\\ncontract VaultSwapper is Initializable {\\n    Registry constant registry =\\n        Registry(0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5);\\n    uint256 constant private MIN_AMOUNT_OUT = 1;\\n    uint256 constant private MAX_DONATION = 10_000;\\n    uint256 constant private DEFAULT_DONATION = 30;\\n    uint256 constant private UNKNOWN_ORIGIN = 0;\\n    address public owner;\\n\\n    event Orgin(uint256 origin);\\n    struct Swap {\\n        bool deposit;\\n        address pool;\\n        uint128 n;\\n    }\\n\\n    function initialize(address _owner) initializer public {\\n        owner = _owner;\\n    }\\n\\n    function set_owner(address new_owner) public {\\n        require(owner == msg.sender);\\n        require(new_owner != address(0));\\n        owner = new_owner;\\n    }\\n\\n    /*\\n        @notice Swap with apoval using eip-2612\\n        @param from_vault The vault tokens should be taken from\\n        @param to_vault The vault tokens should be deposited to\\n        @param amount The amount of tokens you whish to use from the from_vault\\n        @param min_amount_out The minimal amount of tokens you would expect from the to_vault\\n        @param expiry signature expiry\\n        @param signature signature\\n    */\\n    function metapool_swap_with_signature(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) public {\\n        metapool_swap_with_signature(\\n            from_vault,\\n            to_vault,\\n            amount,\\n            min_amount_out,\\n            expiry,\\n            signature,\\n            DEFAULT_DONATION,\\n            UNKNOWN_ORIGIN\\n        );\\n    }\\n\\n    function metapool_swap_with_signature(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        uint256 expiry,\\n        bytes calldata signature,\\n        uint256 donation,\\n        uint256 origin\\n    ) public {\\n        assert(\\n            Vault(from_vault).permit(\\n                msg.sender,\\n                address(this),\\n                amount,\\n                expiry,\\n                signature\\n            )\\n        );\\n        metapool_swap(from_vault, to_vault, amount, min_amount_out, donation, origin);\\n    }\\n\\n    /**\\n        @notice swap tokens from one meta pool vault to an other\\n        @dev Remove funds from a vault, move one side of \\n        the asset from one curve pool to an other and \\n        deposit into the new vault.\\n        @param from_vault The vault tokens should be taken from\\n        @param to_vault The vault tokens should be deposited to\\n        @param amount The amount of tokens you whish to use from the from_vault\\n        @param min_amount_out The minimal amount of tokens you would expect from the to_vault\\n    */\\n    function metapool_swap(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out\\n    ) public {\\n        metapool_swap(from_vault, to_vault, amount, min_amount_out, DEFAULT_DONATION, UNKNOWN_ORIGIN);\\n    }\\n\\n    function metapool_swap(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        uint256 donation,\\n        uint256 origin\\n    ) public {\\n        address underlying = Vault(from_vault).token();\\n        address target = Vault(to_vault).token();\\n\\n        address underlying_pool = registry.get_pool_from_lp_token(underlying);\\n        address target_pool = registry.get_pool_from_lp_token(target);\\n\\n        Vault(from_vault).transferFrom(msg.sender, address(this), amount);\\n        uint256 underlying_amount = Vault(from_vault).withdraw(\\n            amount,\\n            address(this)\\n        );\\n        StableSwap(underlying_pool).remove_liquidity_one_coin(\\n            underlying_amount,\\n            1,\\n            1\\n        );\\n\\n        IERC20 underlying_coin = IERC20(registry.get_coins(underlying_pool)[1]);\\n        uint256 liquidity_amount = underlying_coin.balanceOf(address(this));\\n\\n        underlying_coin.approve(target_pool, liquidity_amount);\\n\\n        StableSwap(target_pool).add_liquidity(\\n            [0, liquidity_amount],\\n            MIN_AMOUNT_OUT\\n        );\\n\\n        uint256 target_amount = IERC20(target).balanceOf(address(this));\\n        if(donation != 0) {\\n            uint256 donating = (target_amount * donation) / MAX_DONATION;\\n            SafeERC20.safeTransfer(IERC20(target), owner, donating);\\n            target_amount -= donating;\\n        }\\n\\n        approve(target, to_vault, target_amount);\\n\\n        uint256 out = Vault(to_vault).deposit(target_amount, msg.sender);\\n\\n        require(out >= min_amount_out, \\\"out too low\\\");\\n        if (origin != UNKNOWN_ORIGIN) {\\n            emit Orgin(origin);\\n        }\\n    }\\n\\n    /**\\n        @notice estimate the amount of tokens out\\n        @param from_vault The vault tokens should be taken from\\n        @param to_vault The vault tokens should be deposited to\\n        @param amount The amount of tokens you whish to use from the from_vault\\n        @return the amount of token shared expected in the to_vault\\n     */\\n    function metapool_estimate_out(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 donation\\n    ) public view returns (uint256) {\\n        address underlying = Vault(from_vault).token();\\n        address target = Vault(to_vault).token();\\n\\n        address underlying_pool = registry.get_pool_from_lp_token(underlying);\\n        address target_pool = registry.get_pool_from_lp_token(target);\\n\\n        uint256 pricePerShareFrom = Vault(from_vault).pricePerShare();\\n        uint256 pricePerShareTo = Vault(to_vault).pricePerShare();\\n\\n        uint256 amount_out = (pricePerShareFrom * amount) /\\n            (10**Vault(from_vault).decimals());\\n        amount_out = StableSwap(underlying_pool).calc_withdraw_one_coin(\\n            amount_out,\\n            1\\n        );\\n        amount_out = StableSwap(target_pool).calc_token_amount(\\n            [0, amount_out],\\n            true\\n        );\\n        amount_out -= (amount_out * (MAX_DONATION - donation) / MAX_DONATION);\\n        return\\n            (amount_out * (10**Vault(to_vault).decimals())) / pricePerShareTo;\\n    }\\n\\n    function swap_with_signature(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        Swap[] calldata instructions,\\n        uint256 expiry,\\n        bytes calldata signature\\n    ) public {\\n        swap_with_signature(\\n            from_vault,\\n            to_vault,\\n            amount,\\n            min_amount_out,\\n            instructions,\\n            expiry,\\n            signature,\\n            DEFAULT_DONATION,\\n            UNKNOWN_ORIGIN\\n        );\\n    }\\n\\n    function swap_with_signature(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        Swap[] calldata instructions,\\n        uint256 expiry,\\n        bytes calldata signature,\\n        uint256 donation,\\n        uint256 origin\\n    ) public {\\n        assert(\\n            Vault(from_vault).permit(\\n                msg.sender,\\n                address(this),\\n                amount,\\n                expiry,\\n                signature\\n            )\\n        );\\n        swap(\\n            from_vault,\\n            to_vault,\\n            amount,\\n            min_amount_out,\\n            instructions,\\n            donation,\\n            origin\\n        );\\n    }\\n\\n    function swap(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        Swap[] calldata instructions\\n    ) public {\\n        swap(from_vault, to_vault, amount, min_amount_out, instructions, DEFAULT_DONATION, UNKNOWN_ORIGIN);\\n    }\\n\\n    function swap(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        uint256 min_amount_out,\\n        Swap[] calldata instructions,\\n        uint256 donation,\\n        uint256 origin\\n    ) public {\\n        address token = Vault(from_vault).token();\\n        address target = Vault(to_vault).token();\\n\\n        Vault(from_vault).transferFrom(msg.sender, address(this), amount);\\n\\n        amount = Vault(from_vault).withdraw(amount, address(this));\\n        uint256 n_coins;\\n        for (uint256 i = 0; i < instructions.length; i++) {\\n            if (instructions[i].deposit) {\\n                n_coins = registry.get_n_coins(instructions[i].pool)[0];\\n                uint256[] memory list = new uint256[](n_coins);\\n                list[instructions[i].n] = amount;\\n                approve(token, instructions[i].pool, amount);\\n\\n                if (n_coins == 2) {\\n                    StableSwap(instructions[i].pool).add_liquidity(\\n                        [list[0], list[1]],\\n                        1\\n                    );\\n                } else if (n_coins == 3) {\\n                    StableSwap(instructions[i].pool).add_liquidity(\\n                        [list[0], list[1], list[2]],\\n                        1\\n                    );\\n                } else if (n_coins == 4) {\\n                    StableSwap(instructions[i].pool).add_liquidity(\\n                        [list[0], list[1], list[2], list[3]],\\n                        1\\n                    );\\n                }\\n\\n                token = registry.get_lp_token(instructions[i].pool);\\n                amount = IERC20(token).balanceOf(address(this));\\n            } else {\\n                token = registry.get_coins(instructions[i].pool)[\\n                    instructions[i].n\\n                ];\\n                amount = remove_liquidity_one_coin(\\n                    token,\\n                    instructions[i].pool,\\n                    amount,\\n                    instructions[i].n\\n                );\\n            }\\n        }\\n\\n        require(target == token, \\\"!path\\\");\\n\\n        if(donation != 0) {\\n            uint256 donating = (amount * donation) / MAX_DONATION;\\n            SafeERC20.safeTransfer(IERC20(target), owner, donating);\\n            amount -= donating;\\n        }\\n        approve(target, to_vault, amount);\\n        uint256 out  = Vault(to_vault).deposit(amount, msg.sender);\\n\\n        require(out >= min_amount_out, \\\"out too low\\\");\\n        if (origin != UNKNOWN_ORIGIN){\\n            emit Orgin(origin);\\n        }\\n    }\\n\\n    function remove_liquidity_one_coin(\\n        address token,\\n        address pool,\\n        uint256 amount,\\n        uint128 n\\n    ) internal returns (uint256) {\\n        uint256 amountBefore = IERC20(token).balanceOf(address(this));\\n        pool.call(\\n            abi.encodeWithSignature(\\n                \\\"remove_liquidity_one_coin(uint256,int128,uint256)\\\",\\n                amount,\\n                int128(n),\\n                1\\n            )\\n        );\\n\\n        uint256 newAmount = IERC20(token).balanceOf(address(this));\\n\\n        if (newAmount > amountBefore) {\\n            return newAmount;\\n        }\\n\\n        pool.call(\\n            abi.encodeWithSignature(\\n                \\\"remove_liquidity_one_coin(uint256,uint256,uint256)\\\",\\n                amount,\\n                uint256(n),\\n                1\\n            )\\n        );\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function estimate_out(\\n        address from_vault,\\n        address to_vault,\\n        uint256 amount,\\n        Swap[] calldata instructions,\\n        uint256 donation\\n    ) public view returns (uint256) {\\n        uint256 pricePerShareFrom = Vault(from_vault).pricePerShare();\\n        uint256 pricePerShareTo = Vault(to_vault).pricePerShare();\\n        amount =\\n            (amount * pricePerShareFrom) /\\n            (10**Vault(from_vault).decimals());\\n        for (uint256 i = 0; i < instructions.length; i++) {\\n            uint256 n_coins = registry.get_n_coins(instructions[i].pool)[0];\\n            if (instructions[i].deposit) {\\n                n_coins = registry.get_n_coins(instructions[i].pool)[0];\\n                uint256[] memory list = new uint256[](n_coins);\\n                list[instructions[i].n] = amount;\\n\\n                if (n_coins == 2) {\\n                    amount = StableSwap(instructions[i].pool).calc_token_amount(\\n                            [list[0], list[1]],\\n                            true\\n                        );\\n                } else if (n_coins == 3) {\\n                    amount = StableSwap(instructions[i].pool).calc_token_amount(\\n                            [list[0], list[1], list[2]],\\n                            true\\n                        );\\n                } else if (n_coins == 4) {\\n                    amount = StableSwap(instructions[i].pool).calc_token_amount(\\n                            [list[0], list[1], list[2], list[3]],\\n                            true\\n                        );\\n                }\\n            } else {\\n                amount = calc_withdraw_one_coin(\\n                    instructions[i].pool,\\n                    amount,\\n                    instructions[i].n\\n                );\\n            }\\n        }\\n        amount -= (amount * (MAX_DONATION - donation) / MAX_DONATION);\\n        return (amount * (10**Vault(to_vault).decimals())) / pricePerShareTo;\\n    }\\n\\n    function approve(\\n        address target,\\n        address to_vault,\\n        uint256 amount\\n    ) internal {\\n        if (IERC20(target).allowance(address(this), to_vault) < amount) {\\n            SafeERC20.safeApprove(IERC20(target), to_vault, 0);\\n            SafeERC20.safeApprove(IERC20(target), to_vault, type(uint256).max);\\n        }\\n    }\\n\\n    function calc_withdraw_one_coin(\\n        address pool,\\n        uint256 amount,\\n        uint128 n\\n    ) internal view returns (uint256) {\\n        (bool success, bytes memory returnData) = pool.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"calc_withdraw_one_coin(uint256,uint256)\\\",\\n                amount,\\n                uint256(n)\\n            )\\n        );\\n        if (success) {\\n            return abi.decode(returnData, (uint256));\\n        }\\n        (success, returnData) = pool.staticcall(\\n            abi.encodeWithSignature(\\n                \\\"calc_withdraw_one_coin(uint256,int128)\\\",\\n                amount,\\n                int128(n)\\n            )\\n        );\\n\\n        require(success, \\\"!success\\\");\\n\\n        return abi.decode(returnData, (uint256));\\n    }\\n}\\n\"\r\n    },\r\n    \"IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"IERC20.sol\\\";\\nimport \\\"Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"istanbul\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"Orgin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"n\",\"type\":\"uint128\"}],\"internalType\":\"struct VaultSwapper.Swap[]\",\"name\":\"instructions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"estimate_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"}],\"name\":\"metapool_estimate_out\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"}],\"name\":\"metapool_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"metapool_swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"metapool_swap_with_signature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"metapool_swap_with_signature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_owner\",\"type\":\"address\"}],\"name\":\"set_owner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"n\",\"type\":\"uint128\"}],\"internalType\":\"struct VaultSwapper.Swap[]\",\"name\":\"instructions\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"n\",\"type\":\"uint128\"}],\"internalType\":\"struct VaultSwapper.Swap[]\",\"name\":\"instructions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"n\",\"type\":\"uint128\"}],\"internalType\":\"struct VaultSwapper.Swap[]\",\"name\":\"instructions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"donation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"origin\",\"type\":\"uint256\"}],\"name\":\"swap_with_signature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_amount_out\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"deposit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"n\",\"type\":\"uint128\"}],\"internalType\":\"struct VaultSwapper.Swap[]\",\"name\":\"instructions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"swap_with_signature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VaultSwapper","CompilerVersion":"v0.8.6+commit.11564f7e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]