[{"SourceCode":"pragma solidity ^0.4.13;\r\n \r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n    function balanceOf(address who) constant public returns (uint256);\r\n    function transfer(address to, uint256 value)public returns (bool);\r\n    function allowance(address owner, address spender)public constant returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value)public returns (bool);\r\n    function approve(address spender, uint256 value)public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n \r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n  \r\n}\r\n \r\n/**\r\n * @title Basic token\r\n * @dev Basic version of StandardToken, with no allowances. \r\n */\r\ncontract BasicToken is ERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) balances;\r\n  \r\n    /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n    function transfer(address _to, uint256 _value)public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of. \r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n    function balanceOf(address _owner)public constant returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n \r\n}\r\n \r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is BasicToken {\r\n \r\n    mapping (address => mapping (address => uint256)) allowed;\r\n \r\n    /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amout of tokens to be transfered\r\n   */\r\n    function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\r\n        uint _allowance = allowed[_from][msg.sender];\r\n \r\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n    // require (_value <= _allowance);\r\n \r\n        balances[_to] = balances[_to].add(_value);\r\n        balances[_from] = balances[_from].sub(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n    function approve(address _spender, uint256 _value)public returns (bool) {\r\n \r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifing the amount of tokens still available for the spender.\r\n   */\r\n    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n    \r\n}\r\n \r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n \r\n    /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n    function Ownable()public {\r\n        owner = msg.sender;\r\n    }\r\n \r\n    /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n \r\n    /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n    function transferOwnership(address newOwner)public onlyOwner {\r\n        require(newOwner != address(0));      \r\n        owner = newOwner;\r\n    }\r\n \r\n}\r\n \r\n/**\r\n * @title Mintable token\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n */\r\ncontract MintableToken is StandardToken, Ownable {\r\n    \r\n    event Mint(address indexed to, uint256 amount);\r\n    event MintFinished();\r\n \r\n    bool public mintingFinished = false;\r\n \r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n \r\n    /**\r\n   * @dev Function to mint tokens\r\n   * @param _to The address that will recieve the minted tokens.\r\n   * @param _amount The amount of tokens to mint.\r\n   * @return A boolean that indicates if the operation was successful.\r\n   */\r\n    function mint(address _to, uint256 _amount)public onlyOwner canMint returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        Mint(_to, _amount);\r\n        Transfer(0, _to, _amount);\r\n        return true;\r\n    }\r\n \r\n    /**\r\n   * @dev Function to stop minting new tokens.\r\n   * @return True if the operation was successful.\r\n   */\r\n    function finishMinting()public onlyOwner returns (bool) {\r\n        mintingFinished = true;\r\n        MintFinished();\r\n        return true;\r\n    }\r\n    /*function approveAndCall(address spender, uint skolko) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(skolko.mul(1000000000000000000));\r\n        allowed[msg.sender][spender] = skolko;\r\n        Approval(msg.sender, spender, skolko);\r\n        Crowdsale(spender).receiveApproval(msg.sender, skolko, address(this));\r\n        return true;\r\n    }\r\n  */\r\n\r\n}\r\n \r\ncontract MultiLevelToken is MintableToken {\r\n    \r\n    string public constant name = \"Multi-level token\";\r\n    string public constant symbol = \"MLT\";\r\n    uint32 public constant decimals = 18;\r\n    \r\n}\r\n \r\ncontract Crowdsale is Ownable{\r\n    \r\n    using SafeMath for uint;\r\n    \r\n    address multisig;\r\n    uint multisigPercent;\r\n    address bounty;\r\n    uint bountyPercent;\r\n \r\n    MultiLevelToken public token = new MultiLevelToken();\r\n    uint rate;\r\n    uint tokens;\r\n    uint value;\r\n    \r\n    uint tier;\r\n    uint i;\r\n    uint a=1;\r\n    uint b=1;\r\n    uint c=1;\r\n    uint d=1;\r\n    uint e=1;\r\n    uint parent;\r\n    uint256 parentMoney;\r\n    address whom;\r\n    mapping (uint => mapping(address => uint))tree;\r\n    mapping (uint => mapping(uint => address)) order;\r\n \r\n    function Crowdsale()public {\r\n        multisig = 0xB52E296b76e7Da83ADE05C1458AED51D3911603f;\r\n        multisigPercent = 5;\r\n        bounty = 0x1F2D3767D70FA59550f0BC608607c30AAb9fDa06;\r\n        bountyPercent = 5;\r\n        rate = 100000000000000000000;\r\n        \r\n    }\r\n \r\n    function finishMinting() public onlyOwner returns(bool)  {\r\n        token.finishMinting();\r\n        return true;\r\n    }\r\n    \r\n    function distribute() public{\r\n        \r\n        for (i=1;i<=10;i++){\r\n            while (parent >1){\r\n                if (parent%3==0){\r\n                            parent=parent.div(3);\r\n                            whom = order[tier][parent];\r\n                            token.mint(whom,parentMoney);\r\n                        }\r\n                else if ((parent-1)%3==0){\r\n                            parent=(parent-1)/3;\r\n                            whom = order[tier][parent];\r\n                            token.mint(whom,parentMoney); \r\n                        }\r\n                else{\r\n                            parent=(parent+1)/3;\r\n                            whom = order[tier][parent];\r\n                            token.mint(whom,parentMoney);\r\n                        }\r\n            }\r\n        }\r\n        \r\n    }    \r\n    \r\n    function createTokens()public  payable {\r\n        \r\n        uint _multisig = msg.value.mul(multisigPercent).div(100);\r\n        uint _bounty = msg.value.mul(bountyPercent).div(100);\r\n        tokens = rate.mul(msg.value).div(1 ether);\r\n        tokens = tokens.mul(55).div(100);\r\n        parentMoney = msg.value.mul(35).div(10);\r\n        \r\n        if (msg.value >= 50000000000000000 && msg.value < 100000000000000000){\r\n            tier=1;\r\n            tree[tier][msg.sender]=a;\r\n            order[tier][a]=msg.sender;\r\n            parent = a;\r\n            a+=1;\r\n            distribute();\r\n        }\r\n        else if (msg.value >= 100000000000000000 && msg.value < 200000000000000000){\r\n            tier=2;\r\n            tree[tier][msg.sender]=b;\r\n            order[tier][b]=msg.sender;\r\n            parent = b;\r\n            b+=1;\r\n            distribute();\r\n        }    \r\n        else if (msg.value >= 200000000000000000 && msg.value < 500000000000000000){\r\n            tier=3;\r\n            tree[tier][msg.sender]=c;\r\n            order[tier][c]=msg.sender;\r\n            parent = c;\r\n            c+=1;\r\n            distribute();\r\n        }\r\n        else if(msg.value >= 500000000000000000 && msg.value < 1000000000000000000){\r\n            tier=4;\r\n            tree[tier][msg.sender]=d;\r\n            order[tier][d]=msg.sender;\r\n            parent = d;\r\n            d+=1;\r\n            distribute();\r\n        }\r\n        else if(msg.value >= 1000000000000000000){\r\n            tier=5;\r\n            tree[tier][msg.sender]=e;\r\n            order[tier][e]=msg.sender;\r\n            parent = e;\r\n            e+=1;\r\n            distribute();\r\n        }\r\n        token.mint(msg.sender, tokens);\r\n        multisig.transfer(_multisig);\r\n        bounty.transfer(_bounty);\r\n    }\r\n    \r\n    /*address _tokenAddress;\r\n    function GetTokenAddress (address Get) public onlyOwner{\r\n        _tokenAddress=Get;\r\n    }*/\r\n    \r\n    function receiveApproval(address from, uint skolko /*, address tokenAddress*/) public payable onlyOwner{\r\n     //   require (tokenAddress == _tokenAddress);\r\n        from.transfer(skolko.mul(1000000000000));\r\n    }\r\n    \r\n    function() external payable {\r\n        createTokens();\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]","ContractName":"MultiLevelToken","CompilerVersion":"v0.4.19+commit.c4cbbb05","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ad286fe23f15ca8294d64d55bd3e64c6c5e3524c6df863b2f57177657a672e29"}]