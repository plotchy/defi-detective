[{"SourceCode":"{\"Ecocelium_Core.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./Ecocelium_Initializer.sol\\\";\\r\\n\\r\\n/*\\r\\n\\r\\n███████╗░█████╗░░█████╗░░█████╗░███████╗██╗░░░░░██╗██╗░░░██╗███╗░░░███╗\\r\\n██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░░░██║██║░░░██║████╗░████║\\r\\n█████╗░░██║░░╚═╝██║░░██║██║░░╚═╝█████╗░░██║░░░░░██║██║░░░██║██╔████╔██║\\r\\n██╔══╝░░██║░░██╗██║░░██║██║░░██╗██╔══╝░░██║░░░░░██║██║░░░██║██║╚██╔╝██║\\r\\n███████╗╚█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗██║╚██████╔╝██║░╚═╝░██║\\r\\n╚══════╝░╚════╝░░╚════╝░░╚════╝░╚══════╝╚══════╝╚═╝░╚═════╝░╚═╝░░░░░╚═╝\\r\\n\\r\\nBrought to you by Kryptual Team */\\r\\n\\r\\ncontract EcoceliumDataManager is Initializable {\\r\\n    \\r\\n    IAbacusOracle abacus;\\r\\n    EcoMoneyManager EMM;\\r\\n    EcoceliumInit Init;\\r\\n    enum Status {OPENCREATOR, OPENBORROW, MATCHED, CLOSED} \\r\\n\\r\\n    /*============Mappings=============\\r\\n    ----------------------------------*/\\r\\n    mapping (string =\\u003e uint64[]) public orderpool;  //is an always sorted array based on Yield Rate of Pending Orders for all currencies\\r\\n    mapping (string =\\u003e uint[]) public poolIndex;  //Index of First Investor Bid for all currencies\\r\\n    mapping (address =\\u003e User) public users;\\r\\n    //mapping (address =\\u003e address) public sponsorAddress; //FOR TREASURY PLAN\\r\\n    mapping (uint64 =\\u003e Status) public orderStatus;\\r\\n    mapping (uint64 =\\u003e matchedOrder) public matchOrderMap;\\r\\n    mapping (uint64 =\\u003e Order) public openOrderMap;\\r\\n    mapping (uint64 =\\u003e uint) public orderUSDValue;\\r\\n    \\r\\n    /*=========Structs and Initializer================\\r\\n    --------------------------------*/    \\r\\n    \\r\\n    struct freeStorage{     //USER DEPOSIT / BORROW STRUCTURE\\r\\n        uint amount;\\r\\n        uint time;\\r\\n        string wtoken;\\r\\n        uint usdvalue;\\r\\n    }\\r\\n    \\r\\n    struct matchedOrder{            //RUNNING OR MATCHED ORDERS IN THIS FORM\\r\\n        address payable supplier;\\r\\n        address payable borrower;\\r\\n        uint time;\\r\\n        uint expiryDate;\\r\\n        uint duration;\\r\\n        uint amount;\\r\\n        uint usdvalue;\\r\\n        uint yield;\\r\\n        string wtoken;\\r\\n        uint duesPaid;\\r\\n    }\\r\\n\\r\\n    struct Order{       // PENDING ORDERS IN THIS FORMAT\\r\\n        address payable creator;\\r\\n        uint duration;\\r\\n        uint amount;\\r\\n        uint yield;\\r\\n        string wtoken;\\r\\n    }    \\r\\n    \\r\\n    struct User{\\r\\n        uint totalDeposit;  //USD VALUE OF TOTAL DEPOSIT AT DEPOSIT TIME\\r\\n        uint totalBorrowed; //USD VALUE OF TOTAL DEPOSIT AT BORROW TIME\\r\\n        freeStorage [] myDeposits; //DEPOSIT DATA\\r\\n        freeStorage [] myBorrows; //BORROW DATA\\r\\n        mapping(string =\\u003e uint) deposits; //CURRENCY-WISE TOTAL DEPOSIT COUNT FULL VALUE \\r\\n        mapping(string =\\u003e uint) borrows; //CURRENCY-WISE TOTAL BORROW COUNT FULL VALUE\\r\\n        uint64 [] borrowedOrders; //BORROWED ORDER - ORDER ID\\r\\n        uint64 [] createdOrders; //CREATED ORDER - ORDER ID\\r\\n        uint64 [] myOrders; //MATCHED ORDR - ORDER ID\\r\\n    }\\r\\n    \\r\\n    function initializeAddress(address payable EMMaddress,address AbacusAddress, address payable Initaddress) external initializer{\\r\\n            EMM = EcoMoneyManager(EMMaddress);\\r\\n            abacus = IAbacusOracle(AbacusAddress); \\r\\n            Init = EcoceliumInit(Initaddress);\\r\\n    }\\r\\n\\r\\n    /*============Main Functions===============\\r\\n    Key Notes - \\r\\n    1) Always call main functions of Data Manager with Wrapped Token\\r\\n    2) _status signifies (status == Status.OPENCREATOR) operation - Returns True for Deposit Functions and False for Borrow Function\\r\\n    3) require(Init.friendlyaddress(msg.sender) ,\\\"Not Friendly Address\\\"); - This is mentioned in the EcoceliumInit Contract\\r\\n    4) FreePusher/Popper are for Liquidity Pools and push/pop order and matchOrder is the Order Matching Engine\\r\\n    5) Fetch Token Price Returns Values in 10**8\\r\\n    6) Amounts are without setting off Token Decimals\\r\\n    ---------------------------------*/\\r\\n    \\r\\n    function freePusher(address userAddress, string memory token, uint _amount, bool _status) external {  //_status signifies (status == Status.OPENCREATOR) operation\\r\\n        require(Init.friendlyaddress(msg.sender) ,\\\"Not Friendly Address\\\");\\r\\n        uint _usdValue = USDValue(_amount, token);\\r\\n        freeStorage memory newStorage = freeStorage({  amount: _amount,\\r\\n                                                    time: now,\\r\\n                                                    wtoken: token,\\r\\n                                                    usdvalue: _usdValue   });\\r\\n        if(_status){\\r\\n            users[userAddress].myDeposits.push(newStorage);\\r\\n            users[userAddress].totalDeposit += _usdValue;\\r\\n            users[userAddress].deposits[token] += _amount;\\r\\n        }   else {\\r\\n            users[userAddress].myBorrows.push(newStorage);\\r\\n            users[userAddress].totalBorrowed += _usdValue;\\r\\n            users[userAddress].borrows[token] += _amount;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function freePopper(address userAddress, string memory _tokenSymbol, uint _amount, bool _status) public returns (uint dues) {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        if(_status) { \\r\\n            require(users[userAddress].deposits[_tokenSymbol]\\u003e=_amount, \\\"Insufficient Deposits\\\");\\r\\n            users[userAddress].deposits[_tokenSymbol] -= _amount;\\r\\n        } else {\\r\\n            require(users[userAddress].borrows[_tokenSymbol]\\u003e=_amount,\\\"Insufficient Borrowings\\\");\\r\\n            users[userAddress].borrows[_tokenSymbol] -= _amount;\\r\\n        }\\r\\n        uint amountLeft= _amount;\\r\\n        freeStorage [] storage mystorage = _status ?  users[userAddress].myDeposits : users[userAddress].myBorrows;\\r\\n        for( uint i= mystorage.length-1; amountLeft \\u003e0 ; i--){\\r\\n            if(keccak256(abi.encodePacked(mystorage[i].wtoken)) != keccak256(abi.encodePacked(_tokenSymbol))) { continue; }\\r\\n            if (mystorage[i].amount \\u003c= amountLeft){\\r\\n                amountLeft -= mystorage[i].amount;\\r\\n                _status ? users[userAddress].totalDeposit -= mystorage[i].usdvalue : users[userAddress].totalBorrowed -= mystorage[i].usdvalue;\\r\\n                dues+= calculateECOEarning(USDValue(mystorage[i].amount,_tokenSymbol), _tokenSymbol, mystorage[i].time);\\r\\n                mystorage.pop(); \\r\\n            } else {\\r\\n                _status ? users[userAddress].totalDeposit -= (mystorage[i].amount-amountLeft)*mystorage[i].usdvalue : users[userAddress].totalBorrowed -= (mystorage[i].amount-amountLeft)*mystorage[i].usdvalue;\\r\\n                mystorage[i].amount -= amountLeft;\\r\\n                dues += calculateECOEarning(USDValue(amountLeft,_tokenSymbol), _tokenSymbol, mystorage[i].time);\\r\\n                amountLeft = 0;\\r\\n            }\\r\\n        } \\r\\n        _status ? users[userAddress].myDeposits = mystorage :   users[userAddress].myBorrows = mystorage;\\r\\n    }\\r\\n    \\r\\n    function pushOrder(address payable userAddress,string memory _tokenSymbol ,uint _amount,uint _duration, uint _yield, bool _status) internal returns (uint){\\r\\n        (uint64 _orderId,uint newAmount,uint fee) = _ordersub(_amount, userAddress, _duration, _tokenSymbol);\\r\\n        openOrderMap[_orderId] = Order({       \\r\\n                                            creator : userAddress,\\r\\n                                            duration : _duration,\\r\\n                                            amount : newAmount,\\r\\n                                            yield : _yield,\\r\\n                                            wtoken : _tokenSymbol\\r\\n                                 });\\r\\n        if(_status) {\\r\\n            orderStatus[_orderId] = Status.OPENCREATOR;\\r\\n            users[userAddress].createdOrders.push(_orderId);\\r\\n        } else  {\\r\\n            orderStatus[_orderId] = Status.OPENBORROW;\\r\\n            users[userAddress].borrowedOrders.push(_orderId);  }\\r\\n        orderpool[_tokenSymbol].push(_orderId);\\r\\n        if(orderpool[_tokenSymbol].length\\u003e1000)   {   poolSorter(_orderId, _tokenSymbol, true);   }\\r\\n        orderUSDValue[_orderId]=USDValue(_amount,_tokenSymbol);\\r\\n        return fee;\\r\\n    }\\r\\n    \\r\\n    function poolSorter(uint64 _orderId, string memory _tokenSymbol, bool _status) public {        //Status here signifies Insertion if True, and Deletion if false\\r\\n        uint64 [] memory temp;\\r\\n        bool task = false;\\r\\n        bool pooltask = false;\\r\\n        uint pid;\\r\\n        if(orderStatus[_orderId] == Status.OPENCREATOR) { pid = (openOrderMap[_orderId].duration/6) - 1; \\r\\n        } else if(orderStatus[_orderId] == Status.OPENBORROW) { pid = (openOrderMap[_orderId].duration/6) + 5; }\\r\\n        poolIndex[_tokenSymbol][pid]=0;\\r\\n\\t    if(orderpool[_tokenSymbol].length==1 \\u0026\\u0026 _status) { orderpool[_tokenSymbol][1] = _orderId;   } else {\\r\\n            for((uint i, uint j)=(0,0);i\\u003corderpool[_tokenSymbol].length;(i++,j++)) {\\r\\n                if(openOrderMap[orderpool[_tokenSymbol][i]].yield \\u003c 1) { continue; }\\r\\n                temp[j]=orderpool[_tokenSymbol][i];\\r\\n                if(!task \\u0026\\u0026 _status \\u0026\\u0026 openOrderMap[temp[j]].yield \\u003e openOrderMap[_orderId].yield) {    //Insertion Case\\r\\n                        temp[j]=_orderId; temp[++j]=orderpool[_tokenSymbol][i]; task = true;\\r\\n                }else if(!task \\u0026\\u0026 !_status \\u0026\\u0026 _orderId == temp[j]){     //Deletion Case\\r\\n                    temp[j]=orderpool[_tokenSymbol][++i]; task = true;\\r\\n                }\\r\\n                if(uint(openOrderMap[temp[j]].duration/6) == uint(openOrderMap[_orderId].duration/6) \\u0026\\u0026 orderStatus[orderpool[_tokenSymbol][i]]==Status.OPENBORROW) {       //Assigns updatePoolIndex with Highest Value of Borrow\\r\\n                    poolIndex[_tokenSymbol][pid] = i;\\r\\n                    pooltask = true;\\r\\n                } else if(uint(openOrderMap[temp[j]].duration/6) == uint(openOrderMap[_orderId].duration/6) \\u0026\\u0026 orderStatus[orderpool[_tokenSymbol][i]]==Status.OPENCREATOR \\u0026\\u0026 !pooltask) {\\r\\n                    poolIndex[_tokenSymbol][pid] = i;\\r\\n                    pooltask = true;\\r\\n                }\\r\\n            }\\r\\n            orderpool[_tokenSymbol] = temp;\\r\\n\\t    }\\r\\n    }\\r\\n    \\r\\n    function matchOrder(address payable userAddress, string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield, uint64 _orderId) internal    {\\r\\n        matchOrderMap[_orderId] = matchedOrder({       \\r\\n                                            supplier : (orderStatus[_orderId] == Status.OPENBORROW) ? userAddress : openOrderMap[_orderId].creator,\\r\\n                                            borrower : (orderStatus[_orderId] == Status.OPENCREATOR) ? userAddress : openOrderMap[_orderId].creator,\\r\\n                                            time    : now,\\r\\n                                            expiryDate : now + _duration*(30 days),\\r\\n                                            duration : _duration,\\r\\n                                            amount : _amount,\\r\\n                                            usdvalue : USDValue(_amount,_tokenSymbol),\\r\\n                                            yield : _yield,\\r\\n                                            wtoken : _tokenSymbol,\\r\\n                                            duesPaid : 0\\r\\n                                            });\\r\\n        \\r\\n        for((uint i,uint j)=(0,0); i\\u003cusers[matchOrderMap[_orderId].supplier].createdOrders.length; (i++,j++)) {\\r\\n            if(users[matchOrderMap[_orderId].supplier].createdOrders[i] == _orderId) { --j; continue; }\\r\\n            users[matchOrderMap[_orderId].supplier].createdOrders[j] = users[matchOrderMap[_orderId].supplier].createdOrders[i];\\r\\n        }\\r\\n        for((uint i,uint j)=(0,0); i\\u003cusers[matchOrderMap[_orderId].borrower].borrowedOrders.length; (i++,j++)) {\\r\\n            if(users[matchOrderMap[_orderId].borrower].borrowedOrders[i] == _orderId) { continue; }\\r\\n            users[matchOrderMap[_orderId].borrower].borrowedOrders[j] = users[matchOrderMap[_orderId].borrower].borrowedOrders[i];\\r\\n        }\\r\\n        delete openOrderMap[_orderId];\\r\\n        poolSorter(_orderId, _tokenSymbol, false);\\r\\n        orderStatus[_orderId]=Status.MATCHED;\\r\\n        orderUSDValue[_orderId]=USDValue(_amount,_tokenSymbol);\\r\\n        users[matchOrderMap[_orderId].supplier].myOrders.push(_orderId);\\r\\n        users[matchOrderMap[_orderId].borrower].myOrders.push(_orderId);\\r\\n        scheduleExpiry(_orderId);\\r\\n        scheduleCheck(_orderId,matchOrderMap[_orderId].borrower,1);\\r\\n        EMM.WithdrawManager(EMM.wtormap(_tokenSymbol), _amount, matchOrderMap[_orderId].borrower);\\r\\n        Init.emitOrderCreated(userAddress,_duration,_yield,_amount,_tokenSymbol); \\r\\n    }\\r\\n    \\r\\n    function newOrder(address payable userAddress,string memory _tokenSymbol ,uint _amount,uint _duration, uint _yield, bool _status) external {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        uint amountLeft= _amount;\\r\\n        uint index;\\r\\n        if(_status){\\r\\n           index = poolIndex[_tokenSymbol][(_duration/6)-1]; \\r\\n           users[userAddress].deposits[_tokenSymbol] +=_amount;\\r\\n           users[userAddress].totalDeposit += USDValue(_amount, _tokenSymbol);\\r\\n        }   else {\\r\\n           index = poolIndex[_tokenSymbol][(_duration/6)+5];\\r\\n           users[userAddress].borrows[_tokenSymbol] +=_amount;\\r\\n           users[userAddress].totalBorrowed += USDValue(_amount, _tokenSymbol);\\r\\n        }\\r\\n        while(amountLeft\\u003e0){\\r\\n            if(index == 0) { pushOrder(userAddress, _tokenSymbol, _amount, _duration, _yield, _status);  break; }\\r\\n            Order memory iOrder = openOrderMap[orderpool[_tokenSymbol][index]];\\r\\n            if((_status \\u0026\\u0026 _yield\\u003eiOrder.yield) || (!_status \\u0026\\u0026 _yield\\u003ciOrder.yield) || (_status)?(orderStatus[orderpool[_tokenSymbol][index]] == Status.OPENCREATOR):(orderStatus[orderpool[_tokenSymbol][index]] == Status.OPENBORROW)){\\r\\n                pushOrder(userAddress, _tokenSymbol, _amount, _duration, _yield, _status);\\r\\n                break;\\r\\n            } else if(orderStatus[orderpool[_tokenSymbol][index]]== (_status ? Status.OPENBORROW : Status.OPENCREATOR))  {\\r\\n                uint tduration = _duration \\u003e iOrder.duration ? _duration : iOrder.duration;\\r\\n                uint tyield = _yield \\u003e iOrder.yield ? iOrder.yield : _yield;\\r\\n                uint64 tID = orderpool[_tokenSymbol][index];\\r\\n                if(iOrder.amount\\u003e=amountLeft) { \\r\\n                    if(iOrder.amount != amountLeft) {\\r\\n                    pushOrder(iOrder.creator, _tokenSymbol, iOrder.amount-amountLeft, iOrder.duration, iOrder.yield, !_status);     }\\r\\n                    matchOrder(userAddress, _tokenSymbol, amountLeft, tduration, tyield, tID);\\r\\n                    amountLeft=0;\\r\\n                } else {\\r\\n                    pushOrder(userAddress, _tokenSymbol, amountLeft- iOrder.amount, _duration, _yield, _status);\\r\\n                    matchOrder(userAddress, _tokenSymbol, amountLeft, tduration, tyield, tID);\\r\\n                    amountLeft -= openOrderMap[orderpool[_tokenSymbol][index]].amount;    }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function orderExpired  (uint64 _orderId) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        require (matchOrderMap[_orderId].expiryDate \\u003c= now);\\r\\n        EMM.releaseWrappedToken(matchOrderMap[_orderId].supplier,matchOrderMap[_orderId].amount, matchOrderMap[_orderId].wtoken);    \\r\\n        EMM.burnWrappedFrom(matchOrderMap[_orderId].supplier,matchOrderMap[_orderId].amount, matchOrderMap[_orderId].wtoken); \\r\\n        EMM.WithdrawManager(EMM.wtormap(matchOrderMap[_orderId].wtoken), matchOrderMap[_orderId].amount, matchOrderMap[_orderId].supplier); \\r\\n        users[matchOrderMap[_orderId].supplier].totalDeposit -= matchOrderMap[_orderId].usdvalue;\\r\\n        users[matchOrderMap[_orderId].borrower].totalBorrowed -= matchOrderMap[_orderId].usdvalue;\\r\\n        orderStatus[_orderId] = Status.CLOSED;\\r\\n        //Init.OrderExpired(_orderId,msgSender,orderMonthlyDue(_orderId,msgSender,_duration));\\r\\n    } \\r\\n\\r\\n    function payDue(uint64 _orderId,uint _duration,address msgSender) external returns (uint due){\\r\\n        due = orderMonthlyDue(_orderId,_duration);\\r\\n        uint fee = (due*Init.rewardFee())/100;\\r\\n        EMM.DepositManager(Init.ECO(), due+fee, msgSender);\\r\\n        Init.setOwnerFeeVault(Init.WRAP_ECO_SYMBOL(), fee);\\r\\n        matchOrderMap[_orderId].duesPaid += 1;\\r\\n        matchOrderMap[_orderId].duesPaid \\u003e= uint((now - matchOrderMap[_orderId].time)/30 days)  ? Init.setUserLocked(msgSender,false) :  Init.setUserLocked(msgSender,true);\\r\\n        Init.emitDuePaid(_orderId,msgSender,orderMonthlyDue(_orderId,_duration));\\r\\n    }\\r\\n\\r\\n    function dueCheck(uint64 _orderId,address borrower,uint month) external returns(uint) {\\r\\n        require (Init.friendlyaddress(msg.sender) \\u0026\\u0026 now \\u003e= matchOrderMap[_orderId].time + matchOrderMap[_orderId].duesPaid * 30 days);\\r\\n        uint due = orderMonthlyDue(_orderId,1);\\r\\n        EMM.mintECO(matchOrderMap[_orderId].supplier,due*(100-Init.rewardFee())/100);\\r\\n        EMM.lockECO(matchOrderMap[_orderId].supplier,due*(100-Init.rewardFee())/100);\\r\\n        if(matchOrderMap[_orderId].duesPaid \\u003c month \\u0026\\u0026 !Init.isRegistrar(borrower) \\u0026\\u0026 !Init.isUserLocked(borrower)){\\r\\n            Init.setUserLocked(borrower,true);\\r\\n            orderExpired(_orderId);\\r\\n        }   else {\\r\\n            Init.emitDuePaid(_orderId,borrower,orderMonthlyDue(_orderId,month+1));\\r\\n            scheduleCheck(_orderId,borrower,month+1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function scheduleExpiry(uint64 _orderId) internal{\\r\\n        uint time = matchOrderMap[_orderId].expiryDate - matchOrderMap[_orderId].time;\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\u0027orderExpired(uint256)\\u0027)),_orderId);\\r\\n        uint callCost = 300000*1e9 + abacus.callFee();\\r\\n        abacus.scheduleFunc{value:callCost}(address(this), time ,data , abacus.callFee() ,300000 , 1e9 );\\r\\n    }    \\r\\n    \\r\\n    function scheduleCheck(uint _orderId,address borrower,uint month) internal{\\r\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\u0027dueCheck(uint256,address,uint256)\\u0027)),_orderId,borrower,month);\\r\\n        uint callCost = 300000*1e9 + abacus.callFee();\\r\\n        abacus.scheduleFunc{value:callCost}(address(this), 30 days ,data , abacus.callFee() ,300000 , 1e9 );\\r\\n    } \\r\\n    \\r\\n    function cancelOrder(uint64 _orderId) external{\\r\\n        require(Init.friendlyaddress(msg.sender));\\r\\n        if(orderStatus[_orderId]==Status.OPENCREATOR) {\\r\\n            EMM.releaseWrappedToken(openOrderMap[_orderId].creator,openOrderMap[_orderId].amount, openOrderMap[_orderId].wtoken);\\r\\n            EMM.burnWrappedFrom(openOrderMap[_orderId].creator,openOrderMap[_orderId].amount, openOrderMap[_orderId].wtoken); \\r\\n            EMM.WithdrawManager(EMM.wtormap(openOrderMap[_orderId].wtoken),openOrderMap[_orderId].amount, openOrderMap[_orderId].creator); \\r\\n            users[openOrderMap[_orderId].creator].deposits[openOrderMap[_orderId].wtoken] -=openOrderMap[_orderId].amount;\\r\\n            users[openOrderMap[_orderId].creator].totalDeposit -= orderUSDValue[_orderId];\\r\\n            for((uint i,uint j)=(0,0); i\\u003cusers[openOrderMap[_orderId].creator].createdOrders.length; (i++,j++)) {\\r\\n                if(users[openOrderMap[_orderId].creator].createdOrders[i] == _orderId) { --j; continue; }\\r\\n                    users[openOrderMap[_orderId].creator].createdOrders[j] = users[openOrderMap[_orderId].creator].createdOrders[i];\\r\\n            }\\r\\n        }   else if(orderStatus[_orderId]==Status.OPENBORROW){\\r\\n                users[openOrderMap[_orderId].creator].borrows[openOrderMap[_orderId].wtoken] -=openOrderMap[_orderId].amount;\\r\\n                users[openOrderMap[_orderId].creator].totalBorrowed -= orderUSDValue[_orderId];\\r\\n                for((uint i,uint j)=(0,0); i\\u003cusers[openOrderMap[_orderId].creator].borrowedOrders.length; (i++,j++)) {\\r\\n                    if(users[openOrderMap[_orderId].creator].borrowedOrders[i] == _orderId) { continue; }\\r\\n                    users[openOrderMap[_orderId].creator].borrowedOrders[j] = users[openOrderMap[_orderId].creator].borrowedOrders[i];\\r\\n             }\\r\\n        }\\r\\n        poolSorter(_orderId, openOrderMap[_orderId].wtoken,false);\\r\\n        delete openOrderMap[_orderId];\\r\\n        if(orderUSDValue[_orderId] \\u003e 0)  {   delete orderUSDValue[_orderId]; }\\r\\n        orderStatus[_orderId] = Status.CLOSED;\\r\\n    }\\r\\n    \\r\\n     /*==============Helpers============\\r\\n    ---------------------------------*/   \\r\\n    \\r\\n    function USDValue(uint amount, string memory _token) public view returns (uint usdvalue) {\\r\\n        usdvalue = amount*fetchTokenPrice(_token)/(10**8)/(10**uint(wERC20(EMM.getwTokenAddress(_token)).decimals()));\\r\\n    }\\r\\n    \\r\\n    function orderMonthlyDue(uint64 _orderId, uint _duration) public view returns(uint due){\\r\\n        orderStatus[_orderId] == Status.MATCHED ?  due = USDValue (matchOrderMap[_orderId].amount, matchOrderMap[_orderId].wtoken) * matchOrderMap[_orderId].yield * _duration*30 days*fetchTokenPrice(Init.WRAP_ECO_SYMBOL())/3153600000/(10**8) : due = 0;\\r\\n    }\\r\\n    \\r\\n    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint){ //Put any Token Wrapped or Direct\\r\\n    \\tuint response = uint(abacus.getJobResponse(EMM.getFetchId(_tokenSymbol))[0]);\\r\\n    \\treturn response \\u003e 0 ? response : 0;\\r\\n    }\\r\\n    \\r\\n    /*function issueReward(address userAddress, string memory _tokenSymbol, uint time, uint tokenUsdValue) internal {\\r\\n        uint reward = calculateECOEarning(tokenUsdValue, _tokenSymbol, time);\\r\\n        EMM.mintECO(userAddress, reward);\\r\\n    }*/\\r\\n    \\r\\n    function calculateECOEarning(uint usdvalue, string memory _tokenSymbol, uint time) private view returns (uint){\\r\\n        uint _amount = usdvalue*(10**16)/fetchTokenPrice(Init.WRAP_ECO_SYMBOL());\\r\\n        uint reward = (_amount * Init.slabRateDeposit(_tokenSymbol) * (now - time))/3153600000; //decimal from Abacus is setoff by decimal from Eco\\r\\n        return reward;\\r\\n    }\\r\\n    \\r\\n    function getECOEarnings(address userAddress) public view returns (uint){\\r\\n        uint ecobalance;\\r\\n        for(uint i=0; i\\u003cusers[userAddress].myDeposits.length; i++) {\\r\\n            ecobalance += calculateECOEarning(users[userAddress].myDeposits[i].usdvalue, users[userAddress].myDeposits[i].wtoken, users[userAddress].myDeposits[i].time);\\r\\n        }\\r\\n\\t    for(uint i=0; i\\u003cusers[userAddress].myBorrows.length; i++) {\\r\\n            ecobalance -= calculateECOEarning(users[userAddress].myBorrows[i].usdvalue, users[userAddress].myBorrows[i].wtoken, users[userAddress].myBorrows[i].time);\\r\\n        }\\r\\n        if(ecobalance \\u003e EMM.ecoWithdrawls(userAddress)) { return ecobalance - EMM.ecoWithdrawls(userAddress); } else {\\r\\n            return uint(0);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _ordersub(uint amount,address userAddress,uint _duration,string memory _tokenSymbol) internal view returns (uint64, uint, uint){\\r\\n        uint newAmount = amount - (amount*Init.tradeFee())/100;\\r\\n        uint fee = (amount*Init.tradeFee())/100;\\r\\n        uint64 _orderId = uint64(uint(keccak256(abi.encodePacked(userAddress,_tokenSymbol,_duration,now))));\\r\\n        return (_orderId,newAmount,fee);\\r\\n    }\\r\\n    \\r\\n    function getUserDepositsbyToken(address userAddress, string memory wtoken) public view returns(uint) {\\r\\n        return users[userAddress].deposits[wtoken];\\r\\n    }\\r\\n    \\r\\n    function getUserBorrowedOrderbyToken(address userAddress, string memory wtoken) public view returns(uint) {\\r\\n        return users[userAddress].borrows[wtoken];\\r\\n    }\\r\\n    \\r\\n    function getUserBorrowed(address userAddress) public view returns(uint) {\\r\\n        return users[userAddress].totalBorrowed;\\r\\n    }\\r\\n    \\r\\n    function getUserBorrowedOrder(address userAddress) public view returns (uint64 [] memory) {\\r\\n        return users[userAddress].borrowedOrders;\\r\\n    }\\r\\n    \\r\\n    function getUserDepositOrder(address userAddress) public view returns (uint64 [] memory) {\\r\\n        return users[userAddress].createdOrders;\\r\\n    }\\r\\n    \\r\\n    function getUserMatchOrder(address userAddress) public view returns (uint64 [] memory) {\\r\\n        return users[userAddress].myOrders;\\r\\n    }\\r\\n    \\r\\n    function getbuyPower(address userAddress) public view returns (uint buyPower){\\r\\n        if(Init.isRegistrar(userAddress)) { return (10**30);   }\\r\\n        if(Init.isUserLocked(userAddress)) { return 0; }\\r\\n        if(users[userAddress].totalBorrowed \\u003e 0) {    \\r\\n            return users[userAddress].totalDeposit - ((users[userAddress].totalDeposit*Init.CDSpercent())/100) - users[userAddress].totalBorrowed;\\r\\n        } else {\\r\\n            return users[userAddress].totalDeposit;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    /*function getOrderIds(string memory wtoken) public view returns (uint64 [] memory orderIds) {\\r\\n        return orderpool[wtoken];\\r\\n    }*/\\r\\n    \\r\\n    function getOrderLength(string memory wtoken) public view returns (uint) {\\r\\n        return orderpool[wtoken].length;\\r\\n    }\\r\\n    \\r\\n    function updatePoolIndex(string memory token, uint64 iVal, uint64 value) external {\\r\\n            poolIndex[token].push(iVal);\\r\\n            orderpool[token].push(value);\\r\\n    }\\r\\n}\\r\\n    \\r\\n    /*function deleteUserData(address userAddress) external {\\r\\n        if(Init.friendlyaddress(msg.sender)==true) {\\r\\n            delete users[userAddress];\\r\\n        }\\r\\n    }*/\\r\\n\\r\\n\\r\\n\\r\\ncontract Ecocelium is Initializable{\\r\\n\\r\\n    address public owner;\\r\\n    address payable EMMAddress;\\r\\n    IAbacusOracle abacus;\\r\\n    EcoMoneyManager EMM;\\r\\n    EcoceliumDataManager EDM;\\r\\n    EcoceliumInit Init;\\r\\n    \\r\\n    function initialize(address _owner,address payable EMMaddress,address payable AbacusAddress,address EDMaddress, address payable Initaddress)public payable initializer {\\r\\n        owner = _owner;\\r\\n        EMM = EcoMoneyManager(EMMaddress);\\r\\n        EMMAddress = EMMaddress;\\r\\n        abacus = IAbacusOracle(AbacusAddress);//0x323f81D9F57d2c3d5555b14d90651aCDc03F9d52\\r\\n        EDM = EcoceliumDataManager(EDMaddress);\\r\\n        Init = EcoceliumInit(Initaddress);\\r\\n    }\\r\\n    \\r\\n    function changeOwner(address _owner) public{\\r\\n        require(msg.sender==owner);\\r\\n        owner = _owner;\\r\\n    }\\r\\n    \\r\\n    function updateContracts() public{\\r\\n        require(msg.sender==owner);\\r\\n        EMM = EcoMoneyManager(Init.MONEYMANAGER());\\r\\n        abacus = IAbacusOracle(Init.ABACUS());\\r\\n        EDM = EcoceliumDataManager(Init.DATAMANAGER());\\r\\n    }\\r\\n    \\r\\n     /*===========Main functions============\\r\\n    -------------------------------------*/   \\r\\n\\r\\n    function Deposit(string memory rtoken, uint _amount) external payable {\\r\\n        address _msgSender = msg.sender;\\r\\n        string memory wtoken = EMM.getWrapped(rtoken);\\r\\n        _deposit(rtoken, _amount, _msgSender, wtoken);\\r\\n        EDM.freePusher(_msgSender, wtoken, _amount, true);\\r\\n        EMM.mintWrappedToken(_msgSender, _amount, wtoken);\\r\\n        EMM.lockWrappedToken(_msgSender, _amount,wtoken);\\r\\n    }\\r\\n    \\r\\n    function _deposit(string memory rtoken,uint _amount, address msgSender, string memory wtoken) internal {\\r\\n        require(EMM.getwTokenAddress(wtoken) != address(0),\\\"not supported\\\");\\r\\n        if(keccak256(abi.encodePacked(rtoken)) == keccak256(abi.encodePacked(Init.ETH_SYMBOL()))) { \\r\\n            require(msg.value \\u003e= _amount);\\r\\n            EMM.DepositManager{value:msg.value}(rtoken, _amount, msgSender);\\r\\n        }else {\\r\\n        EMM.DepositManager(rtoken, _amount, msgSender); }\\r\\n        Init.emitSwap(msgSender,rtoken,wtoken,_amount);\\r\\n    }\\r\\n    \\r\\n    function depositAndOrder(address payable userAddress,string memory rtoken ,uint _amount,uint _duration,uint _yield) external payable {\\r\\n        require(msg.sender == userAddress);\\r\\n        string memory wtoken = EMM.getWrapped(rtoken);\\r\\n        _deposit(rtoken, _amount, userAddress, wtoken);\\r\\n        EMM.mintWrappedToken(userAddress, _amount, wtoken);\\r\\n        EMM.lockWrappedToken(userAddress, _amount,wtoken);\\r\\n        EDM.newOrder(userAddress, EMM.getWrapped(rtoken), _amount, (_duration/6)-1, _yield, true);\\r\\n    }\\r\\n    \\r\\n    function createOrder(address payable userAddress,string memory _tokenSymbol ,uint _amount,uint _duration,uint _yield) external payable {\\r\\n        require(msg.sender == userAddress);\\r\\n        require(_duration\\u003e=6, \\\"Duration should be atleast 6 Months\\\");\\r\\n        string memory wtoken = EMM.getWrapped(_tokenSymbol);\\r\\n        require(EDM.getUserDepositsbyToken(userAddress, wtoken) \\u003e= _amount, \\\"Insufficient Balance\\\"); \\r\\n        uint ecoEarnings = EDM.freePopper(userAddress, wtoken , _amount, true);\\r\\n        if(ecoEarnings \\u003e EMM.ecoWithdrawls(userAddress)) {\\r\\n    \\t\\tecoEarnings-=EMM.ecoWithdrawls(userAddress);\\r\\n    \\t\\tEMM.adjustEcoEarning(userAddress, EMM.ecoWithdrawls(userAddress));\\r\\n    \\t\\tEMM.WithdrawManager(Init.ECO(), ecoEarnings, userAddress);\\r\\n    \\t} else {\\r\\n    \\t\\tEMM.adjustEcoEarning(userAddress, ecoEarnings);\\t}\\r\\n        EDM.newOrder(userAddress, wtoken, _amount, (_duration/6)-1, _yield, true); \\r\\n    }\\r\\n    \\r\\n    function getAggEcoBalance(address userAddress) public view returns(uint) {\\r\\n        return wERC20(EMM.getwTokenAddress(Init.WRAP_ECO_SYMBOL())).balanceOf(userAddress) + EDM.getECOEarnings(userAddress);\\r\\n    }\\r\\n    \\r\\n    function borrowOrder(address userAddress, string memory rtoken, uint amount, uint duration, uint yield) public {//Rewrite this part\\r\\n        require(isWithdrawEligible(userAddress, rtoken, amount));\\r\\n        EDM.newOrder(msg.sender,EMM.getWrapped(rtoken), amount,(duration/6)-1,yield,false);\\r\\n    }\\r\\n    \\r\\n    function payDueOrder(uint64 _orderId,uint _duration) external {\\r\\n        EDM.payDue(_orderId,_duration,msg.sender);\\r\\n    }\\r\\n    \\r\\n    function clearBorrow(string memory rtoken, uint _amount) external payable{\\r\\n        address msgSender = msg.sender;\\r\\n        string memory wtoken = EMM.getWrapped(rtoken);\\r\\n        uint dues = EDM.freePopper(msgSender, wtoken, _amount, false);\\r\\n\\t    EMM.DepositManager(Init.ECO(), dues, msgSender);\\r\\n        if(keccak256(abi.encodePacked(rtoken)) == keccak256(abi.encodePacked(Init.ETH_SYMBOL()))) { \\r\\n            require(msg.value == _amount);\\r\\n            EMM.DepositManager{value:_amount}(rtoken, _amount, msgSender);\\r\\n        }else {\\r\\n        EMM.DepositManager(rtoken, _amount, msgSender);    }\\r\\n    }\\r\\n    \\r\\n    function Borrow(uint _amount, string memory _tokenSymbol) internal {\\r\\n        require(isWithdrawEligible(msg.sender, _tokenSymbol, _amount));\\r\\n        EDM.freePusher(msg.sender, EMM.getWrapped(_tokenSymbol), _amount,false);\\r\\n        EMM.WithdrawManager(_tokenSymbol, _amount, msg.sender);\\r\\n    }\\r\\n    \\r\\n    function SwapWrapToWrap(string memory token1,string memory token2, uint token1amount)  external returns(uint) {\\r\\n        address payable msgSender = msg.sender;\\r\\n        uint token2price = fetchTokenPrice(token2);\\r\\n        uint token2amount = EDM.USDValue(token1amount,token1)*(100-Init.swapFee())*(10**uint(wERC20(EMM.getwTokenAddress(token2)).decimals()))*(10**8)/token2price/100;\\r\\n        EMM.w2wswap(msgSender, token1, token1amount, token2amount, token2);\\r\\n        uint ecoEarnings = EDM.freePopper(msgSender,token1,token1amount,true);\\r\\n\\t    if(ecoEarnings\\u003e0) {\\r\\n    \\t    if(ecoEarnings \\u003e EMM.ecoWithdrawls(msgSender)) {\\r\\n        \\t\\tecoEarnings-=EMM.ecoWithdrawls(msgSender);\\r\\n        \\t\\tif(EMM.ecoWithdrawls(msgSender) \\u003e 0) {  EMM.adjustEcoEarning(msgSender, EMM.ecoWithdrawls(msgSender));  }\\r\\n        \\t\\tEMM.WithdrawManager(Init.ECO(), ecoEarnings, msgSender);\\r\\n        \\t} else {\\r\\n        \\t\\tEMM.adjustEcoEarning(msgSender, ecoEarnings);\\t}\\r\\n    \\t}\\r\\n\\t    Init.setOwnerFeeVault(token1, token1amount*Init.swapFee()/100);\\r\\n        EDM.freePusher(msgSender, token2,token2amount,true);\\r\\n        Init.emitSwap(msgSender,token1,token2,token2amount);\\r\\n        return token2amount;\\r\\n    }\\r\\n    \\r\\n    function cancelOrder(uint64 _orderId) public{\\r\\n        (address creator,,,,) = EDM.openOrderMap(_orderId);\\r\\n        require(msg.sender==creator);\\r\\n        EDM.cancelOrder(_orderId);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {  }\\r\\n\\r\\n    /*==============Helpers============\\r\\n    ---------------------------------*/    \\r\\n    \\r\\n    function orderMonthlyDue(uint64 _orderId,uint _duration) public view returns(uint){\\r\\n        return EDM.orderMonthlyDue(_orderId,_duration);\\r\\n    }\\r\\n    \\r\\n    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\\r\\n        require(msg.sender == owner);\\r\\n        Init.updateFees(_swapFee,_tradeFee,_rewardFee);\\r\\n    }\\r\\n    \\r\\n    /*function getOrderIds(string memory wtoken) public view returns(uint64 [] memory){\\r\\n        return EDM.getOrderIds(wtoken);\\r\\n    }*/\\r\\n    \\r\\n    function fetchTokenPrice(string memory _tokenSymbol) public view returns(uint){\\r\\n        return EDM.fetchTokenPrice(_tokenSymbol);\\r\\n    }\\r\\n    \\r\\n    function Withdraw(string memory to, uint _amount) internal {\\r\\n        address payable msgSender = msg.sender;\\r\\n        string memory from = EMM.getWrapped(to);\\r\\n        require(!Init.isUserLocked(msgSender), \\\"Your Address is Locked Pay Dues\\\");\\r\\n        if( EDM.getUserBorrowed(msgSender) \\u003e 0) { require(isWithdrawEligible(msgSender, to, _amount) , \\\"Not Eligible for Withdraw\\\"); }\\r\\n        if(keccak256(abi.encodePacked(to)) == keccak256(abi.encodePacked(Init.ECO()))) {\\r\\n            require( getAggEcoBalance(msgSender) \\u003e= _amount,\\\"Insufficient Balance\\\");\\r\\n                if(getAggEcoBalance(msgSender) - EDM.getUserDepositsbyToken(msgSender, from) \\u003e= _amount) {\\r\\n                    EMM.redeemEcoEarning(msgSender,_amount);\\r\\n                } else {\\r\\n                    uint diffAmount = _amount + EDM.getUserDepositsbyToken(msgSender, from) - getAggEcoBalance(msgSender);\\r\\n                    EMM.redeemEcoEarning(msgSender,(getAggEcoBalance(msgSender) - EDM.getUserDepositsbyToken(msgSender, from)));\\r\\n                    _withdraw(msgSender, from, diffAmount, to);        }  \\r\\n        } else  {  \\r\\n            require(EDM.getUserDepositsbyToken(msgSender, from)\\u003e=_amount,\\\"Insufficient balance\\\");\\r\\n            _withdraw(msgSender, from, _amount, to);\\r\\n        }\\r\\n        Init.emitSwap(msgSender,from,to,_amount);\\r\\n    }\\r\\n    \\r\\n    function _withdraw(address payable msgSender, string memory from, uint amount, string memory to) internal {\\r\\n        EMM.releaseWrappedToken(msgSender,amount, from);\\r\\n        EMM.burnWrappedFrom(msgSender, amount, from);\\r\\n        Init.setOwnerFeeVault(to,(amount*Init.rewardFee())/100);\\r\\n        uint ecoEarnings = EDM.freePopper(msgSender,from,amount, true);\\r\\n    \\tif(ecoEarnings\\u003e0) {\\r\\n    \\t    if(ecoEarnings \\u003e EMM.ecoWithdrawls(msgSender)) {\\r\\n        \\t\\tecoEarnings-=EMM.ecoWithdrawls(msgSender);\\r\\n        \\t\\tif(EMM.ecoWithdrawls(msgSender) \\u003e 0) {  EMM.adjustEcoEarning(msgSender, EMM.ecoWithdrawls(msgSender));  }\\r\\n        \\t\\tEMM.WithdrawManager(Init.ECO(), ecoEarnings, msgSender);\\r\\n        \\t} else {\\r\\n        \\t\\tEMM.adjustEcoEarning(msgSender, ecoEarnings);\\t}\\r\\n    \\t}\\r\\n        uint newAmount = amount - (amount*Init.rewardFee())/100;\\r\\n        EMM.WithdrawManager(to,newAmount, msgSender);\\r\\n    }\\r\\n    \\r\\n    function isWithdrawEligible(address userAddress, string memory to, uint amount) public view returns (bool Eligible){\\r\\n        return (EDM.getbuyPower(userAddress) \\u003e EDM.USDValue(amount,EMM.getWrapped(to)));\\r\\n    }\\r\\n    \\r\\n    function setSponsor(address userAddress, address Sponsor) external {\\r\\n        require(msg.sender == userAddress, \\\"Invalid User\\\");\\r\\n        Init.setSponsor(userAddress, Sponsor);\\r\\n    }\\r\\n}\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\"},\"Ecocelium_Initializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./helpers.sol\\\";\\r\\n\\r\\ncontract IAbacusOracle{\\r\\n    uint public callFee;\\r\\n    function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }\\r\\n    function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}\\r\\n}\\r\\n\\r\\ncontract EcoceliumInit is Initializable {\\r\\n\\r\\n    address payable owner;\\r\\n    address payable public MONEYMANAGER;\\r\\n    address payable public DATAMANAGER;\\r\\n    address payable public ECOCELIUM;\\r\\n    address payable public ABACUS;\\r\\n    string public WRAP_ECO_SYMBOL;\\r\\n    string public ECO;\\r\\n    string public ETH_SYMBOL;\\r\\n    string public WRAP_ETH_SYMBOL;\\r\\n    uint public swapFee;\\r\\n    uint public rewardFee;\\r\\n    uint public tradeFee;\\r\\n    uint public CDSpercent;\\r\\n    string [] rtokenlist;\\r\\n    string [] wtokenlist;\\r\\n    mapping (string =\\u003e uint) public rcurrencyID;\\r\\n    mapping (string =\\u003e uint) public wcurrencyID;\\r\\n    mapping (address =\\u003e bool)  public isRegistrar;\\r\\n    mapping (address =\\u003e bool) public isUserLocked;\\r\\n    mapping (string =\\u003e uint ) public ownerFeeVault;\\r\\n    mapping (string =\\u003e uint) public slabRateDeposit;\\r\\n    mapping (address =\\u003e bool) public friendlyaddress;\\r\\n    mapping (address =\\u003e address) public SponsorAddress;\\r\\n    mapping (address =\\u003e uint) public usertreasuryearnings;\\r\\n    \\r\\n    event OrderCreated(\\r\\n        address userAddress,\\r\\n        uint duration,\\r\\n        uint yield,\\r\\n        uint amount,\\r\\n        string token\\r\\n        );\\r\\n        \\r\\n    event Swap(\\r\\n        address userAddress,\\r\\n        string from,\\r\\n        string to,\\r\\n        uint amount\\r\\n        );\\r\\n        \\r\\n    event Borrowed(\\r\\n        uint64 orderId,\\r\\n        address borrower,\\r\\n        uint amount,\\r\\n        uint duration\\r\\n        );\\r\\n        \\r\\n    event Deposit(\\r\\n         address userAddress,\\r\\n         string token,\\r\\n         uint tokenAmount,\\r\\n         uint collateralValue\\r\\n         );\\r\\n         \\r\\n    event DuePaid(\\r\\n        uint64 orderId,\\r\\n        address borrower,\\r\\n        uint amount\\r\\n        );\\r\\n        \\r\\n    event WrapTokenCreated(\\r\\n        address TokenAddress,\\r\\n        string  TokenName,\\r\\n        string  TokenSymbol,\\r\\n        uint    Decimals\\r\\n        );\\r\\n        \\r\\n    receive() payable external {     }    \\r\\n        \\r\\n    function initializeAddress(address payable _owner) public initializer {\\r\\n        friendlyaddress[_owner] = true;\\r\\n        owner = _owner;\\r\\n    }\\r\\n       \\r\\n    function addRealCurrency(string memory rtoken) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        if(rcurrencyID[rtoken] == 0) {\\r\\n            rtokenlist.push(rtoken);\\r\\n            rcurrencyID[rtoken] = rtokenlist.length; }\\r\\n    }\\r\\n    \\r\\n    function addWrapCurrency (string memory wtoken) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        if(wcurrencyID[wtoken] == 0) {\\r\\n            wtokenlist.push(wtoken);\\r\\n            wcurrencyID[wtoken] = wtokenlist.length; }\\r\\n    }\\r\\n    \\r\\n    function setSlabRate(string memory WToken, uint rate) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        slabRateDeposit[WToken] = rate;\\r\\n    }\\r\\n    \\r\\n    function setUserLocked(address userAddress, bool value) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        isUserLocked[userAddress] = value;\\r\\n    }\\r\\n    \\r\\n    /*function setFriendlyAddress(address Address) internal {\\r\\n        (msg.sender == owner,\\\"not owner\\\");\\r\\n        friendlyaddress[Address] = true;\\r\\n    }*/\\r\\n    \\r\\n    function addRegistrar(address _registrar) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        isRegistrar[_registrar] = true;\\r\\n    }\\r\\n    \\r\\n    function setOwnerFeeVault(string memory add,uint value) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        ownerFeeVault[add] += value; \\r\\n    }\\r\\n       \\r\\n    function emitOrderCreated(address userAddress, uint _duration, uint _yield, uint newAmount,string  memory _tokenSymbol) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit OrderCreated(userAddress,_duration,_yield,newAmount,_tokenSymbol);        \\r\\n    }\\r\\n    \\r\\n    function emitSwap(address msgSender, string memory from, string memory to,uint _amount) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Swap(msgSender,from,to,_amount);\\r\\n    }\\r\\n    \\r\\n    function emitBorrowed(uint64 _orderId, address msgSender, uint _amount,uint _duration) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Borrowed(_orderId,msgSender,_amount,_duration);\\r\\n    }\\r\\n    \\r\\n    function emitWrappedCreated(address tokenAddress,string memory name, string memory symbol,uint8 decimals) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit WrapTokenCreated(tokenAddress,name,symbol,decimals);   \\r\\n    }\\r\\n    \\r\\n    function emitDeposit(address msgSender, string memory _tokenSymbol, uint amount, uint tokenUsdValue) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit Deposit(msgSender,_tokenSymbol,amount,tokenUsdValue);\\r\\n    }\\r\\n    \\r\\n    function emitDuePaid(uint64 _orderId, address msgSender, uint due) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        emit DuePaid(_orderId,msgSender,due);\\r\\n    }\\r\\n    \\r\\n    function setCONSTSYMBOLS(string[4] memory _symbolCONST) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        WRAP_ECO_SYMBOL = _symbolCONST[0];\\r\\n        ECO = _symbolCONST[1];\\r\\n        ETH_SYMBOL = _symbolCONST[2];\\r\\n        WRAP_ETH_SYMBOL = _symbolCONST[3];\\r\\n    }\\r\\n    \\r\\n    function updateFees(uint _swapFee,uint _tradeFee,uint _rewardFee) public{\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        (swapFee,tradeFee,rewardFee) = (_swapFee,_tradeFee,_rewardFee);\\r\\n    }\\r\\n    \\r\\n    function setCSDpercent(uint percent) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        CDSpercent = percent;\\r\\n    }\\r\\n    \\r\\n    function changeAbacusaddress(address payable Abacusaddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        ABACUS = Abacusaddress;\\r\\n    } \\r\\n    \\r\\n    function changeEcoceliumaddress(address payable Ecocelium) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        ECOCELIUM = Ecocelium;\\r\\n    } \\r\\n    \\r\\n    function changeDMaddress(address payable DMAddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        DATAMANAGER = DMAddress;\\r\\n    }\\r\\n    \\r\\n     function changeMMaddress(address payable MMaddress) public{\\r\\n        require(msg.sender == owner,\\\"not owner\\\");\\r\\n        MONEYMANAGER = MMaddress;\\r\\n    }\\r\\n    \\r\\n    function changeOwner(address payable _owner) public{\\r\\n        require(msg.sender==owner);\\r\\n        owner = _owner;\\r\\n    }\\r\\n    \\r\\n    function setSponsor(address userAddress, address _sponsorAddress) external {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        SponsorAddress[userAddress] = _sponsorAddress;\\r\\n    }\\r\\n    \\r\\n    function updateTreasuryEarnings(address userAddress, uint _amount) public {\\r\\n        require(friendlyaddress[msg.sender],\\\"Not Friendly Address\\\");\\r\\n        usertreasuryearnings[userAddress] = _amount;\\r\\n    }\\r\\n\\r\\n    function unFriendlyAddress(address Address) external {\\r\\n        (msg.sender == owner,\\\"not owner\\\");\\r\\n        friendlyaddress[Address] = false;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract EcoMoneyManager is Initializable {\\r\\n    \\r\\n\\r\\n    \\r\\n    \\r\\n    EcoceliumInit Init;\\r\\n    address public owner;\\r\\n    address [] public TokenAddresses;\\r\\n    address [] public wTokenAddresses;\\r\\n    mapping (string =\\u003e address) rTokens;\\r\\n    mapping (string =\\u003e string) public wtormap;\\r\\n    mapping (string =\\u003e string)  public rTokensTowToken;\\r\\n    mapping (string =\\u003e TokenConfig)  wTokens;\\r\\n    mapping (address =\\u003e uint) public ecoWithdrawls;\\r\\n    mapping (string =\\u003e uint) public WGains;\\r\\n    mapping (string =\\u003e uint) public WLoss;\\r\\n    \\r\\n    receive() payable external {     }\\r\\n    \\r\\n    struct TokenConfig{\\r\\n        address tokenAddress;\\r\\n        uint64 fetchId;\\r\\n    }\\r\\n    \\r\\n    function initialize(address _owner, address payable _Init) public initializer{\\r\\n        owner = _owner;\\r\\n        Init = EcoceliumInit(_Init);\\r\\n    }\\r\\n    \\r\\n    function updateAdminAddress(address adminAddress) public {\\r\\n        require(msg.sender == owner);\\r\\n        for(uint i = 0;i\\u003cwTokenAddresses.length;i++){\\r\\n            wERC20(wTokenAddresses[i]).changeAdmin(adminAddress);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function addTokenWithAddress(address tokenAddress) public {\\r\\n        require(msg.sender == owner);\\r\\n        ERC20Basic token = ERC20Basic(tokenAddress);\\r\\n        require(getrTokenAddress(token.symbol())== address(0),\\\"token exist\\\");\\r\\n        rTokens[token.symbol()] = tokenAddress;  \\r\\n        TokenAddresses.push(tokenAddress);\\r\\n    } \\r\\n\\r\\n    function createWrapToken(string memory name,string memory symbol,uint64 _fetchId, uint8 decimal, string memory wrapOf) public  returns(address TokenAddress){\\r\\n        require(msg.sender == owner);\\r\\n        wERC20  token = new wERC20(name,symbol,decimal, address(this), address(this));        \\r\\n        rTokensTowToken[wrapOf] = symbol;\\r\\n        TokenAddresses.push(address(token));\\r\\n        wTokenAddresses.push(address(token));\\r\\n        wTokens[symbol] = TokenConfig({\\r\\n                                        tokenAddress:address(token),\\r\\n                                        fetchId : _fetchId\\r\\n                                    });\\r\\n        Init.emitWrappedCreated(address(token),name,symbol,token.decimals());                 \\r\\n        return address(token);\\r\\n    } \\r\\n    \\r\\n    function changeOwner(address _owner) public{\\r\\n        require(owner == msg.sender);\\r\\n        owner =_owner;\\r\\n    }   \\r\\n    \\r\\n    function updatertoken (string memory WToken, string memory RToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wtormap[WToken] = RToken;\\r\\n    }\\r\\n    \\r\\n    function getwTokenAddress(string memory symbol) public view returns(address){\\r\\n        return wTokens[symbol].tokenAddress;\\r\\n    }\\r\\n    \\r\\n    function getFetchId(string memory symbol ) public view returns(uint64){\\r\\n        if( wTokens[symbol].tokenAddress == address(0))   {\\r\\n            symbol = rTokensTowToken[symbol];\\r\\n        }\\r\\n        return wTokens[symbol].fetchId;\\r\\n    }\\r\\n    \\r\\n    function getrTokenAddress(string memory symbol) public view returns(address){\\r\\n        return rTokens[symbol];\\r\\n    }\\r\\n    \\r\\n    function getTokenAddresses() public view returns(address[] memory){\\r\\n        return TokenAddresses;\\r\\n    }\\r\\n    \\r\\n    function getWrapped(string memory symbol) public view returns(string memory){\\r\\n        return rTokensTowToken[symbol];\\r\\n    }\\r\\n    \\r\\n    function getTokenID(string memory symbol) public view returns(uint){\\r\\n        for(uint i=0; i\\u003c TokenAddresses.length; i++) {\\r\\n            if(TokenAddresses[i] == wTokens[symbol].tokenAddress) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function releaseWrappedToken (address _userAddress, uint amount, string memory WToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(WToken)).release(_userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function mintWrappedToken (address _userAddress, uint amount, string memory WToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(WToken)).mint(_userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function lockWrappedToken (address _userAddress, uint amount, string memory WToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(WToken)).lock(_userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function burnWrappedFrom(address userAddress, uint amount, string memory WToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(WToken)).burnFrom(userAddress,amount);\\r\\n    }\\r\\n     \\r\\n    function mintECO(address userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(Init.WRAP_ECO_SYMBOL())).mint(userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function lockECO(address userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(Init.WRAP_ECO_SYMBOL())).lock(userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function releaseECO(address userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(Init.WRAP_ECO_SYMBOL())).release(userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function burnECOFrom(address userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        wERC20(getwTokenAddress(Init.WRAP_ECO_SYMBOL())).burnFrom(userAddress,amount);\\r\\n    }\\r\\n    \\r\\n    function DepositManager(string memory _rtoken, uint amount, address userAddress) public payable {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        if(Init.rcurrencyID(_rtoken) == Init.rcurrencyID(Init.ETH_SYMBOL()))\\r\\n        {   require(msg.value \\u003e= amount,\\\"Invalid Amount\\\");  }\\r\\n        else {ERC20Basic rtoken = ERC20Basic(getrTokenAddress(_rtoken));\\r\\n        require(rtoken.allowance(userAddress, address(this)) \\u003e= amount,\\\"set allowance\\\");\\r\\n        rtoken.transferFrom(userAddress,address(this),amount);}\\r\\n    }\\r\\n    \\r\\n    function WithdrawManager(string memory _rtoken, uint amount, address payable userAddress) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        if(Init.rcurrencyID(_rtoken) == Init.rcurrencyID(Init.ETH_SYMBOL()))\\r\\n        {   userAddress.transfer(amount);        }\\r\\n        else {\\r\\n        ERC20Basic rtoken = ERC20Basic(getrTokenAddress(_rtoken));\\r\\n        rtoken.transfer(userAddress,amount);}\\r\\n    }\\r\\n    \\r\\n    function redeemEcoEarning(address payable userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        ecoWithdrawls[userAddress] = ecoWithdrawls[userAddress] + amount;\\r\\n        WithdrawManager(Init.ECO(), amount, userAddress);\\r\\n    }\\r\\n\\r\\n    function adjustEcoEarning(address userAddress, uint amount) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        ecoWithdrawls[userAddress] = ecoWithdrawls[userAddress] - amount;\\r\\n    }\\r\\n    \\r\\n    function updateFetchID (string memory wtoken, uint64 _fetchID) external {\\r\\n        require(owner == msg.sender);\\r\\n        wTokens[wtoken].fetchId = _fetchID;\\r\\n    }\\r\\n    \\r\\n    function w2wswap (address msgSender, string memory token1, uint token1amount, uint token2amount, string memory token2) external {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        releaseWrappedToken(msgSender, token1amount, token1);\\r\\n        burnWrappedFrom(msgSender,token1amount,token1);\\r\\n        WGains[token1]=token1amount;\\r\\n        mintWrappedToken(msgSender,token2amount, token2);\\r\\n        lockWrappedToken(msgSender, token2amount, token2);\\r\\n        WLoss[token2]=token2amount;\\r\\n    }\\r\\n    \\r\\n    function updateWrapAddress (string memory wtoken, address wAddress) external {\\r\\n        require(owner == msg.sender);\\r\\n        wTokens[wtoken].tokenAddress = wAddress;\\r\\n    }\\r\\n    \\r\\n    function updatewtoken (string memory RToken, string memory WToken) public {\\r\\n        require(Init.friendlyaddress(msg.sender),\\\"Not Friendly Address\\\");\\r\\n        rTokensTowToken[RToken] = WToken;\\r\\n    }\\r\\n}\\r\\n\"},\"helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\n\\r\\n\\r\\ncontract Initializable {\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to use in the initializer function of a contract.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\r\\n\\r\\n    bool isTopLevelCall = !initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = true;\\r\\n      initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n    \\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function isConstructor() private view returns (bool) {\\r\\n    // extcodesize checks the size of the code stored in an address, and\\r\\n    // address returns the current address. Since the code is still not\\r\\n    // deployed when running a constructor, any checks on its code size will\\r\\n    // yield zero, making it an effective way to detect if a contract is\\r\\n    // under construction or not.\\r\\n    address self = address(this);\\r\\n    uint256 cs;\\r\\n    assembly { cs := extcodesize(self) }\\r\\n    return cs == 0;\\r\\n  }\\r\\n\\r\\n  // Reserved storage space to allow for layout changes in the future.\\r\\n  uint256[50] private ______gap;\\r\\n    \\r\\n}\\r\\n\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract AccessControl is Context {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using Address for address;\\r\\n\\r\\n    struct RoleData {\\r\\n        EnumerableSet.AddressSet members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping (bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\r\\n        return _roles[role].members.contains(account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of accounts that have `role`. Can be used\\r\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\r\\n        return _roles[role].members.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\r\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\r\\n     *\\r\\n     * Role bearers are not sorted in any particular way, and their ordering may\\r\\n     * change at any point.\\r\\n     *\\r\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\r\\n     * you perform all queries on the same block. See the following\\r\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\r\\n     * for more information.\\r\\n     */\\r\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\r\\n        return _roles[role].members.at(index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\r\\n\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual {\\r\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n    }\\r\\n\\r\\n    function _grantRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.add(account)) {\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revokeRole(bytes32 role, address account) private {\\r\\n        if (_roles[role].members.remove(account)) {\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20Basic {\\r\\n    uint public _totalSupply;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    function totalSupply() public view  returns (uint){}\\r\\n    function balanceOf(address who) public view returns (uint){}\\r\\n    function transfer(address to, uint value) public {}\\r\\n    function transferFrom(address _from, address _to, uint _value) public{}\\r\\n    function approve(address spender, uint amount) public {}\\r\\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {}\\r\\n    \\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\n\\r\\ncontract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e uint256) public  lockedAmount;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name, string memory symbol,uint8 decimals) public {\\r\\n        _name = name;\\r\\n        _symbol = symbol;\\r\\n        _decimals = decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20};\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function availableAmount(address owner) public view returns(uint256){\\r\\n        return balanceOf(owner).sub(lockedAmount[owner]);\\r\\n    }\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(sender),\\\"ERC20 : amount exceeds available amount\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(account),\\\"ERC20 : burn exceeds available amount\\\");\\r\\n        \\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\r\\n     *\\r\\n     * This is internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(owner),\\\"ERC20 : approve amount exceeds available amount\\\");\\r\\n        \\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n    \\r\\n    function _lock(address owner,uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: lock for zero address\\\");\\r\\n        require(amount \\u003c= availableAmount(owner),\\\"ERC20: lock value more tha available amount\\\");\\r\\n        \\r\\n        lockedAmount[owner] = lockedAmount[owner].add(amount);\\r\\n    }\\r\\n    function _release(address owner,uint256 amount) internal virtual{\\r\\n        require(owner != address(0), \\\"ERC20: release for zero address\\\");\\r\\n        require(amount \\u003c= lockedAmount[owner],\\\"ERC20 : release value more then locked value\\\");\\r\\n        \\r\\n        lockedAmount[owner] = lockedAmount[owner].sub(amount);\\r\\n    }\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. `keccak256(\\u0027\\u0027)`\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != accountHash \\u0026\\u0026 codehash != 0x0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        return _functionCallWithValue(target, data, value, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping (bytes32 =\\u003e uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value\\u0027s index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as \\u0027swap and pop\\u0027).\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an \\u0027if\\u0027 statement.\\r\\n\\r\\n            bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n            // Move the last value to the index where the value to delete is\\r\\n            set._values[toDeleteIndex] = lastvalue;\\r\\n            // Update the index for the moved value\\r\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        require(set._values.length \\u003e index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(value)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint256(_at(set._inner, index)));\\r\\n    }\\r\\n\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n    *\\r\\n    * Note that there are no guarantees on the ordering of values inside the\\r\\n    * array, and it may change when more values are added or removed.\\r\\n    *\\r\\n    * Requirements:\\r\\n    *\\r\\n    * - `index` must be strictly less than {length}.\\r\\n    */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c \\u003e= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor () internal {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!_paused, \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(_paused, \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nabstract contract ERC20Pausable is ERC20, Pausable {\\r\\n    /**\\r\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the contract must not be paused.\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        require(!paused(), \\\"ERC20Pausable: token transfer while paused\\\");\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\ncontract wERC20 is Context, AccessControl, ERC20, ERC20Pausable {\\r\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\r\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\r\\n    bytes32 public constant ETMOWNER_ROLE = keccak256(\\\"ETM_ROLE\\\");\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\\r\\n     * account that deploys the contract.\\r\\n     *\\r\\n     * See {ERC20-constructor}.\\r\\n     */\\r\\n    constructor(string memory name, string memory symbol,uint8 decimals,address admin,address etmOwner) public ERC20(name, symbol,decimals) {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(ETMOWNER_ROLE, etmOwner);\\r\\n        _setupRole(MINTER_ROLE, admin);\\r\\n        _setupRole(PAUSER_ROLE, admin);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Creates `amount` new tokens for `to`.\\r\\n     *\\r\\n     * See {ERC20-_mint}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `MINTER_ROLE`.\\r\\n     */\\r\\n    function mint(address to, uint256 amount) public virtual {\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have minter role to mint\\\");\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n    \\r\\n    function burnFrom(address _from,uint256 amount) public virtual{\\r\\n     require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to burn\\\");\\r\\n     _burn(_from,amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Pauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_pause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function pause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to pause\\\");\\r\\n        _pause();\\r\\n    }\\r\\n    function changeAdmin(address admin) public virtual{\\r\\n        require(hasRole(ETMOWNER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role\\\");\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, admin);\\r\\n        _setupRole(MINTER_ROLE, admin);\\r\\n        _setupRole(PAUSER_ROLE, admin);        \\r\\n    }\\r\\n    /**\\r\\n     * @dev Unpauses all token transfers.\\r\\n     *\\r\\n     * See {ERC20Pausable} and {Pausable-_unpause}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have the `PAUSER_ROLE`.\\r\\n     */\\r\\n    function unpause() public virtual {\\r\\n        require(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have pauser role to unpause\\\");\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    function lock(address account , uint256 amount) public virtual{\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to lock\\\");\\r\\n        _lock(account,amount);\\r\\n    }\\r\\n    \\r\\n    function release(address account , uint256 amount) public virtual{\\r\\n        require(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC20PresetMinterPauser: must have admin role to release\\\");\\r\\n        _release(account,amount);\\r\\n    }\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rtoken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"token2\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"token1amount\",\"type\":\"uint256\"}],\"name\":\"SwapWrapToWrap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rtoken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"borrowOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"rtoken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"clearBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"rtoken\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yield\",\"type\":\"uint256\"}],\"name\":\"depositAndOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"fetchTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getAggEcoBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"EMMaddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"AbacusAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"EDMaddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"Initaddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isWithdrawEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"Eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"orderMonthlyDue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_orderId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"payDueOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Sponsor\",\"type\":\"address\"}],\"name\":\"setSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardFee\",\"type\":\"uint256\"}],\"name\":\"updateFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Ecocelium","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://3fff01f62b16737b949e263d8e3db7e397d6daa186d4d400ddc6182a06d4088b"}]