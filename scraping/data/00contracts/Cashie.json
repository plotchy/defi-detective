[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\ncontract Cashier {\r\n    address payable public coldWallet;\r\n    \r\n    constructor(address multiSigWallet) payable\r\n    {\r\n        coldWallet = payable(multiSigWallet);\r\n    }\r\n\r\n    function execute(address protocalAddress, bytes calldata data, uint256 sumPrice) public payable\r\n    {\r\n        require(protocalAddress != address(0) && protocalAddress != address(this), \"invalid protocol address\");\r\n        require(msg.value >= sumPrice * 1001 / 1000, \"platform fee required\");\r\n\r\n        coldWallet.transfer(sumPrice * 1 / 1000);\r\n\r\n        (bool success, bytes memory result) = protocalAddress.call{value: sumPrice}(data);\r\n        if(!success)\r\n           _revertWithData(result); \r\n        _returnWithData(result);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function _revertWithData(bytes memory data) private pure {\r\n        assembly { revert(add(data, 32), mload(data)) }\r\n    }\r\n\r\n    function _returnWithData(bytes memory data) private pure {\r\n        assembly { return(add(data, 32), mload(data)) }\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multiSigWallet\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"coldWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"protocalAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"sumPrice\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Cashier","CompilerVersion":"v0.8.13+commit.abaa5c0e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d92ed451d94983957957c97f54d3c685d84d316a","EVMVersion":"petersburg","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://2ac0b7e28fd66b86ad479e9a8f51f31ddb73c39bb8511428c1e632f888b6f152"}]