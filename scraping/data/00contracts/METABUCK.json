[{"SourceCode":"/**\r\n\r\n-------- Moon Or Dust ---------\r\n\r\nZuck Bucks, The New Meta : https://twitter.com/firstpost/status/1512400246894383111?s=20&t=aPUAIK4r7iPqQRkYOjA51w\r\n\r\nLP Locked, OwnerShip Will be Renounced at 50k\r\n\r\nMetaBucks, the new meta !\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract METABUCKS is Context, IERC20, Ownable { ////\r\n    mapping (address => uint) private _owned;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => User) private cooldown;\r\n    mapping (address => bool) private _isBot;\r\n    uint private constant _totalSupply = 1e12 * 10**9;\r\n\r\n    string public constant name = unicode\"MetaBucks\"; ////\r\n    string public constant symbol = unicode\"METABUCKS\"; ////\r\n    uint8 public constant decimals = 9;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n    address payable public _FeeAddress1;\r\n    address payable public _FeeAddress2;\r\n    \r\n    address public uniswapV2Pair;\r\n    uint public _buyFee = 7;\r\n    uint public _sellFee = 10;\r\n    uint public _feeRate = 9;\r\n    uint public _maxBuyAmount;\r\n    uint public _maxHeldTokens;\r\n    uint public _launchedAt;\r\n    bool private _tradingOpen;\r\n    bool private _inSwap;\r\n    bool public _useImpactFeeSetter = true;\r\n\r\n    struct User {\r\n        uint buy;\r\n        bool exists;\r\n    }\r\n\r\n    event FeeMultiplierUpdated(uint _multiplier);\r\n    event ImpactFeeSetterUpdated(bool _usefeesetter);\r\n    event FeeRateUpdated(uint _rate);\r\n    event FeesUpdated(uint _buy, uint _sell);\r\n    event FeeAddress1Updated(address _feewallet1);\r\n    event FeeAddress2Updated(address _feewallet2);\r\n    \r\n    modifier lockTheSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n    constructor (address payable FeeAddress1, address payable FeeAddress2) {\r\n        _FeeAddress1 = FeeAddress1;\r\n        _FeeAddress2 = FeeAddress2;\r\n        _owned[address(this)] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[FeeAddress1] = true;\r\n        _isExcludedFromFee[FeeAddress2] = true;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _owned[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public pure override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n        if(_tradingOpen && !_isExcludedFromFee[recipient] && sender == uniswapV2Pair){\r\n            require (recipient == tx.origin, \"pls no bot\");\r\n        }\r\n        _transfer(sender, recipient, amount);\r\n        uint allowedAmount = _allowances[sender][_msgSender()] - amount;\r\n        _approve(sender, _msgSender(), allowedAmount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(!_isBot[from], \"ERC20: transfer from frozen wallet.\");\r\n\r\n        bool isBuy = false;\r\n        if(from != owner() && to != owner()) {\r\n            // buy\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(_tradingOpen, \"Trading not yet enabled.\");\r\n                require(block.timestamp != _launchedAt, \"pls no snip\");\r\n                if((_launchedAt + (1 hours)) > block.timestamp) {\r\n                    require((amount + balanceOf(address(to))) <= _maxHeldTokens, \"You can't own that many tokens at once.\"); // 5%\r\n                }\r\n                if(!cooldown[to].exists) {\r\n                    cooldown[to] = User(0,true);\r\n                }\r\n                if((_launchedAt + (120 seconds)) > block.timestamp) {\r\n                    require(amount <= _maxBuyAmount, \"Exceeds maximum buy amount.\");\r\n                    require(cooldown[to].buy < block.timestamp + (15 seconds), \"Your buy cooldown has not expired.\");\r\n                }\r\n                cooldown[to].buy = block.timestamp;\r\n                isBuy = true;\r\n            }\r\n            // sell\r\n            if(!_inSwap && _tradingOpen && from != uniswapV2Pair) {\r\n                require(cooldown[from].buy < block.timestamp + (15 seconds), \"Your sell cooldown has not expired.\");\r\n                uint contractTokenBalance = balanceOf(address(this));\r\n                if(contractTokenBalance > 0) {\r\n                    if(_useImpactFeeSetter) {\r\n                        if(contractTokenBalance > (balanceOf(uniswapV2Pair) * _feeRate) / 100) {\r\n                            contractTokenBalance = (balanceOf(uniswapV2Pair) * _feeRate) / 100;\r\n                        }\r\n                    }\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n                uint contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                isBuy = false;\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from,to,amount,takeFee,isBuy);\r\n    }\r\n\r\n    function swapTokensForEth(uint tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint amount) private {\r\n        _FeeAddress1.transfer(amount / 2);\r\n        _FeeAddress2.transfer(amount / 2);\r\n    }\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint amount, bool takefee, bool buy) private {\r\n        (uint fee) = _getFee(takefee, buy);\r\n        _transferStandard(sender, recipient, amount, fee);\r\n    }\r\n\r\n    function _getFee(bool takefee, bool buy) private view returns (uint) {\r\n        uint fee = 0;\r\n        if(takefee) {\r\n            if(buy) {\r\n                fee = _buyFee;\r\n            } else {\r\n                fee = _sellFee;\r\n                if(block.timestamp < _launchedAt + (15 minutes)) {\r\n                    fee += 5;\r\n                }\r\n            }\r\n        }\r\n        return fee;\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint amount, uint fee) private {\r\n        (uint transferAmount, uint team) = _getValues(amount, fee);\r\n        _owned[sender] = _owned[sender] - amount;\r\n        _owned[recipient] = _owned[recipient] + transferAmount; \r\n        _takeTeam(team);\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function _getValues(uint amount, uint teamFee) private pure returns (uint, uint) {\r\n        uint team = (amount * teamFee) / 100;\r\n        uint transferAmount = amount - team;\r\n        return (transferAmount, team);\r\n    }\r\n\r\n    function _takeTeam(uint team) private {\r\n        _owned[address(this)] = _owned[address(this)] + team;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    // external functions\r\n    function addLiquidity() external onlyOwner() {\r\n        require(!_tradingOpen, \"Trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!_tradingOpen, \"Trading is already open\");\r\n        _tradingOpen = true;\r\n        _launchedAt = block.timestamp;\r\n        _maxBuyAmount = 20000000000 * 10**9; // 2%\r\n        _maxHeldTokens = 40000000000 * 10**9; // 4%\r\n    }\r\n\r\n    function manualswap() external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        uint contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        uint contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function setFeeRate(uint rate)  external onlyOwner() {\r\n        require(_msgSender() == _FeeAddress1);\r\n        require(rate > 0, \"Rate can't be zero\");\r\n        // 100% is the common fee rate\r\n        _feeRate = rate;\r\n        emit FeeRateUpdated(_feeRate);\r\n    }\r\n\r\n    function setFees(uint buy, uint sell)  external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        require(buy <= 10);\r\n        require(sell  <= 10);\r\n        _buyFee = buy;\r\n        _sellFee = sell;\r\n        emit FeesUpdated(_buyFee, _sellFee);\r\n    }\r\n\r\n    function Multicall(address[] memory bots_) external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\r\n                _isBot[bots_[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n     function delBots(address[] memory bots_) external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            _isBot[bots_[i]] = false;\r\n        }\r\n    }\r\n    \r\n    function isBot(address ad) public view returns (bool) {\r\n        return _isBot[ad];\r\n    }\r\n\r\n\r\n    function toggleImpactFee(bool onoff)  external onlyOwner() {\r\n        _useImpactFeeSetter = onoff;\r\n        emit ImpactFeeSetterUpdated(_useImpactFeeSetter);\r\n    }\r\n\r\n    function updateFeeAddress1(address newAddress) external {\r\n        require(_msgSender() == _FeeAddress1);\r\n        _FeeAddress1 = payable(newAddress);\r\n        emit FeeAddress1Updated(_FeeAddress1);\r\n    }\r\n\r\n    function updateFeeAddress2(address newAddress) external {\r\n        require(_msgSender() == _FeeAddress2);\r\n        _FeeAddress2 = payable(newAddress);\r\n        emit FeeAddress2Updated(_FeeAddress2);\r\n    }\r\n\r\n    // view functions\r\n    function thisBalance() public view returns (uint) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function amountInPool() public view returns (uint) {\r\n        return balanceOf(uniswapV2Pair);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"FeeAddress1\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"FeeAddress2\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feewallet1\",\"type\":\"address\"}],\"name\":\"FeeAddress1Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_feewallet2\",\"type\":\"address\"}],\"name\":\"FeeAddress2Updated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"FeeMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_usefeesetter\",\"type\":\"bool\"}],\"name\":\"ImpactFeeSetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"Multicall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeAddress1\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_FeeAddress2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxHeldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_useImpactFeeSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sell\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"toggleImpactFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateFeeAddress2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"METABUCKS","CompilerVersion":"v0.8.13+commit.abaa5c0e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000007134950fdf8abef9b1ed0e955b1e92e6c3aaa900000000000000000000000000e84af7010bb5eb0d06258eb71b3bbb92b1a87f17","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://81145c56f5199e99503e9220d443c111bf3539c5f435442e815fa63e6ebe85e1"}]