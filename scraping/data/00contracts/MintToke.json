[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.5.11;\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    address public manager;\r\n    uint private unlocked = 1;\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"1000\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyManager() {\r\n        require(msg.sender == owner || (manager != address(0) && msg.sender == manager), \"1000\");\r\n        _;\r\n    }\r\n\r\n    function setManager(address user) external onlyOwner {\r\n        manager = user;\r\n    }\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, '1001');\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n}\r\n\r\ncontract ITGToken{\r\n    uint public totalSupply;\r\n    uint public limitSupply;\r\n    mapping(address => uint) public balanceOf;\r\n    function mint(address miner,uint256 tokens,uint256 additional) external returns(bool success);\r\n    function redeem(address miner,uint256 tokens) external returns(bool success);\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, '1002');\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, '1002');\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, '1002');\r\n    }\r\n    \r\n    function div(uint x,uint y) internal pure returns (uint z){\r\n        if(x==0){\r\n            return 0;\r\n        }\r\n        require(y == 0 || (z = x / y) > 0, '100');\r\n    }\r\n}\r\n\r\ncontract MintToken is IERC20, Ownable {\r\n    using SafeMath for uint;\r\n\r\n    ITGToken tg;\r\n    address public tokenContract;\r\n    uint limitSupply;//tgtoken的预发行总量\r\n    uint minerPrice = 1 ether;//高配矿工价格 eth\r\n    uint minerQuota = 100 ether * 10000;//高配矿工配额\r\n    uint public minerid = 0;//矿工计数\r\n    uint public auctionId = 0;//拍卖计数\r\n    uint public lessThanId = 0;//不满足矿工要求的计数\r\n    uint constant RATIO = 10000;//1eth质押铸币数量\r\n    uint constant MINER_LIMIT = 10000;//矿工数量限制\r\n    uint constant MINER_EXPIRES = 180 days;\r\n    uint constant QUOTA_LIMIT = 5 ether * 10000; //5 ether * RATIO 默认配额的上限\r\n    uint constant MINT_MIN_VALUE = 0.1 ether;//最小质押值\r\n    uint constant MINT_MAX_VALUE = 1 ether;//首次最大质押值\r\n    uint constant MIN_TOKENS = 1000 ether;//持续持有铸币的最小值\r\n\r\n    uint public totalSupply;\r\n    uint public constant decimals = 18;\r\n    string public constant name = 'TGToken Mint Certificate';\r\n    string public constant symbol = 'TMC';\r\n\r\n    bool auctionStatus = false;//是否开启拍卖\r\n\r\n    struct MinerStruct {\r\n        uint id;\r\n        uint quota;\r\n        uint tokens;\r\n    }\r\n    struct AuctionStruct {\r\n        uint id;\r\n        uint quota;\r\n        uint expires;\r\n        uint price;\r\n        uint count;\r\n        uint highest;\r\n        address bider;\r\n    }\r\n    struct LessThanStruct {\r\n        uint id;\r\n        uint time;\r\n    }\r\n    mapping (address => AuctionStruct) public auctions;\r\n    mapping (address => MinerStruct) miners;\r\n    mapping (uint => address) public auctionOf;\r\n    mapping (address => mapping(address => uint)) public allowance;\r\n    mapping (address => LessThanStruct) lessThanQuotaLimit;\r\n    mapping (uint => address) lessThanOf;\r\n\r\n\r\n    event Mint(address indexed from,uint id, uint value ,uint tokens);\r\n    event Redeem(address indexed from, uint value, uint tokens);\r\n    event Buy(address indexed from, address target, uint value);\r\n    event Auction(address indexed from,uint id,uint quota, uint price,uint count,uint expires,address bider, uint highest);\r\n\r\n    constructor () public {\r\n        _miner_add(msg.sender, 0, 0, 0);\r\n    }\r\n\r\n    function initTokenContract(address _token) external onlyOwner{\r\n        tokenContract = _token;\r\n        tg = ITGToken(tokenContract);\r\n        limitSupply = tg.limitSupply();\r\n        miners[msg.sender].quota = limitSupply;\r\n    }\r\n\r\n    function balanceOf(address user) external view returns (uint){\r\n        return miners[user].tokens;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint value) private {\r\n        require(miners[to].id > 0, '2030');\r\n        miners[from].tokens = miners[from].tokens.sub(value);\r\n        miners[to].tokens = miners[to].tokens.add(value);\r\n        _update_lessthan(from);\r\n        _update_lessthan(to);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function transfer(address to, uint value) external lock returns (bool){\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint value) external returns (bool){\r\n        allowance[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint value) external returns (bool){\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\r\n        }\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function mint() external payable {\r\n        require(msg.value >= MINT_MIN_VALUE, '2001');\r\n        uint tokens = msg.value.mul(RATIO);\r\n        uint amount = tokens / 20;\r\n\r\n        if(miners[msg.sender].id > 0){\r\n            miners[msg.sender].tokens = miners[msg.sender].tokens.add(tokens);\r\n            require(miners[msg.sender].tokens <= miners[msg.sender].quota,'2004');\r\n        }else{\r\n            require(msg.value <= MINT_MAX_VALUE,'2006');\r\n            require(!_isContract(msg.sender), '2034');\r\n            _miner_add(msg.sender, 0, tokens.mul(5), tokens);\r\n        }\r\n        _update_lessthan(msg.sender);\r\n        totalSupply = totalSupply.add(miners[msg.sender].tokens);\r\n        require(tg.mint(msg.sender,tokens,amount), '2007');\r\n        emit Mint(msg.sender, miners[msg.sender].id, msg.value, tokens);\r\n    }\r\n\r\n    function redeem(uint _value) external lock{\r\n        require(miners[msg.sender].id > 0,'2009');\r\n        uint value = _value;\r\n        uint tokens = value.mul(RATIO);\r\n        if(tokens > miners[msg.sender].tokens){\r\n            tokens = miners[msg.sender].tokens;\r\n            value = tokens.div(RATIO);\r\n        }\r\n        miners[msg.sender].tokens = miners[msg.sender].tokens.sub(tokens);\r\n        totalSupply = totalSupply.sub(tokens);\r\n        _update_lessthan(msg.sender);\r\n        require(tg.redeem(msg.sender,tokens),'2011');\r\n        msg.sender.transfer(value);\r\n        emit Redeem(msg.sender,value, tokens);\r\n    }\r\n\r\n    function _miner_add(address user, uint id, uint quota, uint tokens) private{\r\n        if(id == 0){\r\n            require(minerid < MINER_LIMIT,'2005');\r\n            minerid += 1;\r\n            miners[user] = MinerStruct(minerid,quota,tokens);\r\n        }else{\r\n            miners[user] = MinerStruct(id,quota,tokens);\r\n        }\r\n    }\r\n\r\n    function _miner_clear(address user) private {\r\n        delete miners[user];\r\n    }\r\n\r\n    function _update_lessthan(address user) private {\r\n        if(miners[user].id == 0 || miners[user].quota > QUOTA_LIMIT || miners[user].tokens >= MIN_TOKENS){\r\n            if(lessThanQuotaLimit[user].time > 0){\r\n                delete lessThanOf[lessThanQuotaLimit[user].id];\r\n                delete lessThanQuotaLimit[user];\r\n            }\r\n        }else if(lessThanQuotaLimit[user].time == 0){\r\n            lessThanId += 1;\r\n            lessThanQuotaLimit[user] = LessThanStruct(lessThanId,_now(0));\r\n            lessThanOf[lessThanId] = user;\r\n        }\r\n    }\r\n\r\n    function buy(address target) external lock payable{\r\n        require(!_isContract(msg.sender), '2034');\r\n        if(target == address(0)){\r\n            require(minerPrice > 0 && msg.value == minerPrice, '2012');\r\n            if(miners[msg.sender].id == 0){\r\n                _miner_add(msg.sender,0, minerQuota, 0);\r\n            }else{\r\n                miners[msg.sender].quota = miners[msg.sender].quota.add(minerQuota);\r\n                _update_lessthan(msg.sender);\r\n                require(miners[msg.sender].quota <= QUOTA_LIMIT * 100, '2016');\r\n            }\r\n            address(uint160(owner)).transfer(msg.value);\r\n            emit Buy(msg.sender,target,msg.value);\r\n        }else{\r\n            require(miners[msg.sender].id == 0,'2013');\r\n            require(minerid >= MINER_LIMIT, '2005');\r\n            require(msg.value >= 0.2 ether && msg.value <= 1 ether, '2014');\r\n            MinerStruct memory miner = miners[target];\r\n            require(_allowTransfer(target,miner),'2015');\r\n\r\n            uint to_target_value = msg.value / 2;\r\n            uint to_owner_value = msg.value - to_target_value;\r\n            if(miner.tokens > 0){\r\n                to_owner_value += miner.tokens.div(RATIO);\r\n                totalSupply = totalSupply.sub(miner.tokens);\r\n            }\r\n            _miner_clear(target);\r\n            _update_lessthan(target);\r\n            _miner_add(msg.sender, miner.id, msg.value * RATIO * 5, 0);\r\n\r\n            if(auctions[target].id>0){\r\n                delete auctionOf[auctions[target].id];\r\n                delete auctions[target];\r\n            }\r\n\r\n            address(uint160(target)).transfer(to_target_value);\r\n            address(uint160(owner)).transfer(to_owner_value);\r\n\r\n            emit Buy(msg.sender,target,msg.value);\r\n        }\r\n    }\r\n\r\n    function auctionInitiate(uint price) external{\r\n        require(auctionStatus &&\r\n            minerid >= MINER_LIMIT &&\r\n            miners[msg.sender].id > 1, '2017');\r\n        require(auctions[msg.sender].id == 0, '2018');\r\n        require(price > 0, '2019');\r\n        uint expires = _now(7 days);\r\n        auctionId += 1;\r\n        auctions[msg.sender] = AuctionStruct(\r\n            auctionId,\r\n            miners[msg.sender].quota,\r\n            expires,\r\n            price,\r\n            0,\r\n            price,\r\n            address(0)\r\n        );\r\n        auctionOf[auctionId] = msg.sender;\r\n        emit Auction(msg.sender,auctionId,miners[msg.sender].quota, price, 0, expires, address(0), price);\r\n    }\r\n\r\n    function auctionCancel() external{\r\n        uint id = auctions[msg.sender].id;\r\n        require(id > 0, '2020');\r\n        require(auctions[msg.sender].expires <= _now(0), '2021');\r\n        require(auctions[msg.sender].bider == address(0), '2022');\r\n        delete auctions[msg.sender];\r\n        delete auctionOf[id];\r\n        emit Auction(msg.sender,id,0, 0, 0, _now(0), address(0), 0);\r\n    }\r\n\r\n    function auctionBid(address target) external payable{\r\n        require(miners[msg.sender].id == 0, '2013');\r\n        AuctionStruct memory item = auctions[target];\r\n        require(target != msg.sender, '2023');\r\n        require(item.id > 0, '2024');\r\n        require(item.expires > _now(0), '2027');\r\n        require(msg.value > item.highest, '2025');\r\n        require(!_isContract(msg.sender), '2034');\r\n\r\n        address prev_bider = item.count == 0 ? address(0) : item.bider;\r\n        uint prev_value = item.count == 0 ? 0 : item.highest;\r\n\r\n        auctions[target].highest = msg.value;\r\n        auctions[target].bider = msg.sender;\r\n        auctions[target].count += 1;\r\n\r\n        if(prev_value > 0){\r\n            address(uint160(prev_bider)).transfer(prev_value);\r\n        }\r\n        emit Auction(target,item.id,item.quota,item.price, auctions[target].count, item.expires, msg.sender, msg.value);\r\n    }\r\n\r\n    function auctionFinish(address target) external lock{\r\n        AuctionStruct memory item = auctions[target];\r\n        require(item.id > 0, '2024');\r\n        require(item.expires <= _now(0), '2028');\r\n        require(item.count > 0 && item.bider == msg.sender, '2029');\r\n\r\n        MinerStruct memory miner = miners[target];\r\n        uint to_owner_value = item.highest / 10;\r\n        uint to_target_value = item.highest - to_owner_value;\r\n        if(miner.tokens > 0){\r\n            to_owner_value += miner.tokens.div(RATIO);\r\n            totalSupply = totalSupply.sub(miner.tokens);\r\n        }\r\n        _miner_clear(target);\r\n        _update_lessthan(target);\r\n        if(miners[msg.sender].id == 0){\r\n            _miner_add(msg.sender, miner.id, miner.quota, 0);\r\n        }else if(miners[msg.sender].quota <= miner.quota){\r\n            miners[msg.sender].quota = miner.quota;\r\n        }\r\n        _update_lessthan(msg.sender);\r\n        delete auctions[target];\r\n        delete auctionOf[item.id];\r\n\r\n        address(uint160(owner)).transfer(to_owner_value);\r\n        address(uint160(target)).transfer(to_target_value);\r\n\r\n        emit Auction(target,item.id,item.quota, item.price, item.count, _now(0), msg.sender, item.highest);\r\n    }\r\n\r\n    function setSellMiner(uint price,uint quota) external onlyOwner{\r\n        require(quota > QUOTA_LIMIT, \"quota must be greater than 50000tg\");\r\n        minerPrice = price;\r\n        minerQuota = quota;\r\n    }\r\n\r\n    function setAuction(bool status) external onlyOwner{\r\n        auctionStatus = status;\r\n    }\r\n\r\n    function viewSummary() external view returns (\r\n        uint ratio,uint miner_count,uint miner_limit,uint miner_expires,\r\n        uint miner_price,uint miner_quota,uint quota_limit,uint balance,bool auction_status,address token_contract\r\n    ){\r\n        return (\r\n            RATIO,minerid,MINER_LIMIT,MINER_EXPIRES,minerPrice,minerQuota,\r\n            QUOTA_LIMIT,address(this).balance,auctionStatus,tokenContract\r\n        );\r\n    }\r\n\r\n    function viewMiner(address sender) external view returns (\r\n        uint id,uint quota,uint tokens,uint value,uint status,uint expires\r\n    ){\r\n        return (\r\n            miners[sender].id,\r\n            miners[sender].quota,\r\n            miners[sender].tokens,\r\n            miners[sender].tokens.div(RATIO),\r\n            auctions[sender].id > 0 ? 1 : 0,\r\n            lessThanQuotaLimit[sender].time>0?lessThanQuotaLimit[sender].time.add(MINER_EXPIRES):0\r\n        );\r\n    }\r\n\r\n    function viewTransferMiner() external view returns (address addr){\r\n        if(minerid < MINER_LIMIT){\r\n            return address(0);\r\n        }\r\n        for(uint i = 1; i <= lessThanId; i++){\r\n            address _addr = lessThanOf[i];\r\n            if(_addr != address(0)){\r\n                MinerStruct memory miner = miners[_addr];\r\n                if(_allowTransfer(_addr,miner)){\r\n                    return _addr;\r\n                }\r\n            }\r\n        }\r\n        return address(0);\r\n    }\r\n\r\n    function _allowTransfer(address user,MinerStruct memory miner) private view returns (bool){\r\n        return miner.id>1 && miner.quota<=QUOTA_LIMIT && miner.tokens < MIN_TOKENS &&\r\n            lessThanQuotaLimit[user].time.add(MINER_EXPIRES) < _now(0) &&\r\n            (auctions[user].id == 0 || (auctions[user].id>0 && auctions[user].count==0 && auctions[user].expires<_now(0)));\r\n    }\r\n\r\n    function _now(uint value) internal view returns (uint) {\r\n        //solium-disable-next-line\r\n        uint v = block.timestamp;\r\n        if(value != 0){\r\n            v = v.add(value);\r\n        }\r\n        return v;\r\n    }\r\n    function _isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        //solium-disable-next-line\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"}],\"name\":\"Auction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"auctionBid\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"auctionCancel\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"auctionFinish\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"auctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"auctionInitiate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"highest\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bider\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"initTokenContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lessThanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minerid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"}],\"name\":\"setSellMiner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"viewMiner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner_expires\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miner_quota\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quota_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"auction_status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"token_contract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"viewTransferMiner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"MintToken","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5ca6f4b93ddf9fc60aa65a73405b1d0d42b024859176500b6b3ba1b7d9543adc"}]