[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.5.17;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function decimals() external view returns (uint);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 && codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface Controller {\r\n    function vaults(address) external view returns (address);\r\n    function rewards() external view returns (address);\r\n}\r\n\r\n/*\r\n\r\n A strategy must implement the following calls;\r\n \r\n - deposit()\r\n - withdraw(address) must exclude any tokens used in the yield - Controller role - withdraw should return to Controller\r\n - withdraw(uint) - Controller | Vault role - withdraw should always return to vault\r\n - withdrawAll() - Controller | Vault role - withdraw should always return to vault\r\n - balanceOf()\r\n \r\n Where possible, strategies must remain as immutable as possible, instead of updating variables, we update the contract by linking it in the controller\r\n \r\n*/\r\n\r\ninterface yERC20 {\r\n  function deposit(uint) external;\r\n  function withdraw(uint) external;\r\n  function getPricePerFullShare() external view returns (uint);\r\n}\r\n\r\ninterface ICurveFi {\r\n\r\n  function get_virtual_price() external view returns (uint);\r\n  function add_liquidity(\r\n    uint256[4] calldata amounts,\r\n    uint256 min_mint_amount\r\n  ) external;\r\n  function remove_liquidity_imbalance(\r\n    uint256[4] calldata amounts,\r\n    uint256 max_burn_amount\r\n  ) external;\r\n  function remove_liquidity(\r\n    uint256 _amount,\r\n    uint256[4] calldata amounts\r\n  ) external;\r\n  function exchange(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n}\r\n\r\ncontract StrategyTUSDCurve {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n    using SafeMath for uint256;\r\n    \r\n    address constant public want = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    address constant public y = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n    address constant public ycrv = address(0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8);\r\n    address constant public yycrv = address(0x5dbcF33D8c2E976c6b560249878e6F1491Bca25c);\r\n    address constant public curve = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n    \r\n    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n    address constant public ydai = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n\r\n    address constant public usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n    address constant public yusdc = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n\r\n    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    address constant public yusdt = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n\r\n    address constant public tusd = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n    address constant public ytusd = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n\r\n    \r\n    address public governance;\r\n    address public controller;\r\n    \r\n    constructor(address _controller) public {\r\n        governance = msg.sender;\r\n        controller = _controller;\r\n    }\r\n    \r\n    function getName() external pure returns (string memory) {\r\n        return \"StrategyTUSDCurve\";\r\n    }\r\n    \r\n    function deposit() public {\r\n        uint _want = IERC20(want).balanceOf(address(this));\r\n        if (_want > 0) {\r\n            IERC20(want).safeApprove(y, 0);\r\n            IERC20(want).safeApprove(y, _want);\r\n            yERC20(y).deposit(_want);\r\n        }\r\n        uint _y = IERC20(y).balanceOf(address(this));\r\n        if (_y > 0) {\r\n            IERC20(y).safeApprove(curve, 0);\r\n            IERC20(y).safeApprove(curve, _y);\r\n            ICurveFi(curve).add_liquidity([0,0,0,_y],0);\r\n        }\r\n        uint _ycrv = IERC20(ycrv).balanceOf(address(this));\r\n        if (_ycrv > 0) {\r\n            IERC20(ycrv).safeApprove(yycrv, 0);\r\n            IERC20(ycrv).safeApprove(yycrv, _ycrv);\r\n            yERC20(yycrv).deposit(_ycrv);\r\n        }\r\n    }\r\n    \r\n    // Controller only function for creating additional rewards from dust\r\n    function withdraw(IERC20 _asset) external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        require(want != address(_asset), \"want\");\r\n        require(y != address(_asset), \"y\");\r\n        require(ycrv != address(_asset), \"ycrv\");\r\n        require(yycrv != address(_asset), \"yycrv\");\r\n        balance = _asset.balanceOf(address(this));\r\n        _asset.safeTransfer(controller, balance);\r\n    }\r\n    \r\n    // Withdraw partial funds, normally used with a vault withdrawal\r\n    function withdraw(uint _amount) external {\r\n        require(msg.sender == controller, \"!controller\");\r\n        uint _balance = IERC20(want).balanceOf(address(this));\r\n        if (_balance < _amount) {\r\n            _amount = _withdrawSome(_amount.sub(_balance));\r\n            _amount = _amount.add(_balance);\r\n        }\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, _amount);\r\n    }\r\n    \r\n    // Withdraw all funds, normally used when migrating strategies\r\n    function withdrawAll() external returns (uint balance) {\r\n        require(msg.sender == controller, \"!controller\");\r\n        _withdrawAll();\r\n        \r\n        \r\n        balance = IERC20(want).balanceOf(address(this));\r\n        \r\n        address _vault = Controller(controller).vaults(address(want));\r\n        require(_vault != address(0), \"!vault\"); // additional protection so we don't burn the funds\r\n        IERC20(want).safeTransfer(_vault, balance);\r\n    }\r\n    \r\n    function withdrawTUSD(uint256 _amount) internal returns (uint) {\r\n        IERC20(ycrv).safeApprove(curve, 0);\r\n        IERC20(ycrv).safeApprove(curve, _amount);\r\n        ICurveFi(curve).remove_liquidity(_amount, [uint256(0),0,0,0]);\r\n    \r\n        uint256 _ydai = IERC20(ydai).balanceOf(address(this));\r\n        uint256 _yusdc = IERC20(yusdc).balanceOf(address(this));\r\n        uint256 _yusdt = IERC20(yusdt).balanceOf(address(this));\r\n    \r\n        if (_ydai > 0) {\r\n            IERC20(ydai).safeApprove(curve, 0);\r\n            IERC20(ydai).safeApprove(curve, _ydai);\r\n            ICurveFi(curve).exchange(0, 3, _ydai, 0);\r\n        }\r\n        if (_yusdc > 0) {\r\n            IERC20(yusdc).safeApprove(curve, 0);\r\n            IERC20(yusdc).safeApprove(curve, _yusdc);\r\n            ICurveFi(curve).exchange(1, 3, _yusdc, 0);\r\n        }\r\n        if (_yusdt > 0) {\r\n            IERC20(yusdt).safeApprove(curve, 0);\r\n            IERC20(yusdt).safeApprove(curve, _yusdt);\r\n            ICurveFi(curve).exchange(2, 3, _yusdt, 0);\r\n        }\r\n        \r\n        uint _before = IERC20(want).balanceOf(address(this));\r\n        yERC20(ytusd).withdraw(IERC20(ytusd).balanceOf(address(this)));\r\n        uint _after = IERC20(want).balanceOf(address(this));\r\n        \r\n        return _after.sub(_before);\r\n    }\r\n    \r\n    function _withdrawAll() internal {\r\n        uint _yycrv = IERC20(yycrv).balanceOf(address(this));\r\n        if (_yycrv > 0) {\r\n            yERC20(yycrv).withdraw(_yycrv);\r\n            withdrawTUSD(IERC20(ycrv).balanceOf(address(this)));\r\n        }\r\n    }\r\n    \r\n    function _withdrawSome(uint256 _amount) internal returns (uint) {\r\n        // calculate amount of ycrv to withdraw for amount of _want_\r\n        uint _ycrv = _amount.mul(1e18).div(ICurveFi(curve).get_virtual_price());\r\n        // calculate amount of yycrv to withdraw for amount of _ycrv_\r\n        uint _yycrv = _ycrv.mul(1e18).div(yERC20(yycrv).getPricePerFullShare());\r\n        uint _before = IERC20(ycrv).balanceOf(address(this));\r\n        yERC20(yycrv).withdraw(_yycrv);\r\n        uint _after = IERC20(ycrv).balanceOf(address(this));\r\n        return withdrawTUSD(_after.sub(_before));\r\n    }\r\n    \r\n    function balanceOfWant() public view returns (uint) {\r\n        return IERC20(want).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfYYCRV() public view returns (uint) {\r\n        return IERC20(yycrv).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfYYCRVinYCRV() public view returns (uint) {\r\n        return balanceOfYYCRV().mul(yERC20(yycrv).getPricePerFullShare()).div(1e18);\r\n    }\r\n    \r\n    function balanceOfYYCRVinyTUSD() public view returns (uint) {\r\n        return balanceOfYYCRVinYCRV().mul(ICurveFi(curve).get_virtual_price()).div(1e18);\r\n    }\r\n    \r\n    function balanceOfYCRV() public view returns (uint) {\r\n        return IERC20(ycrv).balanceOf(address(this));\r\n    }\r\n    \r\n    function balanceOfYCRVyTUSD() public view returns (uint) {\r\n        return balanceOfYCRV().mul(ICurveFi(curve).get_virtual_price()).div(1e18);\r\n    }\r\n    \r\n    function balanceOf() public view returns (uint) {\r\n        return balanceOfWant()\r\n               .add(balanceOfYYCRVinyTUSD());\r\n    }\r\n    \r\n    function setGovernance(address _governance) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        governance = _governance;\r\n    }\r\n    \r\n    function setController(address _controller) external {\r\n        require(msg.sender == governance, \"!governance\");\r\n        controller = _controller;\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfYCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfYCRVyTUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfYYCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfYYCRVinYCRV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"balanceOfYYCRVinyTUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"y\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ydai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ytusd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yusdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yusdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"yycrv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"StrategyTUSDCurve","CompilerVersion":"v0.5.17+commit.d19bba13","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000062d858ede1988e77c9d204e9c35fbfedd5aa70f1","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"bzzr://192dcb0477f4d7689c50f0d000f7010e3d7ca08f82c8d5403e78a4237712fba3"}]