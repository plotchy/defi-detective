[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Copyright (C) 2022, 2023, 2024, DEXBot, BI Network\r\n\r\n// DEX trading bot includes three parts.\r\n// 1.DEX Bot Core: core processor, mainly responsible for AI core computing, database operation, calling smart contract interface and client interaction. \r\n// 2.DEX Bot Contracts: To process the on-chain operations based on the results of Core's calculations and ensure the security of the assets.\r\n//    Bot.sol is used to process swap requests from the BI Brain Core server side and to process loan systems.\r\n//    SwapEncryption.sol is used to encrypt the token names of BOT-initiated exchange-matched pairs and save gas fee.\r\n//    GasOptimizedEther.sol is used to help users swap assets between ETH, WETH and BOT.\r\n// 3.DEX Bot Client, currently, the official team has chosen to run the client based on telegram bot and web. Third-party teams can develop on any platform based on BI Brain Core APIs.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface IBOT {\r\n    function EncryptedSwap(address from,address toUser,uint amount) external view returns(bool);\r\n}\r\n\r\ncontract Bot {\r\n\r\n    address public owner;\r\n    address public keeper;\r\n    address public banker;\r\n    uint public feeRate;// unit: 1/10 percent\r\n\r\n    address public src;\r\n    address public stc;\r\n    address public  enscript;\r\n    address[3] public weth;\r\n    mapping (address => uint)  public  debt; \r\n\r\n    constructor (address _keeper,address _stc,address _src,address _weth1,address _weth2,address _weth3,address _enscript,address _banker) public {\r\n        owner = msg.sender;\r\n        keeper = _keeper;\r\n        feeRate = 1;\r\n        weth = [_weth1, _weth2, _weth3];  \r\n        stc = _stc;\r\n        src = _src;\r\n        banker = _banker;\r\n        enscript=_enscript;\r\n    }\r\n\r\n    event EncryptedSwap(address indexed tokenA,uint amountA,address indexed tokenB,uint amountB);\r\n    \r\n    modifier BotPower() {\r\n        require(msg.sender == keeper);\r\n        _;\r\n    }\r\n\r\n    function Release(address tkn,address guy,uint amount) public BotPower returns(bool) {\r\n        ERC20 token = ERC20(tkn);\r\n        token.transfer(guy, amount);\r\n        return true;\r\n    }\r\n\r\n    function BotEncryptedBuy(address pool,uint output,uint amountA,uint priceA,uint priceB) public BotPower returns (bool) {\r\n\r\n        address tokenA = src;\r\n        if(output > 0){\r\n            tokenA = stc;\r\n        }\r\n        address tokenB = enscript;\r\n        uint amountB = priceA * amountA / priceB;\r\n\r\n        if(ERC20(tokenA).balanceOf(address(this))<amountA){\r\n            uint debtAdded = sub(amountA,ERC20(tokenA).balanceOf(address(this)));\r\n            debt[tokenA] = add(debt[tokenA],debtAdded);\r\n            IBOT(tokenA).EncryptedSwap(banker,address(this),debtAdded);           \r\n        }\r\n        IBOT(tokenA).EncryptedSwap(address(this),pool,amountA);  \r\n        IBOT(tokenB).EncryptedSwap(pool,address(this),amountB); \r\n        emit EncryptedSwap(tokenA,amountA,tokenB,amountB);  \r\n        return true;\r\n    }\r\n\r\n    function BotEncryptedSell(address pool,uint input,uint amountA,uint amountB) public BotPower returns (bool) {\r\n\r\n        address tokenA = enscript;\r\n        address tokenB = src;\r\n        if(input > 0){\r\n            tokenA = stc;\r\n        }\r\n\r\n        IBOT(tokenA).EncryptedSwap(address(this),pool,amountA);\r\n        uint fee = div(mul(div(mul(debt[tokenB],1000000000000000000),1000),feeRate),1000000000000000000);\r\n        if((add(fee,debt[tokenB])<=amountB)&&(debt[tokenB]>0)){\r\n            IBOT(tokenB).EncryptedSwap(pool,banker,add(debt[tokenB],fee));            \r\n            amountB = sub(amountB,add(debt[tokenB],fee));\r\n            debt[tokenB] = 0;\r\n        }\r\n        IBOT(tokenB).EncryptedSwap(pool,address(this),amountB); \r\n        emit EncryptedSwap(tokenA,amountA,tokenB,amountB);  \r\n        return true;\r\n    }\r\n\r\n    function ShowConfiguration()  external view returns(address,address,address,address,address,address,address,address,address) {\r\n        return (address(this),\r\n                keeper,\r\n                src,\r\n                stc,\r\n                banker,\r\n                enscript,\r\n                weth[0],\r\n                weth[1],\r\n                weth[2]);    \r\n    }\r\n\r\n    function WETHBlanceOfBot()  external view returns(uint,uint,uint) {\r\n        return (ERC20(weth[0]).balanceOf(address(this)),\r\n                ERC20(weth[1]).balanceOf(address(this)),\r\n                ERC20(weth[2]).balanceOf(address(this)));      \r\n    }\r\n\r\n    function STCBlanceOfBot()  external view returns(uint) {\r\n        return (ERC20(stc).balanceOf(address(this)));      \r\n    }\r\n\r\n    function ETHBalanceOfAllWETHContracts() public view returns  (uint){\r\n        uint totalEtherBalance = weth[0].balance;\r\n        totalEtherBalance = add(totalEtherBalance,weth[1].balance);\r\n        totalEtherBalance = add(totalEtherBalance,weth[2].balance);\r\n        return totalEtherBalance;\r\n    }\r\n\r\n    function ResetOwner(address addr) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        owner = addr;\r\n        return true;\r\n    }\r\n\r\n    function ResetKeeper(address addr) public BotPower returns (bool) {\r\n        require(addr != address(0));\r\n        keeper = addr;\r\n        return true;\r\n    }\r\n\r\n\r\n    function ResetBanker(address addr) public BotPower returns(bool) {\r\n        require(addr != address(0));\r\n        banker = addr;\r\n        return true;\r\n    }\r\n\r\n    function ResetFeeRate(uint _feeRate) public BotPower returns(bool) {\r\n        feeRate = _feeRate;\r\n        return true;\r\n    }\r\n\r\n    function debt(address addr,uint amount) public BotPower returns(bool) {\r\n        require(addr != address(0));\r\n        debt[addr] = amount;\r\n        return true;\r\n    }\r\n\r\n    function ResetContracts(address addr1,address addr2,address addr3,address addr4,address addr5,address addr6) public BotPower returns(bool) {\r\n        src = addr1;\r\n        stc = addr2;\r\n        enscript = addr3;\r\n        weth[0] = addr4;\r\n        weth[1] = addr5;\r\n        weth[2] = addr6;\r\n        return true;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"addr3\",\"type\":\"address\"},{\"name\":\"addr4\",\"type\":\"address\"},{\"name\":\"addr5\",\"type\":\"address\"},{\"name\":\"addr6\",\"type\":\"address\"}],\"name\":\"ResetContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"banker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ResetKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"input\",\"type\":\"uint256\"},{\"name\":\"amountA\",\"type\":\"uint256\"},{\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"BotEncryptedSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"src\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"output\",\"type\":\"uint256\"},{\"name\":\"amountA\",\"type\":\"uint256\"},{\"name\":\"priceA\",\"type\":\"uint256\"},{\"name\":\"priceB\",\"type\":\"uint256\"}],\"name\":\"BotEncryptedBuy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETHBlanceOfBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ResetOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHBalanceOfAllWETHContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"stc\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"enscript\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ShowConfiguration\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ResetBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STCBlanceOfBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tkn\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Release\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weth\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"ResetFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_keeper\",\"type\":\"address\"},{\"name\":\"_stc\",\"type\":\"address\"},{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_weth1\",\"type\":\"address\"},{\"name\":\"_weth2\",\"type\":\"address\"},{\"name\":\"_weth3\",\"type\":\"address\"},{\"name\":\"_enscript\",\"type\":\"address\"},{\"name\":\"_banker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"EncryptedSwap\",\"type\":\"event\"}]","ContractName":"Bot","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000ba86ec851652e84238f7f4c3148c1a2d55c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000630a383f8bd13430471175ce97796d9b31000000000000000000000000000000630a383f8bd13430471175ce97796d9b31000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000615dbba33fe61a31c7ed131bda6655ed76748b1000000000000000000000000000000e45ffaab3552f1eba4b2799b6803322c12000000000000000000000000000000630a383f8bd13430471175ce97796d9b31","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://9dd11272dd2cf4c332a960f2acdb82380638980831d7ee7fc156c3e27afea504"}]