[{"SourceCode":"// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC, Reflexer Labs, INC.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity 0.6.7;\r\n\r\ncontract GebMath {\r\n    uint256 public constant RAY = 10 ** 27;\r\n    uint256 public constant WAD = 10 ** 18;\r\n\r\n    function ray(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 9);\r\n    }\r\n    function rad(uint x) public pure returns (uint z) {\r\n        z = multiply(x, 10 ** 27);\r\n    }\r\n    function minimum(uint x, uint y) public pure returns (uint z) {\r\n        z = (x <= y) ? x : y;\r\n    }\r\n    function addition(uint x, uint y) public pure returns (uint z) {\r\n        z = x + y;\r\n        require(z >= x, \"uint-uint-add-overflow\");\r\n    }\r\n    function subtract(uint x, uint y) public pure returns (uint z) {\r\n        z = x - y;\r\n        require(z <= x, \"uint-uint-sub-underflow\");\r\n    }\r\n    function multiply(uint x, uint y) public pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"uint-uint-mul-overflow\");\r\n    }\r\n    function rmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / RAY;\r\n    }\r\n    function rdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, RAY) / y;\r\n    }\r\n    function wdivide(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, WAD) / y;\r\n    }\r\n    function wmultiply(uint x, uint y) public pure returns (uint z) {\r\n        z = multiply(x, y) / WAD;\r\n    }\r\n    function rpower(uint x, uint n, uint base) public pure returns (uint z) {\r\n        assembly {\r\n            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\r\n            default {\r\n                switch mod(n, 2) case 0 { z := base } default { z := x }\r\n                let half := div(base, 2)  // for rounding.\r\n                for { n := div(n, 2) } n { n := div(n,2) } {\r\n                    let xx := mul(x, x)\r\n                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\r\n                    let xxRound := add(xx, half)\r\n                    if lt(xxRound, xx) { revert(0,0) }\r\n                    x := div(xxRound, base)\r\n                    if mod(n,2) {\r\n                        let zx := mul(z, x)\r\n                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\r\n                        let zxRound := add(zx, half)\r\n                        if lt(zxRound, zx) { revert(0,0) }\r\n                        z := div(zxRound, base)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract StabilityFeeTreasuryLike {\r\n    function getAllowance(address) virtual external view returns (uint, uint);\r\n    function systemCoin() virtual external view returns (address);\r\n    function pullFunds(address, address, uint) virtual external;\r\n}\r\n\r\ncontract IncreasingTreasuryReimbursement is GebMath {\r\n    // --- Auth ---\r\n    mapping (address => uint) public authorizedAccounts;\r\n    function addAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 1;\r\n        emit AddAuthorization(account);\r\n    }\r\n    function removeAuthorization(address account) virtual external isAuthorized {\r\n        authorizedAccounts[account] = 0;\r\n        emit RemoveAuthorization(account);\r\n    }\r\n    modifier isAuthorized {\r\n        require(authorizedAccounts[msg.sender] == 1, \"IncreasingTreasuryReimbursement/account-not-authorized\");\r\n        _;\r\n    }\r\n\r\n    // --- Variables ---\r\n    // Starting reward for the fee receiver/keeper\r\n    uint256 public baseUpdateCallerReward;          // [wad]\r\n    // Max possible reward for the fee receiver/keeper\r\n    uint256 public maxUpdateCallerReward;           // [wad]\r\n    // Max delay taken into consideration when calculating the adjusted reward\r\n    uint256 public maxRewardIncreaseDelay;          // [seconds]\r\n    // Rate applied to baseUpdateCallerReward every extra second passed beyond a certain point (e.g next time when a specific function needs to be called)\r\n    uint256 public perSecondCallerRewardIncrease;   // [ray]\r\n\r\n    // SF treasury\r\n    StabilityFeeTreasuryLike  public treasury;\r\n\r\n    // --- Events ---\r\n    event AddAuthorization(address account);\r\n    event RemoveAuthorization(address account);\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      address addr\r\n    );\r\n    event ModifyParameters(\r\n      bytes32 parameter,\r\n      uint256 val\r\n    );\r\n    event FailRewardCaller(bytes revertReason, address feeReceiver, uint256 amount);\r\n\r\n    constructor(\r\n      address treasury_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_\r\n    ) public {\r\n        if (address(treasury_) != address(0)) {\r\n          require(StabilityFeeTreasuryLike(treasury_).systemCoin() != address(0), \"IncreasingTreasuryReimbursement/treasury-coin-not-set\");\r\n        }\r\n        require(maxUpdateCallerReward_ >= baseUpdateCallerReward_, \"IncreasingTreasuryReimbursement/invalid-max-caller-reward\");\r\n        require(perSecondCallerRewardIncrease_ >= RAY, \"IncreasingTreasuryReimbursement/invalid-per-second-reward-increase\");\r\n        authorizedAccounts[msg.sender] = 1;\r\n\r\n        treasury                        = StabilityFeeTreasuryLike(treasury_);\r\n        baseUpdateCallerReward          = baseUpdateCallerReward_;\r\n        maxUpdateCallerReward           = maxUpdateCallerReward_;\r\n        perSecondCallerRewardIncrease   = perSecondCallerRewardIncrease_;\r\n        maxRewardIncreaseDelay          = uint(-1);\r\n\r\n        emit AddAuthorization(msg.sender);\r\n        emit ModifyParameters(\"treasury\", treasury_);\r\n        emit ModifyParameters(\"baseUpdateCallerReward\", baseUpdateCallerReward);\r\n        emit ModifyParameters(\"maxUpdateCallerReward\", maxUpdateCallerReward);\r\n        emit ModifyParameters(\"perSecondCallerRewardIncrease\", perSecondCallerRewardIncrease);\r\n    }\r\n\r\n    // --- Boolean Logic ---\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n\r\n    // --- Treasury ---\r\n    /**\r\n    * @notice This returns the stability fee treasury allowance for this contract by taking the minimum between the per block and the total allowances\r\n    **/\r\n    function treasuryAllowance() public view returns (uint256) {\r\n        (uint total, uint perBlock) = treasury.getAllowance(address(this));\r\n        return minimum(total, perBlock);\r\n    }\r\n    /*\r\n    * @notice Get the SF reward that can be sent to a function caller right now\r\n    */\r\n    function getCallerReward(uint256 timeOfLastUpdate, uint256 defaultDelayBetweenCalls) public view returns (uint256) {\r\n        bool nullRewards = (baseUpdateCallerReward == 0 && maxUpdateCallerReward == 0);\r\n        if (either(timeOfLastUpdate >= now, nullRewards)) return 0;\r\n        uint256 timeElapsed = (timeOfLastUpdate == 0) ? defaultDelayBetweenCalls : subtract(now, timeOfLastUpdate);\r\n        if (either(timeElapsed < defaultDelayBetweenCalls, baseUpdateCallerReward == 0)) {\r\n            return 0;\r\n        }\r\n        uint256 adjustedTime      = subtract(timeElapsed, defaultDelayBetweenCalls);\r\n        uint256 maxPossibleReward = minimum(maxUpdateCallerReward, treasuryAllowance() / RAY);\r\n        if (adjustedTime > maxRewardIncreaseDelay) {\r\n            return maxPossibleReward;\r\n        }\r\n        uint256 calculatedReward = baseUpdateCallerReward;\r\n        if (adjustedTime > 0) {\r\n            calculatedReward = rmultiply(rpower(perSecondCallerRewardIncrease, adjustedTime, RAY), calculatedReward);\r\n        }\r\n        if (calculatedReward > maxPossibleReward) {\r\n            calculatedReward = maxPossibleReward;\r\n        }\r\n        return calculatedReward;\r\n    }\r\n    /**\r\n    * @notice Send a stability fee reward to an address\r\n    * @param proposedFeeReceiver The SF receiver\r\n    * @param reward The system coin amount to send\r\n    **/\r\n    function rewardCaller(address proposedFeeReceiver, uint256 reward) internal {\r\n        if (address(treasury) == proposedFeeReceiver) return;\r\n        if (either(address(treasury) == address(0), reward == 0)) return;\r\n        address finalFeeReceiver = (proposedFeeReceiver == address(0)) ? msg.sender : proposedFeeReceiver;\r\n        try treasury.pullFunds(finalFeeReceiver, treasury.systemCoin(), reward) {}\r\n        catch(bytes memory revertReason) {\r\n            emit FailRewardCaller(revertReason, finalFeeReceiver, reward);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract OracleLike {\r\n    function getResultWithValidity() virtual external view returns (uint256, bool);\r\n}\r\nabstract contract OracleRelayerLike {\r\n    function redemptionPrice() virtual external returns (uint256);\r\n    function modifyParameters(bytes32,uint256) virtual external;\r\n}\r\nabstract contract PIDCalculator {\r\n    function computeRate(uint256, uint256, uint256) virtual external returns (uint256);\r\n    function rt(uint256, uint256, uint256) virtual external view returns (uint256);\r\n    function pscl() virtual external view returns (uint256);\r\n    function tlv() virtual external view returns (uint256);\r\n}\r\n\r\ncontract RateSetter is IncreasingTreasuryReimbursement {\r\n    // --- Variables ---\r\n    // Settlement flag\r\n    uint256 public contractEnabled;                 // [0 or 1]\r\n    // Last recorded system coin market price\r\n    uint256 public latestMarketPrice;               // [ray]\r\n    // When the price feed was last updated\r\n    uint256 public lastUpdateTime;                  // [timestamp]\r\n    // Enforced gap between calls\r\n    uint256 public updateRateDelay;                 // [seconds]\r\n\r\n    // --- System Dependencies ---\r\n    // OSM or medianizer for the system coin\r\n    OracleLike                public orcl;\r\n    // OracleRelayer where the redemption price is stored\r\n    OracleRelayerLike         public oracleRelayer;\r\n    // Calculator for the redemption rate\r\n    PIDCalculator             public pidCalculator;\r\n\r\n    // --- Events ---\r\n    event UpdateRedemptionRate(\r\n        uint marketPrice,\r\n        uint redemptionPrice,\r\n        uint redemptionRate\r\n    );\r\n    event FailUpdateRedemptionRate(\r\n        bytes reason\r\n    );\r\n    event FailUpdateOracle(bytes revertReason, address orcl);\r\n\r\n    constructor(\r\n      address oracleRelayer_,\r\n      address orcl_,\r\n      address treasury_,\r\n      address pidCalculator_,\r\n      uint256 baseUpdateCallerReward_,\r\n      uint256 maxUpdateCallerReward_,\r\n      uint256 perSecondCallerRewardIncrease_,\r\n      uint256 updateRateDelay_\r\n    ) public IncreasingTreasuryReimbursement(treasury_, baseUpdateCallerReward_, maxUpdateCallerReward_, perSecondCallerRewardIncrease_) {\r\n        oracleRelayer    = OracleRelayerLike(oracleRelayer_);\r\n        orcl             = OracleLike(orcl_);\r\n        pidCalculator    = PIDCalculator(pidCalculator_);\r\n\r\n        updateRateDelay  = updateRateDelay_;\r\n        contractEnabled  = 1;\r\n\r\n        emit ModifyParameters(\"orcl\", orcl_);\r\n        emit ModifyParameters(\"oracleRelayer\", oracleRelayer_);\r\n        emit ModifyParameters(\"pidCalculator\", pidCalculator_);\r\n        emit ModifyParameters(\"updateRateDelay\", updateRateDelay_);\r\n    }\r\n\r\n    // --- Management ---\r\n    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\r\n        require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n        if (parameter == \"orcl\") orcl = OracleLike(addr);\r\n        else if (parameter == \"oracleRelayer\") oracleRelayer = OracleRelayerLike(addr);\r\n        else if (parameter == \"treasury\") {\r\n          require(StabilityFeeTreasuryLike(addr).systemCoin() != address(0), \"RateSetter/treasury-coin-not-set\");\r\n          treasury = StabilityFeeTreasuryLike(addr);\r\n        }\r\n        else if (parameter == \"pidCalculator\") {\r\n          pidCalculator = PIDCalculator(addr);\r\n        }\r\n        else revert(\"RateSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          addr\r\n        );\r\n    }\r\n    function modifyParameters(bytes32 parameter, uint256 val) external isAuthorized {\r\n        require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n        if (parameter == \"baseUpdateCallerReward\") {\r\n          require(val <= maxUpdateCallerReward, \"RateSetter/invalid-base-caller-reward\");\r\n          baseUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"maxUpdateCallerReward\") {\r\n          require(val >= baseUpdateCallerReward, \"RateSetter/invalid-max-caller-reward\");\r\n          maxUpdateCallerReward = val;\r\n        }\r\n        else if (parameter == \"perSecondCallerRewardIncrease\") {\r\n          require(val >= RAY, \"RateSetter/invalid-caller-reward-increase\");\r\n          perSecondCallerRewardIncrease = val;\r\n        }\r\n        else if (parameter == \"maxRewardIncreaseDelay\") {\r\n          require(val > 0, \"RateSetter/invalid-max-increase-delay\");\r\n          maxRewardIncreaseDelay = val;\r\n        }\r\n        else if (parameter == \"updateRateDelay\") {\r\n          require(val >= 0, \"RateSetter/invalid-call-gap-length\");\r\n          updateRateDelay = val;\r\n        }\r\n        else revert(\"RateSetter/modify-unrecognized-param\");\r\n        emit ModifyParameters(\r\n          parameter,\r\n          val\r\n        );\r\n    }\r\n    function disableContract() external isAuthorized {\r\n        contractEnabled = 0;\r\n    }\r\n\r\n    // --- Feedback Mechanism ---\r\n    /**\r\n    * @notice Compute and set a new redemption rate\r\n    * @param feeReceiver The proposed address that should receive the reward for calling this function\r\n    *        (unless it's address(0) in which case msg.sender will get it)\r\n    **/\r\n    function updateRate(address feeReceiver) external {\r\n        require(contractEnabled == 1, \"RateSetter/contract-not-enabled\");\r\n        // Check delay between calls\r\n        require(either(subtract(now, lastUpdateTime) >= updateRateDelay, lastUpdateTime == 0), \"RateSetter/wait-more\");\r\n        // Get price feed updates\r\n        (uint256 marketPrice, bool hasValidValue) = orcl.getResultWithValidity();\r\n        // If the oracle has a value\r\n        require(hasValidValue, \"RateSetter/invalid-oracle-value\");\r\n        // If the price is non-zero\r\n        require(marketPrice > 0, \"RateSetter/null-price\");\r\n        // Get the latest redemption price\r\n        uint redemptionPrice = oracleRelayer.redemptionPrice();\r\n        // Get the caller's reward\r\n        uint256 callerReward = getCallerReward(lastUpdateTime, updateRateDelay);\r\n        // Store the latest market price\r\n        latestMarketPrice = ray(marketPrice);\r\n        // Calculate the rate\r\n        uint256 tlv       = pidCalculator.tlv();\r\n        uint256 iapcr     = rpower(pidCalculator.pscl(), tlv, RAY);\r\n        uint256 validated = pidCalculator.computeRate(\r\n            marketPrice,\r\n            redemptionPrice,\r\n            iapcr\r\n        );\r\n        // Store the timestamp of the update\r\n        lastUpdateTime = now;\r\n        // Update the rate inside the system (if it doesn't throw)\r\n        try oracleRelayer.modifyParameters(\"redemptionRate\", validated) {\r\n          // Emit success event\r\n          emit UpdateRedemptionRate(\r\n            ray(marketPrice),\r\n            redemptionPrice,\r\n            validated\r\n          );\r\n        }\r\n        catch(bytes memory revertReason) {\r\n          emit FailUpdateRedemptionRate(\r\n            revertReason\r\n          );\r\n        }\r\n        // Pay the caller for updating the rate\r\n        rewardCaller(feeReceiver, callerReward);\r\n    }\r\n\r\n    // --- Getters ---\r\n    /**\r\n    * @notice Get the market price from the system coin oracle\r\n    **/\r\n    function getMarketPrice() external view returns (uint256) {\r\n        (uint256 marketPrice, ) = orcl.getResultWithValidity();\r\n        return marketPrice;\r\n    }\r\n    /**\r\n    * @notice Get the redemption and the market prices for the system coin\r\n    **/\r\n    function getRedemptionAndMarketPrices() external returns (uint256 marketPrice, uint256 redemptionPrice) {\r\n        (marketPrice, ) = orcl.getResultWithValidity();\r\n        redemptionPrice = oracleRelayer.redemptionPrice();\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleRelayer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"orcl_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pidCalculator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxUpdateCallerReward_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"perSecondCallerRewardIncrease_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateRateDelay_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FailRewardCaller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"orcl\",\"type\":\"address\"}],\"name\":\"FailUpdateOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"FailUpdateRedemptionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"ModifyParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveAuthorization\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redemptionRate\",\"type\":\"uint256\"}],\"name\":\"UpdateRedemptionRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"addition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorizedAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEnabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defaultDelayBetweenCalls\",\"type\":\"uint256\"}],\"name\":\"getCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRedemptionAndMarketPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMarketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRewardIncreaseDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpdateCallerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"minimum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parameter\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"modifyParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"multiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orcl\",\"outputs\":[{\"internalType\":\"contract OracleLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perSecondCallerRewardIncrease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pidCalculator\",\"outputs\":[{\"internalType\":\"contract PIDCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"rad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"ray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"rmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"base\",\"type\":\"uint256\"}],\"name\":\"rpower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"subtract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"contract StabilityFeeTreasuryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"}],\"name\":\"updateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRateDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wdivide\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"wmultiply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]","ContractName":"RateSetter","CompilerVersion":"v0.6.7+commit.b8d736ae","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004ed9c0dca0479bc64d8f4eb3007126d5791f785100000000000000000000000012a5e1c81b10b264a575930aeae80681ddf595fe00000000000000000000000083533fdd3285f48204215e9cf38c785371258e76000000000000000000000000cfa37dce6dfe80857c3b8dba100b592775ae268800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ac7230489e800000000000000000000000000000000000000000000033b57034a98502542e4fba80000000000000000000000000000000000000000000000000000000000003840","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://b81bb5ef487e55709b1cda124e7fb551d64e88f74359bca2c7fa81e5b640b1f5"}]