[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface smartContract {\r\n    function transfer(address _to, uint256 _value) payable external;\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n}\r\n\r\ncontract Basic is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // This creates an array with all balances\r\n    mapping(address => uint256) public totalAmount;\r\n    mapping(address => uint256) public availableAmount;\r\n    mapping(address => uint256) public withdrawedAmount;\r\n    uint[] public periods;\r\n    uint256 public currentPeriod;\r\n    smartContract public contractAddress;\r\n    uint256 public ownerWithdrawalDate;\r\n\r\n    // fix for short address attack\r\n    modifier onlyPayloadSize(uint size) {\r\n        assert(msg.data.length == size + 4);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * Constructor function\r\n     *\r\n     * transfer tokens to the smart contract here\r\n     */\r\n    function Basic(address _contractAddress) public onlyOwner {\r\n        contractAddress = smartContract(_contractAddress);\r\n    }\r\n\r\n    function _recalculateAvailable(address _addr) internal {\r\n        _updateCurrentPeriod();\r\n        uint256 available;\r\n        uint256 calcPeriod = currentPeriod + 1;\r\n        if (calcPeriod < periods.length) {\r\n            available = totalAmount[_addr].div(periods.length).mul(calcPeriod);\r\n            //you don't have anything to withdraw\r\n            require(available > withdrawedAmount[_addr]);\r\n            //remove already withdrawed tokens\r\n            available = available.sub(withdrawedAmount[_addr]);\r\n        } else {\r\n            available = totalAmount[_addr].sub(withdrawedAmount[_addr]);\r\n        }\r\n        availableAmount[_addr] = available;\r\n    }\r\n\r\n    function addRecipient(address _from, uint256 _amount) external onlyOwner onlyPayloadSize(2 * 32) {\r\n        require(_from != 0x0);\r\n        require(totalAmount[_from] == 0);\r\n        totalAmount[_from] = _amount;\r\n        availableAmount[_from] = 0;\r\n        withdrawedAmount[_from] = 0;\r\n    }\r\n\r\n    function withdraw() public payable {\r\n        _withdraw(msg.sender);\r\n    }\r\n\r\n    function _withdraw(address _addr) internal {\r\n        require(_addr != 0x0);\r\n        require(totalAmount[_addr] > 0);\r\n\r\n        //Recalculate available balance if time has come\r\n        _recalculateAvailable(_addr);\r\n        require(availableAmount[_addr] > 0);\r\n        uint256 available = availableAmount[_addr];\r\n        withdrawedAmount[_addr] = withdrawedAmount[_addr].add(available);\r\n        availableAmount[_addr] = 0;\r\n\r\n        contractAddress.transfer(_addr, available);\r\n    }\r\n\r\n    function triggerWithdraw(address _addr) public payable onlyOwner {\r\n        _withdraw(_addr);\r\n    }\r\n\r\n    // owner may withdraw funds after some period of time\r\n    function withdrawToOwner(uint256 _amount) external onlyOwner {\r\n        // no need to create modifier for one case\r\n        require(now > ownerWithdrawalDate);\r\n        contractAddress.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function _updateCurrentPeriod() internal {\r\n        require(periods.length >= 1);\r\n        for (uint i = 0; i < periods.length; i++) {\r\n            if (periods[i] <= now && i >= currentPeriod) {\r\n                currentPeriod = i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract Partners is Basic{\r\n    function Partners(address _contractAddress) Basic(_contractAddress) public {\r\n        periods = [\r\n            now + 61 days\r\n        ];\r\n        ownerWithdrawalDate = now + 91 days;\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"currentPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"triggerWithdraw\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawedAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ownerWithdrawalDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"periods\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_contractAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"Partners","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000db8d8b76bc361bacbb72e2c491e06085a97ab31","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5dfa28bd813f2c6baab0a9ff7dcedcb563b3b653178aa838522cefdac4c045f2"}]