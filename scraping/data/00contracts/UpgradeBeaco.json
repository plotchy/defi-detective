[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/proxy/UpgradeBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport { TwoStepOwnable } from \\\"../access/TwoStepOwnable.sol\\\";\\n\\n// prettier-ignore\\nimport { \\n    UpgradeBeaconInterface \\n} from \\\"../interfaces/UpgradeBeaconInterface.sol\\\";\\n\\n/**\\n * @title   UpgradeBeacon\\n * @author  OpenSea Protocol Team\\n * @notice  UpgradeBeacon is a ownable contract that is used as a beacon for a\\n *          proxy, to retreive it's implementation.\\n *\\n */\\ncontract UpgradeBeacon is TwoStepOwnable, UpgradeBeaconInterface {\\n    address private _implementation;\\n\\n    /**\\n     * @notice Sets the owner of the beacon as the msg.sender.  Requires\\n     *         the caller to be an approved deployer.\\n     *\\n  \\n     */\\n    constructor() {\\n        // Ensure the origin is an approved deployer.\\n        require(\\n            (tx.origin == address(0x939C8d89EBC11fA45e576215E2353673AD0bA18A) ||\\n                tx.origin ==\\n                address(0xe80a65eB7a3018DedA407e621Ef5fb5B416678CA) ||\\n                tx.origin ==\\n                address(0x86D26897267711ea4b173C8C124a0A73612001da) ||\\n                tx.origin ==\\n                address(0x3B52ad533687Ce908bA0485ac177C5fb42972962)),\\n            \\\"Deployment must originate from an approved deployer.\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Upgrades the beacon to a new implementation. Requires\\n     *         the caller must be the owner, and the new implementation\\n     *         must be a contract.\\n     *\\n     * @param newImplementationAddress The address to be set as the new\\n     *                                 implementation contract.\\n     */\\n    function upgradeTo(address newImplementationAddress)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        _setImplementation(newImplementationAddress);\\n        emit Upgraded(newImplementationAddress);\\n    }\\n\\n    function initialize(address owner_, address implementation_) external {\\n        // Ensure the origin is an approved deployer.\\n        require(\\n            (tx.origin == address(0x939C8d89EBC11fA45e576215E2353673AD0bA18A) ||\\n                tx.origin ==\\n                address(0xe80a65eB7a3018DedA407e621Ef5fb5B416678CA) ||\\n                tx.origin ==\\n                address(0x86D26897267711ea4b173C8C124a0A73612001da) ||\\n                tx.origin ==\\n                address(0x3B52ad533687Ce908bA0485ac177C5fb42972962)) &&\\n                _implementation == address(0),\\n            \\\"Initialize must originate from an approved deployer, and the implementation must not be set.\\\"\\n        );\\n\\n        // Call initialize.\\n        _initialize(owner_, implementation_);\\n    }\\n\\n    function _initialize(address owner_, address implementation_) internal {\\n        // Set the Initial Owner\\n        _setInitialOwner(owner_);\\n\\n        // Set the Implementation\\n        _setImplementation(implementation_);\\n\\n        // Emit the Event\\n        emit Upgraded(implementation_);\\n    }\\n\\n    /**\\n     * @notice This function returns the address to the implentation contract.\\n     */\\n    function implementation() external view override returns (address) {\\n        return _implementation;\\n    }\\n\\n    /**\\n     * @notice Sets the implementation contract address for this beacon.\\n     *         Requires the address to be a contract.\\n     *\\n     * @param newImplementationAddress The address to be set as the new\\n     *                                 implementation contract.\\n     */\\n    function _setImplementation(address newImplementationAddress) internal {\\n        if (address(newImplementationAddress).code.length == 0) {\\n            revert InvalidImplementation(newImplementationAddress);\\n        }\\n        _implementation = newImplementationAddress;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/TwoStepOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../interfaces/TwoStepOwnableInterface.sol\\\";\\n\\n/**\\n * @title   TwoStepOwnable\\n * @author  OpenSea Protocol Team\\n * @notice  TwoStepOwnable is a module which provides access control\\n *          where the ownership of a contract can be exchanged via a\\n *          two step process. A potential owner is set by the current\\n *          owner using transferOwnership, then accepted by the new\\n *          potential owner using acceptOwnership.\\n */\\ncontract TwoStepOwnable is TwoStepOwnableInterface {\\n    // The address of the owner.\\n    address private _owner;\\n\\n    // The address of the new potential owner.\\n    address private _potentialOwner;\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        // Ensure the caller is the owner.\\n        if (msg.sender != _owner) {\\n            revert CallerIsNotOwner();\\n        }\\n        // Continue with function execution.\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initiate ownership transfer by assigning a new potential owner\\n     *         to this contract. Once set, the new potential owner may call\\n     *         `acceptOwnership` to claim ownership. Only the owner may call\\n     *         this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        // Ensure the new potential owner is not an invalid address.\\n        if (newPotentialOwner == address(0)) {\\n            revert NewPotentialOwnerIsNullAddress();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been updated.\\n        emit PotentialOwnerUpdated(newPotentialOwner);\\n\\n        // Set the new potential owner as the potential owner.\\n        _potentialOwner = newPotentialOwner;\\n    }\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any.\\n     *         Only the owner of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external override onlyOwner {\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner.\\n        delete _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external override {\\n        // Ensure the caller is the potential owner.\\n        if (msg.sender != _potentialOwner) {\\n            // Revert, indicating that caller is not current potential owner.\\n            revert CallerIsNotNewPotentialOwner();\\n        }\\n\\n        // Emit an event indicating that the potential owner has been cleared.\\n        emit PotentialOwnerUpdated(address(0));\\n\\n        // Clear the current new potential owner.\\n        delete _potentialOwner;\\n\\n        // Emit an event indicating ownership has been transferred.\\n        emit OwnershipTransferred(_owner, msg.sender);\\n\\n        // Set the caller as the owner of this contract.\\n        _owner = msg.sender;\\n    }\\n\\n    /**\\n     * @notice An external view function that returns the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view override returns (address) {\\n        return _potentialOwner;\\n    }\\n\\n    /**\\n     * @notice A public view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() public view override returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Internal function that sets the inital owner of the\\n     *         base contract. The initial owner must not be set\\n     *         previously.\\n     *\\n     * @param initialOwner The address to set for initial ownership.\\n     */\\n    function _setInitialOwner(address initialOwner) internal {\\n        // Ensure the initial owner is not an invalid address.\\n        if (initialOwner == address(0)) {\\n            revert InitialOwnerIsNullAddress();\\n        }\\n\\n        // Ensure the owner has not already been set.\\n        if (_owner != address(0)) {\\n            revert OwnerAlreadySet(_owner);\\n        }\\n\\n        // Emit an event indicating ownership has been set.\\n        emit OwnershipTransferred(address(0), initialOwner);\\n\\n        // Set the initial owner.\\n        _owner = initialOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/UpgradeBeaconInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title   UpgradeBeaconInterface\\n * @notice  UpgradeBeaconInterface contains all external function\\n *          interfaces, events and errors related to the payable proxy.\\n */\\ninterface UpgradeBeaconInterface {\\n    /**\\n     * @dev Emit an event whenever the implementation has been upgraded.\\n     *\\n     * @param implementation  The new implementation address.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Revert with an error when attempting to call an operation\\n     *      while the caller is not the owner of the proxy.\\n     */\\n    error InvalidOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to set an non-contract\\n     *      address as the implementation.\\n     */\\n    error InvalidImplementation(address newImplementationAddress);\\n\\n    /**\\n     * @notice Upgrades the beacon to a new implementation. Requires\\n     *         the caller must be the owner, and the new implementation\\n     *         must be a contract.\\n     *\\n     * @param newImplementationAddress The address to be set as the new\\n     *                                 implementation contract.\\n     */\\n    function upgradeTo(address newImplementationAddress) external;\\n\\n    /**\\n     * @notice An external view function that returns the implementation.\\n     *\\n     * @return The address of the implementation.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/TwoStepOwnableInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/**\\n * @title   TwoStepOwnableInterface\\n * @author  OpenSea Protocol Team\\n * @notice  TwoStepOwnableInterface contains all external function interfaces,\\n *          events and errors for the two step ownable access control module.\\n */\\ninterface TwoStepOwnableInterface {\\n    /**\\n     * @dev Emit an event whenever the contract owner registers a\\n     *      new potential owner.\\n     *\\n     * @param newPotentialOwner The new potential owner of the contract.\\n     */\\n    event PotentialOwnerUpdated(address newPotentialOwner);\\n\\n    /**\\n     * @dev Emit an event whenever contract ownership is transferred.\\n     *\\n     * @param previousOwner The previous owner of the contract.\\n     * @param newOwner      The new owner of the contract.\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to set an owner\\n     *      that is already set.\\n     */\\n    error OwnerAlreadySet(address currentOwner);\\n\\n    /**\\n     * @dev Revert with an error when attempting to set the initial\\n     *      owner and supplying the null address.\\n     */\\n    error InitialOwnerIsNullAddress();\\n\\n    /**\\n     * @dev Revert with an error when attempting to call an operation\\n     *      while the caller is not the owner.\\n     */\\n    error CallerIsNotOwner();\\n\\n    /**\\n     * @dev Revert with an error when attempting to register a new potential\\n     *      owner and supplying the null address.\\n     */\\n    error NewPotentialOwnerIsNullAddress();\\n\\n    /**\\n     * @dev Revert with an error when attempting to claim ownership of the\\n     *      contract with a caller that is not the current potential owner.\\n     */\\n    error CallerIsNotNewPotentialOwner();\\n\\n    /**\\n     * @notice Initiate ownership transfer by assigning a new potential owner\\n     *         to this contract. Once set, the new potential owner may call\\n     *         `acceptOwnership` to claim ownership. Only the owner may call\\n     *         this function.\\n     *\\n     * @param newPotentialOwner The address for which to initiate ownership\\n     *                          transfer to.\\n     */\\n    function transferOwnership(address newPotentialOwner) external;\\n\\n    /**\\n     * @notice Clear the currently set potential owner, if any.\\n     *         Only the owner of this contract may call this function.\\n     */\\n    function cancelOwnershipTransfer() external;\\n\\n    /**\\n     * @notice Accept ownership of this contract. Only the account that the\\n     *         current owner has set as the new potential owner may call this\\n     *         function.\\n     */\\n    function acceptOwnership() external;\\n\\n    /**\\n     * @notice An external view function that returns the potential owner.\\n     *\\n     * @return The address of the potential owner.\\n     */\\n    function potentialOwner() external view returns (address);\\n\\n    /**\\n     * @notice An external view function that returns the owner.\\n     *\\n     * @return The address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 19066\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotNewPotentialOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewPotentialOwnerIsNullAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"name\":\"OwnerAlreadySet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"PotentialOwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"potentialOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementationAddress\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"UpgradeBeacon","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"19066","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]