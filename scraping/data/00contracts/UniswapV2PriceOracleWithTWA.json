[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/oracle/UniswapV2PriceOracleWithTWAP.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IPriceOracle.sol\\\";\\nimport \\\"../interfaces/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\ninterface IUniswapTWAPOracle {\\n  function pair() external view returns (address);\\n\\n  function quote(\\n    address tokenIn,\\n    uint256 amountIn,\\n    address tokenOut,\\n    uint256 points\\n  ) external view returns (uint256 amountOut, uint256 lastUpdatedAgo);\\n}\\n\\ncontract UniswapV2PriceOracleWithTWAP is Ownable, IPriceOracle {\\n  using SafeMath for uint256;\\n\\n  event UpdatePair(address indexed asset, address pair);\\n  event UpdateTWAP(address indexed asset, address pair);\\n  event UpdateMaxPriceDiff(address indexed asset, uint256 maxPriceDiff);\\n  event UpdateMaxTimestampDelta(uint256 maxTimestampDelta);\\n\\n  // The address of Chainlink Oracle\\n  address public immutable chainlink;\\n\\n  // The address base token.\\n  address public immutable base;\\n\\n  // Mapping from asset address to uniswap v2 like pair.\\n  mapping(address => address) public pairs;\\n\\n  // Mapping from pair address to twap address.\\n  mapping(address => address) public twaps;\\n\\n  // The max price diff between spot price and twap price.\\n  mapping(address => uint256) public maxPriceDiff;\\n\\n  // The max timestamp delta between current block and twap last updated timestamp.\\n  uint256 public maxTimestampDelta = 24 * 60 * 60;\\n\\n  /// @param _chainlink The address of chainlink oracle.\\n  /// @param _base The address of base token.\\n  constructor(address _chainlink, address _base) {\\n    require(_chainlink != address(0), \\\"UniswapV2PriceOracleWithTWAP: zero address\\\");\\n    require(_base != address(0), \\\"UniswapV2PriceOracleWithTWAP: zero address\\\");\\n\\n    chainlink = _chainlink;\\n    base = _base;\\n  }\\n\\n  /// @dev Return the usd price of asset. mutilpled by 1e18\\n  /// @param _asset The address of asset\\n  function price(address _asset) public view override returns (uint256) {\\n    address _pair = pairs[_asset];\\n    require(_pair != address(0), \\\"UniswapV2PriceOracleWithTWAP: not supported\\\");\\n\\n    address _base = base;\\n    uint256 _basePrice = IPriceOracle(chainlink).price(_base);\\n    (uint256 _reserve0, uint256 _reserve1, ) = IUniswapV2Pair(_pair).getReserves();\\n    address _token0 = IUniswapV2Pair(_pair).token0();\\n    address _token1 = IUniswapV2Pair(_pair).token1();\\n\\n    // validate price\\n    if (_asset == _token0) {\\n      _validate(_pair, _base, _asset, _reserve1, _reserve0);\\n    } else {\\n      _validate(_pair, _base, _asset, _reserve0, _reserve1);\\n    }\\n\\n    // make reserve with scale 1e18\\n    if (IERC20Metadata(_token0).decimals() < 18) {\\n      _reserve0 = _reserve0.mul(10**(18 - IERC20Metadata(_token0).decimals()));\\n    }\\n    if (IERC20Metadata(_token1).decimals() < 18) {\\n      _reserve1 = _reserve1.mul(10**(18 - IERC20Metadata(_token1).decimals()));\\n    }\\n\\n    if (_asset == _token0) {\\n      return _basePrice.mul(_reserve1).div(_reserve0);\\n    } else {\\n      return _basePrice.mul(_reserve0).div(_reserve1);\\n    }\\n  }\\n\\n  /// @dev Return the usd value of asset. mutilpled by 1e18\\n  /// @param _asset The address of asset\\n  /// @param _amount The amount of asset\\n  function value(address _asset, uint256 _amount) external view override returns (uint256) {\\n    uint256 _price = price(_asset);\\n    return _price.mul(_amount).div(10**IERC20Metadata(_asset).decimals());\\n  }\\n\\n  /// @dev Update the UniswapV2 pair for asset\\n  /// @param _asset The address of asset\\n  /// @param _pair The address of UniswapV2 pair\\n  function updatePair(address _asset, address _pair) external onlyOwner {\\n    require(_pair != address(0), \\\"UniswapV2PriceOracleWithTWAP: invalid pair\\\");\\n\\n    address _base = base;\\n    require(_base != _asset, \\\"UniswapV2PriceOracleWithTWAP: invalid asset\\\");\\n\\n    address _token0 = IUniswapV2Pair(_pair).token0();\\n    address _token1 = IUniswapV2Pair(_pair).token1();\\n    require(_token0 == _asset || _token1 == _asset, \\\"UniswapV2PriceOracleWithTWAP: invalid pair\\\");\\n    require(_token0 == _base || _token1 == _base, \\\"UniswapV2PriceOracleWithTWAP: invalid pair\\\");\\n\\n    pairs[_asset] = _pair;\\n\\n    emit UpdatePair(_asset, _pair);\\n  }\\n\\n  /// @dev Update the TWAP Oracle address for UniswapV2 pair\\n  /// @param _pair The address of UniswapV2 pair\\n  /// @param _twap The address of twap oracle.\\n  function updateTWAP(address _pair, address _twap) external onlyOwner {\\n    require(IUniswapTWAPOracle(_twap).pair() == _pair, \\\"UniswapV2PriceOracleWithTWAP: invalid twap\\\");\\n\\n    twaps[_pair] = _twap;\\n\\n    emit UpdateTWAP(_pair, _twap);\\n  }\\n\\n  /// @dev Update the max price diff between spot price and twap price.\\n  /// @param _asset The address of asset.\\n  /// @param _maxPriceDiff The max price diff.\\n  function updatePriceDiff(address _asset, uint256 _maxPriceDiff) external onlyOwner {\\n    require(_maxPriceDiff <= 2e17, \\\"UniswapV2PriceOracleWithTWAP: should <= 20%\\\");\\n\\n    maxPriceDiff[_asset] = _maxPriceDiff;\\n\\n    emit UpdateMaxPriceDiff(_asset, _maxPriceDiff);\\n  }\\n\\n  /// @dev Update max timestamp delta between current block and twap last updated timestamp.\\n  /// @param _maxTimestampDelta The value of max timestamp delta, in seconds.\\n  function updateMaxTimestampDelta(uint256 _maxTimestampDelta) external onlyOwner {\\n    maxTimestampDelta = _maxTimestampDelta;\\n\\n    emit UpdateMaxTimestampDelta(_maxTimestampDelta);\\n  }\\n\\n  function _validate(\\n    address _pair,\\n    address _base,\\n    address _asset,\\n    uint256 _reserveBase,\\n    uint256 _reserveAsset\\n  ) internal view {\\n    address _twap = twaps[_pair];\\n    // skip check if twap not available, usually will be used in test.\\n    if (_twap == address(0)) return;\\n    uint256 _priceDiff = maxPriceDiff[_asset];\\n    uint256 _unitAmount = 10**IERC20Metadata(_asset).decimals();\\n\\n    // number of base token that 1 asset can swap right now.\\n    uint256 _amount = _reserveBase.mul(_unitAmount).div(_reserveAsset);\\n    // number of base token that 1 asset can swap in twap.\\n    (uint256 _twapAmount, uint256 _lastUpdatedAgo) = IUniswapTWAPOracle(_twap).quote(_asset, _unitAmount, _base, 2);\\n\\n    require(_lastUpdatedAgo <= maxTimestampDelta, \\\"UniswapV2PriceOracleWithTWAP: twap price too old\\\");\\n    require(_amount >= _twapAmount.mul(1e18 - _priceDiff).div(1e18), \\\"UniswapV2PriceOracleWithTWAP: price too small\\\");\\n    require(_amount <= _twapAmount.mul(1e18 + _priceDiff).div(1e18), \\\"UniswapV2PriceOracleWithTWAP: price too large\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IPriceOracle {\\n  /// @dev Return the usd price of asset. mutilpled by 1e18\\n  /// @param _asset The address of asset\\n  function price(address _asset) external view returns (uint256);\\n\\n  /// @dev Return the usd value of asset. mutilpled by 1e18\\n  /// @param _asset The address of asset\\n  /// @param _amount The amount of asset\\n  function value(address _asset, uint256 _amount) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IERC20Metadata {\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IUniswapV2Pair {\\n  function totalSupply() external view returns (uint256);\\n\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n\\n  function getReserves()\\n    external\\n    view\\n    returns (\\n      uint112 reserve0,\\n      uint112 reserve1,\\n      uint32 blockTimestampLast\\n    );\\n\\n  function price0CumulativeLast() external view returns (uint256);\\n\\n  function price1CumulativeLast() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlink\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_base\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceDiff\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxPriceDiff\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTimestampDelta\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTimestampDelta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"UpdatePair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"UpdateTWAP\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"base\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlink\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxPriceDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTimestampDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"twaps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTimestampDelta\",\"type\":\"uint256\"}],\"name\":\"updateMaxTimestampDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceDiff\",\"type\":\"uint256\"}],\"name\":\"updatePriceDiff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_twap\",\"type\":\"address\"}],\"name\":\"updateTWAP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"UniswapV2PriceOracleWithTWAP","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"0000000000000000000000007f751e35afe72775ec88e74386bbc9b68214153e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]