[{"SourceCode":"{\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"AmberVittoriaXSaveTheDate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/***\\r\\n *  \\r\\n *  8\\\"\\\"\\\"\\\"8                      \\r\\n *  8      eeeee ee   e eeee    \\r\\n *  8eeeee 8   8 88   8 8       \\r\\n *      88 8eee8 88  e8 8eee    \\r\\n *  e   88 88  8  8  8  88      \\r\\n *  8eee88 88  8  8ee8  88ee    \\r\\n *  \\\"\\\"8\\\"\\\"                       \\r\\n *    8   e   e eeee            \\r\\n *    8e  8   8 8               \\r\\n *    88  8eee8 8eee            \\r\\n *    88  88  8 88              \\r\\n *    88  88  8 88ee            \\r\\n *  8\\\"\\\"\\\"\\\"8                      \\r\\n *  8    8 eeeee eeeee eeee     \\r\\n *  8e   8 8   8   8   8        \\r\\n *  88   8 8eee8   8e  8eee     \\r\\n *  88   8 88  8   88  88       \\r\\n *  88eee8 88  8   88  88ee     \\r\\n *  \\r\\n */\\r\\npragma solidity \\u003e=0.8.9 \\u003c0.9.0;\\r\\n\\r\\nimport \\u0027./ERC721AQueryable.sol\\u0027;\\r\\nimport \\u0027./MerkleProof.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./ReentrancyGuard.sol\\u0027;\\r\\nimport \\u0027./RefundContract.sol\\u0027;\\r\\nimport \\u0027./ERC2981.sol\\u0027;\\r\\n\\r\\ncontract AmberVittoriaXSaveTheDate is ERC721AQueryable, Ownable, ReentrancyGuard, ERC2981 {\\r\\n  using Strings for uint256;\\r\\n\\r\\n  event NftsMinted(address owner, uint256[] std_ids, uint256 currentIndex, uint256 mintAmount);\\r\\n\\r\\n  mapping(uint256 =\\u003e bool) public freelistClaimed;\\r\\n  string public uriPrefix = \\u0027\\u0027;\\r\\n  uint256 public maxSupply = 18000;\\r\\n  uint256 public maxMintAmountPerTx = 1;\\r\\n  uint256 public cost = 0 ether;\\r\\n  bytes32 public merkleRoot;\\r\\n\\r\\n  string  public tokenName = \\\"Amber Vittoria X Save The Date\\\";\\r\\n  string  public tokenSymbol = \\\"AVXSTD\\\";\\r\\n  bool public paused = true;\\r\\n  bool public whitelistMintEnabled = false;\\r\\n\\r\\n  IERC721 internal saveTheDateContract;\\r\\n  RefundContract internal refundContract;\\r\\n  string internal uriSuffix = \\u0027.json\\u0027;  \\r\\n\\r\\n  constructor(string memory baseURI, address _saveTheDateContract, address _refundContract) ERC721A(tokenName, tokenSymbol) {\\r\\n    setUriPrefix(baseURI);\\r\\n    saveTheDateContract = IERC721(_saveTheDateContract);\\r\\n    refundContract = RefundContract(_refundContract);\\r\\n  }\\r\\n\\r\\n  modifier mintCompliance(uint256 _mintAmount) {\\r\\n    require(_mintAmount \\u003e 0 \\u0026\\u0026 _mintAmount \\u003c= maxMintAmountPerTx, \\u0027Invalid mint amount!\\u0027);\\r\\n    require(totalSupply() + _mintAmount \\u003c= maxSupply, \\u0027Max supply exceeded!\\u0027);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier mintPriceCompliance(uint256 _mintAmount) {\\r\\n    require(msg.value \\u003e= cost * _mintAmount, \\u0027Insufficient funds!\\u0027);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function mint(uint256 std_id) public payable mintCompliance(1) mintPriceCompliance(1) {\\r\\n    require(!paused, \\u0027The contract is paused!\\u0027);\\r\\n    require(!freelistClaimed[std_id], \\u0027Token already claimed!\\u0027);\\r\\n    address _owner = saveTheDateContract.ownerOf(std_id);\\r\\n    require(_owner == msg.sender, \\\"Must be an owner to mint\\\");\\r\\n    safeMint(_msgSender(), std_id);\\r\\n    freelistClaimed[std_id] = true;\\r\\n    refundContract.claimReward(std_id);\\r\\n  }\\r\\n\\r\\n  function safeMint(address to, uint256 std_id) internal {\\r\\n    uint256[] memory tmp = new uint256[](1);\\r\\n    tmp[0] = std_id;\\r\\n    bulkSafeMint(to, tmp);\\r\\n    delete tmp;\\r\\n  }\\r\\n\\r\\n  function bulkSafeMint(address to, uint256[] memory std_ids) internal {\\r\\n    uint256 currentIndex = _currentIndex;\\r\\n    uint256 amount = std_ids.length;\\r\\n    _safeMint(to, amount);\\r\\n    emit NftsMinted(to, std_ids, currentIndex, amount);\\r\\n  }\\r\\n\\r\\n function internalMint(uint256[] memory std_ids) external onlyOwner  {\\r\\n    require(totalSupply() + std_ids.length \\u003c= maxSupply, \\u0027Max supply exceeded!\\u0027);\\r\\n    bulkSafeMint(_msgSender(), std_ids);\\r\\n  }\\r\\n   \\r\\n  function mintForAddress(uint256[] memory std_ids, address _receiver) public onlyOwner {\\r\\n    require(totalSupply() + std_ids.length \\u003c= maxSupply, \\u0027Max supply exceeded!\\u0027);\\r\\n    bulkSafeMint(_receiver, std_ids);\\r\\n  }\\r\\n\\r\\n  function mintForAddresses(uint256[] memory std_ids, address[] memory _addresses) public onlyOwner {\\r\\n    uint256[] memory tmp = new uint256[](1);\\r\\n    for (uint i = 0; i \\u003c std_ids.length; i++) {\\r\\n      tmp[0] = std_ids[i];\\r\\n      mintForAddress(tmp, _addresses[i]);\\r\\n    }\\r\\n    delete tmp;\\r\\n  }\\r\\n\\r\\n  function _startTokenId() internal view virtual override returns (uint256) {\\r\\n    return 1;\\r\\n  }\\r\\n\\r\\n  function setMaxSupply(uint256 _maxSupply) public onlyOwner {\\r\\n    maxSupply = _maxSupply;\\r\\n  }\\r\\n\\r\\n  function setMaxMintAmountPerTx(uint256 _maxMintAmountPerTx) public onlyOwner {\\r\\n    maxMintAmountPerTx = _maxMintAmountPerTx;\\r\\n  }\\r\\n\\r\\n  function setUriPrefix(string memory _uriPrefix) public onlyOwner {\\r\\n    uriPrefix = _uriPrefix;\\r\\n  }\\r\\n\\r\\n  function setUriSuffix(string memory _uriSuffix) public onlyOwner {\\r\\n    uriSuffix = _uriSuffix;\\r\\n  }\\r\\n\\r\\n  function setCost(uint256 _cost) public onlyOwner {\\r\\n    cost = _cost;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool _state) public onlyOwner {\\r\\n    paused = _state;\\r\\n  }\\r\\n\\r\\n  function setRoyaltyInfo(address payable receiver, uint96 numerator) public onlyOwner {\\r\\n    _setDefaultRoyalty(receiver, numerator);\\r\\n  }\\r\\n\\r\\n  function withdraw() public onlyOwner nonReentrant {\\r\\n    (bool os, ) = payable(owner()).call{value: address(this).balance}(\\u0027\\u0027);\\r\\n    require(os);\\r\\n  }\\r\\n\\r\\n  function _baseURI() internal view virtual override returns (string memory) {\\r\\n    return uriPrefix;\\r\\n  } \\r\\n\\r\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, ERC2981) returns (bool) {\\r\\n    return ERC721A.supportsInterface(interfaceId) || ERC2981.supportsInterface(interfaceId);\\r\\n  }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\"},\"ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./ERC165.sol\\u0027;\\r\\nimport \\u0027./IERC2981.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\r\\n *\\r\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\r\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\r\\n *\\r\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\r\\n * fee is specified in basis points by default.\\r\\n *\\r\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\r\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\r\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\r\\n *\\r\\n * _Available since v4.5._\\r\\n */\\r\\nabstract contract ERC2981 is IERC2981, ERC165 {\\r\\n    struct RoyaltyInfo {\\r\\n        address receiver;\\r\\n        uint96 royaltyFraction;\\r\\n    }\\r\\n\\r\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\r\\n    mapping(uint256 =\\u003e RoyaltyInfo) private _tokenRoyaltyInfo;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\r\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @inheritdoc IERC2981\\r\\n     */\\r\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\r\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\r\\n\\r\\n        if (royalty.receiver == address(0)) {\\r\\n            royalty = _defaultRoyaltyInfo;\\r\\n        }\\r\\n\\r\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\r\\n\\r\\n        return (royalty.receiver, royaltyAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\r\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\r\\n     * override.\\r\\n     */\\r\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\r\\n        return 10000;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `receiver` cannot be the zero address.\\r\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\r\\n     */\\r\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\r\\n        require(feeNumerator \\u003c= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\r\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\r\\n\\r\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes default royalty information.\\r\\n     */\\r\\n    function _deleteDefaultRoyalty() internal virtual {\\r\\n        delete _defaultRoyaltyInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `receiver` cannot be the zero address.\\r\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\r\\n     */\\r\\n    function _setTokenRoyalty(\\r\\n        uint256 tokenId,\\r\\n        address receiver,\\r\\n        uint96 feeNumerator\\r\\n    ) internal virtual {\\r\\n        require(feeNumerator \\u003c= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\r\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\r\\n\\r\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Resets royalty information for the token id back to the global default.\\r\\n     */\\r\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\r\\n        delete _tokenRoyaltyInfo[tokenId];\\r\\n    }\\r\\n}\"},\"ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v3.3.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC721A.sol\\u0027;\\r\\nimport \\u0027./IERC721Receiver.sol\\u0027;\\r\\nimport \\u0027./Address.sol\\u0027;\\r\\nimport \\u0027./Context.sol\\u0027;\\r\\nimport \\u0027./Strings.sol\\u0027;\\r\\nimport \\u0027./ERC165.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension. Built to optimize for lower gas during batch mints.\\r\\n *\\r\\n * Assumes serials are sequentially minted starting at _startTokenId() (defaults to 0, e.g. 0, 1, 2, 3..).\\r\\n *\\r\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\r\\n *\\r\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\r\\n */\\r\\ncontract ERC721A is Context, ERC165, IERC721A {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // The tokenId of the next token to be minted.\\r\\n    uint256 internal _currentIndex;\\r\\n\\r\\n    // The number of tokens burned.\\r\\n    uint256 internal _burnCounter;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to ownership details\\r\\n    // An empty struct value does not necessarily mean the token is unowned. See _ownershipOf implementation for details.\\r\\n    mapping(uint256 =\\u003e TokenOwnership) internal _ownerships;\\r\\n\\r\\n    // Mapping owner address to address data\\r\\n    mapping(address =\\u003e AddressData) private _addressData;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _currentIndex = _startTokenId();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * To change the starting tokenId, please override this function.\\r\\n     */\\r\\n    function _startTokenId() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burned tokens are calculated here, use _totalMinted() if you want to count just minted tokens.\\r\\n     */\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\r\\n        // more than _currentIndex - _startTokenId() times\\r\\n        unchecked {\\r\\n            return _currentIndex - _burnCounter - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the total amount of tokens minted in the contract.\\r\\n     */\\r\\n    function _totalMinted() internal view returns (uint256) {\\r\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\r\\n        // and it is initialized to _startTokenId()\\r\\n        unchecked {\\r\\n            return _currentIndex - _startTokenId();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view override returns (uint256) {\\r\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\r\\n        return uint256(_addressData[owner].balance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens minted by `owner`.\\r\\n     */\\r\\n    function _numberMinted(address owner) internal view returns (uint256) {\\r\\n        return uint256(_addressData[owner].numberMinted);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\r\\n     */\\r\\n    function _numberBurned(address owner) internal view returns (uint256) {\\r\\n        return uint256(_addressData[owner].numberBurned);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     */\\r\\n    function _getAux(address owner) internal view returns (uint64) {\\r\\n        return _addressData[owner].aux;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the auxillary data for `owner`. (e.g. number of whitelist mint slots used).\\r\\n     * If there are multiple variables, please pack them into a uint64.\\r\\n     */\\r\\n    function _setAux(address owner, uint64 aux) internal {\\r\\n        _addressData[owner].aux = aux;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\r\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\r\\n     */\\r\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\r\\n        uint256 curr = tokenId;\\r\\n\\r\\n        unchecked {\\r\\n            if (_startTokenId() \\u003c= curr) if (curr \\u003c _currentIndex) {\\r\\n                TokenOwnership memory ownership = _ownerships[curr];\\r\\n                if (!ownership.burned) {\\r\\n                    if (ownership.addr != address(0)) {\\r\\n                        return ownership;\\r\\n                    }\\r\\n                    // Invariant:\\r\\n                    // There will always be an ownership that has an address and is not burned\\r\\n                    // before an ownership that does not have an address and is not burned.\\r\\n                    // Hence, curr will not underflow.\\r\\n                    while (true) {\\r\\n                        curr--;\\r\\n                        ownership = _ownerships[curr];\\r\\n                        if (ownership.addr != address(0)) {\\r\\n                            return ownership;\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        revert OwnerQueryForNonexistentToken();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\r\\n        return _ownershipOf(tokenId).addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\u0027\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\u0027\\u0027;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public override {\\r\\n        address owner = ERC721A.ownerOf(tokenId);\\r\\n        if (to == owner) revert ApprovalToCurrentOwner();\\r\\n\\r\\n        if (_msgSender() != owner) if(!isApprovedForAll(owner, _msgSender())) {\\r\\n            revert ApprovalCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _approve(to, tokenId, owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\r\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        if (operator == _msgSender()) revert ApproveToCaller();\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\u0027\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        _transfer(from, to, tokenId);\\r\\n        if (to.isContract()) if(!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\r\\n            revert TransferToNonERC721ReceiverImplementer();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\r\\n        return _startTokenId() \\u003c= tokenId \\u0026\\u0026 tokenId \\u003c _currentIndex \\u0026\\u0026 !_ownerships[tokenId].burned;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_safeMint(to, quantity, \\u0027\\u0027)`.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 quantity) internal {\\r\\n        _safeMint(to, quantity, \\u0027\\u0027);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - If `to` refers to a smart contract, it must implement\\r\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 quantity,\\r\\n        bytes memory _data\\r\\n    ) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            _addressData[to].balance += uint64(quantity);\\r\\n            _addressData[to].numberMinted += uint64(quantity);\\r\\n\\r\\n            _ownerships[startTokenId].addr = to;\\r\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            if (to.isContract()) {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex);\\r\\n                    if (!_checkContractOnERC721Received(address(0), to, updatedIndex++, _data)) {\\r\\n                        revert TransferToNonERC721ReceiverImplementer();\\r\\n                    }\\r\\n                } while (updatedIndex \\u003c end);\\r\\n                // Reentrancy protection\\r\\n                if (_currentIndex != startTokenId) revert();\\r\\n            } else {\\r\\n                do {\\r\\n                    emit Transfer(address(0), to, updatedIndex++);\\r\\n                } while (updatedIndex \\u003c end);\\r\\n            }\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `quantity` must be greater than 0.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 quantity) internal {\\r\\n        uint256 startTokenId = _currentIndex;\\r\\n        if (to == address(0)) revert MintToZeroAddress();\\r\\n        if (quantity == 0) revert MintZeroQuantity();\\r\\n\\r\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n\\r\\n        // Overflows are incredibly unrealistic.\\r\\n        // balance or numberMinted overflow if current value of either + quantity \\u003e 1.8e19 (2**64) - 1\\r\\n        // updatedIndex overflows if _currentIndex + quantity \\u003e 1.2e77 (2**256) - 1\\r\\n        unchecked {\\r\\n            _addressData[to].balance += uint64(quantity);\\r\\n            _addressData[to].numberMinted += uint64(quantity);\\r\\n\\r\\n            _ownerships[startTokenId].addr = to;\\r\\n            _ownerships[startTokenId].startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            uint256 updatedIndex = startTokenId;\\r\\n            uint256 end = updatedIndex + quantity;\\r\\n\\r\\n            do {\\r\\n                emit Transfer(address(0), to, updatedIndex++);\\r\\n            } while (updatedIndex \\u003c end);\\r\\n\\r\\n            _currentIndex = updatedIndex;\\r\\n        }\\r\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\r\\n\\r\\n        if (prevOwnership.addr != from) revert TransferFromIncorrectOwner();\\r\\n\\r\\n        bool isApprovedOrOwner = (_msgSender() == from ||\\r\\n            isApprovedForAll(from, _msgSender()) ||\\r\\n            getApproved(tokenId) == _msgSender());\\r\\n\\r\\n        if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        if (to == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, from);\\r\\n\\r\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\r\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            _addressData[from].balance -= 1;\\r\\n            _addressData[to].balance += 1;\\r\\n\\r\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\r\\n            currSlot.addr = to;\\r\\n            currSlot.startTimestamp = uint64(block.timestamp);\\r\\n\\r\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the transfer initiator owns it.\\r\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n            uint256 nextTokenId = tokenId + 1;\\r\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\r\\n            if (nextSlot.addr == address(0)) {\\r\\n                // This will suffice for checking _exists(nextTokenId),\\r\\n                // as a burned slot cannot contain the zero address.\\r\\n                if (nextTokenId != _currentIndex) {\\r\\n                    nextSlot.addr = from;\\r\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n        _afterTokenTransfers(from, to, tokenId, 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        _burn(tokenId, false);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\r\\n        TokenOwnership memory prevOwnership = _ownershipOf(tokenId);\\r\\n\\r\\n        address from = prevOwnership.addr;\\r\\n\\r\\n        if (approvalCheck) {\\r\\n            bool isApprovedOrOwner = (_msgSender() == from ||\\r\\n                isApprovedForAll(from, _msgSender()) ||\\r\\n                getApproved(tokenId) == _msgSender());\\r\\n\\r\\n            if (!isApprovedOrOwner) revert TransferCallerNotOwnerNorApproved();\\r\\n        }\\r\\n\\r\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId, from);\\r\\n\\r\\n        // Underflow of the sender\\u0027s balance is impossible because we check for\\r\\n        // ownership above and the recipient\\u0027s balance can\\u0027t realistically overflow.\\r\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\r\\n        unchecked {\\r\\n            AddressData storage addressData = _addressData[from];\\r\\n            addressData.balance -= 1;\\r\\n            addressData.numberBurned += 1;\\r\\n\\r\\n            // Keep track of who burned the token, and the timestamp of burning.\\r\\n            TokenOwnership storage currSlot = _ownerships[tokenId];\\r\\n            currSlot.addr = from;\\r\\n            currSlot.startTimestamp = uint64(block.timestamp);\\r\\n            currSlot.burned = true;\\r\\n\\r\\n            // If the ownership slot of tokenId+1 is not explicitly set, that means the burn initiator owns it.\\r\\n            // Set the slot of tokenId+1 explicitly in storage to maintain correctness for ownerOf(tokenId+1) calls.\\r\\n            uint256 nextTokenId = tokenId + 1;\\r\\n            TokenOwnership storage nextSlot = _ownerships[nextTokenId];\\r\\n            if (nextSlot.addr == address(0)) {\\r\\n                // This will suffice for checking _exists(nextTokenId),\\r\\n                // as a burned slot cannot contain the zero address.\\r\\n                if (nextTokenId != _currentIndex) {\\r\\n                    nextSlot.addr = from;\\r\\n                    nextSlot.startTimestamp = prevOwnership.startTimestamp;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, address(0), tokenId);\\r\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\r\\n\\r\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\r\\n        unchecked {\\r\\n            _burnCounter++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        address owner\\r\\n    ) private {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(owner, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkContractOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n            return retval == IERC721Receiver(to).onERC721Received.selector;\\r\\n        } catch (bytes memory reason) {\\r\\n            if (reason.length == 0) {\\r\\n                revert TransferToNonERC721ReceiverImplementer();\\r\\n            } else {\\r\\n                assembly {\\r\\n                    revert(add(32, reason), mload(reason))\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\r\\n     * And also called before burning one token.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _beforeTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\r\\n     * minting.\\r\\n     * And also called after one token has been burned.\\r\\n     *\\r\\n     * startTokenId - the first token id to be transferred\\r\\n     * quantity - the amount to be transferred\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, `from`\\u0027s `tokenId` has been\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\r\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     */\\r\\n    function _afterTokenTransfers(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 startTokenId,\\r\\n        uint256 quantity\\r\\n    ) internal virtual {}\\r\\n}\"},\"ERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v3.3.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC721AQueryable.sol\\u0027;\\r\\nimport \\u0027./ERC721A.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @title ERC721A Queryable\\r\\n * @dev ERC721A subclass with convenience query functions.\\r\\n */\\r\\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\\r\\n    /**\\r\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\r\\n     *\\r\\n     * If the `tokenId` is out of bounds:\\r\\n     *   - `addr` = `address(0)`\\r\\n     *   - `startTimestamp` = `0`\\r\\n     *   - `burned` = `false`\\r\\n     *\\r\\n     * If the `tokenId` is burned:\\r\\n     *   - `addr` = `\\u003cAddress of owner before token was burned\\u003e`\\r\\n     *   - `startTimestamp` = `\\u003cTimestamp when token was burned\\u003e`\\r\\n     *   - `burned = `true`\\r\\n     *\\r\\n     * Otherwise:\\r\\n     *   - `addr` = `\\u003cAddress of owner\\u003e`\\r\\n     *   - `startTimestamp` = `\\u003cTimestamp of start of ownership\\u003e`\\r\\n     *   - `burned = `false`\\r\\n     */\\r\\n    function explicitOwnershipOf(uint256 tokenId) public view override returns (TokenOwnership memory) {\\r\\n        TokenOwnership memory ownership;\\r\\n        if (tokenId \\u003c _startTokenId() || tokenId \\u003e= _currentIndex) {\\r\\n            return ownership;\\r\\n        }\\r\\n        ownership = _ownerships[tokenId];\\r\\n        if (ownership.burned) {\\r\\n            return ownership;\\r\\n        }\\r\\n        return _ownershipOf(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\r\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\r\\n     */\\r\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view override returns (TokenOwnership[] memory) {\\r\\n        unchecked {\\r\\n            uint256 tokenIdsLength = tokenIds.length;\\r\\n            TokenOwnership[] memory ownerships = new TokenOwnership[](tokenIdsLength);\\r\\n            for (uint256 i; i != tokenIdsLength; ++i) {\\r\\n                ownerships[i] = explicitOwnershipOf(tokenIds[i]);\\r\\n            }\\r\\n            return ownerships;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of token IDs owned by `owner`,\\r\\n     * in the range [`start`, `stop`)\\r\\n     * (i.e. `start \\u003c= tokenId \\u003c stop`).\\r\\n     *\\r\\n     * This function allows for tokens to be queried if the collection\\r\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `start` \\u003c `stop`\\r\\n     */\\r\\n    function tokensOfOwnerIn(\\r\\n        address owner,\\r\\n        uint256 start,\\r\\n        uint256 stop\\r\\n    ) external view override returns (uint256[] memory) {\\r\\n        unchecked {\\r\\n            if (start \\u003e= stop) revert InvalidQueryRange();\\r\\n            uint256 tokenIdsIdx;\\r\\n            uint256 stopLimit = _currentIndex;\\r\\n            // Set `start = max(start, _startTokenId())`.\\r\\n            if (start \\u003c _startTokenId()) {\\r\\n                start = _startTokenId();\\r\\n            }\\r\\n            // Set `stop = min(stop, _currentIndex)`.\\r\\n            if (stop \\u003e stopLimit) {\\r\\n                stop = stopLimit;\\r\\n            }\\r\\n            uint256 tokenIdsMaxLength = balanceOf(owner);\\r\\n            // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\\r\\n            // to cater for cases where `balanceOf(owner)` is too big.\\r\\n            if (start \\u003c stop) {\\r\\n                uint256 rangeLength = stop - start;\\r\\n                if (rangeLength \\u003c tokenIdsMaxLength) {\\r\\n                    tokenIdsMaxLength = rangeLength;\\r\\n                }\\r\\n            } else {\\r\\n                tokenIdsMaxLength = 0;\\r\\n            }\\r\\n            uint256[] memory tokenIds = new uint256[](tokenIdsMaxLength);\\r\\n            if (tokenIdsMaxLength == 0) {\\r\\n                return tokenIds;\\r\\n            }\\r\\n            // We need to call `explicitOwnershipOf(start)`,\\r\\n            // because the slot at `start` may not be initialized.\\r\\n            TokenOwnership memory ownership = explicitOwnershipOf(start);\\r\\n            address currOwnershipAddr;\\r\\n            // If the starting slot exists (i.e. not burned), initialize `currOwnershipAddr`.\\r\\n            // `ownership.address` will not be zero, as `start` is clamped to the valid token ID range.\\r\\n            if (!ownership.burned) {\\r\\n                currOwnershipAddr = ownership.addr;\\r\\n            }\\r\\n            for (uint256 i = start; i != stop \\u0026\\u0026 tokenIdsIdx != tokenIdsMaxLength; ++i) {\\r\\n                ownership = _ownerships[i];\\r\\n                if (ownership.burned) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (ownership.addr != address(0)) {\\r\\n                    currOwnershipAddr = ownership.addr;\\r\\n                }\\r\\n                if (currOwnershipAddr == owner) {\\r\\n                    tokenIds[tokenIdsIdx++] = i;\\r\\n                }\\r\\n            }\\r\\n            // Downsize the array to fit.\\r\\n            assembly {\\r\\n                mstore(tokenIds, tokenIdsIdx)\\r\\n            }\\r\\n            return tokenIds;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of token IDs owned by `owner`.\\r\\n     *\\r\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\r\\n     * It is meant to be called off-chain.\\r\\n     *\\r\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\r\\n     * multiple smaller scans if the collection is large enough to cause\\r\\n     * an out-of-gas error (10K pfp collections should be fine).\\r\\n     */\\r\\n    function tokensOfOwner(address owner) external view override returns (uint256[] memory) {\\r\\n        unchecked {\\r\\n            uint256 tokenIdsIdx;\\r\\n            address currOwnershipAddr;\\r\\n            uint256 tokenIdsLength = balanceOf(owner);\\r\\n            uint256[] memory tokenIds = new uint256[](tokenIdsLength);\\r\\n            TokenOwnership memory ownership;\\r\\n            for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ++i) {\\r\\n                ownership = _ownerships[i];\\r\\n                if (ownership.burned) {\\r\\n                    continue;\\r\\n                }\\r\\n                if (ownership.addr != address(0)) {\\r\\n                    currOwnershipAddr = ownership.addr;\\r\\n                }\\r\\n                if (currOwnershipAddr == owner) {\\r\\n                    tokenIds[tokenIdsIdx++] = i;\\r\\n                }\\r\\n            }\\r\\n            return tokenIds;\\r\\n        }\\r\\n    }\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"},\"IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./IERC165.sol\\u0027;\\r\\n/**\\r\\n * @dev Interface for the NFT Royalty Standard.\\r\\n *\\r\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\r\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\r\\n *\\r\\n * _Available since v4.5._\\r\\n */\\r\\ninterface IERC2981 is IERC165 {\\r\\n    /**\\r\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\r\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\r\\n     */\\r\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\r\\n        external\\r\\n        view\\r\\n        returns (address receiver, uint256 royaltyAmount);\\r\\n}\"},\"IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\"},\"IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v3.3.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC721.sol\\u0027;\\r\\nimport \\u0027./IERC721Metadata.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev Interface of an ERC721A compliant contract.\\r\\n */\\r\\ninterface IERC721A is IERC721, IERC721Metadata {\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error ApprovalCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error ApprovalQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller cannot approve to their own address.\\r\\n     */\\r\\n    error ApproveToCaller();\\r\\n\\r\\n    /**\\r\\n     * The caller cannot approve to the current owner.\\r\\n     */\\r\\n    error ApprovalToCurrentOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot query the balance for the zero address.\\r\\n     */\\r\\n    error BalanceQueryForZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * Cannot mint to the zero address.\\r\\n     */\\r\\n    error MintToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The quantity of tokens minted must be more than zero.\\r\\n     */\\r\\n    error MintZeroQuantity();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error OwnerQueryForNonexistentToken();\\r\\n\\r\\n    /**\\r\\n     * The caller must own the token or be an approved operator.\\r\\n     */\\r\\n    error TransferCallerNotOwnerNorApproved();\\r\\n\\r\\n    /**\\r\\n     * The token must be owned by `from`.\\r\\n     */\\r\\n    error TransferFromIncorrectOwner();\\r\\n\\r\\n    /**\\r\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\r\\n     */\\r\\n    error TransferToNonERC721ReceiverImplementer();\\r\\n\\r\\n    /**\\r\\n     * Cannot transfer to the zero address.\\r\\n     */\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    /**\\r\\n     * The token does not exist.\\r\\n     */\\r\\n    error URIQueryForNonexistentToken();\\r\\n\\r\\n    // Compiler will pack this into a single 256bit word.\\r\\n    struct TokenOwnership {\\r\\n        // The address of the owner.\\r\\n        address addr;\\r\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\r\\n        uint64 startTimestamp;\\r\\n        // Whether the token has been burned.\\r\\n        bool burned;\\r\\n    }\\r\\n\\r\\n    // Compiler will pack this into a single 256bit word.\\r\\n    struct AddressData {\\r\\n        // Realistically, 2**64-1 is more than enough.\\r\\n        uint64 balance;\\r\\n        // Keeps track of mint count with minimal overhead for tokenomics.\\r\\n        uint64 numberMinted;\\r\\n        // Keeps track of burn count with minimal overhead for tokenomics.\\r\\n        uint64 numberBurned;\\r\\n        // For miscellaneous variable(s) pertaining to the address\\r\\n        // (e.g. number of whitelist mint slots used).\\r\\n        // If there are multiple variables, please pack them into a uint64.\\r\\n        uint64 aux;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     * \\r\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\"},\"IERC721AQueryable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// ERC721A Contracts v3.3.0\\r\\n// Creator: Chiru Labs\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\u0027./IERC721A.sol\\u0027;\\r\\n\\r\\n/**\\r\\n * @dev Interface of an ERC721AQueryable compliant contract.\\r\\n */\\r\\ninterface IERC721AQueryable is IERC721A {\\r\\n    /**\\r\\n     * Invalid query range (`start` \\u003e= `stop`).\\r\\n     */\\r\\n    error InvalidQueryRange();\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\r\\n     *\\r\\n     * If the `tokenId` is out of bounds:\\r\\n     *   - `addr` = `address(0)`\\r\\n     *   - `startTimestamp` = `0`\\r\\n     *   - `burned` = `false`\\r\\n     *\\r\\n     * If the `tokenId` is burned:\\r\\n     *   - `addr` = `\\u003cAddress of owner before token was burned\\u003e`\\r\\n     *   - `startTimestamp` = `\\u003cTimestamp when token was burned\\u003e`\\r\\n     *   - `burned = `true`\\r\\n     *\\r\\n     * Otherwise:\\r\\n     *   - `addr` = `\\u003cAddress of owner\\u003e`\\r\\n     *   - `startTimestamp` = `\\u003cTimestamp of start of ownership\\u003e`\\r\\n     *   - `burned = `false`\\r\\n     */\\r\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\r\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\r\\n     */\\r\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of token IDs owned by `owner`,\\r\\n     * in the range [`start`, `stop`)\\r\\n     * (i.e. `start \\u003c= tokenId \\u003c stop`).\\r\\n     *\\r\\n     * This function allows for tokens to be queried if the collection\\r\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `start` \\u003c `stop`\\r\\n     */\\r\\n    function tokensOfOwnerIn(\\r\\n        address owner,\\r\\n        uint256 start,\\r\\n        uint256 stop\\r\\n    ) external view returns (uint256[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an array of token IDs owned by `owner`.\\r\\n     *\\r\\n     * This function scans the ownership mapping and is O(totalSupply) in complexity.\\r\\n     * It is meant to be called off-chain.\\r\\n     *\\r\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\r\\n     * multiple smaller scans if the collection is large enough to cause\\r\\n     * an out-of-gas error (10K pfp collections should be fine).\\r\\n     */\\r\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\r\\n}\"},\"IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC721.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\"},\"IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\"},\"MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/MerkleProof.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev These functions deal with verification of Merkle Trees proofs.\\r\\n *\\r\\n * The proofs can be generated using the JavaScript library\\r\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\r\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\r\\n *\\r\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\r\\n */\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs \\u0026 pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i \\u003c proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            if (computedHash \\u003c= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = _efficientHash(computedHash, proofElement);\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = _efficientHash(proofElement, computedHash);\\r\\n            }\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n\\r\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\r\\n        assembly {\\r\\n            mstore(0x00, a)\\r\\n            mstore(0x20, b)\\r\\n            value := keccak256(0x00, 0x40)\\r\\n        }\\r\\n    }\\r\\n}\"},\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\"},\"ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot\\u0027s contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler\\u0027s defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction\\u0027s gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n}\"},\"RefundContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n/***\\r\\n *  \\r\\n *  8\\\"\\\"\\\"\\\"8                      \\r\\n *  8      eeeee ee   e eeee    \\r\\n *  8eeeee 8   8 88   8 8       \\r\\n *      88 8eee8 88  e8 8eee    \\r\\n *  e   88 88  8  8  8  88      \\r\\n *  8eee88 88  8  8ee8  88ee    \\r\\n *  \\\"\\\"8\\\"\\\"                       \\r\\n *    8   e   e eeee            \\r\\n *    8e  8   8 8               \\r\\n *    88  8eee8 8eee            \\r\\n *    88  88  8 88              \\r\\n *    88  88  8 88ee            \\r\\n *  8\\\"\\\"\\\"\\\"8                      \\r\\n *  8    8 eeeee eeeee eeee     \\r\\n *  8e   8 8   8   8   8        \\r\\n *  88   8 8eee8   8e  8eee     \\r\\n *  88   8 88  8   88  88       \\r\\n *  88eee8 88  8   88  88ee     \\r\\n *  \\r\\n */\\r\\npragma solidity \\u003e=0.8.9 \\u003c0.9.0;\\r\\n\\r\\nimport \\u0027./IERC721.sol\\u0027;\\r\\nimport \\u0027./Ownable.sol\\u0027;\\r\\nimport \\u0027./MerkleProof.sol\\u0027;\\r\\nimport \\u0027./ReentrancyGuard.sol\\u0027;\\r\\nimport \\u0027./Strings.sol\\u0027;\\r\\nimport \\u0027./IERC721Receiver.sol\\u0027;\\r\\n\\r\\n\\r\\ncontract RefundContract is Ownable, ReentrancyGuard, IERC721Receiver {\\r\\n  using Strings for uint256;\\r\\n  using Strings for address;\\r\\n\\r\\n  event DateRefunded(address owner, uint256 tokenId);\\r\\n\\r\\n    bytes32 public merkleRoot;\\r\\n    bool public paused = true;\\r\\n    uint256 public refundPrice = 0.07 ether;\\r\\n    address public rewardsContractAddress;\\r\\n    mapping(uint256 =\\u003e bool) public claimedRewardTokens;\\r\\n\\r\\n    IERC721 saveTheDateContract;\\r\\n\\r\\n    constructor(address _saveTheDateContract) {\\r\\n      saveTheDateContract = IERC721(_saveTheDateContract);\\r\\n    }\\r\\n\\r\\n  function refund(uint256 _tokenId, bytes32[] calldata _merkleProof) public nonReentrant {\\r\\n    require(!paused, \\u0027The contract is paused!\\u0027);\\r\\n    verifyWhitelistRequirements(_tokenId, _merkleProof);\\r\\n    require(!claimedRewardTokens[_tokenId], \\u0027Token claimed reward already\\u0027);\\r\\n    address _owner = saveTheDateContract.ownerOf(_tokenId);\\r\\n    require(_owner == msg.sender, \\\"Must be an owner to get refund\\\");\\r\\n    saveTheDateContract.transferFrom(msg.sender, address(this), _tokenId);\\r\\n    payable(msg.sender).transfer(refundPrice);\\r\\n    emit DateRefunded(_owner, _tokenId);\\r\\n    delete _owner;\\r\\n  }\\r\\n\\r\\n  function claimReward(uint256 _tokenId) public {\\r\\n    require(rewardsContractAddress == msg.sender, \\\"Must be rewardsContractAddress to mark the token as claimed\\\");\\r\\n    claimedRewardTokens[_tokenId] = true;\\r\\n  }\\r\\n\\r\\n  function claimRewards(uint256[] calldata _tokenIds) public {\\r\\n    require(rewardsContractAddress == msg.sender, \\\"Must be rewardsContractAddress to mark the token as claimed\\\");\\r\\n    for (uint256 i = 0; i \\u003c _tokenIds.length; i++) {\\r\\n      claimedRewardTokens[_tokenIds[i]] = true;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function verifyWhitelistRequirements(uint256 _tokenId, bytes32[] calldata _merkleProof) public view { \\r\\n    bytes32 leaf = keccak256(buildMerkleLeaf(_tokenId));\\r\\n    require(MerkleProof.verify(_merkleProof, merkleRoot, leaf), \\u0027Invalid proof!\\u0027);\\r\\n  }\\r\\n\\r\\n  function deposit() public payable onlyOwner {\\r\\n  }\\r\\n\\r\\n  function setSaveTheDateContract(address _contractAddress) public onlyOwner {\\r\\n    saveTheDateContract = IERC721(_contractAddress);\\r\\n  }\\r\\n\\r\\n  function setRewardsContractAddress(address _rewardsContractAddress) public onlyOwner {\\r\\n    rewardsContractAddress = _rewardsContractAddress;\\r\\n  }\\r\\n\\r\\n  function setMerkleRoot(bytes32 _merkleRoot) public onlyOwner {\\r\\n    merkleRoot = _merkleRoot;\\r\\n  }\\r\\n\\r\\n  function setPaused(bool _state) public onlyOwner {\\r\\n    paused = _state;\\r\\n  }\\r\\n\\r\\n  function setRefundPrice(uint256 _refundPrice) public onlyOwner {\\r\\n    refundPrice = _refundPrice;\\r\\n  }\\r\\n\\r\\n  function withdraw() public onlyOwner nonReentrant {\\r\\n    (bool os, ) = payable(owner()).call{value: address(this).balance}(\\u0027\\u0027);\\r\\n    require(os);\\r\\n  }\\r\\n\\r\\n  function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4)\\r\\n    {\\r\\n      return bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"));\\r\\n    }\\r\\n\\r\\n  function buildMerkleLeaf(uint256 _tokenId) internal view returns(bytes memory){ \\r\\n    return abi.encodePacked(_msgSender().toString(), \\\"-\\\", _tokenId.toString());\\r\\n  }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function toHexString(bytes memory data) internal pure returns(string memory) {\\r\\n        bytes memory str = new bytes(2 + data.length * 2);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        for (uint i = 0; i \\u003c data.length; i++) {\\r\\n          str[2+i*2] = _HEX_SYMBOLS[uint(uint8(data[i] \\u003e\\u003e 4))];\\r\\n            str[3+i*2] = _HEX_SYMBOLS[uint(uint8(data[i] \\u0026 0x0f))];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n   function toString(address account) internal pure returns(string memory) {\\r\\n    return toHexString(abi.encodePacked(account));\\r\\n   }\\r\\n}\"}}","ABI":"[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_saveTheDateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_refundContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalToCurrentOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceQueryForZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidQueryRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerQueryForNonexistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferCallerNotOwnerNorApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromIncorrectOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"URIQueryForNonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"std_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"NftsMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"explicitOwnershipOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721A.TokenOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"explicitOwnershipsOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"startTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"burned\",\"type\":\"bool\"}],\"internalType\":\"struct IERC721A.TokenOwnership[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"freelistClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"std_ids\",\"type\":\"uint256[]\"}],\"name\":\"internalMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmountPerTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"std_id\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"std_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"mintForAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"std_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"mintForAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMintAmountPerTx\",\"type\":\"uint256\"}],\"name\":\"setMaxMintAmountPerTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"numerator\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriPrefix\",\"type\":\"string\"}],\"name\":\"setUriPrefix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uriSuffix\",\"type\":\"string\"}],\"name\":\"setUriSuffix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"tokensOfOwnerIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uriPrefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"AmberVittoriaXSaveTheDate","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000005e90ae496c133b2c22286767a20907b8fed8818000000000000000000000000e80f06f7ceb7f295643f1e83418d21f53c94fcd2000000000000000000000000000000000000000000000000000000000000002d687474703a2f2f6170692e776861746973796f7572646174652e78797a2f6d657461646174612f616d6265722f00000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://8a981a2a75d360ab5563697f60c0934f1e7a5e967fcdaacc46327dfbfac0604c"}]