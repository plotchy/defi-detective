[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/facets/signature/EIP712PropositionFacet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IEIP712Proposition} from \\\"../../interfaces/IEIP712Proposition.sol\\\";\\nimport {LibEIP712Proposition} from \\\"../../libraries/LibEIP712Proposition.sol\\\";\\nimport {IWallet} from \\\"../../interfaces/IWallet.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev Please see `IEIP712Proposition` for docs\\ncontract EIP712PropositionFacet is IEIP712Proposition {\\n    function verifyPropositionSigner(\\n        address signer,\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) external view override returns (bool) {\\n        return\\n            LibEIP712Proposition._verifyPropositionSigner(\\n                signer,\\n                proposition,\\n                signature\\n            );\\n    }\\n\\n    function recoverPropositionSigner(\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) external view override returns (address) {\\n        return\\n            LibEIP712Proposition._recoverPropositionSigner(\\n                proposition,\\n                signature\\n            );\\n    }\\n\\n    function hashProposition(IWallet.Proposition memory proposition)\\n        external\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        return LibEIP712Proposition._hashProposition(proposition);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEIP712Proposition.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IWallet} from \\\"./IWallet.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev EIP712 Proposition struct signature verification for Antic domain\\ninterface IEIP712Proposition {\\n    /// @param signer the account you want to check that signed\\n    /// @param proposition the proposition to verify\\n    /// @param signature the supposed signature of `signer` on `proposition`\\n    /// @return true if `signer` signed `proposition` using `signature`\\n    function verifyPropositionSigner(\\n        address signer,\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) external view returns (bool);\\n\\n    /// @param proposition the proposition\\n    /// @param signature the account's signature on `proposition`\\n    /// @return the address that signed on `proposition`\\n    function recoverPropositionSigner(\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) external view returns (address);\\n\\n    function hashProposition(IWallet.Proposition memory proposition)\\n        external\\n        pure\\n        returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWallet.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title Multisig wallet interface\\n/// @author Amit Molek\\ninterface IWallet {\\n    struct Transaction {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    struct Proposition {\\n        /// @dev Proposition's deadline\\n        uint256 endsAt;\\n        /// @dev Proposed transaction to execute\\n        Transaction tx;\\n        /// @dev can be useful if your `transaction` needs an accompanying hash.\\n        /// For example in EIP1271 `isValidSignature` function.\\n        /// Note: Pass zero hash (0x0) if you don't need this.\\n        bytes32 relevantHash;\\n    }\\n\\n    /// @dev Emitted on proposition execution\\n    /// @param hash the transaction's hash\\n    /// @param value the value passed with `transaction`\\n    /// @param successful is the transaction were successfully executed\\n    event ExecutedTransaction(\\n        bytes32 indexed hash,\\n        uint256 value,\\n        bool successful\\n    );\\n\\n    /// @notice Execute proposition\\n    /// @param proposition the proposition to enact\\n    /// @param signatures a set of members EIP712 signatures on `proposition`\\n    /// @dev Emits `ExecutedTransaction` and `ApprovedHash` (only if `relevantHash` is passed) events\\n    /// @return successful true if the `proposition`'s transaction executed successfully\\n    /// @return returnData the data returned from the transaction\\n    function enactProposition(\\n        Proposition memory proposition,\\n        bytes[] memory signatures\\n    ) external returns (bool successful, bytes memory returnData);\\n\\n    /// @return true, if the proposition has been enacted\\n    function isPropositionEnacted(bytes32 propositionHash)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @return the maximum amount of value allowed to be transferred out of the contract\\n    function maxAllowedTransfer() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibEIP712.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {StorageAnticDomain} from \\\"../storage/StorageAnticDomain.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev Please see `IEIP712` for docs\\n/// Also please make sure you are familiar with EIP712 before editing anything\\nlibrary LibEIP712 {\\n    bytes32 internal constant _DOMAIN_NAME = keccak256(\\\"Antic\\\");\\n    bytes32 internal constant _DOMAIN_VERSION = keccak256(\\\"1\\\");\\n    bytes32 internal constant _SALT = keccak256(\\\"Magrathea\\\");\\n\\n    bytes32 internal constant _EIP712_DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract,bytes32 salt)\\\"\\n        );\\n\\n    /// @dev Initializes the EIP712's domain separator\\n    /// note Must be called at least once, because it saves the\\n    /// domain separator in storage\\n    function _initDomainSeparator() internal {\\n        StorageAnticDomain.DiamondStorage storage ds = StorageAnticDomain\\n            .diamondStorage();\\n\\n        ds.domainSeparator = keccak256(\\n            abi.encode(\\n                _EIP712_DOMAIN_TYPEHASH,\\n                _DOMAIN_NAME,\\n                _DOMAIN_VERSION,\\n                _chainId(),\\n                _verifyingContract(),\\n                _salt()\\n            )\\n        );\\n    }\\n\\n    function _toTypedDataHash(bytes32 messageHash)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return ECDSA.toTypedDataHash(_domainSeparator(), messageHash);\\n    }\\n\\n    function _domainSeparator() internal view returns (bytes32) {\\n        StorageAnticDomain.DiamondStorage storage ds = StorageAnticDomain\\n            .diamondStorage();\\n\\n        return ds.domainSeparator;\\n    }\\n\\n    function _chainId() internal view returns (uint256 id) {\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function _verifyingContract() internal view returns (address) {\\n        return address(this);\\n    }\\n\\n    function _salt() internal pure returns (bytes32) {\\n        return _SALT;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibEIP712Proposition.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IWallet} from \\\"../interfaces/IWallet.sol\\\";\\nimport {LibEIP712} from \\\"./LibEIP712.sol\\\";\\nimport {LibSignature} from \\\"./LibSignature.sol\\\";\\nimport {LibEIP712Transaction} from \\\"./LibEIP712Transaction.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev Please see `IEIP712Proposition` for docs\\n/// Also please make sure you are familiar with EIP712 before editing anything\\nlibrary LibEIP712Proposition {\\n    bytes32 internal constant _PROPOSITION_TYPEHASH =\\n        keccak256(\\n            \\\"Proposition(uint256 endsAt,Transaction tx,bytes32 relevantHash)Transaction(address to,uint256 value,bytes data)\\\"\\n        );\\n\\n    function _verifyPropositionSigner(\\n        address signer,\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        return\\n            LibSignature._verifySigner(\\n                signer,\\n                LibEIP712._toTypedDataHash(_hashProposition(proposition)),\\n                signature\\n            );\\n    }\\n\\n    function _recoverPropositionSigner(\\n        IWallet.Proposition memory proposition,\\n        bytes memory signature\\n    ) internal view returns (address) {\\n        return\\n            LibSignature._recoverSigner(\\n                LibEIP712._toTypedDataHash(_hashProposition(proposition)),\\n                signature\\n            );\\n    }\\n\\n    function _hashProposition(IWallet.Proposition memory proposition)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _PROPOSITION_TYPEHASH,\\n                    proposition.endsAt,\\n                    LibEIP712Transaction._hashTransaction(proposition.tx),\\n                    proposition.relevantHash\\n                )\\n            );\\n    }\\n\\n    function _toTypedDataHash(IWallet.Proposition memory proposition)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return LibEIP712._toTypedDataHash(_hashProposition(proposition));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibEIP712Transaction.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {IWallet} from \\\"../interfaces/IWallet.sol\\\";\\nimport {LibEIP712} from \\\"./LibEIP712.sol\\\";\\nimport {LibSignature} from \\\"./LibSignature.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev Please see `IEIP712Transaction` for docs\\n/// Also please make sure you are familiar with EIP712 before editing anything\\nlibrary LibEIP712Transaction {\\n    bytes32 internal constant _TRANSACTION_TYPEHASH =\\n        keccak256(\\\"Transaction(address to,uint256 value,bytes data)\\\");\\n\\n    function _verifyTransactionSigner(\\n        address signer,\\n        IWallet.Transaction memory transaction,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        return\\n            LibSignature._verifySigner(\\n                signer,\\n                LibEIP712._toTypedDataHash(_hashTransaction(transaction)),\\n                signature\\n            );\\n    }\\n\\n    function _recoverTransactionSigner(\\n        IWallet.Transaction memory transaction,\\n        bytes memory signature\\n    ) internal view returns (address) {\\n        return\\n            LibSignature._recoverSigner(\\n                LibEIP712._toTypedDataHash(_hashTransaction(transaction)),\\n                signature\\n            );\\n    }\\n\\n    function _hashTransaction(IWallet.Transaction memory transaction)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _TRANSACTION_TYPEHASH,\\n                    transaction.to,\\n                    transaction.value,\\n                    keccak256(transaction.data)\\n                )\\n            );\\n    }\\n\\n    function _toTypedDataHash(IWallet.Transaction memory transaction)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return LibEIP712._toTypedDataHash(_hashTransaction(transaction));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/LibSignature.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @author Amit Molek\\n/// @dev Please see `ISignature` for docs\\nlibrary LibSignature {\\n    function _verifySigner(\\n        address signer,\\n        bytes32 hashToVerify,\\n        bytes memory signature\\n    ) internal pure returns (bool) {\\n        return (signer == _recoverSigner(hashToVerify, signature));\\n    }\\n\\n    function _recoverSigner(bytes32 hash, bytes memory signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return ECDSA.recover(hash, signature);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/StorageAnticDomain.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Amit Molek\\n/// @dev Diamond compatible storage for EIP712's domain separator\\nlibrary StorageAnticDomain {\\n    struct DiamondStorage {\\n        bytes32 domainSeparator;\\n    }\\n\\n    bytes32 public constant DIAMOND_STORAGE_POSITION =\\n        keccak256(\\\"antic.storage.AnticDomain\\\");\\n\\n    function diamondStorage()\\n        internal\\n        pure\\n        returns (DiamondStorage storage ds)\\n    {\\n        bytes32 storagePosition = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := storagePosition\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWallet.Transaction\",\"name\":\"tx\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"relevantHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWallet.Proposition\",\"name\":\"proposition\",\"type\":\"tuple\"}],\"name\":\"hashProposition\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWallet.Transaction\",\"name\":\"tx\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"relevantHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWallet.Proposition\",\"name\":\"proposition\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recoverPropositionSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"endsAt\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IWallet.Transaction\",\"name\":\"tx\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"relevantHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IWallet.Proposition\",\"name\":\"proposition\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifyPropositionSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"EIP712PropositionFacet","CompilerVersion":"v0.8.16+commit.07a7930e","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":""}]