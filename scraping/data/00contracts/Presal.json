[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// File: contracts/IPricingStrategy.sol\r\n\r\ninterface IPricingStrategy {\r\n\r\n    function isPricingStrategy() public view returns (bool);\r\n\r\n    /** Calculate the current price for buy in amount. */\r\n    function calculateTokenAmount(uint weiAmount, uint tokensSold) public view returns (uint tokenAmount);\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/token/ERC223.sol\r\n\r\ncontract ERC223 is ERC20 {\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool);\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\r\n}\r\n\r\n// File: contracts/token/TokenReciever.sol\r\n\r\n/*\r\n * Contract that is working with ERC223 tokens\r\n */\r\n \r\n contract TokenReciever {\r\n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\r\n\r\n/**\r\n * @title Contactable token\r\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\r\n * contact information.\r\n */\r\ncontract Contactable is Ownable{\r\n\r\n    string public contactInformation;\r\n\r\n    /**\r\n     * @dev Allows the owner to set a string with their contact information.\r\n     * @param info The contact information to attach to the contract.\r\n     */\r\n    function setContactInformation(string info) onlyOwner public {\r\n         contactInformation = info;\r\n     }\r\n}\r\n\r\n// File: contracts/token/PlayHallToken.sol\r\n\r\ncontract PlayHallToken is ERC223, Contactable {\r\n    using SafeMath for uint;\r\n\r\n    string constant public name = \"PlayHall Token\";\r\n    string constant public symbol = \"PHT\";\r\n    uint constant public decimals = 18;\r\n\r\n    bool public isActivated = false;\r\n\r\n    mapping (address => uint) balances;\r\n    mapping (address => mapping (address => uint)) internal allowed;\r\n    mapping (address => bool) public freezedList;\r\n    \r\n    // address, who is allowed to issue new tokens (presale and sale contracts)\r\n    address public minter;\r\n\r\n    bool public mintingFinished = false;\r\n\r\n    event Mint(address indexed to, uint amount);\r\n    event MintingFinished();\r\n\r\n    modifier onlyMinter() {\r\n        require(msg.sender == minter);\r\n        _;\r\n    }\r\n\r\n    modifier canMint() {\r\n        require(!mintingFinished);\r\n        _;\r\n    }\r\n\r\n    modifier whenActivated() {\r\n        require(isActivated);\r\n        _;\r\n    }\r\n\r\n    function PlayHallToken() public {\r\n        minter = msg.sender;\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transfer(_to, _value, empty);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token for a specified address\r\n    * @param _to The address to transfer to.\r\n    * @param _value The amount to be transferred.\r\n    * @param _data Optional metadata.\r\n    */\r\n    function transfer(address _to, uint _value, bytes _data) public whenActivated returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[msg.sender]);\r\n        require(!freezedList[msg.sender]);\r\n\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        if (isContract(_to)) {\r\n            TokenReciever receiver = TokenReciever(_to);\r\n            receiver.tokenFallback(msg.sender, _value, _data);\r\n        }\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param _owner The address to query the the balance of.\r\n    * @return An uint representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\r\n        bytes memory empty;\r\n        return transferFrom(_from, _to, _value, empty);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from\r\n     * @param _to address The address which you want to transfer to\r\n     * @param _value uint the amount of tokens to be transferred\r\n     * @param _data Optional metadata.\r\n     */\r\n    function transferFrom(address _from, address _to, uint _value, bytes _data) public whenActivated returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        require(!freezedList[_from]);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        if (isContract(_to)) {\r\n            TokenReciever receiver = TokenReciever(_to);\r\n            receiver.tokenFallback(_from, _value, _data);\r\n        }\r\n\r\n        Transfer(_from, _to, _value);\r\n        Transfer(_from, _to, _value, _data);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     *\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     */\r\n    function approve(address _spender, uint _value) public returns (bool) {\r\n        require(_value == 0 || allowed[msg.sender][_spender] == 0);\r\n        allowed[msg.sender][_spender] = _value;\r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param _owner address The address which owns the funds.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @return A uint specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address _owner, address _spender) public view returns (uint) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     *\r\n     * approve should be called when allowed[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n        uint oldValue = allowed[msg.sender][_spender];\r\n        if (_subtractedValue > oldValue) {\r\n            allowed[msg.sender][_spender] = 0;\r\n        } else {\r\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n        }\r\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n        return true;\r\n    }\r\n\r\n      /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     * @return A boolean that indicates if the operation was successful.\r\n     */\r\n    function mint(address _to, uint _amount, bool freeze) canMint onlyMinter external returns (bool) {\r\n        totalSupply = totalSupply.add(_amount);\r\n        balances[_to] = balances[_to].add(_amount);\r\n        if (freeze) {\r\n            freezedList[_to] = true;\r\n        }\r\n        Mint(_to, _amount);\r\n        Transfer(address(0), _to, _amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stop minting new tokens.\r\n     * @return True if the operation was successful.\r\n     */\r\n    function finishMinting() canMint onlyMinter external returns (bool) {\r\n        mintingFinished = true;\r\n        MintingFinished();\r\n        return true;\r\n    }\r\n    \r\n    /**\r\n     * Minter can pass it's role to another address\r\n     */\r\n    function setMinter(address _minter) external onlyMinter {\r\n        require(_minter != 0x0);\r\n        minter = _minter;\r\n    }\r\n\r\n    /**\r\n     * Owner can unfreeze any address\r\n     */\r\n    function removeFromFreezedList(address user) external onlyOwner {\r\n        freezedList[user] = false;\r\n    }\r\n\r\n    /**\r\n     * Activation of the token allows all tokenholders to operate with the token\r\n     */\r\n    function activate() external onlyOwner returns (bool) {\r\n        isActivated = true;\r\n        return true;\r\n    }\r\n\r\n    function isContract(address _addr) private view returns (bool) {\r\n        uint length;\r\n        assembly {\r\n              //retrieve the size of the code on target address, this needs assembly\r\n              length := extcodesize(_addr)\r\n        }\r\n        return (length>0);\r\n    }\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    Unpause();\r\n  }\r\n}\r\n\r\n// File: contracts/SaleBase.sol\r\n\r\ncontract SaleBase is Pausable, Contactable {\r\n    using SafeMath for uint;\r\n  \r\n    // The token being sold\r\n    PlayHallToken public token;\r\n  \r\n    // start and end timestamps where purchases are allowed (both inclusive)\r\n    uint public startTime;\r\n    uint public endTime;\r\n  \r\n    // address where funds are collected\r\n    address public wallet;\r\n  \r\n    // the contract, which determine how many token units a buyer gets per wei\r\n    IPricingStrategy public pricingStrategy;\r\n  \r\n    // amount of raised money in wei\r\n    uint public weiRaised;\r\n\r\n    // amount of tokens that was sold on the crowdsale\r\n    uint public tokensSold;\r\n\r\n    // maximum amount of wei in total, that can be bought\r\n    uint public weiMaximumGoal;\r\n\r\n    // if weiMinimumGoal will not be reached till endTime, buyers will be able to refund ETH\r\n    uint public weiMinimumGoal;\r\n\r\n    // minimum amount of wel, that can be contributed\r\n    uint public weiMinimumAmount;\r\n\r\n    // How many distinct addresses have bought\r\n    uint public buyerCount;\r\n\r\n    // how much wei we have returned back to the contract after a failed crowdfund\r\n    uint public loadedRefund;\r\n\r\n    // how much wei we have given back to buyers\r\n    uint public weiRefunded;\r\n\r\n    // how much ETH each address has bought to this crowdsale\r\n    mapping (address => uint) public boughtAmountOf;\r\n\r\n    // whether a buyer already bought some tokens\r\n    mapping (address => bool) public isBuyer;\r\n\r\n    // whether a buyer bought tokens through other currencies\r\n    mapping (address => bool) public isExternalBuyer;\r\n\r\n    address public admin;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param beneficiary who got the tokens\r\n     * @param value weis paid for purchase\r\n     * @param tokenAmount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(\r\n        address indexed purchaser,\r\n        address indexed beneficiary,\r\n        uint value,\r\n        uint tokenAmount\r\n    );\r\n\r\n    // a refund was processed for an buyer\r\n    event Refund(address buyer, uint weiAmount);\r\n    event RefundLoaded(uint amount);\r\n\r\n    function SaleBase(\r\n        uint _startTime,\r\n        uint _endTime,\r\n        IPricingStrategy _pricingStrategy,\r\n        PlayHallToken _token,\r\n        address _wallet,\r\n        uint _weiMaximumGoal,\r\n        uint _weiMinimumGoal,\r\n        uint _weiMinimumAmount,\r\n        address _admin\r\n    ) public\r\n    {\r\n        require(_startTime >= now);\r\n        require(_endTime >= _startTime);\r\n        require(_pricingStrategy.isPricingStrategy());\r\n        require(address(_token) != 0x0);\r\n        require(_wallet != 0x0);\r\n        require(_weiMaximumGoal > 0);\r\n        require(_admin != 0x0);\r\n\r\n        startTime = _startTime;\r\n        endTime = _endTime;\r\n        pricingStrategy = _pricingStrategy;\r\n        token = _token;\r\n        wallet = _wallet;\r\n        weiMaximumGoal = _weiMaximumGoal;\r\n        weiMinimumGoal = _weiMinimumGoal;\r\n        weiMinimumAmount = _weiMinimumAmount;\r\n        admin = _admin;\r\n    }\r\n\r\n\r\n    modifier onlyOwnerOrAdmin() {\r\n        require(msg.sender == owner || msg.sender == admin); \r\n        _;\r\n    }\r\n\r\n    // fallback function can be used to buy tokens\r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    // low level token purchase function\r\n    function buyTokens(address beneficiary) public whenNotPaused payable returns (bool) {\r\n        uint weiAmount = msg.value;\r\n\r\n        require(beneficiary != 0x0);\r\n        require(weiAmount >= weiMinimumAmount);\r\n        require(validPurchase(msg.value));\r\n    \r\n        // calculate token amount to be created\r\n        uint tokenAmount = pricingStrategy.calculateTokenAmount(weiAmount, weiRaised);\r\n        \r\n        mintTokenToBuyer(beneficiary, tokenAmount, weiAmount);\r\n        \r\n        wallet.transfer(msg.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    function mintTokenToBuyer(address beneficiary, uint tokenAmount, uint weiAmount) internal {\r\n        if (!isBuyer[beneficiary]) {\r\n            // A new buyer\r\n            buyerCount++;\r\n            isBuyer[beneficiary] = true;\r\n        }\r\n\r\n        boughtAmountOf[beneficiary] = boughtAmountOf[beneficiary].add(weiAmount);\r\n        weiRaised = weiRaised.add(weiAmount);\r\n        tokensSold = tokensSold.add(tokenAmount);\r\n    \r\n        token.mint(beneficiary, tokenAmount, true);\r\n        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\r\n    }\r\n\r\n    // return true if the transaction can buy tokens\r\n    function validPurchase(uint weiAmount) internal constant returns (bool) {\r\n        bool withinPeriod = now >= startTime && now <= endTime;\r\n        bool withinCap = weiRaised.add(weiAmount) <= weiMaximumGoal;\r\n\r\n        return withinPeriod && withinCap;\r\n    }\r\n\r\n    // return true if crowdsale event has ended\r\n    function hasEnded() public constant returns (bool) {\r\n        bool capReached = weiRaised >= weiMaximumGoal;\r\n        bool afterEndTime = now > endTime;\r\n        \r\n        return capReached || afterEndTime;\r\n    }\r\n\r\n    // get the amount of unsold tokens allocated to this contract;\r\n    function getWeiLeft() external constant returns (uint) {\r\n        return weiMaximumGoal - weiRaised;\r\n    }\r\n\r\n    // return true if the crowdsale has raised enough money to be a successful.\r\n    function isMinimumGoalReached() public constant returns (bool) {\r\n        return weiRaised >= weiMinimumGoal;\r\n    }\r\n    \r\n    // allows to update tokens rate for owner\r\n    function setPricingStrategy(IPricingStrategy _pricingStrategy) external onlyOwner returns (bool) {\r\n        pricingStrategy = _pricingStrategy;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * Allow load refunds back on the contract for the refunding.\r\n    *\r\n    * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\r\n    */\r\n    function loadRefund() external payable {\r\n        require(msg.sender == wallet);\r\n        require(msg.value > 0);\r\n        require(!isMinimumGoalReached());\r\n        \r\n        loadedRefund = loadedRefund.add(msg.value);\r\n\r\n        RefundLoaded(msg.value);\r\n    }\r\n\r\n    /**\r\n    * Buyers can claim refund.\r\n    *\r\n    * Note that any refunds from proxy buyers should be handled separately,\r\n    * and not through this contract.\r\n    */\r\n    function refund() external {\r\n        require(!isMinimumGoalReached() && loadedRefund > 0);\r\n        require(!isExternalBuyer[msg.sender]);\r\n        uint weiValue = boughtAmountOf[msg.sender];\r\n        require(weiValue > 0);\r\n        \r\n        boughtAmountOf[msg.sender] = 0;\r\n        weiRefunded = weiRefunded.add(weiValue);\r\n        msg.sender.transfer(weiValue);\r\n\r\n        Refund(msg.sender, weiValue);\r\n    }\r\n\r\n    function registerPayment(address beneficiary, uint tokenAmount, uint weiAmount) public onlyOwnerOrAdmin {\r\n        require(validPurchase(weiAmount));\r\n        isExternalBuyer[beneficiary] = true;\r\n        mintTokenToBuyer(beneficiary, tokenAmount, weiAmount);\r\n    }\r\n\r\n    function registerPayments(address[] beneficiaries, uint[] tokenAmounts, uint[] weiAmounts) external onlyOwnerOrAdmin {\r\n        require(beneficiaries.length == tokenAmounts.length);\r\n        require(tokenAmounts.length == weiAmounts.length);\r\n\r\n        for (uint i = 0; i < beneficiaries.length; i++) {\r\n            registerPayment(beneficiaries[i], tokenAmounts[i], weiAmounts[i]);\r\n        }\r\n    }\r\n\r\n    function setAdmin(address adminAddress) external onlyOwner {\r\n        admin = adminAddress;\r\n    }\r\n}\r\n\r\n// File: contracts/presale/Presale.sol\r\n\r\n/**\r\n * @title Presale\r\n * @dev Presale is a contract for managing a token crowdsale.\r\n * Presales have a start and end timestamps, where buyers can make\r\n * token purchases and the crowdsale will assign them tokens based\r\n * on a token per ETH rate. Funds collected are forwarded to a wallet\r\n * as they arrive.\r\n */\r\ncontract Presale is SaleBase {\r\n    function Presale(\r\n        uint _startTime,\r\n        uint _endTime,\r\n        IPricingStrategy _pricingStrategy,\r\n        PlayHallToken _token,\r\n        address _wallet,\r\n        uint _weiMaximumGoal,\r\n        uint _weiMinimumGoal,\r\n        uint _weiMinimumAmount,\r\n        address _admin\r\n    ) public SaleBase(\r\n        _startTime,\r\n        _endTime,\r\n        _pricingStrategy,\r\n        _token,\r\n        _wallet,\r\n        _weiMaximumGoal,\r\n        _weiMinimumGoal,\r\n        _weiMinimumAmount,\r\n        _admin) \r\n    {\r\n\r\n    }\r\n\r\n    function changeTokenMinter(address newMinter) external onlyOwner {\r\n        require(newMinter != 0x0);\r\n        require(hasEnded());\r\n\r\n        token.setMinter(newMinter);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"getWeiLeft\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contactInformation\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinimumAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pricingStrategy\",\"type\":\"address\"}],\"name\":\"setPricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMaximumGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRefunded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAddress\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"pricingStrategy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"loadedRefund\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMinimumGoalReached\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiMinimumGoal\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"loadRefund\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiaries\",\"type\":\"address[]\"},{\"name\":\"tokenAmounts\",\"type\":\"uint256[]\"},{\"name\":\"weiAmounts\",\"type\":\"uint256[]\"}],\"name\":\"registerPayments\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"buyerCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"info\",\"type\":\"string\"}],\"name\":\"setContactInformation\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeTokenMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"registerPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"buyTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasEnded\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExternalBuyer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_startTime\",\"type\":\"uint256\"},{\"name\":\"_endTime\",\"type\":\"uint256\"},{\"name\":\"_pricingStrategy\",\"type\":\"address\"},{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wallet\",\"type\":\"address\"},{\"name\":\"_weiMaximumGoal\",\"type\":\"uint256\"},{\"name\":\"_weiMinimumGoal\",\"type\":\"uint256\"},{\"name\":\"_weiMinimumAmount\",\"type\":\"uint256\"},{\"name\":\"_admin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundLoaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"Presale","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005aba74a8000000000000000000000000000000000000000000000000000000005acc7d100000000000000000000000001114380bea291009dc83a937a3446cc763c4650200000000000000000000000095442a375dd03e97f347f7671a48ba40b2751455000000000000000000000000f3f3425faa8dbf3ef6ab115d514f44757a39f55d0000000000000000000000000000000000000000000002f6f10780d22cc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000d5fe6421e3d770e9008b0ab7f0abb56f2946200a","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ba3c28fc7c70f348a38a5db1f33070032de92318ad1c5d463b543499c5492020"}]