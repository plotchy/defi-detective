[{"SourceCode":"pragma solidity ^0.4.2;\r\n\r\ncontract EC {\r\n\r\n    uint256 constant public gx = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\r\n    uint256 constant public gy = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\r\n    uint256 constant public n = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\r\n    uint256 constant public a = 0;\r\n    uint256 constant public b = 7;\r\n    uint256[] public gxs;\r\n    uint256[] public gys;\r\n    uint256[] public gzs;\r\n\r\n    function EC() public\r\n    {\r\n        gxs.push(gx);\r\n        gys.push(gy);\r\n        gzs.push(1);\r\n    }\r\n    \r\n    function prepare(uint count) public\r\n    {\r\n        require(gxs.length < 256);\r\n        uint256 x = gxs[gxs.length - 1];\r\n        uint256 y = gys[gys.length - 1];\r\n        uint256 z = gzs[gzs.length - 1];\r\n        for (uint j = 0; j < count && gxs.length < 256; j++) {\r\n            (x,y,z) = _ecDouble(x,y,z);\r\n            gxs.push(x);\r\n            gys.push(y);\r\n            gzs.push(z);\r\n        }\r\n    }\r\n\r\n    function _jAdd( uint256 x1,uint256 z1,\r\n                    uint256 x2,uint256 z2) public pure\r\n        returns(uint256 x3,uint256 z3)\r\n    {\r\n        (x3, z3) = (  addmod( mulmod(z2, x1 , n) ,\r\n                              mulmod(x2, z1 , n),\r\n                              n),\r\n                      mulmod(z1, z2 , n)\r\n                    );\r\n    }\r\n\r\n    function _jSub( uint256 x1,uint256 z1,\r\n                    uint256 x2,uint256 z2) public pure\r\n        returns(uint256 x3,uint256 z3)\r\n    {\r\n        (x3, z3) = (  addmod( mulmod(z2, x1, n),\r\n                              mulmod(n - x2, z1, n),\r\n                              n),\r\n                      mulmod(z1, z2 , n)\r\n                    );\r\n    }\r\n\r\n    function _jMul( uint256 x1,uint256 z1,\r\n                    uint256 x2,uint256 z2) public pure\r\n        returns(uint256 x3,uint256 z3)\r\n    {\r\n        (x3, z3) = (  mulmod(x1, x2 , n), mulmod(z1, z2 , n));\r\n    }\r\n\r\n    function _jDiv( uint256 x1,uint256 z1,\r\n                    uint256 x2,uint256 z2) public pure\r\n        returns(uint256 x3,uint256 z3)\r\n    {\r\n        (x3, z3) = (  mulmod(x1, z2 , n), mulmod(z1 , x2 , n));\r\n    }\r\n\r\n    function _inverse( uint256 val) public pure\r\n        returns(uint256 invVal)\r\n    {\r\n        uint256 t=0;\r\n        uint256 newT=1;\r\n        uint256 r=n;\r\n        uint256 newR=val;\r\n        uint256 q;\r\n        while (newR != 0) {\r\n            q = r / newR;\r\n\r\n            (t, newT) = (newT, addmod(t , (n - mulmod(q, newT,n)) , n));\r\n            (r, newR) = (newR, r - q * newR );\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n\r\n    function _ecAdd( uint256 x1,uint256 y1,uint256 z1,\r\n                    uint256 x2,uint256 y2,uint256 z2) public pure\r\n        returns(uint256 x3,uint256 y3,uint256 z3)\r\n    {\r\n        uint256 l;\r\n        uint256 lz;\r\n        uint256 da;\r\n        uint256 db;\r\n\r\n        if ((x1==0)&&(y1==0)) {\r\n            return (x2,y2,z2);\r\n        }\r\n\r\n        if ((x2==0)&&(y2==0)) {\r\n            return (x1,y1,z1);\r\n        }\r\n\r\n        if ((x1==x2)&&(y1==y2)) {\r\n            (l,lz) = _jMul(x1, z1, x1, z1);\r\n            (l,lz) = _jMul(l, lz, 3, 1);\r\n            (l,lz) = _jAdd(l, lz, a, 1);\r\n\r\n            (da,db) = _jMul(y1, z1, 2, 1);\r\n        } else {\r\n            (l,lz) = _jSub(y2, z2, y1, z1);\r\n            (da,db)  = _jSub(x2, z2, x1, z1);\r\n        }\r\n\r\n        (l, lz) = _jDiv(l, lz, da, db);\r\n\r\n\r\n        (x3, da) = _jMul(l, lz, l, lz);\r\n        (x3, da) = _jSub(x3, da, x1, z1);\r\n        (x3, da) = _jSub(x3, da, x2, z2);\r\n\r\n        (y3, db) = _jSub(x1, z1, x3, da);\r\n        (y3, db) = _jMul(y3, db, l, lz );\r\n        (y3, db) = _jSub(y3, db, y1, z1 );\r\n\r\n\r\n        if (da != db) {\r\n            x3 = mulmod(x3, db, n);\r\n            y3 = mulmod(y3, da, n);\r\n            z3 = mulmod(da, db, n);\r\n        } else {\r\n            z3 = da;\r\n        }\r\n\r\n    }\r\n\r\n    function _ecDouble(uint256 x1,uint256 y1,uint256 z1) public pure\r\n        returns(uint256 x3,uint256 y3,uint256 z3)\r\n    {\r\n        (x3,y3,z3) = _ecAdd(x1,y1,z1,x1,y1,z1);\r\n    }\r\n\r\n\r\n\r\n    function _ecMul(uint256 d, uint256 x1,uint256 y1,uint256 z1) public pure\r\n        returns(uint256 x3,uint256 y3,uint256 z3)\r\n    {\r\n        uint256 remaining = d;\r\n        uint256 px = x1;\r\n        uint256 py = y1;\r\n        uint256 pz = z1;\r\n        uint256 acx = 0;\r\n        uint256 acy = 0;\r\n        uint256 acz = 1;\r\n\r\n        if (d==0) {\r\n            return (0,0,1);\r\n        }\r\n\r\n        while (remaining != 0) {\r\n            if ((remaining & 1) != 0) {\r\n                (acx,acy,acz) = _ecAdd(acx,acy,acz, px,py,pz);\r\n            }\r\n            remaining = remaining / 2;\r\n            (px,py,pz) = _ecDouble(px,py,pz);\r\n        }\r\n\r\n        (x3,y3,z3) = (acx,acy,acz);\r\n    }\r\n\r\n    function publicKey(uint256 privKey) public constant\r\n        returns(uint256 qx, uint256 qy)\r\n    {\r\n        uint256 acx = 0;\r\n        uint256 acy = 0;\r\n        uint256 acz = 1;\r\n\r\n        if (privKey == 0) {\r\n            return (0,0);\r\n        }\r\n\r\n        for (uint i = 0; i < 256; i++) {\r\n            if (((privKey >> i) & 1) != 0) {\r\n                (acx,acy,acz) = _ecAdd(acx,acy,acz, gxs[i],gys[i],gzs[i]);\r\n            }\r\n        }\r\n        \r\n        acz = _inverse(acz);\r\n        (qx,qy) = (mulmod(acx,acz,n),mulmod(acy,acz,n));\r\n    }\r\n\r\n    function deriveKey(uint256 privKey, uint256 pubX, uint256 pubY) public pure\r\n        returns(uint256 qx, uint256 qy)\r\n    {\r\n        uint256 x;\r\n        uint256 y;\r\n        uint256 z;\r\n        (x,y,z) = _ecMul(privKey, pubX, pubY, 1);\r\n        z = _inverse(z);\r\n        qx = mulmod(x , z ,n);\r\n        qy = mulmod(y , z ,n);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"z2\",\"type\":\"uint256\"}],\"name\":\"_jAdd\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gx\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"a\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"z2\",\"type\":\"uint256\"}],\"name\":\"_jSub\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"gy\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"n\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gxs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"b\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"z2\",\"type\":\"uint256\"}],\"name\":\"_jMul\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"z2\",\"type\":\"uint256\"}],\"name\":\"_jDiv\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"privKey\",\"type\":\"uint256\"}],\"name\":\"publicKey\",\"outputs\":[{\"name\":\"qx\",\"type\":\"uint256\"},{\"name\":\"qy\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"_inverse\",\"outputs\":[{\"name\":\"invVal\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"d\",\"type\":\"uint256\"},{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"y1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"}],\"name\":\"_ecMul\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"y3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gys\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"prepare\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"y1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"},{\"name\":\"x2\",\"type\":\"uint256\"},{\"name\":\"y2\",\"type\":\"uint256\"},{\"name\":\"z2\",\"type\":\"uint256\"}],\"name\":\"_ecAdd\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"y3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"privKey\",\"type\":\"uint256\"},{\"name\":\"pubX\",\"type\":\"uint256\"},{\"name\":\"pubY\",\"type\":\"uint256\"}],\"name\":\"deriveKey\",\"outputs\":[{\"name\":\"qx\",\"type\":\"uint256\"},{\"name\":\"qy\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gzs\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"x1\",\"type\":\"uint256\"},{\"name\":\"y1\",\"type\":\"uint256\"},{\"name\":\"z1\",\"type\":\"uint256\"}],\"name\":\"_ecDouble\",\"outputs\":[{\"name\":\"x3\",\"type\":\"uint256\"},{\"name\":\"y3\",\"type\":\"uint256\"},{\"name\":\"z3\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]","ContractName":"EC","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://82b7c676fce8907636e9764995e71cee29e2f380733e8842c5ad3b654047bc8e"}]