[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function owned() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n\r\ncontract NecashTokenBase {\r\n    string public constant _myTokeName = 'Necash Token';\r\n    string public constant _mySymbol = 'NEC';\r\n    uint public constant _myinitialSupply = 20000000;\r\n    // Public variables of the token\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    // This creates an array with all balances\r\n    mapping (address => uint256) public balanceOf;\r\n    mapping (address => mapping (address => uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    function NecashTokenBase() public {\r\n        totalSupply = _myinitialSupply * (10 ** uint256(decimals));\r\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\r\n        name = _myTokeName;                                   // Set the name for display purposes\r\n        symbol = _mySymbol;                               // Set the symbol for display purposes\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != 0x0);\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] >= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to] + _value > balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\r\n        // Subtract from the sender\r\n        balanceOf[_from] -= _value;\r\n        // Add the same to the recipient\r\n        balanceOf[_to] += _value;\r\n        Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send `_value` tokens to `_to` from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public {\r\n        _transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send `_value` tokens to `_to` in behalf of `_from`\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] -= _value;\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address and notify\r\n     *\r\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     * @param _extraData some extra information to send to the approved contract\r\n     */\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n        public\r\n        returns (bool success) {\r\n        tokenRecipient spender = tokenRecipient(_spender);\r\n        if (approve(_spender, _value)) {\r\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncontract NecashToken is owned, NecashTokenBase {\r\n    mapping (address => bool) public frozenAccount;\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    function NecashToken() NecashTokenBase() public {}\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] -= _value;                         // Subtract from the sender\r\n        balanceOf[_to] += _value;                           // Add the same to the recipient\r\n        Transfer(_from, _to, _value);\r\n    }\r\n\r\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        FrozenFunds(target, freeze);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is owned {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is paused.\r\n    */\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to pause, triggers stopped state\r\n    */\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    /**\r\n    * @dev called by the owner to unpause, returns to normal state\r\n    */\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n  @title NeCashTokenSale\r\n**/\r\ncontract NeCashTokenSale is owned, Pausable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n        EVENTS\r\n    **/\r\n    event Purchase(address indexed buyer, uint256 weiAmount, uint256 tokenAmount);\r\n    event Finalized(uint256 tokensSold, uint256 weiAmount);\r\n\r\n    /**\r\n        CONTRACT VARIABLES\r\n    **/\r\n    NecashToken public necashToken;\r\n\r\n    uint256 public startTime;\r\n    uint256 public weiRaised;\r\n    uint256 public tokensSold;\r\n    bool public finalized = false;\r\n    address public wallet;\r\n\r\n    uint256 public maxGasPrice = 50000000000;\r\n    uint256 public tokenPerEth = 1000;\r\n\r\n    uint256[4] public rates;\r\n\r\n    mapping (address => uint256) public contributors;\r\n\r\n    uint256 public constant minimumPurchase = 0.1 ether;\r\n    uint256 public constant maximumPurchase = 10 ether;\r\n\r\n    /**\r\n      @dev ICO CONSTRUCTOR\r\n    **/\r\n    function NeCashTokenSale() public\r\n    {\r\n        necashToken = NecashToken(address(0xd4e179eadf65d230c0c0ab7540edf03715596c92));\r\n\r\n        startTime = 1530362569;\r\n        wallet = address(0xBC03d69aF2E5c329F5b4eE09ad01AcC8A7e8F719);\r\n    }\r\n\r\n\r\n    /**\r\n        PUBLIC FUNCTIONS\r\n\r\n    **/\r\n\r\n    /**\r\n      @dev Fallback function that accepts eth and buy tokens\r\n    **/\r\n    function () payable whenNotPaused public {\r\n        buyTokens();\r\n    }\r\n\r\n    /**\r\n      @dev Allows participants to buy tokens\r\n    **/\r\n    function buyTokens() payable whenNotPaused public {\r\n        require(isValidPurchase());\r\n\r\n        uint256 amount = msg.value;\r\n        uint256 tokens = calculateTokenAmount(amount);\r\n\r\n        uint256 maxSellToken = necashToken.balanceOf(address(this));\r\n        if(tokens > maxSellToken){\r\n            uint256 possibleTokens = maxSellToken.sub(tokens);\r\n            uint256 change = calculatePriceForTokens(tokens.sub(possibleTokens));\r\n            msg.sender.transfer(change);\r\n            tokens = possibleTokens;\r\n            amount = amount.sub(change);\r\n        }\r\n\r\n        contributors[msg.sender] = contributors[msg.sender].add(amount);\r\n        necashToken.transfer(msg.sender, tokens);\r\n\r\n        tokensSold = tokensSold.add(tokens);\r\n        weiRaised = weiRaised.add(amount);\r\n        forwardFunds(amount);\r\n        Purchase(msg.sender, amount, tokens);\r\n    }\r\n\r\n    /**\r\n      @dev allows the owner to change the max gas price\r\n      @param _gasPrice uint256 the new maximum gas price\r\n    **/\r\n    function changeMaxGasprice(uint256 _gasPrice)\r\n      public onlyOwner whenNotPaused\r\n    {\r\n        maxGasPrice = _gasPrice;\r\n    }\r\n\r\n    /**\r\n      @dev allows the owner to change token price\r\n      @param _tokens uint256 the new token price\r\n    **/\r\n    function changeTokenPrice(uint256 _tokens)\r\n      public onlyOwner whenNotPaused\r\n    {\r\n        tokenPerEth = _tokens;\r\n    }\r\n\r\n    /**\r\n      @dev Triggers the finalization process\r\n    **/\r\n    function endSale() public onlyOwner whenNotPaused {\r\n        require(finalized == false);\r\n        finalizeSale();\r\n    }\r\n\r\n    /**\r\n        INTERNAL FUNCTIONS\r\n\r\n    **/\r\n\r\n    /**\r\n      @dev Checks if purchase is valid\r\n      @return Bool Indicating if purchase is valid\r\n    **/\r\n    function isValidPurchase() view internal returns(bool valid) {\r\n        require(now >= startTime);\r\n        require(msg.value >= minimumPurchase);\r\n        require(msg.value <= maximumPurchase);\r\n        require(tx.gasprice <= maxGasPrice);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n      @dev Internal function that redirects recieved funds to wallet\r\n      @param _amount uint256 The amount to be fowarded\r\n    **/\r\n    function forwardFunds(uint256 _amount) internal {\r\n        wallet.transfer(_amount);\r\n    }\r\n\r\n    /**\r\n      @dev Calculates the amount of tokens that buyer will recieve\r\n      @param weiAmount uint256 The amount, in Wei, that will be bought\r\n      @return uint256 Representing the amount of tokens that weiAmount buys in\r\n      the current stage of the sale\r\n    **/\r\n    function calculateTokenAmount(uint256 weiAmount) view internal returns(uint256 tokenAmount){\r\n        return weiAmount.mul(tokenPerEth);\r\n    }\r\n\r\n    /**\r\n      @dev Calculates wei cost of specific amount of tokens\r\n      @param tokenAmount uint256 The amount of tokens to be calculated\r\n      @return uint256 Representing the total cost, in wei, for tokenAmount\r\n    **/\r\n    function calculatePriceForTokens(uint256 tokenAmount) view internal returns(uint256 weiAmount){\r\n        return tokenAmount.div(tokenPerEth);\r\n    }\r\n\r\n    /**\r\n      @dev Triggers the sale finalizations process\r\n    **/\r\n    function finalizeSale() internal {\r\n        finalized = true;\r\n        Finalized(tokensSold, weiRaised);\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"tokenPerEth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"necashToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"changeMaxGasprice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumPurchase\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rates\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"changeTokenPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokensSold\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}]","ContractName":"NeCashTokenSale","CompilerVersion":"v0.4.24+commit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://59762c3f0c21db308dbcbcd6240c602c459f6b5dfeeb1d0ade1ebc5fd98cb767"}]