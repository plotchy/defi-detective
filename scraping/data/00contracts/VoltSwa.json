[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/VoltSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IUniswap {\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function WETH() external pure returns (address);\\n\\n    function getAmountsOut(uint256 amountIn, address[] memory path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IPancakeFactory {\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract VoltSwap is Ownable {\\n    address private constant UNISWAP_V2_ROUTER =\\n        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address private constant UNISWAP_FACTORY =\\n        0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant VOLT = 0x7db5af2B9624e1b3B4Bb69D6DeBd9aD1016A58Ac;\\n\\n    address internal deadAddress = 0x000000000000000000000000000000000000dEaD;\\n    uint256 public fee = 50;\\n\\n    event GetApproval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Transfer(address sender, address recipient, uint256 amount);\\n    event Burned(\\n        address tokenIn,\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    );\\n    event Swap(\\n        uint256 totalAmount,\\n        uint256 amountOutMin,\\n        address[] path,\\n        address to,\\n        uint256 deadline\\n    );\\n\\n    function swap(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOutMin,\\n        uint256 _amountIn,\\n        uint256 _slippage,\\n        address _to\\n    ) public {\\n        IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\\n\\n        uint256 feeAmount = (_amountIn * fee) / 10000;\\n        uint256 slippageAmount = (_amountIn * _slippage) / 1000;\\n\\n        feeAmount += slippageAmount;\\n        uint256 _totalAmount = (_amountIn - feeAmount);\\n\\n        IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\\n        emit GetApproval(msg.sender, UNISWAP_V2_ROUTER, _amountIn);\\n\\n        address[] memory path;\\n\\n        if (_tokenIn == WETH || _tokenOut == WETH) {\\n            path = new address[](2);\\n            path[0] = _tokenIn;\\n            path[1] = _tokenOut;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _tokenIn;\\n            path[1] = WETH;\\n            path[2] = _tokenOut;\\n        }\\n\\n        IUniswap(UNISWAP_V2_ROUTER)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                _totalAmount,\\n                _amountOutMin,\\n                path,\\n                _to,\\n                block.timestamp + 150\\n            );\\n\\n        address[] memory _voltPath;\\n\\n        if (_tokenIn == WETH) {\\n            _voltPath = new address[](2);\\n            _voltPath[0] = _tokenIn;\\n            _voltPath[1] = VOLT;\\n        } else {\\n            _voltPath = new address[](3);\\n            _voltPath[0] = _tokenIn;\\n            _voltPath[1] = WETH;\\n            _voltPath[2] = VOLT;\\n        }\\n\\n        uint256 feeHalfAmount = feeAmount / 2;\\n\\n        IUniswap(UNISWAP_V2_ROUTER)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                feeHalfAmount,\\n                0,\\n                _voltPath,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        emit Swap(feeHalfAmount, 0, _voltPath, address(this), block.timestamp);\\n\\n        address[] memory _tokenOutpath;\\n\\n        if (_tokenIn == WETH) {\\n            _tokenOutpath = new address[](2);\\n            _tokenOutpath[0] = _tokenIn;\\n            _tokenOutpath[1] = _tokenOut;\\n        } else {\\n            _tokenOutpath = new address[](3);\\n            _tokenOutpath[0] = _tokenIn;\\n            _tokenOutpath[1] = WETH;\\n            _tokenOutpath[2] = _tokenOut;\\n        }\\n\\n        IUniswap(UNISWAP_V2_ROUTER)\\n            .swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n                feeHalfAmount,\\n                0,\\n                _tokenOutpath,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n        emit Swap(\\n            feeHalfAmount,\\n            0,\\n            _tokenOutpath,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        IERC20(VOLT).approve(address(this), feeHalfAmount);\\n        emit GetApproval(VOLT, address(this), feeHalfAmount);\\n\\n        IERC20(VOLT).transferFrom(address(this), deadAddress, feeHalfAmount);\\n        emit Burned(VOLT, address(this), deadAddress, feeHalfAmount);\\n\\n        IERC20(_tokenOut).approve(address(this), feeHalfAmount);\\n        emit GetApproval(_tokenOut, address(this), feeHalfAmount);\\n\\n        IERC20(_tokenOut).transferFrom(address(this), deadAddress, feeHalfAmount);\\n        emit Burned(_tokenOut, address(this), deadAddress, feeHalfAmount);\\n    }\\n\\n    function getPair(address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return IPancakeFactory(UNISWAP_FACTORY).getPair(_tokenIn, _tokenOut);\\n    }\\n\\n    function getAmountOutMin(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256) {\\n        address[] memory path;\\n        if (_tokenIn == WETH || _tokenOut == WETH) {\\n            path = new address[](2);\\n            path[0] = _tokenIn;\\n            path[1] = _tokenOut;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _tokenIn;\\n            path[1] = WETH;\\n            path[2] = _tokenOut;\\n        }\\n\\n        uint256[] memory amountOutMins = IUniswap(UNISWAP_V2_ROUTER)\\n            .getAmountsOut(_amountIn, path);\\n        return amountOutMins[path.length - 1];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"GetApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"VoltSwap","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"1","Runs":"1","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]