[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/registrar/Registrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n// This is only kept for backward compatability / upgrading\\r\\nimport {OwnableUpgradeable} from \\\"../oz/access/OwnableUpgradeable.sol\\\";\\r\\nimport {EnumerableMapUpgradeable, ERC721PausableUpgradeable, IERC721Upgradeable, ERC721Upgradeable} from \\\"../oz/token/ERC721/ERC721PausableUpgradeable.sol\\\";\\r\\nimport {IRegistrar} from \\\"../interfaces/IRegistrar.sol\\\";\\r\\nimport {StorageSlot} from \\\"../oz/utils/StorageSlot.sol\\\";\\r\\nimport {BeaconProxy} from \\\"../oz/proxy/beacon/BeaconProxy.sol\\\";\\r\\nimport {IZNSHub} from \\\"../interfaces/IZNSHub.sol\\\";\\r\\n\\r\\ncontract Registrar is\\r\\n  IRegistrar,\\r\\n  OwnableUpgradeable,\\r\\n  ERC721PausableUpgradeable\\r\\n{\\r\\n  using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\r\\n\\r\\n  // Data recorded for each domain\\r\\n  struct DomainRecord {\\r\\n    address minter;\\r\\n    bool metadataLocked;\\r\\n    address metadataLockedBy;\\r\\n    address controller;\\r\\n    uint256 royaltyAmount;\\r\\n    uint256 parentId;\\r\\n    address subdomainContract;\\r\\n  }\\r\\n\\r\\n  // A map of addresses that are authorised to register domains.\\r\\n  mapping(address => bool) public controllers;\\r\\n\\r\\n  // A mapping of domain id's to domain data\\r\\n  // This essentially expands the internal ERC721's token storage to additional fields\\r\\n  mapping(uint256 => DomainRecord) public records;\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the admin of the contract.\\r\\n   */\\r\\n  bytes32 internal constant _ADMIN_SLOT =\\r\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n  // The beacon address\\r\\n  address public beacon;\\r\\n\\r\\n  // If this is a subdomain contract these will be set\\r\\n  uint256 public rootDomainId;\\r\\n  address public parentRegistrar;\\r\\n\\r\\n  // The event emitter\\r\\n  IZNSHub public zNSHub;\\r\\n  uint8 private test; // ignore\\r\\n  uint256 private gap; // ignore\\r\\n\\r\\n  function _getAdmin() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n  }\\r\\n\\r\\n  modifier onlyController() {\\r\\n    if (!controllers[msg.sender] && !zNSHub.isController(msg.sender)) {\\r\\n      revert(\\\"ZR: Not controller\\\");\\r\\n    }\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyOwnerOf(uint256 id) {\\r\\n    require(ownerOf(id) == msg.sender, \\\"ZR: Not owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  function initialize(\\r\\n    address parentRegistrar_,\\r\\n    uint256 rootDomainId_,\\r\\n    string calldata collectionName,\\r\\n    string calldata collectionSymbol,\\r\\n    address zNSHub_\\r\\n  ) public initializer {\\r\\n    // __Ownable_init(); // Purposely not initializing ownable since we override owner()\\r\\n\\r\\n    if (parentRegistrar_ == address(0)) {\\r\\n      // create the root domain\\r\\n      _createDomain(0, 0, msg.sender, address(0));\\r\\n    } else {\\r\\n      rootDomainId = rootDomainId_;\\r\\n      parentRegistrar = parentRegistrar_;\\r\\n    }\\r\\n\\r\\n    zNSHub = IZNSHub(zNSHub_);\\r\\n\\r\\n    __ERC721Pausable_init();\\r\\n    __ERC721_init(collectionName, collectionSymbol);\\r\\n  }\\r\\n\\r\\n  function owner() public view override returns (address) {\\r\\n    return zNSHub.owner();\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * External Methods\\r\\n   */\\r\\n\\r\\n  /**\\r\\n   * @notice Authorizes a controller to control the registrar\\r\\n   * @param controller The address of the controller\\r\\n   */\\r\\n  function addController(address controller) external {\\r\\n    require(\\r\\n      msg.sender == owner() || msg.sender == parentRegistrar,\\r\\n      \\\"ZR: Not authorized\\\"\\r\\n    );\\r\\n    require(!controllers[controller], \\\"ZR: Controller is already added\\\");\\r\\n    controllers[controller] = true;\\r\\n    emit ControllerAdded(controller);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Unauthorizes a controller to control the registrar\\r\\n   * @param controller The address of the controller\\r\\n   */\\r\\n  function removeController(address controller) external override onlyOwner {\\r\\n    require(\\r\\n      msg.sender == owner() || msg.sender == parentRegistrar,\\r\\n      \\\"ZR: Not authorized\\\"\\r\\n    );\\r\\n    require(controllers[controller], \\\"ZR: Controller does not exist\\\");\\r\\n    controllers[controller] = false;\\r\\n    emit ControllerRemoved(controller);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Pauses the registrar. Can only be done when not paused.\\r\\n   */\\r\\n  function pause() external onlyOwner {\\r\\n    _pause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Unpauses the registrar. Can only be done when not paused.\\r\\n   */\\r\\n  function unpause() external onlyOwner {\\r\\n    _unpause();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Registers a new (sub) domain\\r\\n   * @param parentId The parent domain\\r\\n   * @param label The label of the domain\\r\\n   * @param minter the minter of the new domain\\r\\n   * @param metadataUri The uri of the metadata\\r\\n   * @param royaltyAmount The amount of royalty this domain pays\\r\\n   * @param locked Whether the domain is locked or not\\r\\n   */\\r\\n  function registerDomain(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked\\r\\n  ) external override onlyController returns (uint256) {\\r\\n    return\\r\\n      _registerDomain(\\r\\n        parentId,\\r\\n        label,\\r\\n        minter,\\r\\n        metadataUri,\\r\\n        royaltyAmount,\\r\\n        locked\\r\\n      );\\r\\n  }\\r\\n\\r\\n  function registerDomainAndSend(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked,\\r\\n    address sendToUser\\r\\n  ) external override onlyController returns (uint256) {\\r\\n    // Register the domain\\r\\n    uint256 id = _registerDomain(\\r\\n      parentId,\\r\\n      label,\\r\\n      minter,\\r\\n      metadataUri,\\r\\n      royaltyAmount,\\r\\n      locked\\r\\n    );\\r\\n\\r\\n    // immediately send domain to user\\r\\n    _safeTransfer(minter, sendToUser, id, \\\"\\\");\\r\\n\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  function registerSubdomainContract(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked,\\r\\n    address sendToUser\\r\\n  ) external onlyController returns (uint256) {\\r\\n    // Register domain, `minter` is the minter\\r\\n    uint256 id = _registerDomain(\\r\\n      parentId,\\r\\n      label,\\r\\n      minter,\\r\\n      metadataUri,\\r\\n      royaltyAmount,\\r\\n      locked\\r\\n    );\\r\\n\\r\\n    // Create subdomain contract as a beacon proxy\\r\\n    address subdomainContract = address(\\r\\n      new BeaconProxy(zNSHub.registrarBeacon(), \\\"\\\")\\r\\n    );\\r\\n\\r\\n    // More maintainable instead of using `data` in constructor\\r\\n    Registrar(subdomainContract).initialize(\\r\\n      address(this),\\r\\n      id,\\r\\n      \\\"Zer0 Name Service\\\",\\r\\n      \\\"ZNS\\\",\\r\\n      address(zNSHub)\\r\\n    );\\r\\n\\r\\n    // Indicate that the subdomain has a contract\\r\\n    records[id].subdomainContract = subdomainContract;\\r\\n\\r\\n    zNSHub.addRegistrar(id, subdomainContract);\\r\\n\\r\\n    // immediately send the domain to the user (from the minter)\\r\\n    _safeTransfer(minter, sendToUser, id, \\\"\\\");\\r\\n\\r\\n    return id;\\r\\n  }\\r\\n\\r\\n  function _registerDomain(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked\\r\\n  ) internal returns (uint256) {\\r\\n    require(bytes(label).length > 0, \\\"ZR: Empty name\\\");\\r\\n    // subdomain cannot be minted on domains which are subdomain contracts\\r\\n    require(\\r\\n      records[parentId].subdomainContract == address(0),\\r\\n      \\\"ZR: Parent is subcontract\\\"\\r\\n    );\\r\\n    if (parentId != rootDomainId) {\\r\\n      // Domain parents must exist\\r\\n      require(_exists(parentId), \\\"ZR: No parent\\\");\\r\\n    }\\r\\n\\r\\n    // Create the child domain under the parent domain\\r\\n    uint256 labelHash = uint256(keccak256(bytes(label)));\\r\\n    address controller = msg.sender;\\r\\n\\r\\n    // Calculate the new domain's id and create it\\r\\n    uint256 domainId = uint256(\\r\\n      keccak256(abi.encodePacked(parentId, labelHash))\\r\\n    );\\r\\n    _createDomain(parentId, domainId, minter, controller);\\r\\n    _setTokenURI(domainId, metadataUri);\\r\\n\\r\\n    if (locked) {\\r\\n      records[domainId].metadataLockedBy = minter;\\r\\n      records[domainId].metadataLocked = true;\\r\\n    }\\r\\n\\r\\n    if (royaltyAmount > 0) {\\r\\n      records[domainId].royaltyAmount = royaltyAmount;\\r\\n    }\\r\\n\\r\\n    zNSHub.domainCreated(\\r\\n      domainId,\\r\\n      label,\\r\\n      labelHash,\\r\\n      parentId,\\r\\n      minter,\\r\\n      controller,\\r\\n      metadataUri,\\r\\n      royaltyAmount\\r\\n    );\\r\\n\\r\\n    return domainId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the domain royalty amount\\r\\n   * @param id The domain to set on\\r\\n   * @param amount The royalty amount\\r\\n   */\\r\\n  function setDomainRoyaltyAmount(uint256 id, uint256 amount)\\r\\n    external\\r\\n    override\\r\\n    onlyOwnerOf(id)\\r\\n  {\\r\\n    require(!isDomainMetadataLocked(id), \\\"ZR: Metadata locked\\\");\\r\\n\\r\\n    records[id].royaltyAmount = amount;\\r\\n    zNSHub.royaltiesAmountChanged(id, amount);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Both sets and locks domain metadata uri in a single call\\r\\n   * @param id The domain to lock\\r\\n   * @param uri The uri to set\\r\\n   */\\r\\n  function setAndLockDomainMetadata(uint256 id, string memory uri)\\r\\n    external\\r\\n    override\\r\\n    onlyOwnerOf(id)\\r\\n  {\\r\\n    require(!isDomainMetadataLocked(id), \\\"ZR: Metadata locked\\\");\\r\\n    _setDomainMetadataUri(id, uri);\\r\\n    _setDomainLock(id, msg.sender, true);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Sets the domain metadata uri\\r\\n   * @param id The domain to set on\\r\\n   * @param uri The uri to set\\r\\n   */\\r\\n  function setDomainMetadataUri(uint256 id, string memory uri)\\r\\n    external\\r\\n    override\\r\\n    onlyOwnerOf(id)\\r\\n  {\\r\\n    require(!isDomainMetadataLocked(id), \\\"ZR: Metadata locked\\\");\\r\\n    _setDomainMetadataUri(id, uri);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Locks a domains metadata uri\\r\\n   * @param id The domain to lock\\r\\n   * @param toLock whether the domain should be locked or not\\r\\n   */\\r\\n  function lockDomainMetadata(uint256 id, bool toLock) external override {\\r\\n    _validateLockDomainMetadata(id, toLock);\\r\\n    _setDomainLock(id, msg.sender, toLock);\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * Public View\\r\\n   */\\r\\n\\r\\n  function ownerOf(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override(ERC721Upgradeable, IERC721Upgradeable)\\r\\n    returns (address)\\r\\n  {\\r\\n    // Check if the token is in this contract\\r\\n    if (_tokenOwners.contains(tokenId)) {\\r\\n      return\\r\\n        _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n    }\\r\\n\\r\\n    return zNSHub.ownerOf(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns whether or not an account is a a controller registered on this contract\\r\\n   * @param account Address of account to check\\r\\n   */\\r\\n  function isController(address account) external view override returns (bool) {\\r\\n    bool accountIsController = controllers[account];\\r\\n    return accountIsController;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns whether or not a domain is exists\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function domainExists(uint256 id) public view override returns (bool) {\\r\\n    bool domainNftExists = _exists(id);\\r\\n    return domainNftExists;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the original minter of a domain\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function minterOf(uint256 id) public view override returns (address) {\\r\\n    address minter = records[id].minter;\\r\\n    return minter;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns whether or not a domain's metadata is locked\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function isDomainMetadataLocked(uint256 id)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    bool isLocked = records[id].metadataLocked;\\r\\n    return isLocked;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns who locked a domain's metadata\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function domainMetadataLockedBy(uint256 id)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    address lockedBy = records[id].metadataLockedBy;\\r\\n    return lockedBy;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the controller which created the domain on behalf of a user\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function domainController(uint256 id) public view override returns (address) {\\r\\n    address controller = records[id].controller;\\r\\n    return controller;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the current royalty amount for a domain\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function domainRoyaltyAmount(uint256 id)\\r\\n    public\\r\\n    view\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint256 amount = records[id].royaltyAmount;\\r\\n    return amount;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @notice Returns the parent id of a domain.\\r\\n   * @param id The domain\\r\\n   */\\r\\n  function parentOf(uint256 id) public view override returns (uint256) {\\r\\n    require(_exists(id), \\\"ZR: Does not exist\\\");\\r\\n\\r\\n    uint256 parentId = records[id].parentId;\\r\\n    return parentId;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n   * Internal Methods\\r\\n   */\\r\\n\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual override {\\r\\n    super._transfer(from, to, tokenId);\\r\\n    // Need to emit transfer events on event emitter\\r\\n    zNSHub.domainTransferred(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  function _setDomainMetadataUri(uint256 id, string memory uri) internal {\\r\\n    _setTokenURI(id, uri);\\r\\n    zNSHub.metadataChanged(id, uri);\\r\\n  }\\r\\n\\r\\n  function _validateLockDomainMetadata(uint256 id, bool toLock) internal view {\\r\\n    if (toLock) {\\r\\n      require(ownerOf(id) == msg.sender, \\\"ZR: Not owner\\\");\\r\\n      require(!isDomainMetadataLocked(id), \\\"ZR: Metadata locked\\\");\\r\\n    } else {\\r\\n      require(isDomainMetadataLocked(id), \\\"ZR: Not locked\\\");\\r\\n      require(domainMetadataLockedBy(id) == msg.sender, \\\"ZR: Not locker\\\");\\r\\n    }\\r\\n  }\\r\\n\\r\\n  // internal - creates a domain\\r\\n  function _createDomain(\\r\\n    uint256 parentId,\\r\\n    uint256 domainId,\\r\\n    address minter,\\r\\n    address controller\\r\\n  ) internal {\\r\\n    // Create the NFT and register the domain data\\r\\n    _mint(minter, domainId);\\r\\n    records[domainId] = DomainRecord({\\r\\n      parentId: parentId,\\r\\n      minter: minter,\\r\\n      metadataLocked: false,\\r\\n      metadataLockedBy: address(0),\\r\\n      controller: controller,\\r\\n      royaltyAmount: 0,\\r\\n      subdomainContract: address(0)\\r\\n    });\\r\\n  }\\r\\n\\r\\n  function _setDomainLock(\\r\\n    uint256 id,\\r\\n    address locker,\\r\\n    bool lockStatus\\r\\n  ) internal {\\r\\n    records[id].metadataLockedBy = locker;\\r\\n    records[id].metadataLocked = lockStatus;\\r\\n\\r\\n    zNSHub.metadataLockChanged(id, locker, lockStatus);\\r\\n  }\\r\\n\\r\\n  function adminBurnToken(uint256 tokenId) external onlyOwner {\\r\\n    _burn(tokenId);\\r\\n    delete (records[tokenId]);\\r\\n  }\\r\\n\\r\\n  function adminTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external onlyOwner {\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  function adminSetMetadataUri(uint256 id, string memory uri)\\r\\n    external\\r\\n    onlyOwner\\r\\n  {\\r\\n    _setDomainMetadataUri(id, uri);\\r\\n  }\\r\\n\\r\\n  function setZNSHub(IZNSHub hub) external onlyOwner {\\r\\n    zNSHub = hub;\\r\\n  }\\r\\n\\r\\n  function registerDomainAndSendBulk(\\r\\n    uint256 parentId,\\r\\n    uint256 namingOffset, // e.g., the IPFS node refers to the metadata as x. the zNS label will be x + namingOffset\\r\\n    uint256 startingIndex,\\r\\n    uint256 endingIndex,\\r\\n    address minter,\\r\\n    string memory folderWithIPFSPrefix, // e.g., ipfs://Qm.../\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked\\r\\n  ) external onlyController {\\r\\n    require(endingIndex - startingIndex > 0, \\\"Invalid number of domains\\\");\\r\\n    uint256 result;\\r\\n    for (uint256 i = startingIndex; i < endingIndex; i++) {\\r\\n      result = _registerDomain(\\r\\n        parentId,\\r\\n        uint2str(i + namingOffset),\\r\\n        minter,\\r\\n        string(abi.encodePacked(folderWithIPFSPrefix, uint2str(i))),\\r\\n        royaltyAmount,\\r\\n        locked\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function uint2str(uint256 _i)\\r\\n    internal\\r\\n    pure\\r\\n    returns (string memory _uintAsString)\\r\\n  {\\r\\n    if (_i == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n    uint256 j = _i;\\r\\n    uint256 len;\\r\\n    while (j != 0) {\\r\\n      len++;\\r\\n      j /= 10;\\r\\n    }\\r\\n    bytes memory bstr = new bytes(len);\\r\\n    uint256 k = len;\\r\\n    while (_i != 0) {\\r\\n      k = k - 1;\\r\\n      uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\r\\n      bytes1 b1 = bytes1(temp);\\r\\n      bstr[k] = b1;\\r\\n      _i /= 10;\\r\\n    }\\r\\n    return string(bstr);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\r\\n  address private _owner;\\r\\n\\r\\n  event OwnershipTransferred(\\r\\n    address indexed previousOwner,\\r\\n    address indexed newOwner\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n   */\\r\\n  function __Ownable_init() internal initializer {\\r\\n    __Context_init_unchained();\\r\\n    __Ownable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __Ownable_init_unchained() internal initializer {\\r\\n    address msgSender = _msgSender();\\r\\n    _owner = msgSender;\\r\\n    emit OwnershipTransferred(address(0), msgSender);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the current owner.\\r\\n   */\\r\\n  function owner() public view virtual returns (address) {\\r\\n    return _owner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Throws if called by any account other than the owner.\\r\\n   */\\r\\n  modifier onlyOwner() {\\r\\n    require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Leaves the contract without owner. It will not be possible to call\\r\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n   *\\r\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n   * thereby removing any functionality that is only available to the owner.\\r\\n   */\\r\\n  function renounceOwnership() public virtual onlyOwner {\\r\\n    emit OwnershipTransferred(_owner, address(0));\\r\\n    _owner = address(0);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n   * Can only be called by the current owner.\\r\\n   */\\r\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n    require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n    emit OwnershipTransferred(_owner, newOwner);\\r\\n    _owner = newOwner;\\r\\n  }\\r\\n\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/ERC721PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./ERC721Upgradeable.sol\\\";\\r\\nimport \\\"../../utils/PausableUpgradeable.sol\\\";\\r\\nimport \\\"../../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev ERC721 token with pausable token transfers, minting and burning.\\r\\n *\\r\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\r\\n * period, or having an emergency switch for freezing all token transfers in the\\r\\n * event of a large bug.\\r\\n */\\r\\nabstract contract ERC721PausableUpgradeable is\\r\\n  Initializable,\\r\\n  ERC721Upgradeable,\\r\\n  PausableUpgradeable\\r\\n{\\r\\n  function __ERC721Pausable_init() internal initializer {\\r\\n    __Context_init_unchained();\\r\\n    __ERC165_init_unchained();\\r\\n    __Pausable_init_unchained();\\r\\n    __ERC721Pausable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __ERC721Pausable_init_unchained() internal initializer {}\\r\\n\\r\\n  /**\\r\\n   * @dev See {ERC721-_beforeTokenTransfer}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the contract must not be paused.\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual override {\\r\\n    super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n    require(!paused(), \\\"ERC721Pausable: token transfer while paused\\\");\\r\\n  }\\r\\n\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IRegistrar.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../oz/token/ERC721/IERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"../oz/token/ERC721/IERC721MetadataUpgradeable.sol\\\";\\r\\n\\r\\ninterface IRegistrar is\\r\\n  IERC721MetadataUpgradeable,\\r\\n  IERC721EnumerableUpgradeable\\r\\n{\\r\\n  // Emitted when a controller is removed\\r\\n  event ControllerAdded(address indexed controller);\\r\\n\\r\\n  // Emitted whenever a controller is removed\\r\\n  event ControllerRemoved(address indexed controller);\\r\\n\\r\\n  // Emitted whenever a new domain is created\\r\\n  event DomainCreated(\\r\\n    uint256 indexed id,\\r\\n    string label,\\r\\n    uint256 indexed labelHash,\\r\\n    uint256 indexed parent,\\r\\n    address minter,\\r\\n    address controller,\\r\\n    string metadataUri,\\r\\n    uint256 royaltyAmount\\r\\n  );\\r\\n\\r\\n  // Emitted whenever the metadata of a domain is locked\\r\\n  event MetadataLockChanged(uint256 indexed id, address locker, bool isLocked);\\r\\n\\r\\n  // Emitted whenever the metadata of a domain is changed\\r\\n  event MetadataChanged(uint256 indexed id, string uri);\\r\\n\\r\\n  // Emitted whenever the royalty amount is changed\\r\\n  event RoyaltiesAmountChanged(uint256 indexed id, uint256 amount);\\r\\n\\r\\n  // Authorises a controller, who can register domains.\\r\\n  function addController(address controller) external;\\r\\n\\r\\n  // Revoke controller permission for an address.\\r\\n  function removeController(address controller) external;\\r\\n\\r\\n  // Registers a new sub domain\\r\\n  function registerDomain(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function registerDomainAndSend(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked,\\r\\n    address sendToUser\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function registerSubdomainContract(\\r\\n    uint256 parentId,\\r\\n    string memory label,\\r\\n    address minter,\\r\\n    string memory metadataUri,\\r\\n    uint256 royaltyAmount,\\r\\n    bool locked,\\r\\n    address sendToUser\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  // Set a domains metadata uri and lock that domain from being modified\\r\\n  function setAndLockDomainMetadata(uint256 id, string memory uri) external;\\r\\n\\r\\n  // Lock a domain's metadata so that it cannot be changed\\r\\n  function lockDomainMetadata(uint256 id, bool toLock) external;\\r\\n\\r\\n  // Update a domain's metadata uri\\r\\n  function setDomainMetadataUri(uint256 id, string memory uri) external;\\r\\n\\r\\n  // Sets the asked royalty amount on a domain (amount is a percentage with 5 decimal places)\\r\\n  function setDomainRoyaltyAmount(uint256 id, uint256 amount) external;\\r\\n\\r\\n  // Returns whether an address is a controller\\r\\n  function isController(address account) external view returns (bool);\\r\\n\\r\\n  // Checks whether or not a domain exists\\r\\n  function domainExists(uint256 id) external view returns (bool);\\r\\n\\r\\n  // Returns the original minter of a domain\\r\\n  function minterOf(uint256 id) external view returns (address);\\r\\n\\r\\n  // Checks if a domains metadata is locked\\r\\n  function isDomainMetadataLocked(uint256 id) external view returns (bool);\\r\\n\\r\\n  // Returns the address which locked the domain metadata\\r\\n  function domainMetadataLockedBy(uint256 id) external view returns (address);\\r\\n\\r\\n  // Gets the controller that registered a domain\\r\\n  function domainController(uint256 id) external view returns (address);\\r\\n\\r\\n  // Gets a domains current royalty amount\\r\\n  function domainRoyaltyAmount(uint256 id) external view returns (uint256);\\r\\n\\r\\n  // Returns the parent domain of a child domain\\r\\n  function parentOf(uint256 id) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Library for reading and writing primitive types to specific storage slots.\\r\\n *\\r\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\r\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\r\\n *\\r\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\r\\n *\\r\\n * Example usage to set ERC1967 implementation slot:\\r\\n * ```\\r\\n * contract ERC1967 {\\r\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n *\\r\\n *     function _getImplementation() internal view returns (address) {\\r\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n *     }\\r\\n *\\r\\n *     function _setImplementation(address newImplementation) internal {\\r\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\r\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n *     }\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\r\\n */\\r\\nlibrary StorageSlot {\\r\\n  struct AddressSlot {\\r\\n    address value;\\r\\n  }\\r\\n\\r\\n  struct BooleanSlot {\\r\\n    bool value;\\r\\n  }\\r\\n\\r\\n  struct Bytes32Slot {\\r\\n    bytes32 value;\\r\\n  }\\r\\n\\r\\n  struct Uint256Slot {\\r\\n    uint256 value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getAddressSlot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (AddressSlot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getBooleanSlot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (BooleanSlot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getBytes32Slot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (Bytes32Slot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\r\\n   */\\r\\n  function getUint256Slot(bytes32 slot)\\r\\n    internal\\r\\n    pure\\r\\n    returns (Uint256Slot storage r)\\r\\n  {\\r\\n    assembly {\\r\\n      r.slot := slot\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/proxy/beacon/BeaconProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IBeacon.sol\\\";\\r\\nimport \\\"../Proxy.sol\\\";\\r\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\r\\n *\\r\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\r\\n * conflict with the storage layout of the implementation behind the proxy.\\r\\n *\\r\\n * _Available since v3.4._\\r\\n */\\r\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\r\\n  /**\\r\\n   * @dev Initializes the proxy with `beacon`.\\r\\n   *\\r\\n   * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\r\\n   * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\r\\n   * constructor.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `beacon` must be a contract with the interface {IBeacon}.\\r\\n   */\\r\\n  constructor(address beacon, bytes memory data) payable {\\r\\n    assert(\\r\\n      _BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1)\\r\\n    );\\r\\n    _upgradeBeaconToAndCall(beacon, data, false);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current beacon address.\\r\\n   */\\r\\n  function _beacon() internal view virtual returns (address) {\\r\\n    return _getBeacon();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation address of the associated beacon.\\r\\n   */\\r\\n  function _implementation() internal view virtual override returns (address) {\\r\\n    return IBeacon(_getBeacon()).implementation();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\r\\n   *\\r\\n   * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `beacon` must be a contract.\\r\\n   * - The implementation returned by `beacon` must be a contract.\\r\\n   */\\r\\n  function _setBeacon(address beacon, bytes memory data) internal virtual {\\r\\n    _upgradeBeaconToAndCall(beacon, data, false);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IZNSHub.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {IRegistrar} from \\\"./IRegistrar.sol\\\";\\r\\n\\r\\ninterface IZNSHub {\\r\\n  function addRegistrar(uint256 rootDomainId, address registrar) external;\\r\\n\\r\\n  function isController(address controller) external returns (bool);\\r\\n\\r\\n  function getRegistrarForDomain(uint256 domainId)\\r\\n    external\\r\\n    view\\r\\n    returns (IRegistrar);\\r\\n\\r\\n  function ownerOf(uint256 domainId) external view returns (address);\\r\\n\\r\\n  function domainExists(uint256 domainId) external view returns (bool);\\r\\n\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  function registrarBeacon() external view returns (address);\\r\\n\\r\\n  function domainTransferred(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  function domainCreated(\\r\\n    uint256 id,\\r\\n    string calldata name,\\r\\n    uint256 nameHash,\\r\\n    uint256 parent,\\r\\n    address minter,\\r\\n    address controller,\\r\\n    string calldata metadataUri,\\r\\n    uint256 royaltyAmount\\r\\n  ) external;\\r\\n\\r\\n  function metadataLockChanged(\\r\\n    uint256 id,\\r\\n    address locker,\\r\\n    bool isLocked\\r\\n  ) external;\\r\\n\\r\\n  function metadataChanged(uint256 id, string calldata uri) external;\\r\\n\\r\\n  function royaltiesAmountChanged(uint256 id, uint256 amount) external;\\r\\n\\r\\n  // Returns the parent domain of a child domain\\r\\n  function parentOf(uint256 id) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with GSN meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract ContextUpgradeable is Initializable {\\r\\n  function __Context_init() internal initializer {\\r\\n    __Context_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __Context_init_unchained() internal initializer {}\\r\\n\\r\\n  function _msgSender() internal view virtual returns (address) {\\r\\n    return msg.sender;\\r\\n  }\\r\\n\\r\\n  function _msgData() internal view virtual returns (bytes memory) {\\r\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n    return msg.data;\\r\\n  }\\r\\n\\r\\n  uint256[50] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// solhint-disable-next-line compiler-version\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\r\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\r\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\r\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\r\\n *\\r\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\r\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\r\\n *\\r\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\r\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\r\\n */\\r\\nabstract contract Initializable {\\r\\n  /**\\r\\n   * @dev Indicates that the contract has been initialized.\\r\\n   */\\r\\n  bool private _initialized;\\r\\n\\r\\n  /**\\r\\n   * @dev Indicates that the contract is in the process of being initialized.\\r\\n   */\\r\\n  bool private _initializing;\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to protect an initializer function from being invoked twice.\\r\\n   */\\r\\n  modifier initializer() {\\r\\n    require(\\r\\n      _initializing || _isConstructor() || !_initialized,\\r\\n      \\\"Initializable: contract is already initialized\\\"\\r\\n    );\\r\\n\\r\\n    bool isTopLevelCall = !_initializing;\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = true;\\r\\n      _initialized = true;\\r\\n    }\\r\\n\\r\\n    _;\\r\\n\\r\\n    if (isTopLevelCall) {\\r\\n      _initializing = false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Returns true if and only if the function is running in the constructor\\r\\n  function _isConstructor() private view returns (bool) {\\r\\n    return !AddressUpgradeable.isContract(address(this));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary AddressUpgradeable {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize, which returns 0 for contracts in\\r\\n    // construction, since the code is only stored at the end of the\\r\\n    // constructor execution.\\r\\n\\r\\n    uint256 size;\\r\\n    // solhint-disable-next-line no-inline-assembly\\r\\n    assembly {\\r\\n      size := extcodesize(account)\\r\\n    }\\r\\n    return size > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(\\r\\n      success,\\r\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain`call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return\\r\\n      functionCallWithValue(\\r\\n        target,\\r\\n        data,\\r\\n        value,\\r\\n        \\\"Address: low-level call with value failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(\\r\\n      address(this).balance >= value,\\r\\n      \\\"Address: insufficient balance for call\\\"\\r\\n    );\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    // solhint-disable-next-line avoid-low-level-calls\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return _verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  function _verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) private pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/ERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\nimport \\\"./IERC721MetadataUpgradeable.sol\\\";\\r\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\r\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\r\\nimport \\\"../../introspection/ERC165Upgradeable.sol\\\";\\r\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/EnumerableSetUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/EnumerableMapUpgradeable.sol\\\";\\r\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\r\\nimport \\\"../../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\r\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ncontract ERC721Upgradeable is\\r\\n  Initializable,\\r\\n  ContextUpgradeable,\\r\\n  ERC165Upgradeable,\\r\\n  IERC721Upgradeable,\\r\\n  IERC721MetadataUpgradeable,\\r\\n  IERC721EnumerableUpgradeable\\r\\n{\\r\\n  using SafeMathUpgradeable for uint256;\\r\\n  using AddressUpgradeable for address;\\r\\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\r\\n  using EnumerableMapUpgradeable for EnumerableMapUpgradeable.UintToAddressMap;\\r\\n  using StringsUpgradeable for uint256;\\r\\n\\r\\n  // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\r\\n  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n  // Mapping from holder address to their (enumerable) set of owned tokens\\r\\n  mapping(address => EnumerableSetUpgradeable.UintSet) private _holderTokens;\\r\\n\\r\\n  // Enumerable mapping from token ids to their owners\\r\\n  EnumerableMapUpgradeable.UintToAddressMap internal _tokenOwners;\\r\\n\\r\\n  // Mapping from token ID to approved address\\r\\n  mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n  // Mapping from owner to operator approvals\\r\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n  // Token name\\r\\n  string private _name;\\r\\n\\r\\n  // Token symbol\\r\\n  string private _symbol;\\r\\n\\r\\n  // Optional mapping for token URIs\\r\\n  mapping(uint256 => string) private _tokenURIs;\\r\\n\\r\\n  // Base URI\\r\\n  string private _baseURI;\\r\\n\\r\\n  /*\\r\\n   *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\r\\n   *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\r\\n   *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\r\\n   *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\r\\n   *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\r\\n   *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\r\\n   *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\r\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\r\\n   *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\r\\n   *\\r\\n   *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\r\\n   *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\r\\n   */\\r\\n  bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\r\\n\\r\\n  /*\\r\\n   *     bytes4(keccak256('name()')) == 0x06fdde03\\r\\n   *     bytes4(keccak256('symbol()')) == 0x95d89b41\\r\\n   *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\r\\n   *\\r\\n   *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\r\\n   */\\r\\n  bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\r\\n\\r\\n  /*\\r\\n   *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\r\\n   *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\r\\n   *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\r\\n   *\\r\\n   *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\r\\n   */\\r\\n  bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n   */\\r\\n  function __ERC721_init(string memory name_, string memory symbol_)\\r\\n    internal\\r\\n    initializer\\r\\n  {\\r\\n    __Context_init_unchained();\\r\\n    __ERC165_init_unchained();\\r\\n    __ERC721_init_unchained(name_, symbol_);\\r\\n  }\\r\\n\\r\\n  function __ERC721_init_unchained(string memory name_, string memory symbol_)\\r\\n    internal\\r\\n    initializer\\r\\n  {\\r\\n    _name = name_;\\r\\n    _symbol = symbol_;\\r\\n\\r\\n    // register the supported interfaces to conform to ERC721 via ERC165\\r\\n    _registerInterface(_INTERFACE_ID_ERC721);\\r\\n    _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\r\\n    _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-balanceOf}.\\r\\n   */\\r\\n  function balanceOf(address owner)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n    return _holderTokens[owner].length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-ownerOf}.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    return\\r\\n      _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-name}.\\r\\n   */\\r\\n  function name() public view virtual override returns (string memory) {\\r\\n    return _name;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-symbol}.\\r\\n   */\\r\\n  function symbol() public view virtual override returns (string memory) {\\r\\n    return _symbol;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Metadata-tokenURI}.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (string memory)\\r\\n  {\\r\\n    require(\\r\\n      _exists(tokenId),\\r\\n      \\\"ERC721Metadata: URI query for nonexistent token\\\"\\r\\n    );\\r\\n\\r\\n    string memory _tokenURI = _tokenURIs[tokenId];\\r\\n    string memory base = baseURI();\\r\\n\\r\\n    // If there is no base URI, return the token URI.\\r\\n    if (bytes(base).length == 0) {\\r\\n      return _tokenURI;\\r\\n    }\\r\\n    // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n    if (bytes(_tokenURI).length > 0) {\\r\\n      return string(abi.encodePacked(base, _tokenURI));\\r\\n    }\\r\\n    // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n    return string(abi.encodePacked(base, tokenId.toString()));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the base URI set via {_setBaseURI}. This will be\\r\\n   * automatically added as a prefix in {tokenURI} to each token's URI, or\\r\\n   * to the token ID if no specific URI is set for that token ID.\\r\\n   */\\r\\n  function baseURI() public view virtual returns (string memory) {\\r\\n    return _baseURI;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _holderTokens[owner].at(index);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-totalSupply}.\\r\\n   */\\r\\n  function totalSupply() public view virtual override returns (uint256) {\\r\\n    // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\r\\n    return _tokenOwners.length();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (uint256)\\r\\n  {\\r\\n    (uint256 tokenId, ) = _tokenOwners.at(index);\\r\\n    return tokenId;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-approve}.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) public virtual override {\\r\\n    address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n    require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n    require(\\r\\n      _msgSender() == owner ||\\r\\n        ERC721Upgradeable.isApprovedForAll(owner, _msgSender()),\\r\\n      \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n    );\\r\\n\\r\\n    _approve(to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-getApproved}.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (address)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n    return _tokenApprovals[tokenId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-setApprovalForAll}.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool approved)\\r\\n    public\\r\\n    virtual\\r\\n    override\\r\\n  {\\r\\n    require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n    _operatorApprovals[_msgSender()][operator] = approved;\\r\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-isApprovedForAll}.\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _operatorApprovals[owner][operator];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-transferFrom}.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public virtual override {\\r\\n    //solhint-disable-next-line max-line-length\\r\\n    require(\\r\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n      \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n\\r\\n    _transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) public virtual override {\\r\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC721-safeTransferFrom}.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) public virtual override {\\r\\n    require(\\r\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\r\\n      \\\"ERC721: transfer caller is not owner nor approved\\\"\\r\\n    );\\r\\n    _safeTransfer(from, to, tokenId, _data);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n   *\\r\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _safeTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) internal virtual {\\r\\n    _transfer(from, to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(from, to, tokenId, _data),\\r\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `tokenId` exists.\\r\\n   *\\r\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Tokens start existing when they are minted (`_mint`),\\r\\n   * and stop existing when they are burned (`_burn`).\\r\\n   */\\r\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n    return _tokenOwners.contains(tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\\r\\n    internal\\r\\n    view\\r\\n    virtual\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n    address owner = ERC721Upgradeable.ownerOf(tokenId);\\r\\n    return (spender == owner ||\\r\\n      getApproved(tokenId) == spender ||\\r\\n      ERC721Upgradeable.isApprovedForAll(owner, spender));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     d*\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n  function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n    _safeMint(to, tokenId, \\\"\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n   * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n   */\\r\\n  function _safeMint(\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) internal virtual {\\r\\n    _mint(to, tokenId);\\r\\n    require(\\r\\n      _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `tokenId` and transfers it to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must not exist.\\r\\n   * - `to` cannot be the zero address.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _mint(address to, uint256 tokenId) internal virtual {\\r\\n    require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n    require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n    _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n    _holderTokens[to].add(tokenId);\\r\\n\\r\\n    _tokenOwners.set(tokenId, to);\\r\\n\\r\\n    emit Transfer(address(0), to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Destroys `tokenId`.\\r\\n   * The approval is cleared when the token is burned.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _burn(uint256 tokenId) internal virtual {\\r\\n    address owner = ERC721Upgradeable.ownerOf(tokenId); // internal owner\\r\\n\\r\\n    _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n    // Clear approvals\\r\\n    _approve(address(0), tokenId);\\r\\n\\r\\n    // Clear metadata (if any)\\r\\n    if (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n      delete _tokenURIs[tokenId];\\r\\n    }\\r\\n\\r\\n    _holderTokens[owner].remove(tokenId);\\r\\n\\r\\n    _tokenOwners.remove(tokenId);\\r\\n\\r\\n    emit Transfer(owner, address(0), tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` from `from` to `to`.\\r\\n   *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function _transfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual {\\r\\n    require(\\r\\n      ERC721Upgradeable.ownerOf(tokenId) == from,\\r\\n      \\\"ERC721: transfer of token that is not own\\\"\\r\\n    ); // internal owner\\r\\n    require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n    _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n    // Clear approvals from the previous owner\\r\\n    _approve(address(0), tokenId);\\r\\n\\r\\n    _holderTokens[from].remove(tokenId);\\r\\n    _holderTokens[to].add(tokenId);\\r\\n\\r\\n    _tokenOwners.set(tokenId, to);\\r\\n\\r\\n    emit Transfer(from, to, tokenId);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\r\\n    internal\\r\\n    virtual\\r\\n  {\\r\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n    _tokenURIs[tokenId] = _tokenURI;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to set the base URI for all token IDs. It is\\r\\n   * automatically added as a prefix to the value returned in {tokenURI},\\r\\n   * or to the token ID if {tokenURI} is empty.\\r\\n   */\\r\\n  function _setBaseURI(string memory baseURI_) internal virtual {\\r\\n    _baseURI = baseURI_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n   * The call is not executed if the target address is not a contract.\\r\\n   *\\r\\n   * @param from address representing the previous owner of the given token ID\\r\\n   * @param to target address that will receive the tokens\\r\\n   * @param tokenId uint256 ID of the token to be transferred\\r\\n   * @param _data bytes optional data to send along with the call\\r\\n   * @return bool whether the call correctly returned the expected magic value\\r\\n   */\\r\\n  function _checkOnERC721Received(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes memory _data\\r\\n  ) private returns (bool) {\\r\\n    if (!to.isContract()) {\\r\\n      return true;\\r\\n    }\\r\\n    bytes memory returndata = to.functionCall(\\r\\n      abi.encodeWithSelector(\\r\\n        IERC721ReceiverUpgradeable(to).onERC721Received.selector,\\r\\n        _msgSender(),\\r\\n        from,\\r\\n        tokenId,\\r\\n        _data\\r\\n      ),\\r\\n      \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n    );\\r\\n    bytes4 retval = abi.decode(returndata, (bytes4));\\r\\n    return (retval == _ERC721_RECEIVED);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve `to` to operate on `tokenId`\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function _approve(address to, uint256 tokenId) internal virtual {\\r\\n    _tokenApprovals[tokenId] = to;\\r\\n    emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId); // internal owner\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before any token transfer. This includes minting\\r\\n   * and burning.\\r\\n   *\\r\\n   * Calling conditions:\\r\\n   *\\r\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n   * transferred to `to`.\\r\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n   * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   *\\r\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n   */\\r\\n  function _beforeTokenTransfer(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) internal virtual {}\\r\\n\\r\\n  uint256[41] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./ContextUpgradeable.sol\\\";\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when the pause is triggered by `account`.\\r\\n   */\\r\\n  event Paused(address account);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the pause is lifted by `account`.\\r\\n   */\\r\\n  event Unpaused(address account);\\r\\n\\r\\n  bool private _paused;\\r\\n\\r\\n  /**\\r\\n   * @dev Initializes the contract in unpaused state.\\r\\n   */\\r\\n  function __Pausable_init() internal initializer {\\r\\n    __Context_init_unchained();\\r\\n    __Pausable_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __Pausable_init_unchained() internal initializer {\\r\\n    _paused = false;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the contract is paused, and false otherwise.\\r\\n   */\\r\\n  function paused() public view virtual returns (bool) {\\r\\n    return _paused;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must not be paused.\\r\\n   */\\r\\n  modifier whenNotPaused() {\\r\\n    require(!paused(), \\\"Pausable: paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Modifier to make a function callable only when the contract is paused.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must be paused.\\r\\n   */\\r\\n  modifier whenPaused() {\\r\\n    require(paused(), \\\"Pausable: not paused\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Triggers stopped state.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must not be paused.\\r\\n   */\\r\\n  function _pause() internal virtual whenNotPaused {\\r\\n    _paused = true;\\r\\n    emit Paused(_msgSender());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns to normal state.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The contract must be paused.\\r\\n   */\\r\\n  function _unpause() internal virtual whenPaused {\\r\\n    _paused = false;\\r\\n    emit Unpaused(_msgSender());\\r\\n  }\\r\\n\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\r\\n  /**\\r\\n   * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n   */\\r\\n  event Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 indexed tokenId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n   */\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed approved,\\r\\n    uint256 indexed tokenId\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n   */\\r\\n  event ApprovalForAll(\\r\\n    address indexed owner,\\r\\n    address indexed operator,\\r\\n    bool approved\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of tokens in ``owner``'s account.\\r\\n   */\\r\\n  function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the owner of the `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n   * The approval is cleared when the token is transferred.\\r\\n   *\\r\\n   * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The caller must own the token or be an approved operator.\\r\\n   * - `tokenId` must exist.\\r\\n   *\\r\\n   * Emits an {Approval} event.\\r\\n   */\\r\\n  function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the account approved for `tokenId` token.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `tokenId` must exist.\\r\\n   */\\r\\n  function getApproved(uint256 tokenId)\\r\\n    external\\r\\n    view\\r\\n    returns (address operator);\\r\\n\\r\\n  /**\\r\\n   * @dev Approve or remove `operator` as an operator for the caller.\\r\\n   * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The `operator` cannot be the caller.\\r\\n   *\\r\\n   * Emits an {ApprovalForAll} event.\\r\\n   */\\r\\n  function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n   *\\r\\n   * See {setApprovalForAll}\\r\\n   */\\r\\n  function isApprovedForAll(address owner, address operator)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  /**\\r\\n   * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `from` cannot be the zero address.\\r\\n   * - `to` cannot be the zero address.\\r\\n   * - `tokenId` token must exist and be owned by `from`.\\r\\n   * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n   *\\r\\n   * Emits a {Transfer} event.\\r\\n   */\\r\\n  function safeTransferFrom(\\r\\n    address from,\\r\\n    address to,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\r\\n  /**\\r\\n   * @dev Returns the token collection name.\\r\\n   */\\r\\n  function name() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the token collection symbol.\\r\\n   */\\r\\n  function symbol() external view returns (string memory);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n   */\\r\\n  function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\nimport \\\"./IERC721Upgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\r\\n  /**\\r\\n   * @dev Returns the total amount of tokens stored by the contract.\\r\\n   */\\r\\n  function totalSupply() external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n   * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n   */\\r\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256 tokenId);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n   * Use along with {totalSupply} to enumerate all tokens.\\r\\n   */\\r\\n  function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721ReceiverUpgradeable {\\r\\n  /**\\r\\n   * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n   * by `operator` from `from`, this function is called.\\r\\n   *\\r\\n   * It must return its Solidity selector to confirm the token transfer.\\r\\n   * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n   *\\r\\n   * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n   */\\r\\n  function onERC721Received(\\r\\n    address operator,\\r\\n    address from,\\r\\n    uint256 tokenId,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./IERC165Upgradeable.sol\\\";\\r\\nimport \\\"../proxy/Initializable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts may inherit from this and call {_registerInterface} to declare\\r\\n * their support of an interface.\\r\\n */\\r\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\r\\n  /*\\r\\n   * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\r\\n   */\\r\\n  bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\r\\n\\r\\n  /**\\r\\n   * @dev Mapping of interface ids to whether or not it's supported.\\r\\n   */\\r\\n  mapping(bytes4 => bool) private _supportedInterfaces;\\r\\n\\r\\n  function __ERC165_init() internal initializer {\\r\\n    __ERC165_init_unchained();\\r\\n  }\\r\\n\\r\\n  function __ERC165_init_unchained() internal initializer {\\r\\n    // Derived contracts need only register support for their own interfaces,\\r\\n    // we register support for ERC165 itself here\\r\\n    _registerInterface(_INTERFACE_ID_ERC165);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev See {IERC165-supportsInterface}.\\r\\n   *\\r\\n   * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId)\\r\\n    public\\r\\n    view\\r\\n    virtual\\r\\n    override\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _supportedInterfaces[interfaceId];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Registers the contract as an implementer of the interface defined by\\r\\n   * `interfaceId`. Support of the actual ERC165 interface is automatic and\\r\\n   * registering its interface id is not required.\\r\\n   *\\r\\n   * See {IERC165-supportsInterface}.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\r\\n   */\\r\\n  function _registerInterface(bytes4 interfaceId) internal virtual {\\r\\n    require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\r\\n    _supportedInterfaces[interfaceId] = true;\\r\\n  }\\r\\n\\r\\n  uint256[49] private __gap;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * `SafeMath` restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it's recommended to use it always.\\r\\n */\\r\\nlibrary SafeMathUpgradeable {\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    uint256 c = a + b;\\r\\n    if (c < a) return (false, 0);\\r\\n    return (true, c);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b > a) return (false, 0);\\r\\n    return (true, a - b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n    // benefit is lost if 'b' is also tested.\\r\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n    if (a == 0) return (true, 0);\\r\\n    uint256 c = a * b;\\r\\n    if (c / a != b) return (false, 0);\\r\\n    return (true, c);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b == 0) return (false, 0);\\r\\n    return (true, a / b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n    if (b == 0) return (false, 0);\\r\\n    return (true, a % b);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the addition of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `+` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Addition cannot overflow.\\r\\n   */\\r\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    uint256 c = a + b;\\r\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n   * overflow.\\r\\n   *\\r\\n   * Counterpart to Solidity's `*` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Multiplication cannot overflow.\\r\\n   */\\r\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0) return 0;\\r\\n    uint256 c = a * b;\\r\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n    return c;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0, \\\"SafeMath: division by zero\\\");\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting when dividing by zero.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b > 0, \\\"SafeMath: modulo by zero\\\");\\r\\n    return a % b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n   * overflow (when the result is negative).\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `-` operator.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - Subtraction cannot overflow.\\r\\n   */\\r\\n  function sub(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b <= a, errorMessage);\\r\\n    return a - b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n   * division by zero. The result is rounded towards zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryDiv}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n   * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n   * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function div(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b > 0, errorMessage);\\r\\n    return a / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n   * reverting with custom message when dividing by zero.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n   *\\r\\n   * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n   * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n   * invalid opcode to revert (consuming all remaining gas).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - The divisor cannot be zero.\\r\\n   */\\r\\n  function mod(\\r\\n    uint256 a,\\r\\n    uint256 b,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (uint256) {\\r\\n    require(b > 0, errorMessage);\\r\\n    return a % b;\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/EnumerableSetUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing\\r\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\r\\n * types.\\r\\n *\\r\\n * Sets have the following properties:\\r\\n *\\r\\n * - Elements are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableSet.AddressSet private mySet;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\r\\n * and `uint256` (`UintSet`) are supported.\\r\\n */\\r\\nlibrary EnumerableSetUpgradeable {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Set type with\\r\\n  // bytes32 values.\\r\\n  // The Set implementation uses private functions, and user-facing\\r\\n  // implementations (such as AddressSet) are just wrappers around the\\r\\n  // underlying Set.\\r\\n  // This means that we can only create new EnumerableSets for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct Set {\\r\\n    // Storage of set values\\r\\n    bytes32[] _values;\\r\\n    // Position of the value in the `values` array, plus 1 because index 0\\r\\n    // means a value is not in the set.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n    if (!_contains(set, value)) {\\r\\n      set._values.push(value);\\r\\n      // The value is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      set._indexes[value] = set._values.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n    uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n    if (valueIndex != 0) {\\r\\n      // Equivalent to contains(set, value)\\r\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = valueIndex - 1;\\r\\n      uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n      bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n      // Move the last value to the index where the value to delete is\\r\\n      set._values[toDeleteIndex] = lastvalue;\\r\\n      // Update the index for the moved value\\r\\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n      // Delete the slot where the moved value was stored\\r\\n      set._values.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete set._indexes[value];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function _contains(Set storage set, bytes32 value)\\r\\n    private\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return set._indexes[value] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function _length(Set storage set) private view returns (uint256) {\\r\\n    return set._values.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n    require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\r\\n    return set._values[index];\\r\\n  }\\r\\n\\r\\n  // Bytes32Set\\r\\n\\r\\n  struct Bytes32Set {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n    return _add(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(Bytes32Set storage set, bytes32 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(Bytes32Set storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes32)\\r\\n  {\\r\\n    return _at(set._inner, index);\\r\\n  }\\r\\n\\r\\n  // AddressSet\\r\\n\\r\\n  struct AddressSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(AddressSet storage set, address value)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(AddressSet storage set, address value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values in the set. O(1).\\r\\n   */\\r\\n  function length(AddressSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(AddressSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(uint160(uint256(_at(set._inner, index))));\\r\\n  }\\r\\n\\r\\n  // UintSet\\r\\n\\r\\n  struct UintSet {\\r\\n    Set _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Add a value to a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was added to the set, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _add(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the value was removed from the set, that is if it was\\r\\n   * present.\\r\\n   */\\r\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n    return _remove(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the value is in the set. O(1).\\r\\n   */\\r\\n  function contains(UintSet storage set, uint256 value)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(set._inner, bytes32(value));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of values on the set. O(1).\\r\\n   */\\r\\n  function length(UintSet storage set) internal view returns (uint256) {\\r\\n    return _length(set._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintSet storage set, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return uint256(_at(set._inner, index));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/EnumerableMapUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n * ```\\r\\n * contract Example {\\r\\n *     // Add the library methods\\r\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\r\\n *\\r\\n *     // Declare a set state variable\\r\\n *     EnumerableMap.UintToAddressMap private myMap;\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\r\\n * supported.\\r\\n */\\r\\nlibrary EnumerableMapUpgradeable {\\r\\n  // To implement this library for multiple types with as little code\\r\\n  // repetition as possible, we write it in terms of a generic Map type with\\r\\n  // bytes32 keys and values.\\r\\n  // The Map implementation uses private functions, and user-facing\\r\\n  // implementations (such as Uint256ToAddressMap) are just wrappers around\\r\\n  // the underlying Map.\\r\\n  // This means that we can only create new EnumerableMaps for types that fit\\r\\n  // in bytes32.\\r\\n\\r\\n  struct MapEntry {\\r\\n    bytes32 _key;\\r\\n    bytes32 _value;\\r\\n  }\\r\\n\\r\\n  struct Map {\\r\\n    // Storage of map keys and values\\r\\n    MapEntry[] _entries;\\r\\n    // Position of the entry defined by a key in the `entries` array, plus 1\\r\\n    // because index 0 means a key is not in the map.\\r\\n    mapping(bytes32 => uint256) _indexes;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n   * key. O(1).\\r\\n   *\\r\\n   * Returns true if the key was added to the map, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function _set(\\r\\n    Map storage map,\\r\\n    bytes32 key,\\r\\n    bytes32 value\\r\\n  ) private returns (bool) {\\r\\n    // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n    uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n    if (keyIndex == 0) {\\r\\n      // Equivalent to !contains(map, key)\\r\\n      map._entries.push(MapEntry({_key: key, _value: value}));\\r\\n      // The entry is stored at length-1, but we add 1 to all indexes\\r\\n      // and use 0 as a sentinel value\\r\\n      map._indexes[key] = map._entries.length;\\r\\n      return true;\\r\\n    } else {\\r\\n      map._entries[keyIndex - 1]._value = value;\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a key-value pair from a map. O(1).\\r\\n   *\\r\\n   * Returns true if the key was removed from the map, that is if it was present.\\r\\n   */\\r\\n  function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n    // We read and store the key's index to prevent multiple reads from the same storage slot\\r\\n    uint256 keyIndex = map._indexes[key];\\r\\n\\r\\n    if (keyIndex != 0) {\\r\\n      // Equivalent to contains(map, key)\\r\\n      // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\r\\n      // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\r\\n      // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n      uint256 toDeleteIndex = keyIndex - 1;\\r\\n      uint256 lastIndex = map._entries.length - 1;\\r\\n\\r\\n      // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\r\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\r\\n\\r\\n      MapEntry storage lastEntry = map._entries[lastIndex];\\r\\n\\r\\n      // Move the last entry to the index where the entry to delete is\\r\\n      map._entries[toDeleteIndex] = lastEntry;\\r\\n      // Update the index for the moved entry\\r\\n      map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\r\\n\\r\\n      // Delete the slot where the moved entry was stored\\r\\n      map._entries.pop();\\r\\n\\r\\n      // Delete the index for the deleted slot\\r\\n      delete map._indexes[key];\\r\\n\\r\\n      return true;\\r\\n    } else {\\r\\n      return false;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the key is in the map. O(1).\\r\\n   */\\r\\n  function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n    return map._indexes[key] != 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n   */\\r\\n  function _length(Map storage map) private view returns (uint256) {\\r\\n    return map._entries.length;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n   *\\r\\n   * Note that there are no guarantees on the ordering of entries inside the\\r\\n   * array, and it may change when more entries are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function _at(Map storage map, uint256 index)\\r\\n    private\\r\\n    view\\r\\n    returns (bytes32, bytes32)\\r\\n  {\\r\\n    require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\r\\n\\r\\n    MapEntry storage entry = map._entries[index];\\r\\n    return (entry._key, entry._value);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n   * Does not revert if `key` is not in the map.\\r\\n   */\\r\\n  function _tryGet(Map storage map, bytes32 key)\\r\\n    private\\r\\n    view\\r\\n    returns (bool, bytes32)\\r\\n  {\\r\\n    uint256 keyIndex = map._indexes[key];\\r\\n    if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\r\\n    return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value associated with `key`.  O(1).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `key` must be in the map.\\r\\n   */\\r\\n  function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n    uint256 keyIndex = map._indexes[key];\\r\\n    require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\r\\n    return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n   */\\r\\n  function _get(\\r\\n    Map storage map,\\r\\n    bytes32 key,\\r\\n    string memory errorMessage\\r\\n  ) private view returns (bytes32) {\\r\\n    uint256 keyIndex = map._indexes[key];\\r\\n    require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\r\\n    return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\r\\n  }\\r\\n\\r\\n  // UintToAddressMap\\r\\n\\r\\n  struct UintToAddressMap {\\r\\n    Map _inner;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n   * key. O(1).\\r\\n   *\\r\\n   * Returns true if the key was added to the map, that is if it was not\\r\\n   * already present.\\r\\n   */\\r\\n  function set(\\r\\n    UintToAddressMap storage map,\\r\\n    uint256 key,\\r\\n    address value\\r\\n  ) internal returns (bool) {\\r\\n    return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes a value from a set. O(1).\\r\\n   *\\r\\n   * Returns true if the key was removed from the map, that is if it was present.\\r\\n   */\\r\\n  function remove(UintToAddressMap storage map, uint256 key)\\r\\n    internal\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _remove(map._inner, bytes32(key));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the key is in the map. O(1).\\r\\n   */\\r\\n  function contains(UintToAddressMap storage map, uint256 key)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n  {\\r\\n    return _contains(map._inner, bytes32(key));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of elements in the map. O(1).\\r\\n   */\\r\\n  function length(UintToAddressMap storage map)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return _length(map._inner);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n   * Note that there are no guarantees on the ordering of values inside the\\r\\n   * array, and it may change when more values are added or removed.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `index` must be strictly less than {length}.\\r\\n   */\\r\\n  function at(UintToAddressMap storage map, uint256 index)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256, address)\\r\\n  {\\r\\n    (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n    return (uint256(key), address(uint160(uint256(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n   * Does not revert if `key` is not in the map.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function tryGet(UintToAddressMap storage map, uint256 key)\\r\\n    internal\\r\\n    view\\r\\n    returns (bool, address)\\r\\n  {\\r\\n    (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\r\\n    return (success, address(uint160(uint256(value))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the value associated with `key`.  O(1).\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `key` must be in the map.\\r\\n   */\\r\\n  function get(UintToAddressMap storage map, uint256 key)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n  {\\r\\n    return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n   *\\r\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n   */\\r\\n  function get(\\r\\n    UintToAddressMap storage map,\\r\\n    uint256 key,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (address) {\\r\\n    return\\r\\n      address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary StringsUpgradeable {\\r\\n  /**\\r\\n   * @dev Converts a `uint256` to its ASCII `string` representation.\\r\\n   */\\r\\n  function toString(uint256 value) internal pure returns (string memory) {\\r\\n    // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n    // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n    if (value == 0) {\\r\\n      return \\\"0\\\";\\r\\n    }\\r\\n    uint256 temp = value;\\r\\n    uint256 digits;\\r\\n    while (temp != 0) {\\r\\n      digits++;\\r\\n      temp /= 10;\\r\\n    }\\r\\n    bytes memory buffer = new bytes(digits);\\r\\n    uint256 index = digits - 1;\\r\\n    temp = value;\\r\\n    while (temp != 0) {\\r\\n      buffer[index--] = bytes1(uint8(48 + (temp % 10)));\\r\\n      temp /= 10;\\r\\n    }\\r\\n    return string(buffer);\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165Upgradeable {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IBeacon {\\r\\n  /**\\r\\n   * @dev Must return an address that can be used as a delegate call target.\\r\\n   *\\r\\n   * {BeaconProxy} will check that this address is a contract.\\r\\n   */\\r\\n  function implementation() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/proxy/Proxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\r\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\r\\n * be specified by overriding the virtual {_implementation} function.\\r\\n *\\r\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\r\\n * different contract through the {_delegate} function.\\r\\n *\\r\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\r\\n */\\r\\nabstract contract Proxy {\\r\\n  /**\\r\\n   * @dev Delegates the current call to `implementation`.\\r\\n   *\\r\\n   * This function does not return to its internal call site, it will return directly to the external caller.\\r\\n   */\\r\\n  function _delegate(address implementation) internal virtual {\\r\\n    assembly {\\r\\n      // Copy msg.data. We take full control of memory in this inline assembly\\r\\n      // block because it will not return to Solidity code. We overwrite the\\r\\n      // Solidity scratch pad at memory position 0.\\r\\n      calldatacopy(0, 0, calldatasize())\\r\\n\\r\\n      // Call the implementation.\\r\\n      // out and outsize are 0 because we don't know the size yet.\\r\\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\r\\n\\r\\n      // Copy the returned data.\\r\\n      returndatacopy(0, 0, returndatasize())\\r\\n\\r\\n      switch result\\r\\n      // delegatecall returns 0 on error.\\r\\n      case 0 {\\r\\n        revert(0, returndatasize())\\r\\n      }\\r\\n      default {\\r\\n        return(0, returndatasize())\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\r\\n   * and {_fallback} should delegate.\\r\\n   */\\r\\n  function _implementation() internal view virtual returns (address);\\r\\n\\r\\n  /**\\r\\n   * @dev Delegates the current call to the address returned by `_implementation()`.\\r\\n   *\\r\\n   * This function does not return to its internall call site, it will return directly to the external caller.\\r\\n   */\\r\\n  function _fallback() internal virtual {\\r\\n    _beforeFallback();\\r\\n    _delegate(_implementation());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\r\\n   * function in the contract matches the call data.\\r\\n   */\\r\\n  fallback() external payable virtual {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\r\\n   * is empty.\\r\\n   */\\r\\n  receive() external payable virtual {\\r\\n    _fallback();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\r\\n   * call, or as part of the Solidity `fallback` or `receive` functions.\\r\\n   *\\r\\n   * If overriden should call `super._beforeFallback()`.\\r\\n   */\\r\\n  function _beforeFallback() internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/proxy/ERC1967/ERC1967Upgrade.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\r\\n\\r\\npragma solidity ^0.8.2;\\r\\n\\r\\nimport \\\"../beacon/IBeacon.sol\\\";\\r\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\r\\nimport \\\"../../utils/Address.sol\\\";\\r\\nimport \\\"../../utils/StorageSlot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev This abstract contract provides getters and event emitting update functions for\\r\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n *\\r\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\r\\n */\\r\\nabstract contract ERC1967Upgrade {\\r\\n  // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\r\\n  bytes32 private constant _ROLLBACK_SLOT =\\r\\n    0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the address of the current implementation.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _IMPLEMENTATION_SLOT =\\r\\n    0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the implementation is upgraded.\\r\\n   */\\r\\n  event Upgraded(address indexed implementation);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current implementation address.\\r\\n   */\\r\\n  function _getImplementation() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new address in the EIP1967 implementation slot.\\r\\n   */\\r\\n  function _setImplementation(address newImplementation) private {\\r\\n    require(\\r\\n      Address.isContract(newImplementation),\\r\\n      \\\"ERC1967: new implementation is not a contract\\\"\\r\\n    );\\r\\n    StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeTo(address newImplementation) internal {\\r\\n    _setImplementation(newImplementation);\\r\\n    emit Upgraded(newImplementation);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade with additional setup call.\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeToAndCall(\\r\\n    address newImplementation,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    _upgradeTo(newImplementation);\\r\\n    if (data.length > 0 || forceCall) {\\r\\n      Address.functionDelegateCall(newImplementation, data);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\r\\n   *\\r\\n   * Emits an {Upgraded} event.\\r\\n   */\\r\\n  function _upgradeToAndCallUUPS(\\r\\n    address newImplementation,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    // Upgrades from old implementations will perform a rollback test. This test requires the new\\r\\n    // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\r\\n    // this special case will break upgrade paths from old UUPS implementation to new ones.\\r\\n    if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\r\\n      _setImplementation(newImplementation);\\r\\n    } else {\\r\\n      try IERC1822Proxiable(newImplementation).proxiableUUID() returns (\\r\\n        bytes32 slot\\r\\n      ) {\\r\\n        require(\\r\\n          slot == _IMPLEMENTATION_SLOT,\\r\\n          \\\"ERC1967Upgrade: unsupported proxiableUUID\\\"\\r\\n        );\\r\\n      } catch {\\r\\n        revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\r\\n      }\\r\\n      _upgradeToAndCall(newImplementation, data, forceCall);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Storage slot with the admin of the contract.\\r\\n   * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\r\\n   * validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _ADMIN_SLOT =\\r\\n    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the admin account has changed.\\r\\n   */\\r\\n  event AdminChanged(address previousAdmin, address newAdmin);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current admin.\\r\\n   */\\r\\n  function _getAdmin() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new address in the EIP1967 admin slot.\\r\\n   */\\r\\n  function _setAdmin(address newAdmin) private {\\r\\n    require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\r\\n    StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Changes the admin of the proxy.\\r\\n   *\\r\\n   * Emits an {AdminChanged} event.\\r\\n   */\\r\\n  function _changeAdmin(address newAdmin) internal {\\r\\n    emit AdminChanged(_getAdmin(), newAdmin);\\r\\n    _setAdmin(newAdmin);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\r\\n   * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\r\\n   */\\r\\n  bytes32 internal constant _BEACON_SLOT =\\r\\n    0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when the beacon is upgraded.\\r\\n   */\\r\\n  event BeaconUpgraded(address indexed beacon);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the current beacon.\\r\\n   */\\r\\n  function _getBeacon() internal view returns (address) {\\r\\n    return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Stores a new beacon in the EIP1967 beacon slot.\\r\\n   */\\r\\n  function _setBeacon(address newBeacon) private {\\r\\n    require(\\r\\n      Address.isContract(newBeacon),\\r\\n      \\\"ERC1967: new beacon is not a contract\\\"\\r\\n    );\\r\\n    require(\\r\\n      Address.isContract(IBeacon(newBeacon).implementation()),\\r\\n      \\\"ERC1967: beacon implementation is not a contract\\\"\\r\\n    );\\r\\n    StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\r\\n   * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\r\\n   *\\r\\n   * Emits a {BeaconUpgraded} event.\\r\\n   */\\r\\n  function _upgradeBeaconToAndCall(\\r\\n    address newBeacon,\\r\\n    bytes memory data,\\r\\n    bool forceCall\\r\\n  ) internal {\\r\\n    _setBeacon(newBeacon);\\r\\n    emit BeaconUpgraded(newBeacon);\\r\\n    if (data.length > 0 || forceCall) {\\r\\n      Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\r\\n * proxy whose upgrades are fully controlled by the current implementation.\\r\\n */\\r\\ninterface IERC1822Proxiable {\\r\\n  /**\\r\\n   * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\r\\n   * address.\\r\\n   *\\r\\n   * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\r\\n   * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\r\\n   * function revert if invoked through a proxy.\\r\\n   */\\r\\n  function proxiableUUID() external view returns (bytes32);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/oz/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n  /**\\r\\n   * @dev Returns true if `account` is a contract.\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * It is unsafe to assume that an address for which this function returns\\r\\n   * false is an externally-owned account (EOA) and not a contract.\\r\\n   *\\r\\n   * Among others, `isContract` will return false for the following\\r\\n   * types of addresses:\\r\\n   *\\r\\n   *  - an externally-owned account\\r\\n   *  - a contract in construction\\r\\n   *  - an address where a contract will be created\\r\\n   *  - an address where a contract lived, but was destroyed\\r\\n   * ====\\r\\n   *\\r\\n   * [IMPORTANT]\\r\\n   * ====\\r\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n   *\\r\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n   * constructor.\\r\\n   * ====\\r\\n   */\\r\\n  function isContract(address account) internal view returns (bool) {\\r\\n    // This method relies on extcodesize/address.code.length, which returns 0\\r\\n    // for contracts in construction, since the code is only stored at the end\\r\\n    // of the constructor execution.\\r\\n\\r\\n    return account.code.length > 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n   * `recipient`, forwarding all available gas and reverting on errors.\\r\\n   *\\r\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n   * imposed by `transfer`, making them unable to receive funds via\\r\\n   * `transfer`. {sendValue} removes this limitation.\\r\\n   *\\r\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n   *\\r\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n   * taken to not create reentrancy vulnerabilities. Consider using\\r\\n   * {ReentrancyGuard} or the\\r\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n   */\\r\\n  function sendValue(address payable recipient, uint256 amount) internal {\\r\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n    require(\\r\\n      success,\\r\\n      \\\"Address: unable to send value, recipient may have reverted\\\"\\r\\n    );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Performs a Solidity function call using a low level `call`. A\\r\\n   * plain `call` is an unsafe replacement for a function call: use this\\r\\n   * function instead.\\r\\n   *\\r\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n   * function (like regular Solidity function calls).\\r\\n   *\\r\\n   * Returns the raw returned data. To convert to the expected return value,\\r\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - `target` must be a contract.\\r\\n   * - calling `target` with `data` must not revert.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    return functionCallWithValue(target, data, 0, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but also transferring `value` wei to `target`.\\r\\n   *\\r\\n   * Requirements:\\r\\n   *\\r\\n   * - the calling contract must have an ETH balance of at least `value`.\\r\\n   * - the called Solidity function must be `payable`.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value\\r\\n  ) internal returns (bytes memory) {\\r\\n    return\\r\\n      functionCallWithValue(\\r\\n        target,\\r\\n        data,\\r\\n        value,\\r\\n        \\\"Address: low-level call with value failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n   *\\r\\n   * _Available since v3.1._\\r\\n   */\\r\\n  function functionCallWithValue(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    uint256 value,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(\\r\\n      address(this).balance >= value,\\r\\n      \\\"Address: insufficient balance for call\\\"\\r\\n    );\\r\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(address target, bytes memory data)\\r\\n    internal\\r\\n    view\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a static call.\\r\\n   *\\r\\n   * _Available since v3.3._\\r\\n   */\\r\\n  function functionStaticCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal view returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(address target, bytes memory data)\\r\\n    internal\\r\\n    returns (bytes memory)\\r\\n  {\\r\\n    return\\r\\n      functionDelegateCall(\\r\\n        target,\\r\\n        data,\\r\\n        \\\"Address: low-level delegate call failed\\\"\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n   * but performing a delegate call.\\r\\n   *\\r\\n   * _Available since v3.4._\\r\\n   */\\r\\n  function functionDelegateCall(\\r\\n    address target,\\r\\n    bytes memory data,\\r\\n    string memory errorMessage\\r\\n  ) internal returns (bytes memory) {\\r\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n    return verifyCallResult(success, returndata, errorMessage);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n   * revert reason using the provided one.\\r\\n   *\\r\\n   * _Available since v4.3._\\r\\n   */\\r\\n  function verifyCallResult(\\r\\n    bool success,\\r\\n    bytes memory returndata,\\r\\n    string memory errorMessage\\r\\n  ) internal pure returns (bytes memory) {\\r\\n    if (success) {\\r\\n      return returndata;\\r\\n    } else {\\r\\n      // Look for revert reason and bubble it up if present\\r\\n      if (returndata.length > 0) {\\r\\n        // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n        assembly {\\r\\n          let returndata_size := mload(returndata)\\r\\n          revert(add(32, returndata), returndata_size)\\r\\n        }\\r\\n      } else {\\r\\n        revert(errorMessage);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"labelHash\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"name\":\"DomainCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"MetadataChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLocked\",\"type\":\"bool\"}],\"name\":\"MetadataLockChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltiesAmountChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminBurnToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"adminSetMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"adminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beacon\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"domainController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"domainExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"domainMetadataLockedBy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"domainRoyaltyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"parentRegistrar_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rootDomainId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"collectionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collectionSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"zNSHub_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isController\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isDomainMetadataLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"toLock\",\"type\":\"bool\"}],\"name\":\"lockDomainMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"minterOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"parentOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentRegistrar\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"metadataLocked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"metadataLockedBy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"subdomainContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"registerDomain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sendToUser\",\"type\":\"address\"}],\"name\":\"registerDomainAndSend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"namingOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"folderWithIPFSPrefix\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"}],\"name\":\"registerDomainAndSendBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadataUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"locked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sendToUser\",\"type\":\"address\"}],\"name\":\"registerSubdomainContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootDomainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setAndLockDomainMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setDomainMetadataUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setDomainRoyaltyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IZNSHub\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setZNSHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zNSHub\",\"outputs\":[{\"internalType\":\"contract IZNSHub\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"Registrar","CompilerVersion":"v0.8.11+commit.d7f03943","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]