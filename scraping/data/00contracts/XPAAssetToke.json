[{"SourceCode":"pragma solidity ^0.4.21;\r\n\r\ninterface Token {\r\n    function totalSupply() constant external returns (uint256 ts);\r\n    function balanceOf(address _owner) constant external returns (uint256 balance);\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\ninterface Baliv {\r\n    function getPrice(address fromToken_, address toToken_) external view returns(uint256);\r\n}\r\n\r\ncontract TokenRecipient {\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        uint256 z = x + y;\r\n        require((z >= x) && (z >= y));\r\n        return z;\r\n    }\r\n\r\n    function safeSub(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        require(x >= y);\r\n        uint256 z = x - y;\r\n        return z;\r\n    }\r\n\r\n    function safeMul(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        uint z = x * y;\r\n        require((x == 0) || (z / x == y));\r\n        return z;\r\n    }\r\n    \r\n    function safeDiv(uint x, uint y)\r\n        internal\r\n        pure\r\n    returns(uint) {\r\n        require(y > 0);\r\n        return x / y;\r\n    }\r\n\r\n    function random(uint N, uint salt)\r\n        internal\r\n        view\r\n    returns(uint) {\r\n        bytes32 hash = keccak256(block.number, msg.sender, salt);\r\n        return uint(hash) % N;\r\n    }\r\n}\r\n\r\ncontract Authorization {\r\n    mapping(address => bool) internal authbook;\r\n    address[] public operators;\r\n    address public owner;\r\n    bool public powerStatus = true;\r\n    function Authorization()\r\n        public\r\n        payable\r\n    {\r\n        owner = msg.sender;\r\n        assignOperator(msg.sender);\r\n    }\r\n    modifier onlyOwner\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    modifier onlyOperator\r\n    {\r\n        assert(checkOperator(msg.sender));\r\n        _;\r\n    }\r\n    modifier onlyActive\r\n    {\r\n        assert(powerStatus);\r\n        _;\r\n    }\r\n    function powerSwitch(\r\n        bool onOff_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        powerStatus = onOff_;\r\n    }\r\n    function transferOwnership(address newOwner_)\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n    \r\n    function assignOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        if(user_ != address(0) && !authbook[user_]) {\r\n            authbook[user_] = true;\r\n            operators.push(user_);\r\n        }\r\n    }\r\n    \r\n    function dismissOperator(address user_)\r\n        public\r\n        onlyOwner\r\n    {\r\n        delete authbook[user_];\r\n        for(uint i = 0; i < operators.length; i++) {\r\n            if(operators[i] == user_) {\r\n                operators[i] = operators[operators.length - 1];\r\n                operators.length -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkOperator(address user_)\r\n        public\r\n        view\r\n    returns(bool) {\r\n        return authbook[user_];\r\n    }\r\n}\r\n\r\ncontract StandardToken is SafeMath {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping (address => uint256)) allowed;\r\n    uint256 public totalSupply;\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n    event Issue(address indexed _to, uint256 indexed _value);\r\n    event Burn(address indexed _from, uint256 indexed _value);\r\n\r\n    /* constructure */\r\n    function StandardToken() public payable {}\r\n\r\n    /* Send coins */\r\n    function transfer(\r\n        address to_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        if(balances[msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], amount_);\r\n            balances[to_] = safeAdd(balances[to_], amount_);\r\n            emit Transfer(msg.sender, to_, amount_);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* A contract attempts to get the coins */\r\n    function transferFrom(\r\n        address from_,\r\n        address to_,\r\n        uint256 amount_\r\n    ) public returns(bool success) {\r\n        if(balances[from_] >= amount_ && allowed[from_][msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[to_] = safeAdd(balances[to_], amount_);\r\n            balances[from_] = safeSub(balances[from_], amount_);\r\n            allowed[from_][msg.sender] = safeSub(allowed[from_][msg.sender], amount_);\r\n            emit Transfer(from_, to_, amount_);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function balanceOf(\r\n        address _owner\r\n    )\r\n        constant\r\n        public\r\n    returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    /* Allow another contract to spend some tokens in your behalf */\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    )\r\n        public\r\n    returns (bool success) {\r\n        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /* Approve and then communicate the approved contract in a single tx */\r\n    function approveAndCall(\r\n        address _spender,\r\n        uint256 _value,\r\n        bytes _extraData\r\n    )\r\n        public\r\n    returns (bool success) {    \r\n        if (approve(_spender, _value)) {\r\n            TokenRecipient(_spender).receiveApproval(msg.sender, _value, this, _extraData);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract XPAAssetToken is StandardToken, Authorization {\r\n    // metadata\r\n    address[] public burners;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public defaultExchangeRate;\r\n    uint256 public constant decimals = 18;\r\n\r\n    // constructor\r\n    function XPAAssetToken(\r\n        string symbol_,\r\n        string name_,\r\n        uint256 defaultExchangeRate_\r\n    )\r\n        public\r\n    {\r\n        totalSupply = 0;\r\n        symbol = symbol_;\r\n        name = name_;\r\n        defaultExchangeRate = defaultExchangeRate_ > 0 ? defaultExchangeRate_ : 0.01 ether;\r\n    }\r\n\r\n    function transferOwnership(\r\n        address newOwner_\r\n    )\r\n        onlyOwner\r\n        public\r\n    {\r\n        owner = newOwner_;\r\n    }\r\n\r\n    function create(\r\n        address user_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n        onlyOperator\r\n    returns(bool success) {\r\n        if(amount_ > 0 && user_ != address(0)) {\r\n            totalSupply = safeAdd(totalSupply, amount_);\r\n            balances[user_] = safeAdd(balances[user_], amount_);\r\n            emit Issue(owner, amount_);\r\n            emit Transfer(owner, user_, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burn(\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        require(allowToBurn(msg.sender));\r\n        if(amount_ > 0 && balances[msg.sender] >= amount_) {\r\n            balances[msg.sender] = safeSub(balances[msg.sender], amount_);\r\n            totalSupply = safeSub(totalSupply, amount_);\r\n            emit Transfer(msg.sender, owner, amount_);\r\n            emit Burn(owner, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function burnFrom(\r\n        address user_,\r\n        uint256 amount_\r\n    )\r\n        public\r\n    returns(bool success) {\r\n        require(allowToBurn(msg.sender));\r\n        if(balances[user_] >= amount_ && allowed[user_][msg.sender] >= amount_ && amount_ > 0) {\r\n            balances[user_] = safeSub(balances[user_], amount_);\r\n            totalSupply = safeSub(totalSupply, amount_);\r\n            allowed[user_][msg.sender] = safeSub(allowed[user_][msg.sender], amount_);\r\n            emit Transfer(user_, owner, amount_);\r\n            emit Burn(owner, amount_);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getDefaultExchangeRate(\r\n    )\r\n        public\r\n        view\r\n    returns(uint256) {\r\n        return defaultExchangeRate;\r\n    }\r\n\r\n    function getSymbol(\r\n    )\r\n        public\r\n        view\r\n    returns(bytes32) {\r\n        return keccak256(symbol);\r\n    }\r\n\r\n    function assignBurner(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                return;\r\n            }\r\n        }\r\n        burners.push(account_);\r\n    }\r\n\r\n    function dismissBunner(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                burners[i] = burners[burners.length - 1];\r\n                burners.length -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function allowToBurn(\r\n        address account_\r\n    )\r\n        public\r\n        view\r\n    returns(bool) {\r\n        if(checkOperator(account_)) {\r\n            return true;\r\n        }\r\n        for(uint256 i = 0; i < burners.length; i++) {\r\n            if(burners[i] == account_) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract TokenFactory is Authorization {\r\n    string public version = \"0.5.0\";\r\n\r\n    event eNominatingExchange(address);\r\n    event eNominatingXPAAssets(address);\r\n    event eNominatingETHAssets(address);\r\n    event eCancelNominatingExchange(address);\r\n    event eCancelNominatingXPAAssets(address);\r\n    event eCancelNominatingETHAssets(address);\r\n    event eChangeExchange(address, address);\r\n    event eChangeXPAAssets(address, address);\r\n    event eChangeETHAssets(address, address);\r\n    event eAddFundAccount(address);\r\n    event eRemoveFundAccount(address);\r\n\r\n    address[] public assetTokens;\r\n    address[] public fundAccounts;\r\n    address public exchange = 0x008ea74569c1b9bbb13780114b6b5e93396910070a;\r\n    address public exchangeOldVersion = 0x0013b4b9c415213bb2d0a5d692b6f2e787b927c211;\r\n    address public XPAAssets = address(0);\r\n    address public ETHAssets = address(0);\r\n    address public candidateXPAAssets = address(0);\r\n    address public candidateETHAssets = address(0);\r\n    address public candidateExchange = address(0);\r\n    uint256 public candidateTillXPAAssets = 0;\r\n    uint256 public candidateTillETHAssets = 0;\r\n    uint256 public candidateTillExchange = 0;\r\n    address public XPA = 0x0090528aeb3a2b736b780fd1b6c478bb7e1d643170;\r\n    address public ETH = address(0);\r\n\r\n     /* constructor */\r\n    function TokenFactory(\r\n        address XPAAddr, \r\n        address balivAddr\r\n    ) public {\r\n        XPA = XPAAddr;\r\n        exchange = balivAddr;\r\n    }\r\n\r\n    function createToken(\r\n        string symbol_,\r\n        string name_,\r\n        uint256 defaultExchangeRate_\r\n    )\r\n        public\r\n    returns(address) {\r\n        require(msg.sender == XPAAssets);\r\n        bool tokenRepeat = false;\r\n        address newAsset;\r\n        for(uint256 i = 0; i < assetTokens.length; i++) {\r\n            if(XPAAssetToken(assetTokens[i]).getSymbol() == keccak256(symbol_)){\r\n                tokenRepeat = true;\r\n                newAsset = assetTokens[i];\r\n                break;\r\n            }\r\n        }\r\n        if(!tokenRepeat){\r\n            newAsset = new XPAAssetToken(symbol_, name_, defaultExchangeRate_);\r\n            XPAAssetToken(newAsset).assignOperator(XPAAssets);\r\n            XPAAssetToken(newAsset).assignOperator(ETHAssets);\r\n            for(uint256 j = 0; j < fundAccounts.length; j++) {\r\n                XPAAssetToken(newAsset).assignBurner(fundAccounts[j]);\r\n            }\r\n            assetTokens.push(newAsset);\r\n        }\r\n        return newAsset;\r\n    }\r\n\r\n    // set to candadite, after 7 days set to exchange, set again after 7 days\r\n    function setExchange(\r\n        address exchange_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(\r\n            exchange_ != address(0)\r\n        );\r\n        if(\r\n            exchange_ == exchange &&\r\n            candidateExchange != address(0)\r\n        ) {\r\n            emit eCancelNominatingExchange(candidateExchange);\r\n            candidateExchange = address(0);\r\n            candidateTillExchange = 0;\r\n        } else if(\r\n            exchange == address(0)\r\n        ) {\r\n            // initial value\r\n            emit eChangeExchange(address(0), exchange_);\r\n            exchange = exchange_;\r\n            exchangeOldVersion = exchange_;\r\n        } else if(\r\n            exchange_ != candidateExchange &&\r\n            candidateTillExchange + 86400 * 7 < block.timestamp\r\n        ) {\r\n            // set to candadite\r\n            emit eNominatingExchange(exchange_);\r\n            candidateExchange = exchange_;\r\n            candidateTillExchange = block.timestamp + 86400 * 7;\r\n        } else if(\r\n            exchange_ == candidateExchange &&\r\n            candidateTillExchange < block.timestamp\r\n        ) {\r\n            // set to exchange\r\n            emit eChangeExchange(exchange, candidateExchange);\r\n            exchangeOldVersion = exchange;\r\n            exchange = candidateExchange;\r\n            candidateExchange = address(0);\r\n        }\r\n    }\r\n\r\n    function setXPAAssets(\r\n        address XPAAssets_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(\r\n            XPAAssets_ != address(0)\r\n        );\r\n        if(\r\n            XPAAssets_ == XPAAssets &&\r\n            candidateXPAAssets != address(0)\r\n        ) {\r\n            emit eCancelNominatingXPAAssets(candidateXPAAssets);\r\n            candidateXPAAssets = address(0);\r\n            candidateTillXPAAssets = 0;\r\n        } else if(\r\n            XPAAssets == address(0)\r\n        ) {\r\n            // initial value\r\n            emit eChangeXPAAssets(address(0), XPAAssets_);\r\n            XPAAssets = XPAAssets_;\r\n        } else if(\r\n            XPAAssets_ != candidateXPAAssets &&\r\n            candidateTillXPAAssets + 86400 * 7 < block.timestamp\r\n        ) {\r\n            // set to candadite\r\n            emit eNominatingXPAAssets(XPAAssets_);\r\n            candidateXPAAssets = XPAAssets_;\r\n            candidateTillXPAAssets = block.timestamp + 86400 * 7;\r\n        } else if(\r\n            XPAAssets_ == candidateXPAAssets &&\r\n            candidateTillXPAAssets < block.timestamp\r\n        ) {\r\n            // set to XPAAssets\r\n            emit eChangeXPAAssets(XPAAssets, candidateXPAAssets);\r\n            dismissTokenOperator(XPAAssets);\r\n            assignTokenOperator(candidateXPAAssets);\r\n            XPAAssets = candidateXPAAssets;\r\n            candidateXPAAssets = address(0);\r\n        }\r\n    }\r\n\r\n    function setETHAssets(\r\n        address ETHAssets_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(\r\n            ETHAssets_ != address(0)\r\n        );\r\n        if(\r\n            ETHAssets_ == ETHAssets &&\r\n            candidateETHAssets != address(0)\r\n        ) {\r\n            emit eCancelNominatingETHAssets(candidateETHAssets);\r\n            candidateETHAssets = address(0);\r\n            candidateTillETHAssets = 0;\r\n        } else if(\r\n            ETHAssets == address(0)\r\n        ) {\r\n            // initial value\r\n            ETHAssets = ETHAssets_;\r\n        } else if(\r\n            ETHAssets_ != candidateETHAssets &&\r\n            candidateTillETHAssets + 86400 * 7 < block.timestamp\r\n        ) {\r\n            // set to candadite\r\n            emit eNominatingETHAssets(ETHAssets_);\r\n            candidateETHAssets = ETHAssets_;\r\n            candidateTillETHAssets = block.timestamp + 86400 * 7;\r\n        } else if(\r\n            ETHAssets_ == candidateETHAssets &&\r\n            candidateTillETHAssets < block.timestamp\r\n        ) {\r\n            // set to ETHAssets\r\n            emit eChangeETHAssets(ETHAssets, candidateETHAssets);\r\n            dismissTokenOperator(ETHAssets);\r\n            assignTokenOperator(candidateETHAssets);\r\n            ETHAssets = candidateETHAssets;\r\n            candidateETHAssets = address(0);\r\n        }\r\n    }\r\n\r\n    function addFundAccount(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        for(uint256 i = 0; i < fundAccounts.length; i++) {\r\n            if(fundAccounts[i] == account_) {\r\n                return;\r\n            }\r\n        }\r\n        for(uint256 j = 0; j < assetTokens.length; j++) {\r\n            XPAAssetToken(assetTokens[i]).assignBurner(account_);\r\n        }\r\n        emit eAddFundAccount(account_);\r\n        fundAccounts.push(account_);\r\n    }\r\n\r\n    function removeFundAccount(\r\n        address account_\r\n    )\r\n        public\r\n        onlyOperator\r\n    {\r\n        require(account_ != address(0));\r\n        uint256 i = 0;\r\n        uint256 j = 0;\r\n        for(i = 0; i < fundAccounts.length; i++) {\r\n            if(fundAccounts[i] == account_) {\r\n                for(j = 0; j < assetTokens.length; j++) {\r\n                    XPAAssetToken(assetTokens[i]).dismissBunner(account_);\r\n                }\r\n                fundAccounts[i] = fundAccounts[fundAccounts.length - 1];\r\n                fundAccounts.length -= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPrice(\r\n        address token_\r\n    ) \r\n        public\r\n        view\r\n    returns(uint256) {\r\n        uint256 currPrice = Baliv(exchange).getPrice(XPA, token_);\r\n        if(currPrice == 0) {\r\n            currPrice = XPAAssetToken(token_).getDefaultExchangeRate();\r\n        }\r\n        return currPrice;\r\n    }\r\n\r\n    function getAssetLength(\r\n    )\r\n        public\r\n        view\r\n    returns(uint256) {\r\n        return assetTokens.length;\r\n    }\r\n\r\n    function getAssetToken(\r\n        uint256 index_\r\n    )\r\n        public\r\n        view\r\n    returns(address) {\r\n        return assetTokens[index_];\r\n    }\r\n\r\n    function assignTokenOperator(address user_)\r\n        internal\r\n    {\r\n        if(user_ != address(0)) {\r\n            for(uint256 i = 0; i < assetTokens.length; i++) {\r\n                XPAAssetToken(assetTokens[i]).assignOperator(user_);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function dismissTokenOperator(address user_)\r\n        internal\r\n    {\r\n        if(user_ != address(0)) {\r\n            for(uint256 i = 0; i < assetTokens.length; i++) {\r\n                XPAAssetToken(assetTokens[i]).dismissOperator(user_);\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"defaultExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from_\",\"type\":\"address\"},{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"allowToBurn\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"assignOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"dismissOperator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burners\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"assignBurner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to_\",\"type\":\"address\"},{\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"},{\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"onOff_\",\"type\":\"bool\"}],\"name\":\"powerSwitch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"checkOperator\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"powerStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDefaultExchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"dismissBunner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"symbol_\",\"type\":\"string\"},{\"name\":\"name_\",\"type\":\"string\"},{\"name\":\"defaultExchangeRate_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}]","ContractName":"XPAAssetToken","CompilerVersion":"v0.4.21+commit.dfe3193c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000003555358000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000065850415553440000000000000000000000000000000000000000000000000000","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://4577ac0ba9eb8d87fea651b988ff807b0bc94dd32592f4ce9f9e2bf22ea472a3"}]