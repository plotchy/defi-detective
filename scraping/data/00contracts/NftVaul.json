[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/NFTVAULTV2.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint8);\\n}\\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// File: @openzeppelin/contracts/access/Ownable.sol\\n\\n\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n// File: contracts/IERC721A.sol\\n\\n\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n// File: contracts/NFTVAULT.sol\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n\\n\\n\\ncontract NftVault is Ownable, ReentrancyGuard {\\n    IERC721A public nft_v1;\\n    IERC721A public nft_v2;\\n    IERC20 public rewardToken;\\n\\n    struct Share {\\n        uint256 amount;\\n        uint256 lockTime;\\n        uint256 lockEndTime;\\n    }\\n\\n    struct Receiver {\\n        address userAddress;\\n        uint256 tokenId;\\n    }\\n\\n    //constants\\n    uint256 constant ONE_DAY = 86400;\\n    int256 private constant OFFSET19700101 = 2440588;\\n\\n    //public variables\\n    uint256 public claimFee = 0 ether;\\n    uint256 public timeLock = 30 days;\\n    uint256 public holdingTime = 25 days;\\n    uint256 public totalDepositedAmount;\\n    uint8 public minDayOfMonthCanUnlock = 1;\\n    uint8 public maxDayOfMonthCanUnlock = 5;\\n\\n    //mappings\\n    mapping(uint256 => address) public receiver;\\n    mapping(address => uint256[]) public unclaimedTokens;\\n    mapping(address => Share) public userData;\\n\\n    event AirDrop(address receiver, uint256 tokenId);\\n    event NftDistributed(address receiver, uint256 tokenId);\\n    event NftClaimed(address receiver, uint256 tokenId);\\n    event TokensLocked(address user, uint256 amount, uint256 start, uint256 end);\\n    event TokensUnlocked(address user, uint256 amount, uint256 time);\\n    event MinDayUpdated(uint8 newDay, uint8 oldDay);\\n    event MaxDayUpdated(uint8 newDay, uint8 oldDay);\\n    event ClaimFeeUpdated(uint256 newFee, uint256 oldFee);\\n    event NftAddressesUpdated(address v1, address v2);\\n    event RewardTokenUpdated(address rewardToken);\\n    event LockPeriodUpdated(uint256 newPeriod, uint256 oldPeriod);\\n    event HoldingTimeUpdated(uint256 newTime, uint256 oldTime);\\n\\n    function airDrop(Receiver[] memory _addressesAndTokenID) external onlyOwner {\\n        for (uint i=0; i < _addressesAndTokenID.length; i++ ) {\\n            require(nft_v2.ownerOf(_addressesAndTokenID[i].tokenId) == owner(), \\\"missing token on owner wallet\\\");\\n            nft_v2.safeTransferFrom(_msgSender(), _addressesAndTokenID[i].userAddress, _addressesAndTokenID[i].tokenId);\\n            emit AirDrop(_addressesAndTokenID[i].userAddress, _addressesAndTokenID[i].tokenId);\\n        }\\n    }\\n   \\n    function distributeTokens(address user, uint256[] memory tokens) external onlyOwner {\\n        for (uint i = 0; i < tokens.length; i++) {\\n            require(nft_v2.ownerOf(tokens[i]) == owner(), \\\"no such token id on owner's wallet\\\");\\n            require(receiver[tokens[i]] == address(0), \\\"token already assigned\\\");\\n            nft_v2.transferFrom(_msgSender(), address(this), tokens[i]);\\n            receiver[tokens[i]] = user;\\n            unclaimedTokens[user].push(tokens[i]);\\n            emit NftDistributed(user,tokens[i]);\\n        }\\n    }\\n\\n    function claimAll() public payable nonReentrant {\\n        require(unclaimedTokens[_msgSender()].length > 0, \\\"no tokens for claim\\\");\\n        uint256 userClaimFee;\\n        for (uint i = 0; i < unclaimedTokens[_msgSender()].length; i++) {\\n            uint256 token = unclaimedTokens[_msgSender()][i];\\n            if (token != 0 && nft_v1.ownerOf(token) == _msgSender()) {\\n                require(receiver[token] == _msgSender(), \\\"token distribution error\\\");\\n                nft_v2.safeTransferFrom(address(this), _msgSender(), token);\\n                unchecked{\\n                    delete receiver[token];\\n                    delete unclaimedTokens[_msgSender()][i];\\n                    userClaimFee += claimFee;\\n                }\\n                emit NftClaimed(_msgSender(), token);\\n            }\\n        }\\n        require(msg.value >= userClaimFee, \\\"not enough ether send\\\");\\n    }\\n\\n    function claimExactToken(uint256 tokenId) public payable nonReentrant {\\n        require(unclaimedTokens[_msgSender()].length > 0, \\\"no tokens for claim\\\");\\n        require(tokenId > 0, \\\"zero token id\\\");\\n        require(msg.value >= claimFee, \\\"not enough ether send\\\");\\n        require(nft_v1.ownerOf(tokenId) == _msgSender(), \\\"user not the owner of v1 token\\\");\\n        for (uint i = 0; i < unclaimedTokens[_msgSender()].length; i++) {\\n            uint256 token = unclaimedTokens[_msgSender()][i];\\n            if (token == tokenId) {\\n                require(receiver[token] == _msgSender(), \\\"token distribution error\\\");\\n                nft_v2.safeTransferFrom(address(this), _msgSender(), token);\\n                delete receiver[token];\\n                delete unclaimedTokens[_msgSender()][i];\\n                emit NftClaimed(_msgSender(), token);\\n            }\\n        }\\n    }\\n\\n    function getClaimAllFee(address user) public view returns (uint256) {\\n        uint256 userClaimFee;\\n        for (uint i = 0; i < unclaimedTokens[user].length; i++) {\\n            uint256 token = unclaimedTokens[user][i];\\n            if (token != 0 && nft_v1.ownerOf(token) == user) {\\n                userClaimFee += claimFee;\\n            }\\n        }\\n        return userClaimFee;\\n    }\\n\\n    function lock(uint256 amount) public nonReentrant {\\n        uint256 totalAmount = amount * 10 ** rewardToken.decimals();\\n        require(rewardToken.allowance(_msgSender(), address(this)) >= totalAmount, \\\"insufficient allowance\\\");\\n        require(rewardToken.balanceOf(_msgSender()) >= totalAmount, \\\"insufficient balance\\\");\\n        require(rewardToken.transferFrom(_msgSender(), address(this), totalAmount), \\\"token transfer failed\\\");\\n        if (userData[_msgSender()].amount > 0) {\\n            userData[_msgSender()].amount += totalAmount;\\n            userData[_msgSender()].lockTime = block.timestamp;\\n            userData[_msgSender()].lockEndTime = block.timestamp + timeLock;\\n            emit TokensLocked(_msgSender(), userData[_msgSender()].amount, block.timestamp, userData[_msgSender()].lockEndTime);\\n        } else {\\n            userData[_msgSender()] = Share(totalAmount, block.timestamp, block.timestamp + timeLock);\\n            emit TokensLocked(_msgSender(), totalAmount, block.timestamp, block.timestamp + timeLock);\\n        }\\n    }\\n\\n    function unlock(uint256 amount) public nonReentrant {\\n        uint256 _currentDayOfMonth = _dayOfMonth(block.timestamp);\\n        require(\\n            _currentDayOfMonth >= minDayOfMonthCanUnlock &&\\n            _currentDayOfMonth <= maxDayOfMonthCanUnlock,\\n            \\\"outside of allowed lock window\\\"\\n        );\\n        uint256 totalAmount = amount * 10 ** rewardToken.decimals();\\n        require(userData[_msgSender()].lockEndTime <= block.timestamp, \\\"lock period not ended\\\");\\n        require(userData[_msgSender()].amount >= totalAmount, \\\"input exceed locked amount\\\");\\n        userData[_msgSender()].amount -= totalAmount;\\n        if (userData[_msgSender()].amount == 0) {\\n            delete userData[_msgSender()];\\n        }\\n        require(rewardToken.transfer(_msgSender(), totalAmount), \\\"token transfer failed\\\");\\n        emit TokensUnlocked(_msgSender(), totalAmount, block.timestamp);\\n    }\\n\\n    function userInfo(address user) external view returns(uint256, bool) {\\n        bool canClaim = block.timestamp >= (userData[user].lockTime + holdingTime) && userData[user].lockTime != 0;\\n        return (userData[user].amount, canClaim);\\n    }\\n\\n    function setMinDayOfMonthCanUnlock(uint8 _day) external onlyOwner {\\n        require(_day < 32,\\\"exceed month\\\");\\n        require(_day <= maxDayOfMonthCanUnlock, \\\"can set min day above max day\\\");\\n        uint8 oldDay = minDayOfMonthCanUnlock;\\n        minDayOfMonthCanUnlock = _day;\\n        emit MinDayUpdated(_day, oldDay);\\n\\n    }\\n\\n    function setMaxDayOfMonthCanUnlock(uint8 _day) external onlyOwner {\\n        require(_day < 32,\\\"exceed month\\\");\\n        require(_day >= minDayOfMonthCanUnlock, \\\"can set max day below min day\\\");\\n        uint8 oldDay = maxDayOfMonthCanUnlock;\\n        maxDayOfMonthCanUnlock = _day;\\n        emit MaxDayUpdated(_day, oldDay);\\n    }\\n\\n    function reassignToken(uint256 tokenId, address newReceiver) public onlyOwner {\\n        require(nft_v2.ownerOf(tokenId) == address(this), \\\"no such token id on contract\\\");\\n        address oldReceiver = receiver[tokenId];\\n        receiver[tokenId] = newReceiver;\\n        unclaimedTokens[newReceiver].push(tokenId);\\n\\n        for (uint i = 0; i < unclaimedTokens[oldReceiver].length; i++) {\\n            uint256 token = unclaimedTokens[oldReceiver][i];\\n            if (token == tokenId) {\\n                delete unclaimedTokens[oldReceiver][i];\\n            }\\n        }\\n        emit NftDistributed(newReceiver, tokenId);\\n    }\\n\\n    receive() external payable {}\\n\\n    function getUnclaimedToken(address user) external view returns (uint256[] memory) {\\n        return unclaimedTokens[user];\\n    }\\n\\n    function withdraw() external payable onlyOwner {\\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function emergencyWithdraw() external onlyOwner {\\n        uint256 balance = rewardToken.balanceOf(address(this));\\n        require(rewardToken.transfer(owner(), balance), \\\"transfer failed\\\");\\n    }\\n\\n\\n     // Emergency ERC20 withdrawal \\n\\n  function rescueERC20(address tokenAdd, uint256 amount) external onlyOwner {\\n    // require(tokenAdd != address(this), \\\"Cannot rescue self\\\");\\n    require(\\n      IERC20(tokenAdd).balanceOf(address(this)) >= amount,\\n      'Insufficient ERC20 balance'\\n    );\\n    IERC20(tokenAdd).transfer(owner(), amount);\\n  }\\n\\n\\n\\n    function changeClaimFee(uint256 newFeeInWei) external onlyOwner {\\n        uint256 oldFee = claimFee;\\n        claimFee = newFeeInWei;\\n        emit ClaimFeeUpdated(claimFee, oldFee);\\n    }\\n\\n    function clearUnclaimedTokens(address user) external onlyOwner {\\n        uint256 counter;\\n        for (uint i = 0; i < unclaimedTokens[user].length; i++) {\\n            if (unclaimedTokens[user][i] == 0) {\\n                counter++;\\n            }\\n        }\\n        if (counter == unclaimedTokens[user].length) {\\n            delete unclaimedTokens[user];\\n        } else {\\n            revert (\\\"Please reassign unclaimed tokens\\\");\\n        }\\n    }\\n    function setNfts(address _nft_v1, address _nft_v2) external onlyOwner {\\n        require(_nft_v1 != address(0) && _nft_v2 != address(0), \\\"zero address passed\\\");\\n        nft_v1 = IERC721A(_nft_v1);\\n        nft_v2 = IERC721A(_nft_v2);\\n        emit NftAddressesUpdated(_nft_v1, _nft_v2);\\n    }\\n\\n    function setRewardToken(address _rewardToken) external onlyOwner {\\n        require(_rewardToken != address(0), \\\"zero address passed\\\");\\n        rewardToken = IERC20(_rewardToken);\\n        emit RewardTokenUpdated(_rewardToken);\\n    }\\n\\n    function setNewLockPeriod(uint256 _newLockInDays) external onlyOwner {\\n        require(_newLockInDays < 365, \\\"more than one year\\\");\\n        uint256 oldPeriod = timeLock;\\n        timeLock = _newLockInDays * 86400;\\n        emit LockPeriodUpdated(timeLock, oldPeriod);\\n    }\\n\\n    function setNewHoldingTime(uint256 _newHoldingTimeInDays) external onlyOwner {\\n        require(_newHoldingTimeInDays < 365, \\\"more than one year\\\");\\n        uint256 oldTime = holdingTime;\\n        holdingTime = _newHoldingTimeInDays * 86400;\\n        emit HoldingTimeUpdated(holdingTime, oldTime);\\n    }\\n   \\n    function testTime() external view returns (uint256) {\\n        return _dayOfMonth(block.timestamp);\\n    }\\n\\n    function _dayOfMonth(uint256 _timestamp) internal pure returns (uint256) {\\n        (, , uint256 day) = _daysToDate(_timestamp / ONE_DAY);\\n        return day;\\n    }\\n\\n    // date conversion algorithm from http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    function _daysToDate(uint256 _days) internal pure returns (uint256, uint256, uint256) {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        return (uint256(_year), uint256(_month), uint256(_day));\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AirDrop\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"}],\"name\":\"ClaimFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTime\",\"type\":\"uint256\"}],\"name\":\"HoldingTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPeriod\",\"type\":\"uint256\"}],\"name\":\"LockPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDay\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldDay\",\"type\":\"uint8\"}],\"name\":\"MaxDayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newDay\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldDay\",\"type\":\"uint8\"}],\"name\":\"MinDayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"v2\",\"type\":\"address\"}],\"name\":\"NftAddressesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct NftVault.Receiver[]\",\"name\":\"_addressesAndTokenID\",\"type\":\"tuple[]\"}],\"name\":\"airDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeInWei\",\"type\":\"uint256\"}],\"name\":\"changeClaimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claimExactToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"clearUnclaimedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokens\",\"type\":\"uint256[]\"}],\"name\":\"distributeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimAllFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnclaimedToken\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDayOfMonthCanUnlock\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDayOfMonthCanUnlock\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_v1\",\"outputs\":[{\"internalType\":\"contract IERC721A\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft_v2\",\"outputs\":[{\"internalType\":\"contract IERC721A\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"reassignToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAdd\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setMaxDayOfMonthCanUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_day\",\"type\":\"uint8\"}],\"name\":\"setMinDayOfMonthCanUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newHoldingTimeInDays\",\"type\":\"uint256\"}],\"name\":\"setNewHoldingTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLockInDays\",\"type\":\"uint256\"}],\"name\":\"setNewLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft_v1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nft_v2\",\"type\":\"address\"}],\"name\":\"setNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDepositedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"unclaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEndTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"NftVault","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]