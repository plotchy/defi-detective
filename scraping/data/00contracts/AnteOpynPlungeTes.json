[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/opyn/AnteOpynPlungeTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../AnteTest.sol\\\";\\n\\n/// @notice Checks if the balance in the Opyn Controller is at least 1000 ETH\\ncontract AnteOpynPlungeTest is AnteTest(\\\"Opyn Controller balance is at least 1,000 ETH\\\") {\\n    // https://etherscan.io/token/0x64187ae08781B09368e6253F9E94951243A493D5\\n    address public constant OPYN_CONTROLLER = 0x64187ae08781B09368e6253F9E94951243A493D5;\\n\\n    // ~6.9K ETH as of 2022-12-06 (nice), 1000 ETH is a ~85% drop\\n    uint256 public constant FAILURE_THRESHOLD = 1000 * 1e18;\\n\\n    constructor() {\\n        protocolName = \\\"Opyn\\\";\\n        testedContracts = [OPYN_CONTROLLER];\\n    }\\n\\n    /// @return true if the ETH balance is at least 1000 ETH\\n    function checkTestPasses() public view override returns (bool) {\\n        return OPYN_CONTROLLER.balance > FAILURE_THRESHOLD;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interfaces/IAnteTest.sol\\\";\\n\\n/// @title Ante V0.5 Ante Test smart contract\\n/// @notice Abstract inheritable contract that supplies syntactic sugar for writing Ante Tests\\n/// @dev Usage: contract YourAnteTest is AnteTest(\\\"String descriptor of test\\\") { ... }\\nabstract contract AnteTest is IAnteTest {\\n    /// @inheritdoc IAnteTest\\n    address public override testAuthor;\\n    /// @inheritdoc IAnteTest\\n    string public override testName;\\n    /// @inheritdoc IAnteTest\\n    string public override protocolName;\\n    /// @inheritdoc IAnteTest\\n    address[] public override testedContracts;\\n\\n    /// @dev testedContracts and protocolName are optional parameters which should\\n    /// be set in the constructor of your AnteTest\\n    /// @param _testName The name of the Ante Test\\n    constructor(string memory _testName) {\\n        testAuthor = msg.sender;\\n        testName = _testName;\\n    }\\n\\n    /// @notice Returns the testedContracts array of addresses\\n    /// @return The list of tested contracts as an array of addresses\\n    function getTestedContracts() external view returns (address[] memory) {\\n        return testedContracts;\\n    }\\n\\n    /// @inheritdoc IAnteTest\\n    function checkTestPasses() external virtual override returns (bool) {}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAnteTest.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\n\\n// ┏━━━┓━━━━━┏┓━━━━━━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┏━┓┃━━━━┏┛┗┓━━━━━━━━┃┏━━┛━━━━━━━━━━━━━━━━━━━━━━━\\n// ┃┗━┛┃┏━┓━┗┓┏┛┏━━┓━━━━┃┗━━┓┏┓┏━┓━┏━━┓━┏━┓━┏━━┓┏━━┓\\n// ┃┏━┓┃┃┏┓┓━┃┃━┃┏┓┃━━━━┃┏━━┛┣┫┃┏┓┓┗━┓┃━┃┏┓┓┃┏━┛┃┏┓┃\\n// ┃┃ ┃┃┃┃┃┃━┃┗┓┃┃━┫━┏┓━┃┃━━━┃┃┃┃┃┃┃┗┛┗┓┃┃┃┃┃┗━┓┃┃━┫\\n// ┗┛ ┗┛┗┛┗┛━┗━┛┗━━┛━┗┛━┗┛━━━┗┛┗┛┗┛┗━━━┛┗┛┗┛┗━━┛┗━━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\npragma solidity >=0.7.0;\\n\\n/// @title The interface for the Ante V0.5 Ante Test\\n/// @notice The Ante V0.5 Ante Test wraps test logic for verifying fundamental invariants of a protocol\\ninterface IAnteTest {\\n    /// @notice Returns the author of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testAuthor as a public var\\n    /// @return The address of the test author\\n    function testAuthor() external view returns (address);\\n\\n    /// @notice Returns the name of the protocol the Ante Test is testing\\n    /// @dev This overrides the auto-generated getter for protocolName as a public var\\n    /// @return The name of the protocol in string format\\n    function protocolName() external view returns (string memory);\\n\\n    /// @notice Returns a single address in the testedContracts array\\n    /// @dev This overrides the auto-generated getter for testedContracts [] as a public var\\n    /// @param i The array index of the address to return\\n    /// @return The address of the i-th element in the list of tested contracts\\n    function testedContracts(uint256 i) external view returns (address);\\n\\n    /// @notice Returns the name of the Ante Test\\n    /// @dev This overrides the auto-generated getter for testName as a public var\\n    /// @return The name of the Ante Test in string format\\n    function testName() external view returns (string memory);\\n\\n    /// @notice Function containing test logic to inspect the protocol invariant\\n    /// @dev This should usually return True\\n    /// @return A single bool indicating if the Ante Test passes/fails\\n    function checkTestPasses() external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FAILURE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPYN_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkTestPasses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTestedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testAuthor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"testedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"AnteOpynPlungeTest","CompilerVersion":"v0.8.9+commit.e5eed63a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]