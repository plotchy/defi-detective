[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n// Copyright (C) 2022, 2023, 2024, https://robot.bi\r\n\r\n// DEX trading bot includes three parts.\r\n// 1.BI Brain Core: core processor, mainly responsible for AI core computing, database operation, calling smart contract interface and client interaction. \r\n// 2.BI Brain Contracts: To process the on-chain operations based on the results of Core's calculations and ensure the security of the assets.\r\n//    SwapBrainBot.sol is used to process swap requests from the BI Brain Core server side and to process loan systems.\r\n//    EncryptedSwap.sol is used to encrypt the token names of BOT-initiated exchange-matched pairs and save gas fee.\r\n//    AssetsRouter.sol is used to help users swap assets between ETH, WETH and BOT.\r\n//    BotShareToken.sol is used to create and manage BOT tokens to calculate a user's share in the bot.\r\n// 3.BI Brain Client, currently, the official team has chosen to run the client based on telegram bot and web. Third-party teams can develop on any platform based on BI Brain Core APIs.\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\ninterface ERC20 {\r\n    function balanceOf(address who) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function totalSupply() external view returns (uint);\r\n}\r\n\r\ninterface Swap {\r\n    function EncryptedSwapExchange(address from,address toUser,uint amount) external view returns(bool);\r\n}\r\n\r\n\r\n\r\ncontract SwapBrainBot {\r\n\r\n    address public owner;\r\n    address public poolKeeper;\r\n    address public secondKeeper;\r\n    address public banker;\r\n    uint public feeRate;// unit: 1/10 percent\r\n\r\n    address public BOT;\r\n    address public SRC;\r\n    address public STC;\r\n    address[3] public WETH;\r\n    mapping (address => uint)  public  debt;\r\n    uint bankorder;\r\n    mapping (uint => mapping (address => uint))  public  staked;\r\n    mapping (uint => mapping (address => uint))  public borrowed;   \r\n\r\n    constructor (address _keeper,address _bot,address _stc,address _src,address _weth1,address _weth2,address _weth3,address _banker) public {\r\n        owner = msg.sender;\r\n        poolKeeper = _keeper;\r\n        secondKeeper = _keeper; \r\n        feeRate = 1;\r\n        WETH = [_weth1, _weth2, _weth3];  \r\n        STC = _stc;\r\n        BOT = _bot;\r\n        SRC = _src;\r\n        banker = _banker;\r\n        bankorder = 0;\r\n    }\r\n\r\n\r\n\r\n    event  EncryptedSwap(address indexed tokenA,uint amountA,address indexed tokenB,uint amountB);\r\n    event  Borrow(address indexed pool,address indexed borrow,uint borrowamount,address indexed stake, uint stakeamount, uint addition);\r\n    event  Clean(address indexed pool,address indexed borrow,uint borrowamount,address indexed stake, uint stakeamount, uint addition);\r\n\r\n\r\n    modifier keepPool() {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        _;\r\n    }\r\n\r\n    function releaseEarnings(address tkn,address guy,uint amount) public keepPool returns(bool) {\r\n        ERC20 token = ERC20(tkn);\r\n        token.transfer(guy, amount);\r\n        return true;\r\n    }\r\n\r\n    function BotEncryptedSwap(address tokenA,address tokenB,address AddressA,address AddressB,uint amountA,uint amountB) public returns (bool) {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        if(ERC20(tokenA).balanceOf(address(this))<amountA){\r\n            uint debtAdded = sub(amountA,ERC20(tokenA).balanceOf(address(this)));\r\n            debt[tokenA] = add(debt[tokenA],debtAdded);\r\n            Swap(tokenA).EncryptedSwapExchange(AddressA,address(this),debtAdded);           \r\n        }\r\n        Swap(tokenA).EncryptedSwapExchange(address(this),AddressA,amountA);\r\n        uint fee = div(mul(div(mul(debt[tokenB],1000000000000000000),1000),feeRate),1000000000000000000);\r\n        if((add(fee,debt[tokenB])<=amountB)&&(debt[tokenB]>0)){\r\n            Swap(tokenB).EncryptedSwapExchange(AddressB,banker,add(debt[tokenB],fee));            \r\n            amountB = sub(amountB,add(debt[tokenB],fee));\r\n            debt[tokenB] = 0;\r\n        }\r\n        Swap(tokenB).EncryptedSwapExchange(AddressB,address(this),amountB); \r\n        emit EncryptedSwap(tokenA,amountA,tokenB,amountB);  \r\n        return true;\r\n    }\r\n\r\n    function borrow(address pool,address uncryptborrow,address borrowtoken,address uncryptstake, address staketoken, uint borrowamount,uint stakeamount,uint addition) public keepPool returns(bool) {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        staked[bankorder][staketoken] = add(staked[bankorder][staketoken],stakeamount);\r\n        ERC20(uncryptstake).transfer(pool,stakeamount);\r\n        borrowamount = add(borrowamount,addition);\r\n        Swap(uncryptborrow).EncryptedSwapExchange(address(this),pool,borrowamount);\r\n        borrowed[bankorder][borrowtoken] = add(borrowed[bankorder][borrowtoken],borrowamount);\r\n        emit Borrow(pool,borrowtoken,borrowamount,staketoken,stakeamount,addition);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    function clean(address pool,address uncryptborrow,address borrowtoken,address uncryptstake, address staketoken, uint borrowamount,uint stakeamount,uint addition) public keepPool returns(bool) {\r\n        require((msg.sender == poolKeeper)||(msg.sender == secondKeeper));\r\n        staked[bankorder][staketoken] = add(staked[bankorder][staketoken],stakeamount);\r\n        Swap(uncryptstake).EncryptedSwapExchange(pool,address(this),stakeamount);\r\n        borrowamount = add(borrowamount,addition);\r\n        ERC20(uncryptborrow).transfer(pool,borrowamount);\r\n        borrowed[bankorder][borrowtoken] = sub(borrowed[bankorder][borrowtoken],borrowamount);\r\n        emit Clean(pool,borrowtoken,borrowamount,staketoken,stakeamount,addition);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    function WETHBlanceOfSwapBrainBot()  external view returns(uint,uint,uint) {\r\n        return (ERC20(WETH[0]).balanceOf(address(this)),\r\n                ERC20(WETH[1]).balanceOf(address(this)),\r\n                ERC20(WETH[2]).balanceOf(address(this)));      \r\n    }\r\n\r\n    function STCBlanceOfSwapBrainBot()  external view returns(uint) {\r\n        return (ERC20(STC).balanceOf(address(this)));      \r\n    }\r\n\r\n    function WETHBlanceOfBOTTokenContract()  external view returns(uint,uint,uint) {\r\n        return (ERC20(WETH[0]).balanceOf(BOT),\r\n                ERC20(WETH[1]).balanceOf(BOT),\r\n                ERC20(WETH[2]).balanceOf(BOT));      \r\n    }\r\n\r\n    function BOTTotalSupply()  external view returns(uint) {\r\n        return (ERC20(BOT).totalSupply());      \r\n    }\r\n\r\n\r\n\r\n    function ETHBalanceOfALLWETHContracts() public view returns  (uint){\r\n        uint totalEtherBalance = WETH[0].balance;\r\n        totalEtherBalance = add(totalEtherBalance,WETH[1].balance);\r\n        totalEtherBalance = add(totalEtherBalance,WETH[2].balance);\r\n        return totalEtherBalance;\r\n    }\r\n\r\n    function resetOwner(address _owner) public returns (bool) {\r\n        require(msg.sender == owner);\r\n        owner = _owner;\r\n        return true;\r\n    }\r\n\r\n    function resetPoolKeeper(address newKeeper) public keepPool returns (bool) {\r\n        require(newKeeper != address(0));\r\n        poolKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n    function resetSecondKeeper(address newKeeper) public keepPool returns (bool) {\r\n        require(newKeeper != address(0));\r\n        secondKeeper = newKeeper;\r\n        return true;\r\n    }\r\n\r\n    function resetBanker(address addr) public keepPool returns(bool) {\r\n        require(addr != address(0));\r\n        banker = addr;\r\n        return true;\r\n    }\r\n\r\n    function resetFeeRate(uint _feeRate) public keepPool returns(bool) {\r\n        feeRate = _feeRate;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function debt(address addr,uint amount) public keepPool returns(bool) {\r\n        require(addr != address(0));\r\n        debt[addr] = amount;\r\n        return true;\r\n    }\r\n\r\n    function resetTokenContracts(address _bot,address _src,address _stc,address _weth1,address _weth2,address _weth3) public keepPool returns(bool) {\r\n        BOT = _bot;\r\n        SRC = _src;\r\n        STC = _stc;\r\n        WETH[0] = _weth1;\r\n        WETH[1] = _weth2;\r\n        WETH[2] = _weth3;\r\n        return true;\r\n    }\r\n\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b <= a);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        require(b > 0);\r\n        uint c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[],\"name\":\"SRC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"banker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"poolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetSecondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_bot\",\"type\":\"address\"},{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_stc\",\"type\":\"address\"},{\"name\":\"_weth1\",\"type\":\"address\"},{\"name\":\"_weth2\",\"type\":\"address\"},{\"name\":\"_weth3\",\"type\":\"address\"}],\"name\":\"resetTokenContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"secondKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"uncryptborrow\",\"type\":\"address\"},{\"name\":\"borrowtoken\",\"type\":\"address\"},{\"name\":\"uncryptstake\",\"type\":\"address\"},{\"name\":\"staketoken\",\"type\":\"address\"},{\"name\":\"borrowamount\",\"type\":\"uint256\"},{\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"name\":\"addition\",\"type\":\"uint256\"}],\"name\":\"clean\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STC\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tokenA\",\"type\":\"address\"},{\"name\":\"tokenB\",\"type\":\"address\"},{\"name\":\"AddressA\",\"type\":\"address\"},{\"name\":\"AddressB\",\"type\":\"address\"},{\"name\":\"amountA\",\"type\":\"uint256\"},{\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"BotEncryptedSwap\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"resetOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"resetBanker\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BOTTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETHBalanceOfALLWETHContracts\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"resetFeeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETHBlanceOfSwapBrainBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"STCBlanceOfSwapBrainBot\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"debt\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"uncryptborrow\",\"type\":\"address\"},{\"name\":\"borrowtoken\",\"type\":\"address\"},{\"name\":\"uncryptstake\",\"type\":\"address\"},{\"name\":\"staketoken\",\"type\":\"address\"},{\"name\":\"borrowamount\",\"type\":\"uint256\"},{\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"name\":\"addition\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"WETHBlanceOfBOTTokenContract\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"resetPoolKeeper\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"tkn\",\"type\":\"address\"},{\"name\":\"guy\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseEarnings\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_keeper\",\"type\":\"address\"},{\"name\":\"_bot\",\"type\":\"address\"},{\"name\":\"_stc\",\"type\":\"address\"},{\"name\":\"_src\",\"type\":\"address\"},{\"name\":\"_weth1\",\"type\":\"address\"},{\"name\":\"_weth2\",\"type\":\"address\"},{\"name\":\"_weth3\",\"type\":\"address\"},{\"name\":\"_banker\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"EncryptedSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"borrow\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"borrowamount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"stake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addition\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"borrow\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"borrowamount\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"stake\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"stakeamount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"addition\",\"type\":\"uint256\"}],\"name\":\"Clean\",\"type\":\"event\"}]","ContractName":"SwapBrainBot","CompilerVersion":"v0.4.26+commit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000f9b91345e420ac6fa0049d9bb7a98a2388800000000000000000000000000000f0ef72c6fd55a1e239255975c86744d853f00000000000000000000000000000118f1c49ec828ed5e949dd03c4b1afcfa2800000000000000000000000000000a9f233d0b3ebbf136276165429d071d1abf000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000615dbba33fe61a31c7ed131bda6655ed76748b1000000000000000000000000f9fb4ad91812b704ba883b11d2b576e890a6730a00000000000000000000000000000f0ef72c6fd55a1e239255975c86744d853f","EVMVersion":"Default","Library":"","LicenseType":"GNU GPLv3","Proxy":"0","Implementation":"","SwarmSource":"bzzr://5aaf372f3ffc372cfee79d7ce72b394a99a3a2fd89acb1a90e398a643e8c77d0"}]