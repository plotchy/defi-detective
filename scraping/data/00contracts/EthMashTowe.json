[{"SourceCode":"pragma solidity ^0.4.22;\r\n\r\ncontract EthMashTower {\r\n\r\n    address public owner;\r\n    mapping (address => uint) public withdrawals;\r\n\r\n    uint round;\r\n    uint registered;\r\n    mapping (uint => address[15]) participants;\r\n\r\n    event Log(address indexed user, uint action, uint price);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        round = 1;\r\n        registered = 0;\r\n    }\r\n\r\n    modifier whenOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function ownerWithdraw(uint amount) external whenOwner {\r\n        owner.transfer(amount);\r\n    }\r\n\r\n    function ownerDestroy() external whenOwner {\r\n        selfdestruct(owner);\r\n    }\r\n\r\n    function publicGetRound() view public returns (uint) {\r\n        return round;\r\n    }\r\n\r\n    function publicGetParticipants(uint index) view public returns (address[15]) {\r\n        return participants[index];\r\n    }\r\n\r\n    function publicGetBalance(address player) view public returns (uint) {\r\n        return withdrawals[player];\r\n    }\r\n\r\n    function userWithdraw() public {\r\n        require(withdrawals[msg.sender] > 0);\r\n        uint amount = withdrawals[msg.sender];\r\n        withdrawals[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n        emit Log(msg.sender, 0, amount);\r\n    }\r\n\r\n    function userRegister() public payable {\r\n        require(msg.value == 105 finney);\r\n        require(registered < 8);\r\n\r\n        emit Log(msg.sender, 1, msg.value);\r\n\r\n        participants[round][registered] = msg.sender;\r\n\r\n        if (registered == 1) {\r\n            calcWinner(0, 1, 8, 150 finney);\r\n        } else if (registered == 3) {\r\n            calcWinner(2, 3, 9, 150 finney);\r\n            calcWinner(8, 9, 12, 50 finney);\r\n        } else if (registered == 5) {\r\n            calcWinner(4, 5, 10, 150 finney);\r\n        }  else if (registered == 7) {\r\n            calcWinner(6, 7, 11, 150 finney);\r\n            calcWinner(10, 11, 13, 50 finney);\r\n            calcWinner(12, 13, 14, 100 finney); \r\n        }\r\n\r\n        if (registered < 7) {\r\n            registered++;\r\n        } else {\r\n            round++;\r\n            registered = 0;\r\n        }\r\n    }\r\n\r\n    function calcWinner(uint first, uint second, uint winner, uint reward) private {\r\n        uint random = (uint(blockhash(block.number - 1)) + uint(participants[round][first]) + uint(participants[round][second]));\r\n\r\n        if (random % 2 == 0) {\r\n            participants[round][winner] = participants[round][first];\r\n            withdrawals[participants[round][first]] += reward;\r\n            emit Log(participants[round][first], 2, reward);\r\n        } else {\r\n            participants[round][winner] = participants[round][second];\r\n            withdrawals[participants[round][second]] += reward;\r\n            emit Log(participants[round][second], 2, reward);\r\n        }\r\n    }\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"publicGetParticipants\",\"outputs\":[{\"name\":\"\",\"type\":\"address[15]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"ownerDestroy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"publicGetRound\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userRegister\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"userWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"player\",\"type\":\"address\"}],\"name\":\"publicGetBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"action\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"event\"}]","ContractName":"EthMashTower","CompilerVersion":"v0.4.22+commit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://162a2096a373ec93a2a4f3eb3b1158640393e6981004349bf240395f07f8042b"}]