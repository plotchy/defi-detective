[{"SourceCode":"pragma solidity ^0.4.13;\r\n\r\ncontract Calculator {\r\n    function getAmount(uint value) constant returns (uint);\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) constant returns (uint256);\r\n  function transfer(address to, uint256 value) returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) returns (bool);\r\n  function approve(address spender, uint256 value) returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Sale is Ownable {\r\n\r\n    //responsible for getting token amount\r\n    Calculator calculator;\r\n\r\n    //which token should we sell\r\n    ERC20 token;\r\n\r\n    // who sells his tokens\r\n    address tokenSeller;\r\n\r\n    uint256 public minimalTokens = 100000000000;\r\n\r\n    /**\r\n     * event for token purchase logging\r\n     * @param purchaser who paid for the tokens\r\n     * @param value weis paid for purchase\r\n     * @param amount amount of tokens purchased\r\n     */\r\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\r\n\r\n    function Sale(address tokenAddress, address calculatorAddress) {\r\n        tokenSeller = msg.sender;\r\n        token = ERC20(tokenAddress);\r\n        setCalculatorAddress(calculatorAddress);\r\n    }\r\n\r\n    function () payable {\r\n        buyTokens();\r\n    }\r\n\r\n    function buyTokens() payable {\r\n        uint256 weiAmount = msg.value;\r\n\r\n        // calculate token amount to be created\r\n        uint256 tokens = calculator.getAmount(weiAmount);\r\n        assert(tokens >= minimalTokens);\r\n\r\n        token.transferFrom(tokenSeller, msg.sender, tokens);\r\n        TokenPurchase(msg.sender, weiAmount, tokens);\r\n    }\r\n\r\n    function setTokenSeller(address newTokenSeller) onlyOwner {\r\n        tokenSeller = newTokenSeller;\r\n    }\r\n\r\n    function setCalculatorAddress(address calculatorAddress) onlyOwner {\r\n        calculator = Calculator(calculatorAddress);\r\n    }\r\n\r\n    function setMinimalTokens(uint256 _minimalTokens) onlyOwner {\r\n        minimalTokens = _minimalTokens;\r\n    }\r\n\r\n    function withdraw(address beneficiary, uint amount) onlyOwner {\r\n        require(beneficiary != 0x0);\r\n\r\n        beneficiary.transfer(amount);\r\n    }\r\n}","ABI":"[{\"constant\":false,\"inputs\":[{\"name\":\"calculatorAddress\",\"type\":\"address\"}],\"name\":\"setCalculatorAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimalTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newTokenSeller\",\"type\":\"address\"}],\"name\":\"setTokenSeller\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_minimalTokens\",\"type\":\"uint256\"}],\"name\":\"setMinimalTokens\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buyTokens\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"beneficiary\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenAddress\",\"type\":\"address\"},{\"name\":\"calculatorAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"purchaser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"}]","ContractName":"Sale","CompilerVersion":"v0.4.16+commit.d7661dd9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b4ee72d819c23a48a02c12c293316414265992660000000000000000000000008e1603fe77501c98265053d349911cd11f055cd7","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://88a5d22ed48ee07ecebd32cac3b89dba014c1833dd41bbdb4904007617e669a2"}]