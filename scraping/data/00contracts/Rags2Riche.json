[{"SourceCode":"/**\r\n    *Submitted for verification at Etherscan.io on 2021-11-06\r\n    */\r\n\r\n    /**\r\n    //SPDX-License-Identifier: UNLICENSED\r\n    \r\n    Follow us on Telegram! TG: t.me/rags2richesio\r\n    */\r\n\r\n    pragma solidity ^0.8.4;\r\n\r\n    abstract contract Context {\r\n        function _msgSender() internal view virtual returns (address) {\r\n            return msg.sender;\r\n        }\r\n    }\r\n\r\n    interface IERC20 {\r\n        function totalSupply() external view returns (uint256);\r\n        function balanceOf(address account) external view returns (uint256);\r\n        function transfer(address recipient, uint256 amount) external returns (bool);\r\n        function allowance(address owner, address spender) external view returns (uint256);\r\n        function approve(address spender, uint256 amount) external returns (bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    library SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            uint256 c = a + b;\r\n            require(c >= a, \"SafeMath: addition overflow\");\r\n            return c;\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b <= a, errorMessage);\r\n            uint256 c = a - b;\r\n            return c;\r\n        }\r\n\r\n        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n            return c;\r\n        }\r\n\r\n        function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n            require(b > 0, errorMessage);\r\n            uint256 c = a / b;\r\n            return c;\r\n        }\r\n\r\n    }\r\n\r\n    contract Ownable is Context {\r\n        address private _owner;\r\n        address private _previousOwner;\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n        constructor () {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n\r\n        function owner() public view returns (address) {\r\n            return _owner;\r\n        }\r\n\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n\r\n        function renounceOwnership() public virtual onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n\r\n    }  \r\n\r\n    interface IUniswapV2Factory {\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n    }\r\n\r\n    interface IUniswapV2Router02 {\r\n        function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            uint amountIn,\r\n            uint amountOutMin,\r\n            address[] calldata path,\r\n            address to,\r\n            uint deadline\r\n        ) external;\r\n        function factory() external pure returns (address);\r\n        function WETH() external pure returns (address);\r\n        function addLiquidityETH(\r\n            address token,\r\n            uint amountTokenDesired,\r\n            uint amountTokenMin,\r\n            uint amountETHMin,\r\n            address to,\r\n            uint deadline\r\n        ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    }\r\n\r\n\r\n    interface Lottery {\r\n        function init(bool _jackpotMod, uint _jackpotType ) external;\r\n        function enter( address _participant ) external;\r\n        function startLottery() external;\r\n        function endLottery() external;\r\n        function lotteryState()  external view returns(uint256);\r\n        function extract(address _participant) external;\r\n        function validateLottery() external;\r\n    }\r\n\r\n\r\n    contract Rags2Riches is Context, IERC20, Ownable {\r\n        using SafeMath for uint256;\r\n        mapping (address => uint256) private _rOwned;\r\n        mapping (address => uint256) private _tOwned;\r\n        mapping (address => mapping (address => uint256)) private _allowances;\r\n        mapping (address => bool) private _isExcludedFromFee;\r\n        mapping (address => uint) private cooldown;\r\n        uint256 private constant MAX = ~uint256(0);\r\n        uint256 private constant _tTotal = 1000000000000 * 10**9;\r\n        uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n        uint256 private _tFeeTotal;\r\n        \r\n        uint256 private _feeAddr1;\r\n        uint256 private _feeAddr2;\r\n        uint256 private _previousFeeAddr1; \r\n        uint256 private _previousFeeAddr2;\r\n        address payable private _feeAddrWallet1;\r\n        address payable private _feeAddrWallet2;\r\n        \r\n        string private constant _name = \"Rags2Riches\";\r\n        string private constant _symbol = \"R2R\";\r\n        uint8 private constant _decimals = 9;\r\n        \r\n        IUniswapV2Router02 private uniswapV2Router;\r\n        address private uniswapV2Pair;\r\n        bool private tradingOpen = false;\r\n\r\n\r\n        //Variables for Sniper Control\r\n        mapping (address => bool) private bots; \r\n        bool private sniperProtection = true;\r\n        uint256 public snipeBlockAmt = 0;\r\n        uint256 public snipersCaught = 0;\r\n        uint256 public _liqAddBlock = 0;\r\n        uint256 public _liqAddStamp = 0;\r\n        \r\n        bool private inSwap = false;\r\n        bool private swapEnabled = false;\r\n        bool private cooldownEnabled = false;\r\n        \r\n        uint256 private _maxTxAmount = _tTotal;\r\n        uint256 private _maxWtAmount = _tTotal;\r\n        \r\n        event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n        address payable public playLotAddr;\r\n        address payable public holdLotAddr;\r\n\r\n        uint256 public minAmountForHolder;\r\n\r\n        event Log(string message);\r\n        event Value(uint256 value);\r\n\r\n        Lottery playerLot;\r\n        Lottery holdersLot;\r\n        \r\n        modifier lockTheSwap {\r\n            inSwap = true;\r\n            _;\r\n            inSwap = false;\r\n        }\r\n        \r\n        constructor () {\r\n            _feeAddrWallet1 = payable(0xbd00fE041Fe2636CedAb6bF1cD0022E24962766d);\r\n            _feeAddrWallet2 = payable(0xC162f70CAfF9F8D5177379Bfe2D0812B86dE8730);\r\n            _rOwned[_msgSender()] = _rTotal;\r\n            _isExcludedFromFee[owner()] = true;\r\n            _isExcludedFromFee[address(this)] = true;\r\n            _isExcludedFromFee[_feeAddrWallet1] = true;\r\n            _isExcludedFromFee[_feeAddrWallet2] = true;\r\n            emit Transfer(address(this), _msgSender(), _tTotal);\r\n        }\r\n\r\n        function name() public pure returns (string memory) {\r\n            return _name;\r\n        }\r\n\r\n        function symbol() public pure returns (string memory) {\r\n            return _symbol;\r\n        }\r\n\r\n        function decimals() public pure returns (uint8) {\r\n            return _decimals;\r\n        }\r\n\r\n        function totalSupply() public pure override returns (uint256) {\r\n            return _tTotal;\r\n        }\r\n\r\n        function balanceOf(address account) public view override returns (uint256) {\r\n            return tokenFromReflection(_rOwned[account]);\r\n        }\r\n\r\n        function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n\r\n        function allowance(address owner, address spender) public view override returns (uint256) {\r\n            return _allowances[owner][spender];\r\n        }\r\n\r\n        function approve(address spender, uint256 amount) public override returns (bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n\r\n        function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n\r\n        function setCooldownEnabled(bool onoff) external onlyOwner() {\r\n            cooldownEnabled = onoff;\r\n        }\r\n\r\n        function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n            require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n            uint256 currentRate =  _getRate();\r\n            return rAmount.div(currentRate);\r\n        }\r\n\r\n        function _approve(address owner, address spender, uint256 amount) private {\r\n            require(owner != address(0), \"ERC20: approve from the zero address\");\r\n            require(spender != address(0), \"ERC20: approve to the zero address\");\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n\r\n        function _transfer(address from, address to, uint256 amount) private {\r\n            require(from != address(0), \"ERC20: transfer from the zero address\");\r\n            require(to != address(0), \"ERC20: transfer to the zero address\");\r\n            require(amount > 0, \"Transfer amount must be greater than zero\");\r\n            _feeAddr1 = 4;\r\n            _feeAddr2 = 8;\r\n            if (from != owner() && to != owner()) {\r\n                if ((block.number - _liqAddBlock < 0) && tradingOpen) {\r\n                        bots[to] = true;\r\n                }\r\n                require(!bots[from] && !bots[to]);\r\n                \r\n                if(amount >= _maxTxAmount){\r\n                    amount = _maxTxAmount;\r\n                }\r\n                \r\n                if(to != uniswapV2Pair && !_isExcludedFromFee[to]){\r\n                    require(balanceOf(to) + amount <= _maxWtAmount );\r\n                    if(playLotAddr != address(0)){\r\n                        if(LotState(playerLot) == 0){\r\n                            enterLottery(playerLot, to);\r\n                            LotteryCheck(playerLot);\r\n                        }\r\n                    }\r\n\r\n                    if(holdLotAddr != address(0)){\r\n                        if((balanceOf(to) + amount >= minAmountForHolder) && LotState(holdersLot) == 0){\r\n                            enterLottery(holdersLot, to);\r\n                        }\r\n                        LotteryCheck(holdersLot); \r\n                    }\r\n                }\r\n                \r\n                uint256 contractTokenBalance = balanceOf(address(this));\r\n                if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                    if(holdLotAddr != address(0) ){\r\n                        if(balanceOf(from) - amount <= minAmountForHolder){\r\n                            extractPlayer(holdersLot,from);   \r\n                        }\r\n                    }\r\n                    swapAndLiquidify(contractTokenBalance);\r\n\r\n                    if(playLotAddr != address(0) && LotState(playerLot) == 0){\r\n                        LotteryCheck(playerLot);\r\n                    }\r\n                    if(holdLotAddr != address(0) && LotState(holdersLot) == 0){\r\n                            LotteryCheck(holdersLot);\r\n                    }           \r\n                }\r\n            }\r\n            \r\n            bool tradeFee = true;\r\n            \r\n            if(_isExcludedFromFee[to] || _isExcludedFromFee[from]){\r\n                tradeFee=false;\r\n            }\r\n            \r\n            _tokenTransfer(from,to,amount, tradeFee);\r\n        }\r\n\r\n        function swapAndLiquidify(uint256 contractTokenBalance) private {\r\n\r\n            swapTokensForEth(contractTokenBalance);\r\n\r\n            uint256 ETHBalance = address(this).balance;\r\n\r\n            if(ETHBalance > 0){\r\n                uint256 EthForTeams = ETHBalance.mul(66).div(10**2);\r\n                sendETHToFee(EthForTeams);\r\n                uint256 EthForLottery = (ETHBalance).sub(EthForTeams);\r\n                sendETHToLottery(EthForLottery);\r\n            }\r\n        \r\n        }\r\n\r\n        function ExtractEth(uint256 _AmountPercentage) public onlyOwner{\r\n            uint256 ETHBalance = address(this).balance;\r\n            uint256 ETHPercentage = ETHBalance.mul(_AmountPercentage).div(10**2);\r\n            sendETHToFee(ETHPercentage);\r\n        }\r\n\r\n        function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = uniswapV2Router.WETH();\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n            try uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            ){}\r\n            catch Error(string memory reason){\r\n                emit Log(reason);\r\n            }\r\n            catch{\r\n                emit Log(\"Swap Failed\");\r\n            }\r\n        }\r\n            \r\n        function sendETHToFee(uint256 amount) private {\r\n            _feeAddrWallet1.transfer(amount.div(2));\r\n            _feeAddrWallet2.transfer(amount.div(2));\r\n        }\r\n\r\n        function sendETHToLottery(uint256 amount) private {\r\n            uint256 holdAmount = amount;\r\n            if(playLotAddr != address(0)){\r\n                holdAmount = amount - amount.mul(75).div(10**2);\r\n                playLotAddr.transfer(amount.mul(75).div(10**2));\r\n            }\r\n            if(holdLotAddr != address(0)){\r\n            holdLotAddr.transfer(holdAmount);\r\n            }  \r\n        }\r\n        \r\n        function openTrading() external onlyOwner() {\r\n            require(!tradingOpen,\"trading is already open\"); \r\n            IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            uniswapV2Router = _uniswapV2Router;\r\n            _approve(address(this), address(uniswapV2Router), _tTotal);\r\n            uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n            uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n            swapEnabled = true;\r\n            tradingOpen = true;\r\n            _liqAddBlock = block.number + 2;\r\n            _maxTxAmount = _tTotal.mul(15).div(10**3);\r\n            _maxWtAmount = _tTotal.mul(2).div(10**2);\r\n\r\n            IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        }\r\n\r\n        function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private lockTheSwap{\r\n            // approve token transfer to cover all possible scenarios\r\n            _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n            // add the liquidity\r\n            try uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                owner(),\r\n                block.timestamp\r\n            ){\r\n\r\n            }catch Error(string memory reason){\r\n            emit Log(reason);\r\n            }\r\n        }\r\n\r\n    \r\n        function setBots(address[] memory bots_) public onlyOwner {\r\n            for (uint i = 0; i < bots_.length; i++) {\r\n                bots[bots_[i]] = true;\r\n            }\r\n        }\r\n        \r\n        function delBot(address notbot) public onlyOwner {\r\n            bots[notbot] = false;\r\n        }\r\n            \r\n        function _tokenTransfer(address sender, address recipient, uint256 amount, bool tradeFee) private {\r\n            if(!tradeFee)\r\n                removeAllFee();\r\n            \r\n            \r\n            _transferStandard(sender, recipient, amount);\r\n            \r\n            if(!tradeFee){\r\n                restoreAllFee();\r\n            }\r\n        }\r\n\r\n        function _transferStandard(address sender, address recipient, uint256 tAmount) private {        \r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\r\n            _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n            _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); \r\n            _takeTeam(tTeam);\r\n            _reflectFee(rFee, tFee);\r\n            emit Transfer(sender, recipient, tTransferAmount);\r\n        }\r\n        \r\n        function removeAllFee() private {\r\n            if(_feeAddr1 == 0 && _feeAddr2 == 0) return;\r\n            \r\n            _previousFeeAddr1 = _feeAddr1;\r\n            _previousFeeAddr2 = _feeAddr2;\r\n            \r\n            _feeAddr1 = 0;\r\n            _feeAddr2 = 0;\r\n        }\r\n        \r\n        function restoreAllFee() private {\r\n            _feeAddr1 = _previousFeeAddr1;\r\n            _feeAddr2 = _previousFeeAddr2;\r\n        }\r\n        \r\n        function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {\r\n            _maxTxAmount = _tTotal.mul(maxTxPercent).div(10**2);\r\n        }\r\n        \r\n        function setMaxWtPercent(uint256 maxWtPercent) external onlyOwner() {\r\n            _maxWtAmount = _tTotal.mul(maxWtPercent).div(10**2);\r\n        }\r\n\r\n        function _takeTeam(uint256 tTeam) private {\r\n            uint256 currentRate =  _getRate();\r\n            uint256 rTeam = tTeam.mul(currentRate);\r\n            _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\r\n        }\r\n\r\n        function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n            _rTotal = _rTotal.sub(rFee);\r\n            _tFeeTotal = _tFeeTotal.add(tFee);\r\n        }\r\n\r\n        receive() external payable {}\r\n        \r\n        function manualswap() external {\r\n            require(_msgSender() == _feeAddrWallet1);\r\n            uint256 contractBalance = balanceOf(address(this));\r\n            swapTokensForEth(contractBalance);\r\n        }\r\n        \r\n        function manualsend() external {\r\n            require(_msgSender() == _feeAddrWallet1);\r\n            uint256 contractETHBalance = address(this).balance;\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n\r\n        function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n            (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);\r\n            uint256 currentRate =  _getRate();\r\n            (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\r\n            return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\r\n        }\r\n\r\n        function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\r\n            uint256 tFee = tAmount.mul(taxFee).div(100);\r\n            uint256 tTeam = tAmount.mul(TeamFee).div(100);\r\n            uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\r\n            return (tTransferAmount, tFee, tTeam);\r\n        }\r\n\r\n        function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n            uint256 rAmount = tAmount.mul(currentRate);\r\n            uint256 rFee = tFee.mul(currentRate);\r\n            uint256 rTeam = tTeam.mul(currentRate);\r\n            uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\r\n            return (rAmount, rTransferAmount, rFee);\r\n        }\r\n\r\n        function _getRate() private view returns(uint256) {\r\n            (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n            return rSupply.div(tSupply);\r\n        }\r\n\r\n        function _getCurrentSupply() private view returns(uint256, uint256) {\r\n            uint256 rSupply = _rTotal;\r\n            uint256 tSupply = _tTotal;      \r\n            if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n            return (rSupply, tSupply);\r\n        }\r\n\r\n\r\n        function initPlayerJackpot (address _jackpotContract) public onlyOwner{\r\n            playerLot = Lottery(_jackpotContract);\r\n            playerLot.init(true, 0 );\r\n            playerLot.startLottery();\r\n            playLotAddr = payable(_jackpotContract);\r\n            _isExcludedFromFee[playLotAddr] = true;\r\n        }\r\n\r\n        function LotState(Lottery _lot) private returns(uint){\r\n            try _lot.lotteryState() returns (uint256  _state) { \r\n                return _state;\r\n            }catch Error(string memory reason){\r\n                emit Log(reason);\r\n                return 1;\r\n            }\r\n            catch{\r\n                emit Log(\"Failed to acquire Lottery State\");\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        function initHolderJackpot (address _jackpotContract) public onlyOwner{\r\n            holdersLot = Lottery(_jackpotContract);\r\n            holdersLot.init(true, 1);\r\n            holdersLot.startLottery();\r\n            holdLotAddr = payable(_jackpotContract);\r\n            _isExcludedFromFee[holdLotAddr] = true;\r\n        }\r\n\r\n        function minHolderLotteryValue(uint256 _value) public onlyOwner{\r\n            minAmountForHolder = _value.mul(10**9);\r\n        }\r\n\r\n        function enterLottery(Lottery _lot, address _participant) private {\r\n            try  _lot.enter(_participant){ \r\n            }catch Error(string memory reason){\r\n                emit Log(reason);\r\n            }catch{\r\n                emit Log(\"Error Entering Lottery\");\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function LotteryCheck(Lottery _lot) private{\r\n            try  _lot.validateLottery(){}\r\n            catch Error(string memory reason){\r\n                emit Log(reason);\r\n            }catch{\r\n                emit Log(\"Error Entering Lottery\");\r\n            }\r\n        }\r\n\r\n        function extractPlayer(Lottery _lot, address _participant) private {\r\n            try  _lot.extract(_participant){ \r\n            }catch Error(string memory reason){\r\n                emit Log(reason);\r\n            }catch{\r\n                emit Log(\"Error Entering Lottery\");\r\n            }\r\n        }\r\n\r\n    }","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Log\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Value\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_AmountPercentage\",\"type\":\"uint256\"}],\"name\":\"ExtractEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqAddBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_liqAddStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"notbot\",\"type\":\"address\"}],\"name\":\"delBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdLotAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jackpotContract\",\"type\":\"address\"}],\"name\":\"initHolderJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_jackpotContract\",\"type\":\"address\"}],\"name\":\"initPlayerJackpot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmountForHolder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"minHolderLotteryValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playLotAddr\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"setCooldownEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxTxPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWtPercent\",\"type\":\"uint256\"}],\"name\":\"setMaxWtPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipeBlockAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snipersCaught\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Rags2Riches","CompilerVersion":"v0.8.7+commit.e28d00a7","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"Unlicense","Proxy":"0","Implementation":"","SwarmSource":"ipfs://63e09cabdaf97bcab6fea094a4ae1dd38f58ff89a548daacb331ace822e0030e"}]