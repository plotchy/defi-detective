[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FixedWager.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"./BartrrBase.sol\\\";\\n\\n/// @title Bartrr Fixed Wager Contract\\n/// @notice This contract is used to manage fixed wagers for the Bartrr protocol.\\ncontract FixedWager is BartrrBase {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Emitted when a wager is created\\n    /// @param wagerId The wager id\\n    /// @param userA The user who created the wager\\n    /// @param userB The user who will fill the wager (zero address if the wager is open for anyone to fill)\\n    /// @param wagerToken The token whose price was wagered\\n    /// @param wagerPrice The wagered price of wagerToken\\n    event WagerCreated(\\n        uint256 indexed wagerId,\\n        address indexed userA,\\n        address userB,\\n        address wagerToken,\\n        int256 wagerPrice\\n    );\\n\\n    /// @notice Emitted when a wager is filled by the second party\\n    /// @param wagerId The wager id\\n    /// @param userA The user who created the wager\\n    /// @param userB The user who filled the wager\\n    /// @param wagerToken The token whose price was wagered\\n    /// @param wagerPrice The wagered price of wagerToken\\n    event WagerFilled(\\n        uint256 indexed wagerId,\\n        address indexed userA,\\n        address indexed userB,\\n        address wagerToken,\\n        int256 wagerPrice\\n    );\\n\\n    constructor() {\\n        _transferOwnership(tx.origin);\\n    }\\n\\n    struct Wager {\\n        bool above; // true if userA is betting above the price\\n        bool isFilled; // true if wager is filled\\n        bool isClosed; // true if the wager has been closed (redeemed or cancelled)\\n        address userA; // address of userA\\n        address userB; // address of userB (0x0 if p2m)\\n        address wagerToken; // token to be used for wager\\n        address paymentToken; // payment token is the token that is used to pay the wager\\n        int256 wagerPrice; // bet price -- USD price + 8 decimals\\n        uint256 amountUserA; // amount userA wagered\\n        uint256 amountUserB; // amount userB wagered\\n        uint256 duration; // duration of the wager\\n    }\\n\\n    Wager[] public wagers; // array of wagers\\n\\n    /// @notice Get all wagers\\n    /// @return All created wagers\\n    function getAllWagers() public view returns (Wager[] memory) {\\n        return wagers;\\n    }\\n\\n    /// @notice Creates a new wager\\n    /// @param _userB address of userB (0x0 if p2m)\\n    /// @param _wagerToken address of token to be wagered on\\n    /// @param _paymentToken address of token to be paid with\\n    /// @param _wagerPrice bet price\\n    /// @param _amountUserA amount userA wagered\\n    /// @param _amountUserB amount userB wagered\\n    /// @param _duration duration of the wager\\n    /// @param _above true if userA is betting above the price\\n    function createWager(\\n        address _userB,\\n        address _wagerToken,\\n        address _paymentToken, // 0xeee... address if ETH\\n        int256 _wagerPrice,\\n        uint256 _amountUserA,\\n        uint256 _amountUserB,\\n        uint256 _duration,\\n        bool _above\\n    ) external payable nonReentrant {\\n        require(isInitialized, \\\"Contract is not initialized\\\");\\n        require(wagerTokens[_wagerToken] && refundableTimestamp[_wagerToken].refundable <= refundableTimestamp[_wagerToken].nonrefundable, \\\"Token not allowed to be wagered on\\\"); \\n        require(paymentTokens[_paymentToken], \\\"Token not allowed for payment\\\");\\n        require(\\n            _duration >= MIN_WAGER_DURATION,\\n            \\\"Wager duration must be at least one 1 day\\\"\\n        );\\n\\n        uint256 feeUserA = 0;\\n\\n        if (_paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) { // ETH\\n            require(\\n                msg.value == _amountUserA,\\n                \\\"ETH wager must be equal to msg.value\\\"\\n            );\\n            if (_userB == address(0)) { // p2m\\n                feeUserA = _calculateFee(_amountUserA, _paymentToken);\\n                _amountUserA = _amountUserA - feeUserA;\\n                _transfer(payable(feeAddress), feeUserA);\\n            }\\n        } else { // Tokens\\n            if (_userB != address(0)) { // p2p\\n                IERC20(_paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amountUserA\\n                );\\n            } else { // p2m\\n                feeUserA = _calculateFee(_amountUserA, _paymentToken);\\n                 _amountUserA = _amountUserA - feeUserA;\\n\\n                IERC20(_paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    feeAddress,\\n                    feeUserA\\n                );\\n\\n                IERC20(_paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _amountUserA\\n                );\\n            }\\n        }\\n        _createWager(\\n            msg.sender,\\n            _userB,\\n            _wagerToken,\\n            _paymentToken,\\n            _wagerPrice,\\n            _amountUserA,\\n            _amountUserB,\\n            _duration,\\n            _above\\n        );\\n    }\\n\\n    /// @notice Fills a wager and starts the wager countdown\\n    /// @param _wagerId id of the wager\\n    function fillWager(uint256 _wagerId) external payable nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n\\n        require(!wager.isFilled, \\\"Wager already filled\\\");\\n        require(refundableTimestamp[wager.wagerToken].refundable <= refundableTimestamp[wager.wagerToken].nonrefundable, \\\"wager token not allowed\\\");\\n        require(msg.sender != wager.userA, \\\"Cannot fill own wager\\\");\\n\\n        if (wager.userB != address(0)) { // p2p\\n            require(msg.sender == wager.userB, \\\"p2p restricted\\\");\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) { // ETH\\n                require(\\n                    msg.value == wager.amountUserB,\\n                    \\\"ETH wager must be equal to msg.value\\\"\\n                );\\n                uint256 feeUserA = _calculateFee(wager.amountUserA, wager.paymentToken);\\n                wager.amountUserA = wager.amountUserA - feeUserA;\\n\\n                uint256 feeUserB = _calculateFee(wager.amountUserB, wager.paymentToken);\\n                wager.amountUserB = wager.amountUserB - feeUserB;\\n\\n                _transfer(payable(feeAddress), feeUserA + feeUserB);\\n            } else {\\n                uint256 feeUserA = _calculateFee(wager.amountUserA, wager.paymentToken);\\n                wager.amountUserA = wager.amountUserA - feeUserA;\\n\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    feeAddress,\\n                    feeUserA\\n                );\\n\\n                uint256 feeUserB = _calculateFee(wager.amountUserB, wager.paymentToken);\\n                wager.amountUserB = wager.amountUserB - feeUserB;\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    feeAddress,\\n                    feeUserB\\n                );\\n\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    wager.amountUserB\\n                );\\n            }  \\n        } else { // p2m\\n            require(block.timestamp < createdTimes[_wagerId] + 30 days, \\\"wager expired\\\");\\n            wager.userB = msg.sender;\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                require(\\n                    msg.value == wager.amountUserB,\\n                    \\\"ETH wager must be equal to msg.value\\\"\\n                );\\n                uint256 feeUserB = _calculateFee(wager.amountUserB, wager.paymentToken);\\n                wager.amountUserB = wager.amountUserB - feeUserB;\\n                _transfer(payable(feeAddress), feeUserB);\\n            } else {\\n                uint256 feeUserB = _calculateFee(wager.amountUserB, wager.paymentToken);\\n                wager.amountUserB = wager.amountUserB - feeUserB;\\n\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    feeAddress,\\n                    feeUserB\\n                );\\n\\n                IERC20(wager.paymentToken).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    wager.amountUserB\\n                );\\n            }\\n        }\\n\\n        endTimes[_wagerId] = wager.duration + block.timestamp;\\n        wager.isFilled = true;\\n\\n        wagers[_wagerId] = wager; // update wager to storage\\n\\n        emit WagerFilled(\\n            _wagerId,\\n            wager.userA,\\n            wager.userB,\\n            wager.wagerToken,\\n            wager.wagerPrice\\n        );\\n    }\\n\\n    /// @notice Cancels a wager that has not been filled\\n    /// @dev Fee is not refunded if wager was created as p2m\\n    /// @param _wagerId id of the wager\\n    function cancelWager(uint256 _wagerId) external nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n        require(msg.sender == wager.userA || msg.sender == wager.userB, \\\"Only userA or UserB can cancel the wager\\\");\\n        require(!wager.isFilled, \\\"Wager has already been filled\\\");\\n\\n        wagers[_wagerId].isClosed = true;\\n\\n        if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n            _transfer(payable(wager.userA), wager.amountUserA);\\n        } else {\\n            IERC20(wager.paymentToken).safeTransfer(wager.userA, wager.amountUserA);\\n        }\\n        emit WagerCancelled(_wagerId, msg.sender);\\n    }\\n\\n    /// @notice Redeems a wager\\n    /// @param _wagerId id of the wager\\n    function redeem(uint256 _wagerId) external nonReentrant {\\n        Wager memory wager = wagers[_wagerId];\\n        require(wager.isFilled, \\\"Wager has not been filled\\\");\\n        require(!wager.isClosed, \\\"Wager has already been closed\\\");\\n        uint256 refundable = refundableTimestamp[wager.wagerToken].refundable;\\n        uint256 nonrefundable = refundableTimestamp[wager.wagerToken].nonrefundable;\\n        if (refundable > 0 && // token has been marked refundable at least once\\n        endTimes[_wagerId] > refundable && // wager wasn't complete when marked refundable\\n        (refundable > nonrefundable || nonrefundable > createdTimes[_wagerId]) || // wager was created before token was marked nonrefundable\\n         refundUserA[_wagerId] ||\\n         refundUserB[_wagerId]\\n        ) {\\n            _refundWager(_wagerId);\\n        } else {\\n            _redeemWager(_wagerId);\\n        }\\n    }\\n\\n    /// @notice Returns the winner of the wager once it is completed\\n    /// @param _wagerId id of the wager\\n    /// @return winner The winner of the wager\\n    function checkWinner(uint256 _wagerId)\\n        public\\n        view\\n        returns (address winner)\\n    {\\n        Wager memory wager = wagers[_wagerId];\\n        require(wager.isFilled, \\\"Wager has not been filled\\\");\\n        uint256 endTime = endTimes[_wagerId];\\n        require(endTime <= block.timestamp, \\\"wager not complete\\\");\\n\\n        AggregatorV2V3Interface feed = AggregatorV2V3Interface(oracles[wager.wagerToken]);\\n\\n        uint80 roundId = getRoundId(feed, endTime);\\n\\n        if (roundId == 0) {\\n            return address(0);\\n        }\\n\\n        (int256 price,,) = _getHistoricalPrice(roundId, wager.wagerToken); // price is in USD with 8 decimals\\n\\n        if (wager.above && price >= wager.wagerPrice) {\\n            return wager.userA;\\n        } else if (!wager.above && price <= wager.wagerPrice) {\\n            return wager.userA;\\n        } else if (wager.above && price < wager.wagerPrice) {\\n            return wager.userB;\\n        } else if (!wager.above && price > wager.wagerPrice) {\\n            return wager.userB;\\n        }\\n        revert();\\n    }\\n\\n    function _createWager(\\n        address _userA,\\n        address _userB,\\n        address _wagerToken,\\n        address _paymentToken,\\n        int256 _wagerPrice,\\n        uint256 _amountUserA,\\n        uint256 _amountUserB,\\n        uint256 _duration,\\n        bool _above\\n    ) internal {\\n        Wager memory wager = Wager(\\n            _above,\\n            false,\\n            false,\\n            _userA,\\n            _userB,\\n            _wagerToken,\\n            _paymentToken,\\n            _wagerPrice,\\n            _amountUserA,\\n            _amountUserB,\\n            _duration\\n        );\\n        wagers.push(wager);\\n        createdTimes[idCounter] = block.timestamp;\\n        emit WagerCreated(idCounter, _userA, _userB, _wagerToken, _wagerPrice);\\n        idCounter++;\\n    }\\n\\n    function _refundWager(uint256 _wagerId) internal {\\n        Wager memory wager = wagers[_wagerId];\\n        if (msg.sender == wager.userA) {\\n            require(!refundUserA[_wagerId], \\\"UserA has already been refunded\\\");\\n            refundUserA[_wagerId] = true;\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                _transfer(payable(wager.userA), wager.amountUserA);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userA,\\n                    wager.amountUserA\\n                );\\n            }\\n            emit WagerRefunded(_wagerId, msg.sender, wager.paymentToken, wager.amountUserA);\\n        } else if (msg.sender == wager.userB) {\\n            require(!refundUserB[_wagerId], \\\"UserB has already been refunded\\\");\\n            refundUserB[_wagerId] = true;\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                _transfer(payable(wager.userB), wager.amountUserB);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userB,\\n                    wager.amountUserB\\n                );\\n            }\\n            emit WagerRefunded(_wagerId, msg.sender, wager.paymentToken, wager.amountUserB);\\n        }\\n    }\\n\\n    function _redeemWager(uint256 _wagerId) internal {\\n        Wager memory wager = wagers[_wagerId];\\n        require(endTimes[_wagerId] <= block.timestamp, \\\"wager not complete\\\");\\n        uint256 winningSum = wager.amountUserA + wager.amountUserB;\\n        address winner = checkWinner(_wagerId);\\n\\n        wagers[_wagerId].isClosed = true;\\n\\n        if (winner == address(0)) { // draw\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                _transfer(payable(wager.userA), wager.amountUserA);\\n                _transfer(payable(wager.userB), wager.amountUserB);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userA,\\n                    wager.amountUserA\\n                );\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    wager.userB,\\n                    wager.amountUserB\\n                );\\n            }\\n        } else {\\n            if (wager.paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                _transfer(payable(winner), winningSum);\\n            } else {\\n                IERC20(wager.paymentToken).safeTransfer(\\n                    winner,\\n                    winningSum\\n                );\\n            }\\n        }\\n        emit WagerRedeemed(_wagerId, winner, wager.paymentToken, winningSum);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BartrrBase.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\nimport \\\"./RoundIdFetcher.sol\\\";\\n\\n/// @title BartrrBase\\n/// @dev Contains the shared code between ConditionalWager.sol and FixedWager.sol\\ncontract BartrrBase is Ownable, RoundIdFetcher, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    address public feeAddress;\\n    uint256 public constant MIN_WAGER_DURATION = 1 days;\\n    uint256 public idCounter; // Counter for the wager id\\n    bool public isInitialized;\\n\\n    /// @notice Emitted when a wager is cancelled\\n    /// @param wagerId The wager id\\n    /// @param user The user who cancelled the wager\\n    event WagerCancelled(uint256 indexed wagerId, address indexed user);\\n\\n    /// @notice Emitted when a wager is redeemed\\n    /// @param wagerId The wager id\\n    /// @param winner The winner of the wager\\n    /// @param paymentToken The token used to pay for the wager\\n    /// @param winningSum The amount of paymentTokens won\\n    event WagerRedeemed(\\n        uint256 indexed wagerId,\\n        address indexed winner,\\n        address paymentToken,\\n        uint256 winningSum\\n    );\\n\\n    /// @notice Emitted when a wager is refunded\\n    /// @param wagerId The wager id\\n    /// @param user The user refunding the wager\\n    /// @param paymentToken The token being refunded\\n    /// @param amount The amount of paymentToken being refunded\\n    event WagerRefunded(\\n        uint256 indexed wagerId,\\n        address indexed user,\\n        address paymentToken,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an array of wager tokens is updated\\n    /// @param tokens Array of wager tokens\\n    /// @param oracles Array of oracles for the wager tokens\\n    /// @param update Whether the wager token is added (true) or removed (false)\\n    event WagerTokensUpdated(\\n        address[] indexed tokens,\\n        address[] indexed oracles,\\n        bool update\\n    );\\n\\n    /// @notice Emitted when a wager token is updated\\n    /// @param token Wager token\\n    /// @param oracle Oracle for the wager token\\n    /// @param update Whether the wager token is added (true) or removed (false)\\n    event WagerTokenUpdated(\\n        address indexed token,\\n        address indexed oracle,\\n        bool update\\n    );\\n\\n    /// @notice Emitted when an array of payment tokens is updated\\n    /// @param tokens Array of payment tokens\\n    /// @param oracles Array of oracles\\n    /// @param update Whether the array of payment tokens is added (true) or removed (false)\\n    event PaymentTokensUpdated(\\n        address[] indexed tokens,\\n        address[] indexed oracles,\\n        bool update\\n    );\\n\\n    /// @notice Emitted when a payment token is updated\\n    /// @param token Payment token\\n    /// @param oracle Oracle for the payment token\\n    /// @param update Whether the payment token is added (true) or removed (false)\\n    event PaymentTokenUpdated(\\n        address indexed token,\\n        address indexed oracle,\\n        bool update\\n    );\\n\\n    mapping(uint256 => uint256) public createdTimes; // mapping of contract creation times\\n    mapping(uint256 => uint256) public endTimes; // mapping of end times\\n    mapping(address => RefundableTimestamp) public refundableTimestamp; // mapping of timestamps for refundable token switch\\n    mapping(uint256 => bool) public refundUserA; // Marked true when userA calls refundWager()\\n    mapping(uint256 => bool) public refundUserB; // Marked true when userB calls refundWager()\\n\\n    mapping(address => bool) public wagerTokens; // Tokens to be wagered on\\n    mapping(address => bool) public paymentTokens; // Tokens to be paid with\\n\\n    mapping(address => address) public oracles; // Store the chainlink oracle for the token\\n\\n    struct RefundableTimestamp {\\n        uint256 refundable;\\n        uint256 nonrefundable;\\n    }\\n\\n    /// @notice Called if an error is detected in the chainlink oracle\\n    /// @param _token address of the token whose wagers need to be refunded\\n    function oracleMalfunction(address _token) external onlyOwner {\\n        refundableTimestamp[_token].refundable = block.timestamp;\\n    }\\n\\n    /// @notice Called when there is working update for the chainlink oracle\\n    /// @param _token address of the token whose wagers need to be refunded\\n    function oracleRecovery(address _token) external onlyOwner {\\n        refundableTimestamp[_token].nonrefundable = block.timestamp;\\n    }\\n\\n    /// @param _feeAddress address of the fee recipient\\n    function init(address _feeAddress, address _owner) external onlyOwner {\\n        require(!isInitialized, \\\"Contract is already initialized\\\");\\n        require(_feeAddress != address(0), \\\"Fee address cannot be 0x0\\\");\\n        feeAddress = _feeAddress;\\n        _transferOwnership(_owner);\\n        isInitialized = true;\\n    }\\n\\n    /// @notice Update the wager token\\n    /// @param _wagerToken address of the wager token\\n    /// @param _oracle address of the oracle for the wager token\\n    /// @param _update true if the token is being added, false if it is being removed\\n    function updateWagerToken(\\n        address _wagerToken,\\n        address _oracle,\\n        bool _update\\n    ) external onlyOwner {\\n        wagerTokens[_wagerToken] = _update;\\n        oracles[_wagerToken] = _oracle;\\n        emit WagerTokenUpdated(_wagerToken, _oracle, _update);\\n    }\\n\\n    /// @notice Update the payment token\\n    /// @param _paymentToken address of the payment token\\n    /// @param _update true if the tokens are being added, false if they are being removed\\n    function updatePaymentToken(address _paymentToken, address _oracle, bool _update)\\n        external\\n        onlyOwner\\n    {\\n        paymentTokens[_paymentToken] = _update;\\n        oracles[_paymentToken] = _oracle;\\n        emit PaymentTokenUpdated(_paymentToken, _oracle, _update);\\n    }\\n\\n    /// @param _wagerTokens array of wager token addresses\\n    /// @param _oracles array of oracles for the wager tokens\\n    /// @param _update true if the tokens are being added, false if they are being removed\\n    function updateWagerTokens(\\n        address[] memory _wagerTokens,\\n        address[] memory _oracles,\\n        bool _update\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < _wagerTokens.length; i++) {\\n            wagerTokens[_wagerTokens[i]] = _update;\\n            oracles[_wagerTokens[i]] = _oracles[i];\\n        }\\n        emit WagerTokensUpdated(_wagerTokens, _oracles, _update);\\n    }\\n\\n    /// @param _paymentTokens array of payment token addresses\\n    /// @param _oracles array of oracles for the payment tokens\\n    /// @param _update true if the tokens are being added, false if they are being removed\\n    function updatePaymentTokens(address[] memory _paymentTokens,  address[] memory _oracles, bool _update)\\n        external\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < _paymentTokens.length; i++) {\\n            paymentTokens[_paymentTokens[i]] = _update;\\n            oracles[_paymentTokens[i]] = _oracles[i];\\n        }\\n        emit PaymentTokensUpdated (_paymentTokens, _oracles, _update);\\n    }\\n\\n    /// @param _to address of transfer recipient\\n    /// @param _amount amount of ether to be transferred\\n    /// Function to transfer Ether from this contract to address from input\\n    function _transfer(address payable _to, uint256 _amount) internal {\\n        // Note that \\\"to\\\" is declared as payable\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    /// @param _roundId Chainlink roundId corresponding to the wager deadline\\n    /// @param _token address of the token whose price is being queried\\n    function _getHistoricalPrice(uint80 _roundId, address _token)\\n        internal\\n        view\\n        returns (int256, uint, uint)\\n    {\\n        (\\n            ,\\n            int price,\\n            uint startedAt,\\n            uint timeStamp,\\n        ) = AggregatorV2V3Interface(oracles[_token]).getRoundData(\\n                _roundId\\n            );\\n        require(timeStamp > 0, \\\"Round not complete\\\");\\n        return (price, startedAt, timeStamp);\\n    }\\n\\n    /// @param _token address of the token whose price is being queried\\n    function _getLatestPrice(address _token) internal view returns (int256) {\\n        address aggregator = oracles[_token];\\n        (,int256 answer,,uint256 updatedAt,) = AggregatorV2V3Interface(aggregator).latestRoundData();\\n        require(updatedAt > 0, \\\"Round not complete\\\");\\n        return answer;\\n    }\\n\\n    /// @param _amount amount of the wager\\n    /// @param _paymentToken address of the payment token\\n    function _calculateFee(uint256 _amount, address _paymentToken) internal view returns (uint256 fee) {\\n        (int256 tokenPrice) = int256(_getLatestPrice(_paymentToken));\\n\\n        // Protection against negative prices\\n        if (tokenPrice <= 0) {\\n            revert(\\\"data feed: negative token price\\\");\\n        } else { \\n            uint256 usdPrice = uint256(tokenPrice);\\n            uint8 decimals;\\n            if (_paymentToken == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)) {\\n                decimals = 18;\\n            } else {\\n                decimals = IERC20Metadata(_paymentToken).decimals();\\n            }\\n\\n            uint256 dollarAmount = (_amount * usdPrice / (10 ** decimals));\\n\\n            require( dollarAmount > 1000000000, \\\"Wager amount less than $10\\\");\\n            fee = _amount * 5 / 1000; // .5% fee\\n            if ((fee * usdPrice / (10 ** decimals)) < 500000000) {\\n                fee = (500000000 * (10 ** decimals)) / usdPrice; // $5 fee\\n            }\\n        }\\n        return fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"contracts/RoundIdFetcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title Chainlink RoundId Fetcher\\n/// @dev Used to get historical pricing data from Chainlink data feeds\\ncontract RoundIdFetcher {\\n\\n    constructor() {}\\n\\n    /// @notice Gets the phase that contains the target time\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _targetTime Target time to fetch the round id for\\n    /// @return The first roundId of the phase that contains the target time\\n    /// @return The timestamp of the phase that contains the target time\\n    /// @return The first roundId of the current phase\\n    function getPhaseForTimestamp(AggregatorV2V3Interface _feed, uint256 _targetTime) public view returns (uint80, uint256, uint80) {\\n        uint16 currentPhase = uint16(_feed.latestRound() >> 64);\\n        uint80 firstRoundOfCurrentPhase = (uint80(currentPhase) << 64) + 1;\\n        \\n        for (uint16 phase = currentPhase; phase >= 1; phase--) {\\n            uint80 firstRoundOfPhase = (uint80(phase) << 64) + 1;\\n            uint256 firstTimeOfPhase = _feed.getTimestamp(firstRoundOfPhase);\\n\\n            if (_targetTime > firstTimeOfPhase) {\\n                return (firstRoundOfPhase, firstTimeOfPhase, firstRoundOfCurrentPhase);\\n            }\\n        }\\n        return (0,0, firstRoundOfCurrentPhase);\\n    }\\n\\n    /// @notice Performs a binary search on the data feed to find the first round id after the target time\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _targetTime Target time to fetch the round id for\\n    /// @param _lhRound Lower bound roundId (typically the first roundId of the targeted phase)\\n    /// @param _lhTime Lower bound timestamp (typically the first timestamp of the targeted phase)\\n    /// @param _rhRound Upper bound roundId (typically the last roundId of the targeted phase)\\n    /// @return targetRound The first roundId after the target timestamp\\n    function _binarySearchForTimestamp(AggregatorV2V3Interface _feed, uint256 _targetTime, uint80 _lhRound, uint256 _lhTime, uint80 _rhRound) public view returns (uint80 targetRound) {\\n\\n        if (_lhTime > _targetTime) return 0; // targetTime not in range\\n\\n        uint80 guessRound = _rhRound;\\n        while (_rhRound - _lhRound > 1) {\\n            guessRound = uint80(int80(_lhRound) + int80(_rhRound - _lhRound)/2);\\n            uint256 guessTime = _feed.getTimestamp(uint256(guessRound));\\n            if (guessTime == 0 || guessTime > _targetTime) {\\n                _rhRound = guessRound;\\n            } else if (guessTime < _targetTime) {\\n                (_lhRound, _lhTime) = (guessRound, guessTime);\\n            }\\n        }\\n        return guessRound;\\n    }\\n\\n    /// @notice Gets the round id for a given timestamp\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _timeStamp Target time to fetch the round id for\\n    /// @return roundId The roundId for the given timestamp\\n    function getRoundId(AggregatorV2V3Interface _feed, uint256 _timeStamp) public view returns (uint80 roundId) {\\n\\n        (uint80 lhRound, uint256 lhTime, uint80 firstRoundOfCurrentPhase) = getPhaseForTimestamp(_feed, _timeStamp);\\n\\n        uint80 rhRound;\\n        if (lhRound == 0) {\\n            // Date is too far in the past, no data available\\n            return 0;\\n        } else if (lhRound == firstRoundOfCurrentPhase) {\\n            (rhRound,,,,) = _feed.latestRoundData();\\n        } else {\\n            // No good way to get last round of phase from Chainlink feed, so our binary search function will have to use trial & error.\\n            // Use 2**16 == 65536 as a upper bound on the number of rounds to search in a single Chainlink phase.\\n            \\n            rhRound = lhRound + 2**16; \\n        } \\n\\n        uint80 foundRoundId = _binarySearchForTimestamp(_feed, _timeStamp, lhRound, lhTime, rhRound);\\n        roundId = getRoundIdForTimestamp(_feed, _timeStamp, foundRoundId, lhRound);\\n        \\n        return roundId;\\n    }\\n\\n    function getRoundIdForTimestamp(AggregatorV2V3Interface _feed, uint256 _timeStamp, uint80 _roundId, uint80 _firstRoundOfPhase) internal view returns (uint80) {\\n        uint256 roundTimeStamp = _feed.getTimestamp(_roundId);\\n\\n        if (roundTimeStamp > _timeStamp && _roundId > _firstRoundOfPhase) {\\n            _roundId = getRoundIdForTimestamp(_feed, _timeStamp, _roundId - 1, _firstRoundOfPhase);\\n        } else if (roundTimeStamp > _timeStamp && _roundId == _firstRoundOfPhase) {\\n            _roundId = 0;\\n        }\\n            return _roundId;\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"PaymentTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"PaymentTokensUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"WagerCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPrice\",\"type\":\"int256\"}],\"name\":\"WagerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"wagerPrice\",\"type\":\"int256\"}],\"name\":\"WagerFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"winningSum\",\"type\":\"uint256\"}],\"name\":\"WagerRedeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"wagerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WagerRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"WagerTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"oracles\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"WagerTokensUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_WAGER_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_lhRound\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"_lhTime\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_rhRound\",\"type\":\"uint80\"}],\"name\":\"_binarySearchForTimestamp\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"targetRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"cancelWager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"checkWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"_wagerPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_above\",\"type\":\"bool\"}],\"name\":\"createWager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"createdTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"endTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"fillWager\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWagers\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"above\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wagerPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedWager.Wager[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetTime\",\"type\":\"uint256\"}],\"name\":\"getPhaseForTimestamp\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"getRoundId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"oracleMalfunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"oracleRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"paymentTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wagerId\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundUserA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refundUserB\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundableTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonrefundable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updatePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_paymentTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updatePaymentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updateWagerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_wagerTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_update\",\"type\":\"bool\"}],\"name\":\"updateWagerTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wagerTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"above\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isClosed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"userA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userB\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"wagerPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountUserB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"FixedWager","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]