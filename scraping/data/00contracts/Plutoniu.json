[{"SourceCode":"/*\r\n    \r\n    ██████  ██      ██    ██ ████████  ██████  ███    ██ ██ ██    ██ ███    ███     ██████  ██████   ██████  ████████  ██████   ██████  ██████  ██          \r\n    ██   ██ ██      ██    ██    ██    ██    ██ ████   ██ ██ ██    ██ ████  ████     ██   ██ ██   ██ ██    ██    ██    ██    ██ ██      ██    ██ ██          \r\n    ██████  ██      ██    ██    ██    ██    ██ ██ ██  ██ ██ ██    ██ ██ ████ ██     ██████  ██████  ██    ██    ██    ██    ██ ██      ██    ██ ██          \r\n    ██      ██      ██    ██    ██    ██    ██ ██  ██ ██ ██ ██    ██ ██  ██  ██     ██      ██   ██ ██    ██    ██    ██    ██ ██      ██    ██ ██          \r\n    ██      ███████  ██████     ██     ██████  ██   ████ ██  ██████  ██      ██     ██      ██   ██  ██████     ██     ██████   ██████  ██████  ███████     \r\n                                                                                                                                                            \r\n                                                                                                                                                            \r\n* Telegram: https://t.me/Plutonium_PU94\r\n* Twitter: https://twitter.com/PLUTONIUM_ERC20?t=zjuQhJOAH1HbiXSbJ1gWeg&s=09\r\n* Website: https://plutoniumprotocol.wixsite.com/plutonium\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.17;\r\n\r\nabstract contract Context {\r\n\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }   \r\n    \r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    function renouncedOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract Plutonium is Context, IERC20, Ownable {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    string private _name = \"Plutonium Protocol\";\r\n    string private _symbol = \"Pu\";\r\n    uint8 private _decimals = 18;\r\n\r\n    address public marketingWallet = 0x2F240186EE0f1ca245dcB972aA69a6A6b7eBeC53;\r\n    address public developerWallet = 0xfc547eA553cdfE8E4CD3af999B0Ef5b0832e871a;\r\n    address public liquidityReciever;\r\n\r\n    address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\r\n    address public immutable zeroAddress = 0x0000000000000000000000000000000000000000;\r\n    \r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    \r\n    mapping (address => bool) public isExcludedFromFee;\r\n    mapping (address => bool) public isMarketPair;\r\n    mapping (address => bool) public isWalletLimitExempt;\r\n    mapping (address => bool) public isTxLimitExempt;\r\n\r\n    uint256 _buyLiquidityFee = 30;\r\n    uint256 _buyMarketingFee = 30;\r\n    uint256 _buyDeveloperFee = 10;\r\n    uint256 _buyBurnFee = 20;\r\n    \r\n    uint256 _sellLiquidityFee = 30;\r\n    uint256 _sellMarketingFee = 30;\r\n    uint256 _sellDeveloperFee = 10;\r\n    uint256 _sellBurnFee = 20;\r\n\r\n    uint256 AmountForLiquidity;\r\n    uint256 AmountForMarketing;\r\n    uint256 AmountForDeveloper;\r\n\r\n    uint256 denominator = 1000;\r\n\r\n    uint256 public constant MAX_FEE = 250;  //25%\r\n\r\n    uint256 private _totalSupply = 500_000_000 * 10**_decimals;   \r\n\r\n    uint256 public minimumTokensBeforeSwap = 1000 * 10**_decimals;\r\n\r\n    uint256 public _maxTxAmount =  _totalSupply.mul(10).div(denominator);     //1%\r\n    uint256 public _walletMax = _totalSupply.mul(10).div(denominator);    //1%\r\n\r\n    bool public EnableTxLimit = true;\r\n    bool public checkWalletLimit = true;\r\n\r\n    IUniswapV2Router02 public uniswapV2Router;\r\n    address public uniswapPair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n    \r\n    event SwapETHForTokens(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor () {\r\n        \r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n\r\n        uniswapPair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _allowances[address(this)][address(uniswapV2Router)] = ~uint256(0);\r\n\r\n        liquidityReciever = msg.sender;\r\n\r\n        isExcludedFromFee[address(this)] = true;\r\n        isExcludedFromFee[msg.sender] = true;\r\n        isExcludedFromFee[marketingWallet] = true;\r\n        isExcludedFromFee[developerWallet] = true;\r\n\r\n        isWalletLimitExempt[msg.sender] = true;\r\n        isWalletLimitExempt[address(uniswapPair)] = true;\r\n        isWalletLimitExempt[address(this)] = true;\r\n        \r\n        isTxLimitExempt[msg.sender] = true;\r\n        isTxLimitExempt[address(this)] = true;\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    /*====================================\r\n    |               Getters              |\r\n    ====================================*/\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n       return _balances[account];     \r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(deadAddress)).sub(balanceOf(zeroAddress));\r\n    }\r\n\r\n     //to recieve ETH from uniswapV2Router when swaping\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {\r\n\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        if(inSwapAndLiquify)\r\n        { \r\n            return _basicTransfer(sender, recipient, amount); \r\n        }\r\n        else\r\n        {  \r\n            if(!isTxLimitExempt[sender] && !isTxLimitExempt[recipient] && EnableTxLimit) {\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n            } \r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n            \r\n            if (overMinimumTokenBalance && !inSwapAndLiquify && !isMarketPair[sender] && swapAndLiquifyEnabled) \r\n            {\r\n                swapAndLiquify();\r\n            }\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n\r\n            uint256 finalAmount = shouldTakeFee(sender,recipient) ? amount : takeFee(sender, recipient, amount);\r\n\r\n            if(checkWalletLimit && !isWalletLimitExempt[recipient]) {\r\n                require(balanceOf(recipient).add(finalAmount) <= _walletMax,\"Max Wallet Limit Exceeded!!\");\r\n            }\r\n\r\n            _balances[recipient] = _balances[recipient].add(finalAmount);\r\n\r\n            emit Transfer(sender, recipient, finalAmount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function swapAndLiquify() private lockTheSwap {\r\n        if(AmountForLiquidity > 0) swapforLiquidity(AmountForLiquidity);\r\n        if(AmountForMarketing > 0) swapforMarketing(AmountForMarketing);\r\n        if(AmountForDeveloper > 0) swapforDeveloper(AmountForDeveloper);\r\n    }\r\n    \r\n    function manualSwap() external onlyOwner lockTheSwap {\r\n        if(AmountForLiquidity > 0) swapforLiquidity(AmountForLiquidity);\r\n        if(AmountForMarketing > 0) swapforMarketing(AmountForMarketing);\r\n        if(AmountForDeveloper > 0) swapforDeveloper(AmountForDeveloper);\r\n    }\r\n\r\n    function swapforLiquidity(uint _token) internal {\r\n        uint half = _token.div(2);\r\n        uint Otherhalf = _token.sub(half);\r\n        uint initalBalance = address(this).balance;\r\n        swapTokensForEth(half);\r\n        uint recBalance = address(this).balance.sub(initalBalance);\r\n        addLiquidity(Otherhalf,recBalance);\r\n        AmountForLiquidity = AmountForLiquidity.sub(_token);\r\n    }\r\n\r\n    function swapforMarketing(uint _token) internal {\r\n        uint initalBalance = address(this).balance;\r\n        swapTokensForEth(_token);\r\n        uint recBalance = address(this).balance.sub(initalBalance);\r\n        (bool os,) = payable(marketingWallet).call{value: recBalance}(\"\");\r\n        if(os){}\r\n        AmountForMarketing = AmountForMarketing.sub(_token);\r\n    }\r\n\r\n    function swapforDeveloper(uint _token) internal {\r\n        uint initalBalance = address(this).balance;\r\n        swapTokensForEth(_token);\r\n        uint recBalance = address(this).balance.sub(initalBalance);\r\n        (bool os,) = payable(developerWallet).call{value: recBalance}(\"\");\r\n        if(os){}\r\n        AmountForDeveloper = AmountForDeveloper.sub(_token);\r\n    }\r\n\r\n    function getFeesInfo() public view returns (\r\n        uint256 BuyLiquidity,uint256 BuyMarketing,uint256 BuyDeveloper,uint256 BuyBurn,\r\n        uint256 SellLiquidity,uint256 SellMarketing,uint256 SellDeveloper,uint256 SellBurn\r\n    ) {\r\n        return (\r\n        _buyLiquidityFee,_buyMarketingFee,_buyDeveloperFee,_buyBurnFee,\r\n        _sellLiquidityFee,_sellMarketingFee,_sellDeveloperFee,_sellBurnFee\r\n        );\r\n    }\r\n    \r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            1, // accept min 1 amount of wei\r\n            path,\r\n            address(this), // The contract\r\n            block.timestamp + 15\r\n        );\r\n        \r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            liquidityReciever,\r\n            block.timestamp + 15\r\n        );\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if(isExcludedFromFee[sender] || isExcludedFromFee[recipient]) {\r\n            return true;\r\n        }\r\n        else if (isMarketPair[sender] || isMarketPair[recipient]) {\r\n            return false;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        \r\n        uint feeAmount;\r\n        uint LFEE;\r\n        uint MFEE;\r\n        uint DFEE;\r\n        uint BFEE;\r\n\r\n        unchecked {\r\n\r\n            if(isMarketPair[sender]) {\r\n                LFEE = amount.mul(_buyLiquidityFee).div(denominator);\r\n                MFEE = amount.mul(_buyMarketingFee).div(denominator);\r\n                DFEE = amount.mul(_buyDeveloperFee).div(denominator);\r\n                BFEE = amount.mul(_buyBurnFee).div(denominator);\r\n                AmountForLiquidity += LFEE;\r\n                AmountForMarketing += MFEE;\r\n                AmountForDeveloper += DFEE;\r\n                feeAmount = LFEE.add(MFEE).add(DFEE);\r\n            }\r\n            else if(isMarketPair[recipient]) {\r\n                LFEE = amount.mul(_sellLiquidityFee).div(denominator);\r\n                MFEE = amount.mul(_sellMarketingFee).div(denominator);\r\n                DFEE = amount.mul(_sellDeveloperFee).div(denominator);\r\n                BFEE = amount.mul(_sellBurnFee).div(denominator);\r\n                AmountForLiquidity += LFEE;\r\n                AmountForMarketing += MFEE;\r\n                AmountForDeveloper += DFEE;\r\n                feeAmount = LFEE.add(MFEE).add(DFEE);\r\n            }     \r\n\r\n            if(BFEE > 0) {\r\n                _balances[address(deadAddress)] = _balances[address(deadAddress)].add(BFEE);\r\n                emit Transfer(sender, address(deadAddress), BFEE);\r\n            }\r\n\r\n            if(feeAmount > 0) {\r\n                _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n                emit Transfer(sender, address(this), feeAmount);\r\n            }\r\n\r\n            return amount.sub(feeAmount).sub(BFEE);\r\n        }\r\n        \r\n    }\r\n\r\n    /*====================================\r\n    |               Setters              |\r\n    ====================================*/\r\n\r\n    //To Rescue Stucked Balance\r\n    function withdrawFunds() public onlyOwner { \r\n        (bool os,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(os,\"Transaction Failed!!\");\r\n    }\r\n\r\n    //To Rescue Stucked Tokens\r\n    function withdrawTokens(IERC20 adr,address recipient,uint amount) public onlyOwner {\r\n        adr.transfer(recipient,amount);\r\n    }\r\n\r\n    function enableTxLimit(bool _status) public onlyOwner {\r\n        EnableTxLimit = _status;\r\n    }\r\n\r\n    function enableWalletLimit(bool _status) public onlyOwner {\r\n        checkWalletLimit = _status;\r\n    }\r\n\r\n    function setBuyFee(uint _newLP , uint _newMarket , uint _newDeveloper, uint _newBurn) public onlyOwner { \r\n        uint subtotal = _newLP.add(_newMarket).add(_newDeveloper).add(_newBurn);\r\n        require(subtotal <= MAX_FEE,\"Error: Max Tax 25% Limit Exceeded\");\r\n        _buyLiquidityFee = _newLP;\r\n        _buyMarketingFee = _newMarket;\r\n        _buyDeveloperFee = _newDeveloper;\r\n        _buyBurnFee = _newBurn;\r\n    }\r\n\r\n    function setSellFee(uint _newLP , uint _newMarket , uint _newDeveloper, uint _newBurn) public onlyOwner {        \r\n        uint subtotal = _newLP.add(_newMarket).add(_newDeveloper).add(_newBurn);\r\n        require(subtotal <= MAX_FEE,\"Error: Max Tax 25% Limit Exceeded\");\r\n        _sellLiquidityFee = _newLP;\r\n        _sellMarketingFee = _newMarket;\r\n        _sellDeveloperFee = _newDeveloper;\r\n        _sellBurnFee = _newBurn;\r\n    }\r\n\r\n    function setMarketingWallets(address _market) public onlyOwner {\r\n        marketingWallet = _market;\r\n    }\r\n\r\n    function setDeveloperWallets(address _developer) public onlyOwner {\r\n        developerWallet = _developer;\r\n    }\r\n\r\n    function setLiquidityWallets(address _liquidityRec) public onlyOwner {\r\n        liquidityReciever = _liquidityRec;\r\n    }\r\n\r\n    function setExcludeFromFee(address _adr,bool _status) public onlyOwner {\r\n        require(isExcludedFromFee[_adr] != _status,\"Not Changed!!\");\r\n        isExcludedFromFee[_adr] = _status;\r\n    }\r\n\r\n    function ExcludeWalletLimit(address _adr,bool _status) public onlyOwner {\r\n        require(isWalletLimitExempt[_adr] != _status,\"Not Changed!!\");\r\n        isWalletLimitExempt[_adr] = _status;\r\n    }\r\n\r\n    function ExcludeTxLimit(address _adr,bool _status) public onlyOwner {\r\n        require(isTxLimitExempt[_adr] != _status,\"Not Changed!!\");\r\n        isTxLimitExempt[_adr] = _status;\r\n    }\r\n\r\n    function setNumTokensBeforeSwap(uint256 newLimit) external onlyOwner() {\r\n        minimumTokensBeforeSwap = newLimit;\r\n    }\r\n\r\n    function setMaxWalletLimit(uint256 newLimit) external onlyOwner() {\r\n        _walletMax = newLimit;\r\n    }\r\n\r\n    function setTxLimit(uint256 newLimit) external onlyOwner() {\r\n        _maxTxAmount = newLimit;\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function changeRouterVersion(address newRouterAddress) public onlyOwner returns(address newPairAddress) {\r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(newRouterAddress); \r\n\r\n        newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\r\n\r\n        if(newPairAddress == address(0)) //Create If Doesnt exist\r\n        {\r\n            newPairAddress = IUniswapV2Factory(_uniswapV2Router.factory())\r\n                .createPair(address(this), _uniswapV2Router.WETH());\r\n        }\r\n\r\n        uniswapPair = newPairAddress; //Set new pair address\r\n        uniswapV2Router = _uniswapV2Router; //Set new router address\r\n\r\n        isMarketPair[address(uniswapPair)] = true;\r\n    }\r\n\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapETHForTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EnableTxLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"ExcludeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"changeRouterVersion\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newPairAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkWalletLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"enableWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeesInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"BuyLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyDeveloper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BuyBurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SellLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SellMarketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SellDeveloper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"SellBurn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMarketPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTxLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWalletLimitExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityReciever\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncedOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDeveloper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurn\",\"type\":\"uint256\"}],\"name\":\"setBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_developer\",\"type\":\"address\"}],\"name\":\"setDeveloperWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityRec\",\"type\":\"address\"}],\"name\":\"setLiquidityWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"}],\"name\":\"setMarketingWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setMaxWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setNumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMarket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newDeveloper\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newBurn\",\"type\":\"uint256\"}],\"name\":\"setSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"Plutonium","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://51d6b413838d668d903a14405b439ef62ebdfd14b1fc713f861622e56426f494"}]