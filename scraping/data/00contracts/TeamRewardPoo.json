[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/reward/pools/TeamRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../../tools/Errors.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../calcs/CalcLinearUnweightedReward.sol';\\nimport './ControlledRewardPool.sol';\\n\\ncontract TeamRewardPool is ControlledRewardPool, CalcLinearUnweightedReward {\\n  using PercentageMath for uint256;\\n\\n  address private _teamManager;\\n  address private _excessTarget;\\n  uint32 private _lockupTill;\\n  uint16 private _totalShare;\\n\\n  mapping(address => uint256) private _delayed;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    address teamManager\\n  ) ControlledRewardPool(controller, initialRate, baselinePercentage) {\\n    _teamManager = teamManager;\\n  }\\n\\n  function _onlyTeamManagerOrConfigurator() private view {\\n    require(msg.sender == _teamManager || _isConfigAdmin(msg.sender), Errors.CALLER_NOT_TEAM_MANAGER);\\n  }\\n\\n  modifier onlyTeamManagerOrConfigurator() {\\n    _onlyTeamManagerOrConfigurator();\\n    _;\\n  }\\n\\n  function getPoolName() public pure override returns (string memory) {\\n    return 'TeamPool';\\n  }\\n\\n  function getExcessTarget() external view returns (address) {\\n    return _excessTarget;\\n  }\\n\\n  event ExcessTargetUpdated(address indexed target);\\n\\n  function setExcessTarget(address target) external onlyTeamManagerOrConfigurator {\\n    require(target != address(this));\\n    _excessTarget = target;\\n    if (target != address(0)) {\\n      internalAllocateReward(target, 0, uint32(block.timestamp), AllocationMode.SetPull);\\n    }\\n    emit ExcessTargetUpdated(target);\\n  }\\n\\n  function internalGetRate() internal view override returns (uint256) {\\n    return super.getLinearRate();\\n  }\\n\\n  function internalSetRate(uint256 newRate) internal override {\\n    super.setLinearRate(newRate);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 currentBlock\\n  )\\n    internal\\n    view\\n    override\\n    returns (\\n      uint256 rate,\\n      uint256 allocated,\\n      uint32 since\\n    )\\n  {\\n    (rate, allocated, since) = super.internalCalcRateAndReward(entry, lastAccumRate, currentBlock);\\n    allocated = (allocated + PercentageMath.HALF_ONE) / PercentageMath.ONE;\\n    return (rate, allocated, since);\\n  }\\n\\n  function addRewardProvider(address, address) external view override onlyConfigAdmin {\\n    revert('UNSUPPORTED');\\n  }\\n\\n  function removeRewardProvider(address) external override onlyConfigAdmin {}\\n\\n  function getAllocatedShares() external view returns (uint16) {\\n    return _totalShare;\\n  }\\n\\n  function isUnlocked(uint32 at) public view returns (bool) {\\n    return _lockupTill > 0 && _lockupTill < at;\\n  }\\n\\n  function internalAttachedToRewardController() internal override {\\n    _updateTeamExcess();\\n  }\\n\\n  function updateTeamMembers(address[] calldata members, uint16[] calldata memberSharePct)\\n    external\\n    onlyTeamManagerOrConfigurator\\n  {\\n    require(members.length == memberSharePct.length);\\n    for (uint256 i = 0; i < members.length; i++) {\\n      _updateTeamMember(members[i], memberSharePct[i]);\\n    }\\n    _updateTeamExcess();\\n  }\\n\\n  function updateTeamMember(address member, uint16 memberSharePct) external onlyTeamManagerOrConfigurator {\\n    _updateTeamMember(member, memberSharePct);\\n    _updateTeamExcess();\\n  }\\n\\n  event TeamMemberShareUpdated(address indexed member, uint16 memberSharePct);\\n\\n  function _updateTeamMember(address member, uint16 memberSharePct) private {\\n    require(member != address(0), 'member is required');\\n    require(member != address(this), 'member is invalid');\\n    require(memberSharePct <= PercentageMath.ONE, 'invalid share percentage');\\n\\n    uint256 newTotalShare = (uint256(_totalShare) + memberSharePct) - getRewardEntry(member).rewardBase;\\n    require(newTotalShare <= PercentageMath.ONE, 'team total share exceeds 100%');\\n    _totalShare = uint16(newTotalShare);\\n    emit TeamMemberShareUpdated(member, memberSharePct);\\n\\n    (uint256 allocated, uint32 since, AllocationMode mode) = doUpdateRewardBalance(member, memberSharePct);\\n\\n    if (isUnlocked(getCurrentTick())) {\\n      allocated = _popDelayed(member, allocated);\\n    } else if (allocated > 0) {\\n      _delayed[member] += allocated;\\n      if (mode == AllocationMode.Push) {\\n        return;\\n      }\\n      allocated = 0;\\n    }\\n\\n    internalAllocateReward(member, allocated, since, mode);\\n  }\\n\\n  function _popDelayed(address holder, uint256 amount) private returns (uint256) {\\n    uint256 d = _delayed[holder];\\n    if (d == 0) {\\n      return amount;\\n    }\\n    delete (_delayed[holder]);\\n    return amount + d;\\n  }\\n\\n  function _updateTeamExcess() private {\\n    uint256 excess = PercentageMath.ONE - _totalShare;\\n    (uint256 allocated, , ) = doUpdateRewardBalance(address(this), excess);\\n    if (allocated > 0) {\\n      _delayed[address(this)] += allocated;\\n    }\\n    emit TeamMemberShareUpdated(address(0), uint16(excess));\\n  }\\n\\n  event TeamManagerUpdated(address indexed manager);\\n\\n  function setTeamManager(address manager) external onlyTeamManagerOrConfigurator {\\n    _teamManager = manager;\\n    emit TeamManagerUpdated(manager);\\n  }\\n\\n  function getTeamManager() external view returns (address) {\\n    return _teamManager;\\n  }\\n\\n  event UnlockedAtUpdated(uint32 at);\\n\\n  function setUnlockedAt(uint32 at) external onlyConfigAdmin {\\n    require(at > 0, 'unlockAt is required');\\n    require(_lockupTill == 0 || _lockupTill >= getCurrentTick(), 'lockup is finished');\\n    _lockupTill = at;\\n    emit UnlockedAtUpdated(at);\\n  }\\n\\n  function getUnlockedAt() external view returns (uint32) {\\n    return _lockupTill;\\n  }\\n\\n  function getCurrentTick() internal view override returns (uint32) {\\n    return uint32(block.timestamp);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    override\\n    returns (\\n      uint256 allocated,\\n      uint32 since,\\n      bool keep\\n    )\\n  {\\n    if (!isUnlocked(getCurrentTick())) {\\n      return (0, 0, true);\\n    }\\n    (allocated, since, keep) = doGetReward(holder);\\n    allocated = _popDelayed(holder, allocated);\\n\\n    if (holder != _excessTarget) {\\n      return (allocated, since, keep);\\n    }\\n\\n    (uint256 allocated2, uint32 since2, ) = doGetReward(address(this));\\n    allocated2 = _popDelayed(address(this), allocated2);\\n\\n    return (allocated + allocated2, since2 > since ? since2 : since, true);\\n  }\\n\\n  function internalCalcReward(address holder, uint32 at) internal view override returns (uint256, uint32) {\\n    (uint256 allocated, uint32 since) = doCalcRewardAt(holder, at);\\n    allocated += _delayed[holder];\\n\\n    if (holder != _excessTarget) {\\n      return (allocated, since);\\n    }\\n\\n    (uint256 allocated2, uint32 since2) = doCalcRewardAt(address(this), at);\\n    allocated2 += _delayed[address(this)];\\n\\n    return (allocated + allocated2, since2 > since ? since2 : since);\\n  }\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 amount,\\n      uint256 delayedAmount,\\n      uint32 since\\n    )\\n  {\\n    (amount, since) = internalCalcReward(holder, at);\\n    if (!isUnlocked(at)) {\\n      (amount, delayedAmount) = (0, amount);\\n    }\\n    return (amount, delayedAmount, since);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/math/PercentageMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../Errors.sol';\\n\\n/// @dev Percentages are defined in basis points. The precision is indicated by ONE. Operations are rounded half up.\\nlibrary PercentageMath {\\n  uint16 public constant BP = 1; // basis point\\n  uint16 public constant PCT = 100 * BP; // basis points per percentage point\\n  uint16 public constant ONE = 100 * PCT; // basis points per 1 (100%)\\n  uint16 public constant HALF_ONE = ONE / 2;\\n  // deprecated\\n  uint256 public constant PERCENTAGE_FACTOR = ONE; //percentage plus two decimals\\n\\n  /**\\n   * @dev Executes a percentage multiplication\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The percentage of value\\n   **/\\n  function percentMul(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    if (value == 0 || factor == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / factor, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * factor + HALF_ONE) / ONE;\\n  }\\n\\n  /**\\n   * @dev Executes a percentage division\\n   * @param value The value of which the percentage needs to be calculated\\n   * @param factor Basis points of the value to be calculated\\n   * @return The value divided the percentage\\n   **/\\n  function percentDiv(uint256 value, uint256 factor) internal pure returns (uint256) {\\n    require(factor != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    uint256 halfFactor = factor >> 1;\\n\\n    require(value <= (type(uint256).max - halfFactor) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + halfFactor) / factor;\\n  }\\n\\n  function percentOf(uint256 value, uint256 base) internal pure returns (uint256) {\\n    require(base != 0, Errors.MATH_DIVISION_BY_ZERO);\\n    if (value == 0) {\\n      return 0;\\n    }\\n\\n    require(value <= (type(uint256).max - HALF_ONE) / ONE, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n    return (value * ONE + (base >> 1)) / base;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Errors library\\n * @notice Defines the error messages emitted by the different contracts\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (DepositToken, VariableDebtToken and StableDebtToken)\\n *  - AT = DepositToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = AddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolExtension\\n *  - ST = Stake\\n */\\nlibrary Errors {\\n  //contract specific errors\\n  string public constant VL_INVALID_AMOUNT = '1'; // Amount must be greater than 0\\n  string public constant VL_NO_ACTIVE_RESERVE = '2'; // Action requires an active reserve\\n  string public constant VL_RESERVE_FROZEN = '3'; // Action cannot be performed because the reserve is frozen\\n  string public constant VL_UNKNOWN_RESERVE = '4'; // Action requires an active reserve\\n  string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5'; // User cannot withdraw more than the available balance (above min limit)\\n  string public constant VL_TRANSFER_NOT_ALLOWED = '6'; // Transfer cannot be allowed.\\n  string public constant VL_BORROWING_NOT_ENABLED = '7'; // Borrowing is not enabled\\n  string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = '8'; // Invalid interest rate mode selected\\n  string public constant VL_COLLATERAL_BALANCE_IS_0 = '9'; // The collateral balance is 0\\n  string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '10'; // Health factor is lesser than the liquidation threshold\\n  string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = '11'; // There is not enough collateral to cover a new borrow\\n  string public constant VL_STABLE_BORROWING_NOT_ENABLED = '12'; // stable borrowing not enabled\\n  string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = '13'; // collateral is (mostly) the same currency that is being borrowed\\n  string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '14'; // The requested amount is exceeds max size of a stable loan\\n  string public constant VL_NO_DEBT_OF_SELECTED_TYPE = '15'; // to repay a debt, user needs to specify a correct debt type (variable or stable)\\n  string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '16'; // To repay on behalf of an user an explicit amount to repay is needed\\n  string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = '17'; // User does not have a stable rate loan in progress on this reserve\\n  string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = '18'; // User does not have a variable rate loan in progress on this reserve\\n  string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = '19'; // The collateral balance needs to be greater than 0\\n  string public constant VL_DEPOSIT_ALREADY_IN_USE = '20'; // User deposit is already being used as collateral\\n  string public constant VL_RESERVE_MUST_BE_COLLATERAL = '21'; // This reserve must be enabled as collateral\\n  string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '22'; // Interest rate rebalance conditions were not met\\n  string public constant AT_OVERDRAFT_DISABLED = '23'; // User doesn't accept allocation of overdraft\\n  string public constant VL_INVALID_SUB_BALANCE_ARGS = '24';\\n  string public constant AT_INVALID_SLASH_DESTINATION = '25';\\n\\n  string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = '27'; // The caller of the function is not the lending pool configurator\\n\\n  string public constant LENDING_POOL_REQUIRED = '28'; // The caller of this function must be a lending pool\\n  string public constant CALLER_NOT_LENDING_POOL = '29'; // The caller of this function must be a lending pool\\n  string public constant AT_SUB_BALANCE_RESTIRCTED_FUNCTION = '30'; // The caller of this function must be a lending pool or a sub-balance operator\\n\\n  string public constant RL_RESERVE_ALREADY_INITIALIZED = '32'; // Reserve has already been initialized\\n  string public constant CALLER_NOT_POOL_ADMIN = '33'; // The caller must be the pool admin\\n  string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34'; // The liquidity of the reserve needs to be 0\\n\\n  string public constant LPAPR_PROVIDER_NOT_REGISTERED = '41'; // Provider is not registered\\n  string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42'; // Health factor is not below the threshold\\n  string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43'; // The collateral chosen cannot be liquidated\\n  string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44'; // User did not borrow the specified currency\\n  string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45'; // There isn't enough liquidity available to liquidate\\n\\n  string public constant MATH_MULTIPLICATION_OVERFLOW = '48';\\n  string public constant MATH_ADDITION_OVERFLOW = '49';\\n  string public constant MATH_DIVISION_BY_ZERO = '50';\\n  string public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51'; //  Liquidity index overflows uint128\\n  string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52'; //  Variable borrow index overflows uint128\\n  string public constant RL_LIQUIDITY_RATE_OVERFLOW = '53'; //  Liquidity rate overflows uint128\\n  string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54'; //  Variable borrow rate overflows uint128\\n  string public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55'; //  Stable borrow rate overflows uint128\\n  string public constant CT_INVALID_MINT_AMOUNT = '56'; //invalid amount to mint\\n  string public constant CALLER_NOT_STAKE_ADMIN = '57';\\n  string public constant CT_INVALID_BURN_AMOUNT = '58'; //invalid amount to burn\\n  string public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59'; // User borrows on behalf, but allowance are too small\\n  string public constant CALLER_NOT_LIQUIDITY_CONTROLLER = '60';\\n  string public constant CALLER_NOT_REF_ADMIN = '61';\\n  string public constant VL_INSUFFICIENT_REWARD_AVAILABLE = '62';\\n  string public constant LP_CALLER_MUST_BE_DEPOSIT_TOKEN = '63';\\n  string public constant LP_IS_PAUSED = '64'; // Pool is paused\\n  string public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\\n  string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\\n  string public constant RC_INVALID_LTV = '67';\\n  string public constant RC_INVALID_LIQ_THRESHOLD = '68';\\n  string public constant RC_INVALID_LIQ_BONUS = '69';\\n  string public constant RC_INVALID_DECIMALS = '70';\\n  string public constant RC_INVALID_RESERVE_FACTOR = '71';\\n  string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\\n  string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\\n  string public constant VL_TREASURY_REQUIRED = '74';\\n  string public constant LPC_INVALID_CONFIGURATION = '75'; // Invalid risk parameters for the reserve\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '76'; // The caller must be the emergency admin\\n  string public constant UL_INVALID_INDEX = '77';\\n  string public constant VL_CONTRACT_REQUIRED = '78';\\n  string public constant SDT_STABLE_DEBT_OVERFLOW = '79';\\n  string public constant SDT_BURN_EXCEEDS_BALANCE = '80';\\n  string public constant CALLER_NOT_REWARD_CONFIG_ADMIN = '81'; // The caller of this function must be a reward admin\\n  string public constant LP_INVALID_PERCENTAGE = '82'; // Percentage can't be more than 100%\\n  string public constant LP_IS_NOT_TRUSTED_FLASHLOAN = '83';\\n  string public constant CALLER_NOT_SWEEP_ADMIN = '84';\\n  string public constant LP_TOO_MANY_NESTED_CALLS = '85';\\n  string public constant LP_RESTRICTED_FEATURE = '86';\\n  string public constant LP_TOO_MANY_FLASHLOAN_CALLS = '87';\\n  string public constant RW_BASELINE_EXCEEDED = '88';\\n  string public constant CALLER_NOT_REWARD_RATE_ADMIN = '89';\\n  string public constant CALLER_NOT_REWARD_CONTROLLER = '90';\\n  string public constant RW_REWARD_PAUSED = '91';\\n  string public constant CALLER_NOT_TEAM_MANAGER = '92';\\n  string public constant STK_REDEEM_PAUSED = '93';\\n  string public constant STK_INSUFFICIENT_COOLDOWN = '94';\\n  string public constant STK_UNSTAKE_WINDOW_FINISHED = '95';\\n  string public constant STK_INVALID_BALANCE_ON_COOLDOWN = '96';\\n  string public constant STK_EXCESSIVE_SLASH_PCT = '97';\\n  string public constant STK_WRONG_COOLDOWN_OR_UNSTAKE = '98';\\n  string public constant STK_PAUSED = '99';\\n\\n  string public constant TXT_OWNABLE_CALLER_NOT_OWNER = 'Ownable: caller is not the owner';\\n  string public constant TXT_CALLER_NOT_PROXY_OWNER = 'ProxyOwner: caller is not the owner';\\n  string public constant TXT_ACCESS_RESTRICTED = 'RESTRICTED';\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IRewardController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../access/interfaces/IMarketAccessController.sol';\\n\\nenum AllocationMode {\\n  Push,\\n  SetPull,\\n  SetPullSpecial\\n}\\n\\ninterface IRewardController {\\n  function allocatedByPool(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) external;\\n\\n  function isRateAdmin(address) external view returns (bool);\\n\\n  function isConfigAdmin(address) external view returns (bool);\\n\\n  function getAccessController() external view returns (IMarketAccessController);\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearUnweightedReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './CalcLinearRewardBalances.sol';\\n\\nabstract contract CalcLinearUnweightedReward is CalcLinearRewardBalances {\\n  uint256 private _accumRate;\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal override {\\n    _accumRate += lastRate * (at - lastAt);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 at\\n  )\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 adjRate,\\n      uint256 allocated,\\n      uint32 since\\n    )\\n  {\\n    (uint256 rate, uint32 updatedAt) = getRateAndUpdatedAt();\\n\\n    adjRate = _accumRate + (rate * (at - updatedAt));\\n    allocated = uint256(entry.rewardBase) * (adjRate - lastAccumRate);\\n\\n    return (adjRate, allocated, entry.claimedAt);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/pools/ControlledRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../tools/math/PercentageMath.sol';\\nimport '../interfaces/IRewardController.sol';\\nimport '../interfaces/IManagedRewardPool.sol';\\nimport '../../access/AccessFlags.sol';\\nimport '../../access/AccessHelper.sol';\\nimport '../../tools/Errors.sol';\\n\\nabstract contract ControlledRewardPool is IManagedRewardPool {\\n  using PercentageMath for uint256;\\n\\n  IRewardController private _controller;\\n\\n  uint16 private _baselinePercentage;\\n  bool private _paused;\\n\\n  constructor(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage\\n  ) {\\n    _initialize(controller, initialRate, baselinePercentage, '');\\n  }\\n\\n  function _initialize(\\n    IRewardController controller,\\n    uint256 initialRate,\\n    uint16 baselinePercentage,\\n    string memory poolName\\n  ) internal virtual {\\n    poolName;\\n    _controller = controller;\\n\\n    if (baselinePercentage > 0) {\\n      _setBaselinePercentage(baselinePercentage);\\n    }\\n\\n    if (initialRate > 0) {\\n      _setRate(initialRate);\\n    }\\n  }\\n\\n  function getPoolName() public view virtual override returns (string memory) {\\n    return '';\\n  }\\n\\n  function updateBaseline(uint256 baseline)\\n    external\\n    virtual\\n    override\\n    onlyController\\n    returns (bool hasBaseline, uint256 appliedRate)\\n  {\\n    if (_baselinePercentage == 0) {\\n      return (false, internalGetRate());\\n    }\\n    appliedRate = baseline.percentMul(_baselinePercentage);\\n    _setRate(appliedRate);\\n    return (true, appliedRate);\\n  }\\n\\n  function setBaselinePercentage(uint16 factor) external override onlyController {\\n    _setBaselinePercentage(factor);\\n  }\\n\\n  function getBaselinePercentage() public view override returns (uint16) {\\n    return _baselinePercentage;\\n  }\\n\\n  function _mustHaveController() private view {\\n    require(address(_controller) != address(0), 'controller is required');\\n  }\\n\\n  function _setBaselinePercentage(uint16 factor) internal virtual {\\n    _mustHaveController();\\n    require(factor <= PercentageMath.ONE, 'illegal value');\\n    _baselinePercentage = factor;\\n    emit BaselinePercentageUpdated(factor);\\n  }\\n\\n  function _setRate(uint256 rate) internal {\\n    _mustHaveController();\\n    internalSetRate(rate);\\n    emit RateUpdated(rate);\\n  }\\n\\n  function getRate() external view override returns (uint256) {\\n    return internalGetRate();\\n  }\\n\\n  function internalGetRate() internal view virtual returns (uint256);\\n\\n  function internalSetRate(uint256 rate) internal virtual;\\n\\n  function setPaused(bool paused) public override onlyEmergencyAdmin {\\n    if (_paused != paused) {\\n      _paused = paused;\\n      internalPause(paused);\\n    }\\n    emit EmergencyPaused(msg.sender, paused);\\n  }\\n\\n  function isPaused() public view override returns (bool) {\\n    return _paused;\\n  }\\n\\n  function internalPause(bool paused) internal virtual {}\\n\\n  function getRewardController() public view override returns (address) {\\n    return address(_controller);\\n  }\\n\\n  function claimRewardFor(address holder)\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return internalGetReward(holder);\\n  }\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    override\\n    onlyController\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    )\\n  {\\n    return internalGetRewardWithLimit(holder, baseAmount, limit, minPct);\\n  }\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    virtual\\n    override\\n    returns (\\n      uint256 amount,\\n      uint256,\\n      uint32 since\\n    )\\n  {\\n    require(at >= uint32(block.timestamp));\\n    (amount, since) = internalCalcReward(holder, at);\\n    return (amount, 0, since);\\n  }\\n\\n  function internalAllocateReward(\\n    address holder,\\n    uint256 allocated,\\n    uint32 since,\\n    AllocationMode mode\\n  ) internal {\\n    _controller.allocatedByPool(holder, allocated, since, mode);\\n  }\\n\\n  function internalGetRewardWithLimit(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minBoostPct\\n  )\\n    internal\\n    virtual\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256\\n    )\\n  {\\n    (amount, since, keepPull) = internalGetReward(holder);\\n    amount += baseAmount;\\n    if (minBoostPct > 0) {\\n      limit += PercentageMath.percentMul(amount, minBoostPct);\\n    }\\n    return (amount, since, keepPull, limit);\\n  }\\n\\n  function internalGetReward(address holder)\\n    internal\\n    virtual\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    );\\n\\n  function internalCalcReward(address holder, uint32 at) internal view virtual returns (uint256, uint32);\\n\\n  function attachedToRewardController() external override onlyController returns (uint256) {\\n    internalAttachedToRewardController();\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function detachedFromRewardController() external override onlyController returns (uint256) {\\n    return internalGetPreAllocatedLimit();\\n  }\\n\\n  function internalGetPreAllocatedLimit() internal virtual returns (uint256) {\\n    return 0;\\n  }\\n\\n  function internalAttachedToRewardController() internal virtual {}\\n\\n  function _isController(address addr) internal view virtual returns (bool) {\\n    return address(_controller) == addr;\\n  }\\n\\n  function getAccessController() internal view virtual returns (IMarketAccessController) {\\n    return _controller.getAccessController();\\n  }\\n\\n  function _onlyController() private view {\\n    require(_isController(msg.sender), Errors.CALLER_NOT_REWARD_CONTROLLER);\\n  }\\n\\n  modifier onlyController() {\\n    _onlyController();\\n    _;\\n  }\\n\\n  function _isConfigAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isConfigAdmin(addr);\\n  }\\n\\n  function _onlyConfigAdmin() private view {\\n    require(_isConfigAdmin(msg.sender), Errors.CALLER_NOT_REWARD_CONFIG_ADMIN);\\n  }\\n\\n  modifier onlyConfigAdmin() {\\n    _onlyConfigAdmin();\\n    _;\\n  }\\n\\n  function _isRateAdmin(address addr) internal view returns (bool) {\\n    return address(_controller) != address(0) && _controller.isRateAdmin(addr);\\n  }\\n\\n  function _onlyRateAdmin() private view {\\n    require(_isRateAdmin(msg.sender), Errors.CALLER_NOT_REWARD_RATE_ADMIN);\\n  }\\n\\n  modifier onlyRateAdmin() {\\n    _onlyRateAdmin();\\n    _;\\n  }\\n\\n  function _onlyEmergencyAdmin() private view {\\n    AccessHelper.requireAnyOf(\\n      getAccessController(),\\n      msg.sender,\\n      AccessFlags.EMERGENCY_ADMIN,\\n      Errors.CALLER_NOT_EMERGENCY_ADMIN\\n    );\\n  }\\n\\n  modifier onlyEmergencyAdmin() {\\n    _onlyEmergencyAdmin();\\n    _;\\n  }\\n\\n  function _notPaused() private view {\\n    require(!_paused, Errors.RW_REWARD_PAUSED);\\n  }\\n\\n  modifier notPaused() {\\n    _notPaused();\\n    _;\\n  }\\n\\n  modifier notPausedCustom(string memory err) {\\n    require(!_paused, err);\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IMarketAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IAccessController.sol';\\n\\n/// @dev Main registry of addresses part of or connected to the protocol, including permissioned roles. Also acts a proxy factory.\\ninterface IMarketAccessController is IAccessController {\\n  function getMarketId() external view returns (string memory);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function getLendingRateOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IAccessController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './IRemoteAccessBitmask.sol';\\nimport '../../tools/upgradeability/IProxy.sol';\\n\\n/// @dev Main registry of permissions and addresses\\ninterface IAccessController is IRemoteAccessBitmask {\\n  function getAddress(uint256 id) external view returns (address);\\n\\n  function createProxy(\\n    address admin,\\n    address impl,\\n    bytes calldata params\\n  ) external returns (IProxy);\\n}\\n\"\r\n    },\r\n    \"contracts/access/interfaces/IRemoteAccessBitmask.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IRemoteAccessBitmask {\\n  /**\\n   * @dev Returns access flags granted to the given address and limited by the filterMask. filterMask == 0 has a special meaning.\\n   * @param addr an to get access perfmissions for\\n   * @param filterMask limits a subset of flags to be checked.\\n   * NB! When filterMask == 0 then zero is returned no flags granted, or an unspecified non-zero value otherwise.\\n   * @return Access flags currently granted\\n   */\\n  function queryAccessControlMask(address addr, uint256 filterMask) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/tools/upgradeability/IProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IProxy {\\n  function upgradeToAndCall(address newImplementation, bytes calldata data) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/reward/calcs/CalcLinearRewardBalances.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../interfaces/IRewardController.sol';\\n\\nabstract contract CalcLinearRewardBalances {\\n  struct RewardBalance {\\n    uint192 rewardBase;\\n    uint32 custom;\\n    uint32 claimedAt;\\n  }\\n  mapping(address => RewardBalance) private _balances;\\n  mapping(address => uint256) private _accumRates;\\n\\n  uint224 private _rate;\\n  uint32 private _rateUpdatedAt;\\n\\n  function setLinearRate(uint256 rate) internal {\\n    setLinearRateAt(rate, getCurrentTick());\\n  }\\n\\n  function setLinearRateAt(uint256 rate, uint32 at) internal {\\n    if (_rate == rate) {\\n      return;\\n    }\\n    require(rate <= type(uint224).max);\\n\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      uint224 prevRate = _rate;\\n      internalMarkRateUpdate(at);\\n      _rate = uint224(rate);\\n      internalRateUpdated(prevRate, prevTick, at);\\n    }\\n  }\\n\\n  function doSyncRateAt(uint32 at) internal {\\n    uint32 prevTick = _rateUpdatedAt;\\n    if (at != prevTick) {\\n      internalMarkRateUpdate(at);\\n      internalRateUpdated(_rate, prevTick, at);\\n    }\\n  }\\n\\n  function getCurrentTick() internal view virtual returns (uint32);\\n\\n  function internalRateUpdated(\\n    uint256 lastRate,\\n    uint32 lastAt,\\n    uint32 at\\n  ) internal virtual;\\n\\n  function internalMarkRateUpdate(uint32 currentTick) internal {\\n    require(currentTick >= _rateUpdatedAt, 'retroactive update');\\n    _rateUpdatedAt = currentTick;\\n  }\\n\\n  function getLinearRate() internal view returns (uint256) {\\n    return _rate;\\n  }\\n\\n  function getRateAndUpdatedAt() internal view returns (uint256, uint32) {\\n    return (_rate, _rateUpdatedAt);\\n  }\\n\\n  function internalCalcRateAndReward(\\n    RewardBalance memory entry,\\n    uint256 lastAccumRate,\\n    uint32 currentTick\\n  )\\n    internal\\n    view\\n    virtual\\n    returns (\\n      uint256 rate,\\n      uint256 allocated,\\n      uint32 since\\n    );\\n\\n  function getRewardEntry(address holder) internal view returns (RewardBalance memory) {\\n    return _balances[holder];\\n  }\\n\\n  function internalSetRewardEntryCustom(address holder, uint32 custom) internal {\\n    _balances[holder].custom = custom;\\n  }\\n\\n  function doIncrementRewardBalance(address holder, uint256 amount)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    amount += entry.rewardBase;\\n    require(amount <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doDecrementRewardBalance(\\n    address holder,\\n    uint256 amount,\\n    uint256 minBalance\\n  )\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode\\n    )\\n  {\\n    RewardBalance memory entry = _balances[holder];\\n    require(entry.rewardBase >= minBalance + amount, 'amount exceeds balance');\\n    unchecked {\\n      amount = entry.rewardBase - amount;\\n    }\\n    return _doUpdateRewardBalance(holder, entry, uint192(amount));\\n  }\\n\\n  function doUpdateRewardBalance(address holder, uint256 newBalance)\\n    internal\\n    returns (\\n      uint256 allocated,\\n      uint32 since,\\n      AllocationMode mode\\n    )\\n  {\\n    require(newBalance <= type(uint192).max, 'balance is too high');\\n    return _doUpdateRewardBalance(holder, _balances[holder], uint192(newBalance));\\n  }\\n\\n  function _doUpdateRewardBalance(\\n    address holder,\\n    RewardBalance memory entry,\\n    uint192 newBalance\\n  )\\n    private\\n    returns (\\n      uint256,\\n      uint32,\\n      AllocationMode mode\\n    )\\n  {\\n    if (entry.claimedAt == 0) {\\n      mode = AllocationMode.SetPull;\\n    } else {\\n      mode = AllocationMode.Push;\\n    }\\n\\n    uint32 currentTick = getCurrentTick();\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      entry,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder] = RewardBalance(newBalance, entry.custom, currentTick);\\n    return (allocated, since, mode);\\n  }\\n\\n  function doRemoveRewardBalance(address holder) internal returns (uint256 rewardBase) {\\n    rewardBase = _balances[holder].rewardBase;\\n    if (rewardBase == 0 && _balances[holder].claimedAt == 0) {\\n      return 0;\\n    }\\n    delete (_balances[holder]);\\n    return rewardBase;\\n  }\\n\\n  function doGetReward(address holder)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    return doGetRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doGetRewardAt(address holder, uint32 currentTick)\\n    internal\\n    returns (\\n      uint256,\\n      uint32,\\n      bool\\n    )\\n  {\\n    RewardBalance memory balance = _balances[holder];\\n    if (balance.rewardBase == 0) {\\n      return (0, 0, false);\\n    }\\n\\n    (uint256 adjRate, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      balance,\\n      _accumRates[holder],\\n      currentTick\\n    );\\n\\n    _accumRates[holder] = adjRate;\\n    _balances[holder].claimedAt = currentTick;\\n    return (allocated, since, true);\\n  }\\n\\n  function doCalcReward(address holder) internal view returns (uint256, uint32) {\\n    return doCalcRewardAt(holder, getCurrentTick());\\n  }\\n\\n  function doCalcRewardAt(address holder, uint32 currentTick) internal view returns (uint256, uint32) {\\n    if (_balances[holder].rewardBase == 0) {\\n      return (0, 0);\\n    }\\n\\n    (, uint256 allocated, uint32 since) = internalCalcRateAndReward(\\n      _balances[holder],\\n      _accumRates[holder],\\n      currentTick\\n    );\\n    return (allocated, since);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/reward/interfaces/IManagedRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport '../../interfaces/IEmergencyAccess.sol';\\n\\ninterface IManagedRewardPool is IEmergencyAccess {\\n  function updateBaseline(uint256) external returns (bool hasBaseline, uint256 appliedRate);\\n\\n  function setBaselinePercentage(uint16) external;\\n\\n  function getBaselinePercentage() external view returns (uint16);\\n\\n  function getRate() external view returns (uint256);\\n\\n  function getPoolName() external view returns (string memory);\\n\\n  function claimRewardFor(address holder)\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull\\n    );\\n\\n  function claimRewardWithLimitFor(\\n    address holder,\\n    uint256 baseAmount,\\n    uint256 limit,\\n    uint16 minPct\\n  )\\n    external\\n    returns (\\n      uint256 amount,\\n      uint32 since,\\n      bool keepPull,\\n      uint256 newLimit\\n    );\\n\\n  function calcRewardFor(address holder, uint32 at)\\n    external\\n    view\\n    returns (\\n      uint256 amount,\\n      uint256 extra,\\n      uint32 since\\n    );\\n\\n  function addRewardProvider(address provider, address token) external;\\n\\n  function removeRewardProvider(address provider) external;\\n\\n  function getRewardController() external view returns (address);\\n\\n  function attachedToRewardController() external returns (uint256 allocateReward);\\n\\n  function detachedFromRewardController() external returns (uint256 deallocateReward);\\n\\n  event RateUpdated(uint256 rate);\\n  event BaselinePercentageUpdated(uint16);\\n  event ProviderAdded(address provider, address token);\\n  event ProviderRemoved(address provider);\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessFlags.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nlibrary AccessFlags {\\n  // roles that can be assigned to multiple addresses - use range [0..15]\\n  uint256 public constant EMERGENCY_ADMIN = 1 << 0;\\n  uint256 public constant POOL_ADMIN = 1 << 1;\\n  uint256 public constant TREASURY_ADMIN = 1 << 2;\\n  uint256 public constant REWARD_CONFIG_ADMIN = 1 << 3;\\n  uint256 public constant REWARD_RATE_ADMIN = 1 << 4;\\n  uint256 public constant STAKE_ADMIN = 1 << 5;\\n  uint256 public constant REFERRAL_ADMIN = 1 << 6;\\n  uint256 public constant LENDING_RATE_ADMIN = 1 << 7;\\n  uint256 public constant SWEEP_ADMIN = 1 << 8;\\n  uint256 public constant ORACLE_ADMIN = 1 << 9;\\n\\n  uint256 public constant ROLES = (uint256(1) << 16) - 1;\\n\\n  // singletons - use range [16..64] - can ONLY be assigned to a single address\\n  uint256 public constant SINGLETONS = ((uint256(1) << 64) - 1) & ~ROLES;\\n\\n  // proxied singletons\\n  uint256 public constant LENDING_POOL = 1 << 16;\\n  uint256 public constant LENDING_POOL_CONFIGURATOR = 1 << 17;\\n  uint256 public constant LIQUIDITY_CONTROLLER = 1 << 18;\\n  uint256 public constant TREASURY = 1 << 19;\\n  uint256 public constant REWARD_TOKEN = 1 << 20;\\n  uint256 public constant REWARD_STAKE_TOKEN = 1 << 21;\\n  uint256 public constant REWARD_CONTROLLER = 1 << 22;\\n  uint256 public constant REWARD_CONFIGURATOR = 1 << 23;\\n  uint256 public constant STAKE_CONFIGURATOR = 1 << 24;\\n  uint256 public constant REFERRAL_REGISTRY = 1 << 25;\\n\\n  uint256 public constant PROXIES = ((uint256(1) << 26) - 1) & ~ROLES;\\n\\n  // non-proxied singletons, numbered down from 31 (as JS has problems with bitmasks over 31 bits)\\n  uint256 public constant WETH_GATEWAY = 1 << 27;\\n  uint256 public constant DATA_HELPER = 1 << 28;\\n  uint256 public constant PRICE_ORACLE = 1 << 29;\\n  uint256 public constant LENDING_RATE_ORACLE = 1 << 30;\\n\\n  // any other roles - use range [64..]\\n  // these roles can be assigned to multiple addresses\\n\\n  uint256 public constant TRUSTED_FLASHLOAN = 1 << 66;\\n}\\n\"\r\n    },\r\n    \"contracts/access/AccessHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\nimport './interfaces/IRemoteAccessBitmask.sol';\\n\\n/// @dev Helper/wrapper around IRemoteAccessBitmask\\nlibrary AccessHelper {\\n  function getAcl(IRemoteAccessBitmask remote, address subject) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, ~uint256(0));\\n  }\\n\\n  function queryAcl(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 filterMask\\n  ) internal view returns (uint256) {\\n    return remote.queryAccessControlMask(subject, filterMask);\\n  }\\n\\n  function hasAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags\\n  ) internal view returns (bool) {\\n    uint256 found = queryAcl(remote, subject, flags);\\n    return found & flags != 0;\\n  }\\n\\n  function hasAny(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) != 0;\\n  }\\n\\n  function hasNone(IRemoteAccessBitmask remote, address subject) internal view returns (bool) {\\n    return remote.queryAccessControlMask(subject, 0) == 0;\\n  }\\n\\n  function requireAnyOf(\\n    IRemoteAccessBitmask remote,\\n    address subject,\\n    uint256 flags,\\n    string memory text\\n  ) internal view {\\n    require(hasAnyOf(remote, subject, flags), text);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEmergencyAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.4;\\n\\ninterface IEmergencyAccess {\\n  function setPaused(bool paused) external;\\n\\n  function isPaused() external view returns (bool);\\n\\n  event EmergencyPaused(address indexed by, bool paused);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"contract IRewardController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialRate\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"baselinePercentage\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"teamManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"BaselinePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"EmergencyPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExcessTargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ProviderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ProviderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"TeamManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"memberSharePct\",\"type\":\"uint16\"}],\"name\":\"TeamMemberShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"UnlockedAtUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addRewardProvider\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attachedToRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"calcRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delayedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimRewardFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"minPct\",\"type\":\"uint16\"}],\"name\":\"claimRewardWithLimitFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"since\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"keepPull\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detachedFromRewardController\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllocatedShares\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaselinePercentage\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExcessTarget\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTeamManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockedAt\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"removeRewardProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"factor\",\"type\":\"uint16\"}],\"name\":\"setBaselinePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"setExcessTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"setTeamManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"at\",\"type\":\"uint32\"}],\"name\":\"setUnlockedAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseline\",\"type\":\"uint256\"}],\"name\":\"updateBaseline\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasBaseline\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"appliedRate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"memberSharePct\",\"type\":\"uint16\"}],\"name\":\"updateTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"memberSharePct\",\"type\":\"uint16[]\"}],\"name\":\"updateTeamMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"TeamRewardPool","CompilerVersion":"v0.8.4+commit.c7e474f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000d5fc057194472d82e515ccacee976625ca9bde90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000009a48bceb575df540ee0038e01db59defc343e514","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]