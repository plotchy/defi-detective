[{"SourceCode":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.12;\r\n\r\n/// @dev brief interface for entering SUSHI bar (xSUSHI).\r\ninterface ISushiBarEnter { \r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function enter(uint256 amount) external;\r\n}\r\n\r\n/// @dev brief interface for depositing into AAVE lending pool.\r\ninterface IAaveDeposit {\r\n    function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\r\n}\r\n\r\n/// @dev contract that batches SUSHI staking into AAVE xSUSHI (aXSUSHI).\r\ncontract Saave {\r\n    ISushiBarEnter constant sushiToken = ISushiBarEnter(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2); // SUSHI token contract\r\n    ISushiBarEnter constant sushiBar = ISushiBarEnter(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272); // xSUSHI staking contract for SUSHI\r\n    IAaveDeposit constant aave = IAaveDeposit(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9); // AAVE lending pool contract for xSUSHI staking into aXSUSHI\r\n    \r\n    /// @notice This function is gas optimized to avoid a redundant extcodesize check in addition to the returndatasize check.\r\n    function balanceOfOptimized(address token) internal view returns (uint256 amount) {\r\n        (bool success, bytes memory data) =\r\n            token.staticcall(abi.encodeWithSelector(ISushiBarEnter.balanceOf.selector, address(this)));\r\n        require(success && data.length >= 32);\r\n        amount = abi.decode(data, (uint256));\r\n    }\r\n    \r\n    constructor() public {\r\n        sushiToken.approve(address(sushiBar), type(uint256).max); // max approve `sushiBar` spender to stake SUSHI into xSUSHI from this contract\r\n        sushiBar.approve(address(aave), type(uint256).max); // max approve `aave` spender to stake xSUSHI into aXSUSHI from this contract\r\n    }\r\n    \r\n    /// @dev stake `amount` SUSHI into aXSUSHI by batching calls to `sushiBar` and `aave` lending pool.\r\n    function saave(uint256 amount) external {\r\n        sushiToken.transferFrom(msg.sender, address(this), amount); // deposit caller SUSHI `amount` into this contract\r\n        sushiBar.enter(amount); // stake deposited SUSHI `amount` into xSUSHI\r\n        aave.deposit(address(sushiBar), balanceOfOptimized(address(sushiBar)), msg.sender, 0); // stake resulting xSUSHI into aXSUSHI - send to caller\r\n    }\r\n    \r\n    /// @dev stake `amount` SUSHI into aXSUSHI for benefit of `to` by batching calls to `sushiBar` and `aave` lending pool.\r\n    function saaveTo(address to, uint256 amount) external {\r\n        sushiToken.transferFrom(msg.sender, address(this), amount); // deposit caller SUSHI `amount` into this contract\r\n        sushiBar.enter(amount); // stake deposited SUSHI `amount` into xSUSHI\r\n        aave.deposit(address(sushiBar), balanceOfOptimized(address(sushiBar)), to, 0); // stake resulting xSUSHI into aXSUSHI - send to `to`\r\n    }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"saaveTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Saave","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://66c02034b3051439844edc9ae8e418d181bf5acc402915bf156e6a2143f998dd"}]