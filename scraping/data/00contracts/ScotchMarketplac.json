[{"SourceCode":"// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Counters.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n */\r\nlibrary Counters {\r\n    struct Counter {\r\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\r\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\r\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\r\n        uint256 _value; // default: 0\r\n    }\r\n\r\n    function current(Counter storage counter) internal view returns (uint256) {\r\n        return counter._value;\r\n    }\r\n\r\n    function increment(Counter storage counter) internal {\r\n        unchecked {\r\n            counter._value += 1;\r\n        }\r\n    }\r\n\r\n    function decrement(Counter storage counter) internal {\r\n        uint256 value = counter._value;\r\n        require(value > 0, \"Counter: decrement overflow\");\r\n        unchecked {\r\n            counter._value = value - 1;\r\n        }\r\n    }\r\n\r\n    function reset(Counter storage counter) internal {\r\n        counter._value = 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/scBeneficiary.sol\r\n\r\n\r\npragma solidity ^0.8.8;\r\n\r\n\r\n\r\n \r\n\r\nabstract contract ScotchBeneficiary is Ownable {\r\n  using SafeERC20 for IERC20;\r\n\r\n   // Beneficiary (commission recipient) Mode\r\n  enum BeneficiaryMode{\r\n    // 0: No Beneficiary Specified\r\n    None,\r\n    // 1: Beneficiary - simple the recipient address\r\n    Beneficiary,\r\n    // 2: Distributor - the service to distribute money\r\n    Distributor\r\n  }\r\n\r\n  // Beneficiary Model\r\n  struct Beneficiary {\r\n    BeneficiaryMode mode;       // mode of the beneficiary send funds\r\n    address payable recipient;  // beneficiary recipient address\r\n  }\r\n\r\n  // beneficiary - receiver of the funds - the address where the funds will be sent\r\n  Beneficiary internal _beneficiary;\r\n\r\n\r\n  // ===========================================\r\n  // ======= Secondary public functions ========\r\n  // ===========================================\r\n\r\n  // get current beneficiary info\r\n  function getBeneficiary() public view returns (Beneficiary memory) {\r\n    return _beneficiary;\r\n  }\r\n\r\n\r\n  // ===========================================\r\n  // =========== Owner's functions =============\r\n  // ===========================================\r\n\r\n  // change beneficiary of the Scotch Marketplace\r\n  function changeBeneficiary(BeneficiaryMode mode, address payable recipient) public virtual onlyOwner {\r\n    if (mode == BeneficiaryMode.None)\r\n      require(recipient == address(0), \"Beneficiar mode None requires zero address for recipient!\");\r\n    else\r\n      require(recipient != address(0), \"Beneficiary recipient address should be specified!\");\r\n\r\n    _beneficiary.mode = mode;\r\n    _beneficiary.recipient = recipient;\r\n  }\r\n\r\n  // send accumulated funds to recipient (native-token = zero tokenContract)\r\n  function sendFunds(uint256 amount, address tokenContract) public virtual onlyOwner {\r\n    require(_isBeneficiaryExists(), \"Beneficiary should be specified!\");\r\n    require(amount > 0, \"Send Amount should be positive!\");\r\n\r\n    // address of the current contract\r\n    address current = address(this);\r\n\r\n    if (tokenContract == address(0)) {\r\n      // get Scotch Marketplace balance in native token\r\n      uint256 balance = current.balance;\r\n      require(balance >= amount, \"Send Amount exceeds Smart Contract's native token balance!\");\r\n\r\n      // send native token amount to _beneficiar\r\n      _beneficiary.recipient.transfer(amount);\r\n    }\r\n    else {\r\n      // get ERC-20 Token Contract\r\n      IERC20 hostTokenContract = IERC20(tokenContract);\r\n      // get Scotch Marketplace balance in ERC-20 Token\r\n      uint256 balance = hostTokenContract.balanceOf(current);\r\n      require(balance >= amount, \"Send Amount exceeds Smart Contract's ERC-20 token balance!\");\r\n      // send ERC-20 token amount to recipient\r\n      hostTokenContract.transfer(_beneficiary.recipient, amount);\r\n    }\r\n  }\r\n\r\n  // ===========================================\r\n  // ======= Internal helper functions =========\r\n  // ===========================================\r\n\r\n  // check if beneficiary is specified to send funds\r\n  function _isBeneficiaryExists() internal view virtual returns (bool){\r\n    return _beneficiary.mode != BeneficiaryMode.None && _beneficiary.recipient != address(0);\r\n  }\r\n\r\n   // charge funds from caller in native tokens\r\n  function _chargeFunds(uint256 amount, string memory message) internal virtual {\r\n    if (amount > 0) {\r\n      // check payment for appropriate funds amount\r\n      require(msg.value >= amount, message);\r\n\r\n      // send funds to _beneficiary\r\n      if (_isBeneficiaryExists())\r\n        _beneficiary.recipient.transfer(msg.value);\r\n    }\r\n  }\r\n}\r\n\r\n// File: contracts/iDistributor.sol\r\n\r\n\r\npragma solidity ^0.8.8;\r\n\r\ninterface IDistributor {\r\n    function distribute(uint256 marketItemId) external payable;\r\n}\r\n// File: contracts/scMarketplace.sol\r\n\r\n\r\npragma solidity ^0.8.8;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// V1.8\r\ncontract ScotchMarketplace is ScotchBeneficiary, ReentrancyGuard {\r\n  using SafeERC20 for IERC20;\r\n\r\n  // Market-Item Status\r\n  enum MarketItemStatus {\r\n    // 0: market-item is active and can be sold\r\n    Active,\r\n    // 1: market-item is already sold\r\n    Sold,\r\n    // 2: market-item is cancelled by NFT owner\r\n    Cancelled,\r\n    // 3: market-item is deleted by Scotch owner\r\n    Deleted\r\n  }\r\n\r\n  // input for market-item placement\r\n  struct MarketItemInput {\r\n    address tokenContract;\r\n    uint256 tokenId;\r\n    address priceContract;\r\n    uint256 priceAmount;\r\n    address[] whiteList;\r\n  }\r\n\r\n  // Market-Rate structure\r\n  struct MarketRate {\r\n    bool isActive;         // is market-rate active (is valid for specific address)\r\n    uint256 listingPrice;  // listing price of a new market-item (for seller to create market-item)\r\n    uint256 cancelPrice;   // the price for cancelling market-item on the market (by NFT owner)\r\n    uint feePercent;       // fee % to charge from market-item price (seller will receive (100-feePercent)/100 * price)\r\n  }\r\n\r\n  // Market-Item structure\r\n  struct MarketItem {\r\n    uint256 itemId;           // id of the market-item\r\n    address tokenContract;    // original (sellable) NFT token contract address\r\n    uint256 tokenId;          // original (sellable) NFT token Id\r\n    address payable seller;   // seller of the original NFT\r\n    address payable buyer;    // buyer of the market-item - new owner of the sellable NFT\r\n    address priceContract;    // ERC-20 price token address (Zero address => native token)\r\n    uint256 price;            // price = amount of ERC-20 (or native token) price tokens to buy market-item\r\n    MarketItemStatus status;  // status of the market-item\r\n    uint256 fee;              // amount of fee (in ERC-20 price tokens) that were charged during the sale\r\n    uint256 position;         // positive position in active market-items array (1..N)\r\n    uint partnerId;           // Id of the partner, from which the sale was made\r\n    address[] whiteList;      // white list of addresses that could buy market-item\r\n  }\r\n\r\n  // Events of Marketplace\r\n  event MarketItemPlaced(uint256 indexed marketItemId, address indexed tokenContract, uint256 tokenId, address indexed seller, address priceContract, uint256 price);\r\n  event MarketItemSold(uint256 indexed marketItemId, address indexed buyer);\r\n  event MarketItemRemoved(uint256 indexed marketItemId, MarketItemStatus status);\r\n\r\n\r\n  // counter for market items Id\r\n  using Counters for Counters.Counter;\r\n  Counters.Counter private _itemIds;\r\n\r\n  // collection of market-items\r\n  mapping(uint256 => MarketItem) private _items;\r\n\r\n  // active-market-items collection - collection of active market-items ids only\r\n  uint256[] private _activeItems;\r\n\r\n  // mapping of (Token Contract, TokenID) => Active Position\r\n  mapping(address => mapping(uint256 => uint256))  private _activeTokens;\r\n\r\n  // collection of market-rates\r\n  mapping(address => MarketRate) private _rates;\r\n\r\n  // mapping of (marketItemID, buyer address) => allowed to buy flag\r\n  mapping(uint256 => mapping(address => bool))  private _allowedToBuy;\r\n\r\n  // maximal amount of items, that could be sold in one transaction\r\n  uint public _maxItemsForSale;\r\n\r\n\r\n\r\n  constructor() {\r\n    _beneficiary = Beneficiary(BeneficiaryMode.None, payable(address(0)));\r\n    _activeItems = new uint256[](0);\r\n    _rates[address(0)] = MarketRate(true, 0, 0, 3);\r\n    _maxItemsForSale = 100;\r\n  }\r\n\r\n  // ===========================================\r\n  // ======= Scotch Marketplace modifiers ======\r\n  // ===========================================\r\n\r\n  modifier idExists(uint256 marketItemId) {\r\n    require(marketItemId > 0 && marketItemId <= _itemIds.current(), \"Invalid Market Item ID!\");\r\n    _;\r\n  }\r\n\r\n  modifier isActive(uint256 marketItemId) {\r\n    require(_items[marketItemId].status == MarketItemStatus.Active, \"Market Item is not Active\");\r\n    _;\r\n  }\r\n\r\n  // ===========================================\r\n  // ==== MAIN Scotch Marketplace functions ====\r\n  // ===========================================\r\n\r\n  // create new market-item - listing of original NFT on Marketplace\r\n  function placeMarketItem(address tokenContract, uint256 tokenId, address priceContract, uint256 price, address[] memory whiteList) public payable {\r\n    require(price > 0, \"Price must be positive (at least 1 wei)\");\r\n\r\n    // check if token is already placed in the market\r\n    uint256 existingMarketItemId = findActiveMarketItem(tokenContract, tokenId);\r\n    require(existingMarketItemId == 0, \"That token is already placed on the market\");\r\n\r\n    // seller of the Token\r\n    address seller = _msgSender();\r\n\r\n    // token validation\r\n    int validation = _checkTokenValidity(seller, tokenContract, tokenId);\r\n    require(validation != - 1, \"Only owner of the NFT can place it to the Marketplace\");\r\n    require(validation != - 2, \"NFT should be approved to the Marketplace\");\r\n    require(validation == 0, \"NFT is not valid to be sold on the Marketplace\");\r\n\r\n    // market-rate for seller\r\n    uint256 listingPrice = _getValidRate(seller).listingPrice;\r\n\r\n    // charge listing-price from seller\r\n    _chargeFunds(listingPrice, \"Listing Price should be sent to place NFT on the Marketplace\");\r\n\r\n    // build market-item input\r\n    MarketItemInput memory input = MarketItemInput(tokenContract, tokenId, priceContract, price, whiteList);\r\n\r\n    // create market-item\r\n    _createMarketItem(seller, input);\r\n  }\r\n\r\n  function placeMarketItems(MarketItemInput[] memory input) public payable {\r\n    require(input.length > 0, \"At least one item input should be specified\");\r\n    require(input.length <= _maxItemsForSale, \"Amount of specified items exceeds Maximum Allowed Amount\");\r\n\r\n    // seller of the Token\r\n    address seller = _msgSender();\r\n\r\n    // market-rate for seller\r\n    uint256 listingPrice = _getValidRate(seller).listingPrice;\r\n\r\n    // charge listing-price from seller\r\n    _chargeFunds(listingPrice * input.length, \"Listing Price should be sent to place NFT on the Marketplace\");\r\n\r\n    for (uint i = 0; i < input.length; i++)\r\n    {\r\n      require(input[i].priceAmount > 0, \"Price must be positive (at least 1 wei)\");\r\n\r\n      // check if token is already placed in the market\r\n      uint256 existingMarketItemId = findActiveMarketItem(input[i].tokenContract, input[i].tokenId);\r\n      require(existingMarketItemId == 0, \"That token is already placed on the market\");\r\n\r\n      // token validation\r\n      int validation = _checkTokenValidity(seller, input[i].tokenContract, input[i].tokenId);\r\n      require(validation != - 1, \"Only owner of the NFT can place it to the Marketplace\");\r\n      require(validation != - 2, \"NFT should be approved to the Marketplace\");\r\n      require(validation == 0, \"NFT is not valid to be sold on the Marketplace\");\r\n\r\n      // create market-item\r\n      _createMarketItem(seller, input[i]);\r\n    }\r\n  }\r\n\r\n  // make deal on sell market-item, receive payment and transfer original NFT\r\n  function makeMarketSale(uint256 marketItemId, uint partnerId) public payable idExists(marketItemId) isActive(marketItemId) nonReentrant {\r\n    // address of the buyer for nft\r\n    address buyer = _msgSender();\r\n    // address of the market-item seller\r\n    address payable seller = _items[marketItemId].seller;\r\n    // original nft tokenId\r\n    uint256 tokenId = _items[marketItemId].tokenId;\r\n\r\n    // nft token contract && approval for nft\r\n    IERC721 hostTokenContract = IERC721(_items[marketItemId].tokenContract);\r\n    bool allApproved = hostTokenContract.isApprovedForAll(seller, address(this));\r\n    if (!allApproved) {\r\n      address approvedAddress = hostTokenContract.getApproved(tokenId);\r\n      require(approvedAddress == address(this), \"Market Item (NFT) should be approved to the Marketplace\");\r\n    }\r\n\r\n    // check white-list if it was set up\r\n    if (_items[marketItemId].whiteList.length > 0)\r\n      require(_allowedToBuy[marketItemId][buyer] == true, \"Your address is not specified in White-List for current Market Item\");\r\n\r\n    // charge price from seller & send to buyer & beneficiary\r\n    uint256 feeAmount = _chargePrice(marketItemId, buyer);\r\n\r\n    // update market-item info\r\n    _items[marketItemId].buyer = payable(buyer);\r\n    _items[marketItemId].fee = feeAmount;\r\n    _items[marketItemId].partnerId = partnerId;\r\n\r\n    // transfer original nft from seller to buyer\r\n    hostTokenContract.safeTransferFrom(seller, buyer, tokenId);\r\n\r\n    // remove market-item with Sold status\r\n    _removeMarketItem(marketItemId, MarketItemStatus.Sold);\r\n\r\n    // if beneficiary 'Distributor' mode specified => call distribute method for current marketItemId\r\n    if (_beneficiary.mode == BeneficiaryMode.Distributor && _beneficiary.recipient != address(0))\r\n    {\r\n      // build distributor Host Contract\r\n      IDistributor distributorHost = IDistributor(_beneficiary.recipient);\r\n      distributorHost.distribute(marketItemId);\r\n    }\r\n\r\n    emit MarketItemSold(marketItemId, buyer);\r\n  }\r\n\r\n  // cancel market-item placement on Scotch Marketplace\r\n  function cancelMarketItem(uint256 marketItemId) public payable idExists(marketItemId) isActive(marketItemId) nonReentrant {\r\n    // address of the market-item seller\r\n    address payable seller = _items[marketItemId].seller;\r\n    // check market-item Seller is cancelling the market-item\r\n    require(_msgSender() == seller, \"Only Seller can cancel Market Item\");\r\n    // market-rate for seller\r\n    uint256 cancelPrice = _getValidRate(seller).cancelPrice;\r\n\r\n    // charge cancel-price from seller\r\n    _chargeFunds(cancelPrice, \"Cancel Price should be sent to cancel NFT placement on the Marketplace\");\r\n\r\n    // remove market-item with Cancelled status\r\n    _removeMarketItem(marketItemId, MarketItemStatus.Cancelled);\r\n  }\r\n\r\n\r\n  // ===========================================\r\n  // ======= Secondary public functions ========\r\n  // ===========================================\r\n\r\n  // get Rate for sender address\r\n  function getRate() public view returns (MarketRate memory) {\r\n    return _getValidRate(_msgSender());\r\n  }\r\n\r\n  // get market-item info by id\r\n  function getMarketItem(uint256 marketItemId) public view idExists(marketItemId) returns (MarketItem memory) {\r\n    return _items[marketItemId];\r\n  }\r\n\r\n  // get count of all market-items\r\n  function getAllMarketItemsCount() public view returns (uint256) {\r\n    return _itemIds.current();\r\n  }\r\n\r\n  // get count of active (not sold and not removed) market-items\r\n  function getActiveMarketItemsCount() public view returns (uint256) {\r\n    return _activeItems.length;\r\n  }\r\n\r\n  // get active active market-item by index (1 based)\r\n  function getActiveMarketItem(uint256 position) public view returns (MarketItem memory) {\r\n    require(_activeItems.length > 0, \"There are no any Active Market Items yet!\");\r\n    require(position >= 1 && position <= _activeItems.length, \"Position should be positive number in Active Market Items Count range (1..N)\");\r\n    return _items[_activeItems[position - 1]];\r\n  }\r\n\r\n  // find existing active market-item by tokenContract & tokenId\r\n  function findActiveMarketItem(address tokenContract, uint256 tokenId) public view returns (uint256) {\r\n    return _activeTokens[tokenContract][tokenId];\r\n  }\r\n\r\n\r\n  // ===========================================\r\n  // =========== Owner's functions =============\r\n  // ===========================================\r\n\r\n  // set maximum amount of items that could be sold\r\n  function setMaxItemsForSale(uint maxItemsForSale) public onlyOwner {\r\n    _maxItemsForSale = maxItemsForSale;\r\n  }\r\n\r\n  // get Rate for specific address\r\n  function getCustomRate(address adr) public view onlyOwner returns (MarketRate memory){\r\n    return _getCustomRate(adr);\r\n  }\r\n\r\n  // set market-rate for specific address\r\n  function setCustomRate(address adr, uint256 newListingPrice, uint256 newCancelPrice, uint newFeePercent) public onlyOwner {\r\n    _rates[adr] = MarketRate(true, newListingPrice, newCancelPrice, newFeePercent);\r\n  }\r\n\r\n  // remove market-rate for specific address\r\n  function removeCustomRate(address adr) public onlyOwner {\r\n    if (adr == address(0))\r\n      return;\r\n\r\n    delete _rates[adr];\r\n  }\r\n\r\n  // remove market-item placement on Scotch Marketplace\r\n  function deleteMarketItem(uint256 marketItemId) public onlyOwner idExists(marketItemId) isActive(marketItemId) nonReentrant {\r\n    // remove market-item with Deleted status\r\n    _removeMarketItem(marketItemId, MarketItemStatus.Deleted);\r\n  }\r\n\r\n\r\n  // ===========================================\r\n  // ======= Internal helper functions =========\r\n  // ===========================================\r\n  // get Rate for specific address\r\n  function _getCustomRate(address adr) private view returns (MarketRate memory) {\r\n    return _rates[adr];\r\n  }\r\n\r\n  // get Rate for specific address\r\n  function _getValidRate(address adr) private view returns (MarketRate memory) {\r\n    // get active market-rate for specific address\r\n    if (_rates[adr].isActive)\r\n      return _rates[adr];\r\n\r\n    // return default market-rate\r\n    return _rates[address(0)];\r\n  }\r\n\r\n  // check if original NFT is valid to be placed on Marketplace\r\n  function _checkTokenValidity(address seller, address tokenContract, uint256 tokenId) private view returns (int) {\r\n    IERC721 hostTokenContract = IERC721(tokenContract);\r\n\r\n    // get owner of the NFT (seller should be the owner of the NFT)\r\n    address tokenOwner = hostTokenContract.ownerOf(tokenId);\r\n    if (tokenOwner != seller)\r\n      return - 1;\r\n\r\n    // check approval for all\r\n    bool allApproved = hostTokenContract.isApprovedForAll(seller, address(this));\r\n    if (!allApproved)\r\n    {\r\n      // get approved address of the NFT (NFT should be approved to Marketplace)\r\n      address tokenApproved = hostTokenContract.getApproved(tokenId);\r\n      if (tokenApproved != address(this))\r\n        return - 2;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  // add new MaketItem to Marketplace\r\n  function _createMarketItem(address seller, MarketItemInput memory input) private {\r\n    // new market-item ID\r\n    _itemIds.increment();\r\n    uint256 marketItemId = _itemIds.current();\r\n\r\n    // push active market-item in array\r\n    _activeItems.push(marketItemId);\r\n    // position in active market-item array\r\n    uint256 position = _activeItems.length;\r\n\r\n    // create new market-item\r\n    _items[marketItemId] = MarketItem(\r\n      marketItemId, // ID of the market item\r\n      input.tokenContract, // token Contract\r\n      input.tokenId, // token ID\r\n      payable(seller), // seller\r\n      payable(address(0)), // buyer\r\n      input.priceContract, // price Contract\r\n      input.priceAmount, // price value\r\n      MarketItemStatus.Active, // status\r\n      0, // fee value\r\n      position, // position\r\n      0, // partnerId\r\n      input.whiteList           // white list\r\n    );\r\n\r\n    // update token position to active market-item position\r\n    _activeTokens[input.tokenContract][input.tokenId] = position;\r\n\r\n    // setup white list for market item\r\n    if (input.whiteList.length > 0)\r\n    {\r\n      for (uint i; i < input.whiteList.length; i++)\r\n        _allowedToBuy[marketItemId][input.whiteList[i]] = true;\r\n    }\r\n\r\n    emit MarketItemPlaced(marketItemId, input.tokenContract, input.tokenId, seller, input.priceContract, input.priceAmount);\r\n  }\r\n\r\n  // remove market-item from marketplace\r\n  function _removeMarketItem(uint256 marketItemId, MarketItemStatus status) private idExists(marketItemId) isActive(marketItemId) {\r\n    // define index of market-item in active array\r\n    uint index = _items[marketItemId].position - 1;\r\n    // check market-item has position in active-market-item array\r\n    require(index >= 0 && index < _activeItems.length, \"Market Item has no position in Active Items array\");\r\n    // check market-item position in active-market-items array\r\n    require(_activeItems[index] == marketItemId, \"Market Item is not on the position in Active Items array!\");\r\n    // check that new status should NOT be Active\r\n    require(status != MarketItemStatus.Active, \"Specify correct status to remove Market Item!\");\r\n\r\n    // update market-item status & position\r\n    _items[marketItemId].status = status;\r\n    _items[marketItemId].position = 0;\r\n\r\n    // replacing current active-market-item with last element\r\n    if (index < _activeItems.length - 1) {\r\n      // define last active-market-item ID\r\n      uint256 lastItemId = _activeItems[_activeItems.length - 1];\r\n      // replacing with last element\r\n      _activeItems[index] = lastItemId;\r\n      // update last active-market-item position\r\n      _items[lastItemId].position = index + 1;\r\n      _activeTokens[_items[lastItemId].tokenContract][_items[lastItemId].tokenId] = index + 1;\r\n    }\r\n\r\n    // remove last element from array = deleting item in array\r\n    _activeItems.pop();\r\n\r\n    // remove token position for current market-item\r\n    delete _activeTokens[_items[marketItemId].tokenContract][_items[marketItemId].tokenId];\r\n\r\n    emit MarketItemRemoved(marketItemId, status);\r\n  }\r\n\r\n\r\n  // charge price and fees during the deal\r\n  function _chargePrice(\r\n    uint256 marketItemId,\r\n    address buyer)\r\n  private returns (uint256) {\r\n    // address of the market-item seller\r\n    address payable seller = _items[marketItemId].seller;\r\n    // price amount\r\n    uint256 priceAmount = _items[marketItemId].price;\r\n    // price contract\r\n    address priceContract = _items[marketItemId].priceContract;\r\n\r\n\r\n    // market-rate for seller\r\n    uint feePercent = _getValidRate(seller).feePercent;\r\n    // commission fee amount\r\n    uint256 feeAmount = feePercent * priceAmount / 100;\r\n\r\n    // amount that should be send to Seller\r\n    uint256 sellerAmount = priceAmount - feeAmount;\r\n    require(sellerAmount > 0, \"Invalid Seller Amount calculated!\");\r\n\r\n\r\n    // charge price and fees in Native Token\r\n    if (priceContract == address(0))\r\n    {\r\n      require(msg.value >= priceAmount, \"Please submit the Price amount in order to complete the purchase\");\r\n\r\n      // transfer seller-amount to seller\r\n      seller.transfer(sellerAmount);\r\n\r\n      // send fee funds to _beneficiary\r\n      if (_isBeneficiaryExists() && feeAmount > 0)\r\n        _beneficiary.recipient.transfer(feeAmount);\r\n    }\r\n    // charge price and fees in ERC20 Token\r\n    else\r\n    {\r\n      // address of the Scotch Marketplace\r\n      address marketplace = address(this);\r\n\r\n      // check price amount allowance to marketplace\r\n      IERC20 hostPriceContract = IERC20(priceContract);\r\n      uint256 priceAllowance = hostPriceContract.allowance(buyer, marketplace);\r\n      require(priceAllowance >= priceAmount, \"Please allow Price amount of ERC-20 Token in order to complete purchase\");\r\n\r\n      // transfer price amount to marketplace\r\n      hostPriceContract.safeTransferFrom(buyer, marketplace, priceAmount);\r\n\r\n      // transfer seller-amount to seller\r\n      hostPriceContract.transfer(seller, sellerAmount);\r\n\r\n      // send fee funds to _beneficiary\r\n      if (_isBeneficiaryExists() && feeAmount > 0)\r\n        hostPriceContract.transfer(_beneficiary.recipient, feeAmount);\r\n    }\r\n\r\n    return feeAmount;\r\n  }\r\n}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"MarketItemPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ScotchMarketplace.MarketItemStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"MarketItemRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"MarketItemSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxItemsForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"cancelMarketItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ScotchBeneficiary.BeneficiaryMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"changeBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"deleteMarketItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"findActiveMarketItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"}],\"name\":\"getActiveMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum ScotchMarketplace.MarketItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"}],\"internalType\":\"struct ScotchMarketplace.MarketItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveMarketItemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllMarketItemsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBeneficiary\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ScotchBeneficiary.BeneficiaryMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ScotchBeneficiary.Beneficiary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"getCustomRate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct ScotchMarketplace.MarketRate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"getMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"enum ScotchMarketplace.MarketItemStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"position\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"}],\"internalType\":\"struct ScotchMarketplace.MarketItem\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cancelPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct ScotchMarketplace.MarketRate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partnerId\",\"type\":\"uint256\"}],\"name\":\"makeMarketSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"}],\"name\":\"placeMarketItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whiteList\",\"type\":\"address[]\"}],\"internalType\":\"struct ScotchMarketplace.MarketItemInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"placeMarketItems\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"removeCustomRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"sendFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newListingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newCancelPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"}],\"name\":\"setCustomRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxItemsForSale\",\"type\":\"uint256\"}],\"name\":\"setMaxItemsForSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ScotchMarketplace","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://139357d19635522a0cf149b44ac663c7327db6cea258dca874a00b4dcc80b84d"}]