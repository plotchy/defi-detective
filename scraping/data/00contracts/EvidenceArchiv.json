[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/v2/EvidenceArchive.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018-2023 THE TOKEN BUNQ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity 0.6.12;\\n\\nimport { Ownable } from \\\"../v1/Ownable.sol\\\";\\n\\n/**\\n * @title Issuance Tracker\\n * @dev Storage of USDK issuance evidences by the \\\"issuance archiver\\\" role\\n */\\ncontract EvidenceArchive is Ownable {\\n    // The evidences archived here are valid only for the following proxy address\\n    bool internal initialized;\\n    address public eurkAddress; // = 0x0AfFd70Df87f8948117c8523436465b27a17a2b0;\\n\\n    address public issuanceArchiver;\\n    uint256 public issuanceCounter;\\n    struct Evidence {\\n        string issuanceTxId;\\n        string issuanceFileHash;\\n        string issuanceFileURL;\\n        string issuanceIPFS;\\n    }\\n    mapping(uint256 => Evidence) public evidences;\\n    event NewIssuanceEvidence(\\n        string _newEvidenceMessage,\\n        string _newEvidenceTxId,\\n        string _newEvidenceFileHash,\\n        string _newEvidenceFileURL,\\n        string _newEvidenceIPFS\\n    );\\n    event IssuanceArchiverChanged(address indexed newIssuanceArchiver);\\n\\n    /**\\n     * @dev Throws if called by any account other than the issuance archiver role\\n     */\\n    modifier onlyIssuanceArchiver() {\\n        require(\\n            msg.sender == issuanceArchiver,\\n            \\\"EvidenceArchive: caller is not the issuance archiver\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Issuance evidence storage.\\n     *\\n     */\\n    function setIssuanceEvidence(\\n        string memory _issuanceTxId,\\n        string memory _issuanceFileHash,\\n        string memory _issuanceFileURL,\\n        string memory _issuanceIPFS\\n    ) public onlyIssuanceArchiver {\\n        Evidence storage evidence = evidences[issuanceCounter];\\n\\n        evidence.issuanceTxId = _issuanceTxId;\\n        evidence.issuanceFileHash = _issuanceFileHash;\\n        evidence.issuanceFileURL = _issuanceFileURL;\\n        evidence.issuanceIPFS = _issuanceIPFS;\\n\\n        issuanceCounter++;\\n        emit NewIssuanceEvidence(\\n            \\\"New evidence registered for:\\\",\\n            evidence.issuanceTxId,\\n            evidence.issuanceFileHash,\\n            evidence.issuanceFileURL,\\n            evidence.issuanceIPFS\\n        );\\n    }\\n\\n    function initialize(address newEurkAddress) public {\\n        require(\\n            !initialized,\\n            \\\"EvidenceArchive: contract is already initialized\\\"\\n        );\\n\\n        require(\\n            newEurkAddress != address(0),\\n            \\\"EvidenceArchive: new owner is the zero address\\\"\\n        );\\n\\n        eurkAddress = newEurkAddress;\\n        initialized = true;\\n    }\\n\\n    function updateIssuanceArchiver(address _newIssuanceArchiver)\\n        external\\n        onlyOwner\\n    {\\n        require(\\n            _newIssuanceArchiver != address(0),\\n            \\\"EvidenceArchive: new issuance archiver is the zero address\\\"\\n        );\\n        issuanceArchiver = _newIssuanceArchiver;\\n        emit IssuanceArchiverChanged(issuanceArchiver);\\n    }\\n\\n    function countEvidences() public view returns (uint256) {\\n        return issuanceCounter;\\n    }\\n\\n    function evidencesValidFor() public view returns (string memory, address) {\\n        return (\\n            \\\"Minting evidences are valid for EURK contract at:\\\",\\n            eurkAddress\\n        );\\n    }\\n\\n    function testevidencearchive() external view returns (string memory) {\\n        return \\\"remove it before mainnet\\\";\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/v1/Ownable.sol\": {\r\n      \"content\": \"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\npragma solidity 0.6.12;\\n\\n/**\\n * @notice The Ownable contract has an owner address, and provides basic\\n * authorization control functions\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\\n * Modifications:\\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\n * 3. Make public functions external (5/27/20)\\n */\\ncontract Ownable {\\n    // Owner of the contract\\n    address private _owner;\\n\\n    /**\\n     * @dev Event to show ownership has been transferred\\n     * @param previousOwner representing the address of the previous owner\\n     * @param newOwner representing the address of the new owner\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev The constructor sets the original owner of the contract to the sender account.\\n     */\\n    constructor() public {\\n        setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Tells the address of the owner\\n     * @return the address of the owner\\n     */\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets a new owner address\\n     */\\n    function setOwner(address newOwner) internal {\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        setOwner(newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000000\r\n    },\r\n    \"evmVersion\": \"istanbul\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newIssuanceArchiver\",\"type\":\"address\"}],\"name\":\"IssuanceArchiverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newEvidenceMessage\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newEvidenceTxId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newEvidenceFileHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newEvidenceFileURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_newEvidenceIPFS\",\"type\":\"string\"}],\"name\":\"NewIssuanceEvidence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"countEvidences\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eurkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"evidences\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"issuanceTxId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuanceFileHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuanceFileURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"issuanceIPFS\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"evidencesValidFor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newEurkAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceArchiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuanceCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_issuanceTxId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuanceFileHash\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuanceFileURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_issuanceIPFS\",\"type\":\"string\"}],\"name\":\"setIssuanceEvidence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testevidencearchive\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIssuanceArchiver\",\"type\":\"address\"}],\"name\":\"updateIssuanceArchiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"EvidenceArchive","CompilerVersion":"v0.6.12+commit.27d51765","OptimizationUsed":"1","Runs":"10000000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]