[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/sweep/TroveSmolSweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.14;\\r\\n\\r\\n//           _____                    _____                   _______                   _____            _____                    _____                    _____                    _____\\r\\n//          /\\\\    \\\\                  /\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\\\r\\n//         /::\\\\    \\\\                /::\\\\____\\\\               /::::\\\\    \\\\               /::\\\\____\\\\        /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\\\r\\n//        /::::\\\\    \\\\              /::::|   |              /::::::\\\\    \\\\             /:::/    /       /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\\\r\\n//       /::::::\\\\    \\\\            /:::::|   |             /::::::::\\\\    \\\\           /:::/    /       /::::::\\\\    \\\\            /:::/   _/___            /::::::\\\\    \\\\            /::::::\\\\    \\\\\\r\\n//      /:::/\\\\:::\\\\    \\\\          /::::::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/    /       /:::/\\\\:::\\\\    \\\\          /:::/   /\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\\\r\\n//     /:::/__\\\\:::\\\\    \\\\        /:::/|::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/    /       /:::/__\\\\:::\\\\    \\\\        /:::/   /::\\\\____\\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\\\r\\n//     \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/ |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    /        \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/   /:::/    /       /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\\\r\\n//   ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/  |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    /       ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/   /:::/   _/___    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\\\r\\n//  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/   |::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /       /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/___/:::/   /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\\\r\\n// /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/       /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\|:::|   /:::/   /::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::|    |\\r\\n// \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\::/    / ~~~~~/:::/    / \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /|:::|__/:::/   /:::/    /\\\\::/    \\\\:::\\\\  /:::/    /\\\\::/    \\\\:::\\\\  /:::|____|\\r\\n//  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\/____/      /:::/    /   \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\/:::/   /:::/    /  \\\\/____/ \\\\:::\\\\/:::/    /  \\\\/_____/\\\\:::\\\\/:::/    /\\r\\n//   \\\\:::\\\\   \\\\:::\\\\    \\\\                  /:::/    /     \\\\:::\\\\    /:::/    /     \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\::::::/   /:::/    /            \\\\::::::/    /            \\\\::::::/    /\\r\\n//    \\\\:::\\\\   \\\\:::\\\\____\\\\                /:::/    /       \\\\:::\\\\__/:::/    /       \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/___/:::/    /              \\\\::::/    /              \\\\::::/    /\\r\\n//     \\\\:::\\\\  /:::/    /               /:::/    /         \\\\::::::::/    /         \\\\:::\\\\    \\\\       \\\\:::\\\\  /:::/    /        \\\\:::\\\\__/:::/    /               /:::/    /                \\\\::/____/\\r\\n//      \\\\:::\\\\/:::/    /               /:::/    /           \\\\::::::/    /           \\\\:::\\\\    \\\\       \\\\:::\\\\/:::/    /          \\\\::::::::/    /               /:::/    /                  ~~\\r\\n//       \\\\::::::/    /               /:::/    /             \\\\::::/    /             \\\\:::\\\\    \\\\       \\\\::::::/    /            \\\\::::::/    /               /:::/    /\\r\\n//        \\\\::::/    /               /:::/    /               \\\\::/____/               \\\\:::\\\\____\\\\       \\\\::::/    /              \\\\::::/    /               /:::/    /\\r\\n//         \\\\::/    /                \\\\::/    /                 ~~                      \\\\::/    /        \\\\::/    /                \\\\::/____/                \\\\::/    /\\r\\n//          \\\\/____/                  \\\\/____/                                           \\\\/____/          \\\\/____/                  ~~                       \\\\/____/\\r\\n\\r\\nimport \\\"./base/ABaseTroveSmolSweeper.sol\\\";\\r\\n\\r\\ncontract TroveSmolSweeper is ABaseTroveSmolSweeper {\\r\\n    constructor(\\r\\n        address _troveMarketplace,\\r\\n        address _defaultPaymentToken,\\r\\n        address _weth\\r\\n    ) ABaseTroveSmolSweeper(_troveMarketplace, _defaultPaymentToken, _weth) {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/sweep/base/ABaseTroveSmolSweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n//           _____                    _____                   _______                   _____            _____                    _____                    _____                    _____\\n//          /\\\\    \\\\                  /\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\\\n//         /::\\\\    \\\\                /::\\\\____\\\\               /::::\\\\    \\\\               /::\\\\____\\\\        /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\\\n//        /::::\\\\    \\\\              /::::|   |              /::::::\\\\    \\\\             /:::/    /       /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\\\n//       /::::::\\\\    \\\\            /:::::|   |             /::::::::\\\\    \\\\           /:::/    /       /::::::\\\\    \\\\            /:::/   _/___            /::::::\\\\    \\\\            /::::::\\\\    \\\\\\n//      /:::/\\\\:::\\\\    \\\\          /::::::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/    /       /:::/\\\\:::\\\\    \\\\          /:::/   /\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\\\n//     /:::/__\\\\:::\\\\    \\\\        /:::/|::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/    /       /:::/__\\\\:::\\\\    \\\\        /:::/   /::\\\\____\\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\\\n//     \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/ |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    /        \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/   /:::/    /       /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\\\n//   ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/  |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    /       ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/   /:::/   _/___    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\\\n//  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/   |::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /       /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/___/:::/   /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\\\n// /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/       /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\|:::|   /:::/   /::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::|    |\\n// \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\::/    / ~~~~~/:::/    / \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /|:::|__/:::/   /:::/    /\\\\::/    \\\\:::\\\\  /:::/    /\\\\::/    \\\\:::\\\\  /:::|____|\\n//  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\/____/      /:::/    /   \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\/:::/   /:::/    /  \\\\/____/ \\\\:::\\\\/:::/    /  \\\\/_____/\\\\:::\\\\/:::/    /\\n//   \\\\:::\\\\   \\\\:::\\\\    \\\\                  /:::/    /     \\\\:::\\\\    /:::/    /     \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\::::::/   /:::/    /            \\\\::::::/    /            \\\\::::::/    /\\n//    \\\\:::\\\\   \\\\:::\\\\____\\\\                /:::/    /       \\\\:::\\\\__/:::/    /       \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/___/:::/    /              \\\\::::/    /              \\\\::::/    /\\n//     \\\\:::\\\\  /:::/    /               /:::/    /         \\\\::::::::/    /         \\\\:::\\\\    \\\\       \\\\:::\\\\  /:::/    /        \\\\:::\\\\__/:::/    /               /:::/    /                \\\\::/____/\\n//      \\\\:::\\\\/:::/    /               /:::/    /           \\\\::::::/    /           \\\\:::\\\\    \\\\       \\\\:::\\\\/:::/    /          \\\\::::::::/    /               /:::/    /                  ~~\\n//       \\\\::::::/    /               /:::/    /             \\\\::::/    /             \\\\:::\\\\    \\\\       \\\\::::::/    /            \\\\::::::/    /               /:::/    /\\n//        \\\\::::/    /               /:::/    /               \\\\::/____/               \\\\:::\\\\____\\\\       \\\\::::/    /              \\\\::::/    /               /:::/    /\\n//         \\\\::/    /                \\\\::/    /                 ~~                      \\\\::/    /        \\\\::/    /                \\\\::/____/                \\\\::/    /\\n//          \\\\/____/                  \\\\/____/                                           \\\\/____/          \\\\/____/                  ~~                       \\\\/____/\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../../token/ANFTReceiver.sol\\\";\\nimport \\\"../libraries/SettingsBitFlag.sol\\\";\\nimport \\\"../libraries/Math.sol\\\";\\nimport \\\"../../treasure/interfaces/ITroveMarketplace.sol\\\";\\nimport \\\"../structs/BuyOrder.sol\\\";\\nimport \\\"../interfaces/ITroveSmolSweeper.sol\\\";\\nimport \\\"./ABaseSmolSweeper.sol\\\";\\n\\nimport \\\"../errors/BuyError.sol\\\";\\n\\n// import \\\"@utils/console.sol\\\";\\n\\nerror InvalidMsgValue();\\nerror MsgValueShouldBeZero();\\n\\n// Ownable,\\nabstract contract ABaseTroveSmolSweeper is\\n    ReentrancyGuard,\\n    ABaseSmolSweeper,\\n    ITroveSmolSweeper\\n{\\n    using SafeERC20 for IERC20;\\n\\n    bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n    IERC20 public defaultPaymentToken;\\n    IERC20 public weth;\\n    ITroveMarketplace public troveMarketplace;\\n\\n    constructor(\\n        address _troveMarketplace,\\n        address _defaultPaymentToken,\\n        address _weth\\n    ) {\\n        troveMarketplace = ITroveMarketplace(_troveMarketplace);\\n        defaultPaymentToken = IERC20(_defaultPaymentToken);\\n        weth = IERC20(_weth);\\n    }\\n\\n    function setMarketplaceContract(ITroveMarketplace _troveMarketplace)\\n        external\\n        onlyOwner\\n    {\\n        troveMarketplace = _troveMarketplace;\\n    }\\n\\n    function setDefaultPaymentToken(IERC20 _defaultPaymentToken)\\n        external\\n        onlyOwner\\n    {\\n        defaultPaymentToken = _defaultPaymentToken;\\n    }\\n\\n    function setWeth(IERC20 _weth) external onlyOwner {\\n        weth = _weth;\\n    }\\n\\n    function sumTotalPrice(BuyOrder[] memory _buyOrders)\\n        internal\\n        pure\\n        returns (uint256 totalPrice)\\n    {\\n        for (uint256 i = 0; i < _buyOrders.length; i++) {\\n            totalPrice +=\\n                _buyOrders[i].quantity *\\n                _buyOrders[i].maxPricePerItem;\\n        }\\n    }\\n\\n    function tryBuyItem(\\n        BuyItemParams memory _buyOrder,\\n        uint16 _inputSettingsBitFlag,\\n        uint256 _maxSpendAllowanceLeft\\n    )\\n        internal\\n        returns (\\n            uint256 totalPrice,\\n            bool success,\\n            BuyError buyError\\n        )\\n    {\\n        uint256 quantityToBuy = _buyOrder.quantity;\\n        // check if the listing exists\\n        ITroveMarketplace.ListingOrBid memory listing = troveMarketplace\\n            .listings(_buyOrder.nftAddress, _buyOrder.tokenId, _buyOrder.owner);\\n\\n        // // check if the price is correct\\n        // if (listing.pricePerItem > _buyOrder.maxPricePerItem) {\\n        //     // skip this item\\n        //     return (0, false, SettingsBitFlag.MAX_PRICE_PER_ITEM_EXCEEDED);\\n        // }\\n\\n        // not enough listed items\\n        if (listing.quantity < quantityToBuy) {\\n            if (\\n                SettingsBitFlag.checkSetting(\\n                    _inputSettingsBitFlag,\\n                    SettingsBitFlag.INSUFFICIENT_QUANTITY_ERC1155\\n                )\\n            ) {\\n                // else buy all listed items even if it's less than requested\\n                quantityToBuy = listing.quantity;\\n            } else {\\n                // skip this item\\n                return (0, false, BuyError.INSUFFICIENT_QUANTITY_ERC1155);\\n            }\\n        }\\n\\n        // check if total price is less than max spend allowance left\\n        if ((listing.pricePerItem * quantityToBuy) > _maxSpendAllowanceLeft) {\\n            return (0, false, BuyError.EXCEEDING_MAX_SPEND);\\n        }\\n\\n        BuyItemParams[] memory buyItemParams = new BuyItemParams[](1);\\n        buyItemParams[0] = _buyOrder;\\n\\n        uint256 totalSpent = 0;\\n        uint256 value = (_buyOrder.paymentToken == address(weth))\\n            ? (_buyOrder.maxPricePerItem * quantityToBuy)\\n            : 0;\\n\\n        try troveMarketplace.buyItems{value: value}(buyItemParams) {\\n            if (\\n                SettingsBitFlag.checkSetting(\\n                    _inputSettingsBitFlag,\\n                    SettingsBitFlag.EMIT_SUCCESS_EVENT_LOGS\\n                )\\n            ) {\\n                emit SuccessBuyItem(\\n                    _buyOrder.nftAddress,\\n                    _buyOrder.tokenId,\\n                    _buyOrder.owner,\\n                    msg.sender,\\n                    quantityToBuy,\\n                    listing.pricePerItem\\n                );\\n            }\\n\\n            if (\\n                IERC165(_buyOrder.nftAddress).supportsInterface(\\n                    INTERFACE_ID_ERC721\\n                )\\n            ) {\\n                IERC721(_buyOrder.nftAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    _buyOrder.tokenId\\n                );\\n            } else if (\\n                IERC165(_buyOrder.nftAddress).supportsInterface(\\n                    INTERFACE_ID_ERC1155\\n                )\\n            ) {\\n                IERC1155(_buyOrder.nftAddress).safeTransferFrom(\\n                    address(this),\\n                    msg.sender,\\n                    _buyOrder.tokenId,\\n                    quantityToBuy,\\n                    \\\"\\\"\\n                );\\n            } else revert InvalidNFTAddress();\\n\\n            totalSpent = listing.pricePerItem * quantityToBuy;\\n        } catch (bytes memory errorReason) {\\n            if (\\n                SettingsBitFlag.checkSetting(\\n                    _inputSettingsBitFlag,\\n                    SettingsBitFlag.EMIT_FAILURE_EVENT_LOGS\\n                )\\n            ) {\\n                emit CaughtFailureBuyItem(\\n                    _buyOrder.nftAddress,\\n                    _buyOrder.tokenId,\\n                    _buyOrder.owner,\\n                    msg.sender,\\n                    quantityToBuy,\\n                    listing.pricePerItem,\\n                    errorReason\\n                );\\n            }\\n\\n            if (\\n                SettingsBitFlag.checkSetting(\\n                    _inputSettingsBitFlag,\\n                    SettingsBitFlag.MARKETPLACE_BUY_ITEM_REVERTED\\n                )\\n            ) revert FirstBuyReverted(errorReason);\\n            // skip this item\\n            return (0, false, BuyError.BUY_ITEM_REVERTED);\\n        }\\n\\n        return (totalSpent, true, BuyError.NONE);\\n    }\\n\\n    function buyItemsSingleToken(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address _inputTokenAddress,\\n        uint256 _maxSpendIncFees\\n    ) external payable {\\n        if (_inputTokenAddress == address(weth) && msg.value > 0) {\\n            if (_maxSpendIncFees != msg.value) revert InvalidMsgValue();\\n        } else {\\n            if (msg.value != 0) revert MsgValueShouldBeZero();\\n            // transfer payment tokens to this contract\\n            IERC20(_inputTokenAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _maxSpendIncFees\\n            );\\n            IERC20(_inputTokenAddress).approve(\\n                address(troveMarketplace),\\n                _maxSpendIncFees\\n            );\\n        }\\n\\n        (uint256 totalSpentAmount, uint256 successCount) = _buyItemsSingleToken(\\n            _buyOrders,\\n            _inputSettingsBitFlag,\\n            _maxSpendIncFees\\n        );\\n\\n        // transfer back failed payment tokens to the buyer\\n        if (successCount == 0) revert AllReverted();\\n\\n        uint256 feeAmount = _calculateFee(totalSpentAmount);\\n\\n        if (_inputTokenAddress == address(weth) && _buyOrders[0].usingEth) {\\n            payable(msg.sender).transfer(\\n                _maxSpendIncFees - (totalSpentAmount + feeAmount)\\n            );\\n        } else {\\n            IERC20(_inputTokenAddress).safeTransfer(\\n                msg.sender,\\n                _maxSpendIncFees - (totalSpentAmount + feeAmount)\\n            );\\n        }\\n    }\\n\\n    function _buyItemsSingleToken(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        uint256 _maxSpendIncFees\\n    ) internal returns (uint256 totalSpentAmount, uint256 successCount) {\\n        // buy all assets\\n        uint256 _maxSpendIncFees = _calculateAmountWithoutFees(\\n            _maxSpendIncFees\\n        );\\n\\n        uint256 i = 0;\\n        uint256 length = _buyOrders.length;\\n        for (; i < length; ) {\\n            (\\n                uint256 spentAmount,\\n                bool spentSuccess,\\n                BuyError buyError\\n            ) = tryBuyItem(\\n                    _buyOrders[i],\\n                    _inputSettingsBitFlag,\\n                    _maxSpendIncFees - totalSpentAmount\\n                );\\n\\n            if (spentSuccess) {\\n                totalSpentAmount += spentAmount;\\n                successCount++;\\n            } else {\\n                if (\\n                    buyError == BuyError.EXCEEDING_MAX_SPEND &&\\n                    SettingsBitFlag.checkSetting(\\n                        _inputSettingsBitFlag,\\n                        SettingsBitFlag.EXCEEDING_MAX_SPEND\\n                    )\\n                ) break;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function buyItemsManyTokens(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] calldata _inputTokenAddresses,\\n        uint256[] calldata _maxSpendIncFees\\n    ) external payable {\\n        // transfer payment tokens to this contract\\n        uint256 i = 0;\\n        uint256 length = _inputTokenAddresses.length;\\n        for (; i < length; ) {\\n            if (_inputTokenAddresses[i] == address(weth) && msg.value > 0) {\\n                if (_maxSpendIncFees[i] != msg.value) revert InvalidMsgValue();\\n            } else {\\n                // if (msg.value != 0) revert MsgValueShouldBeZero();\\n                // transfer payment tokens to this contract\\n                IERC20(_inputTokenAddresses[i]).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _maxSpendIncFees[i]\\n                );\\n                IERC20(_inputTokenAddresses[i]).approve(\\n                    address(troveMarketplace),\\n                    _maxSpendIncFees[i]\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory maxSpends = _maxSpendWithoutFees(_maxSpendIncFees);\\n        (\\n            uint256[] memory totalSpentAmount,\\n            uint256 successCount\\n        ) = _buyItemsManyTokens(\\n                _buyOrders,\\n                _inputSettingsBitFlag,\\n                _inputTokenAddresses,\\n                maxSpends\\n            );\\n\\n        // transfer back failed payment tokens to the buyer\\n        if (successCount == 0) revert AllReverted();\\n\\n        i = 0;\\n        for (; i < length; ) {\\n            uint256 feeAmount = _calculateFee(totalSpentAmount[i]);\\n\\n            if (\\n                _inputTokenAddresses[i] == address(weth) &&\\n                _buyOrders[0].usingEth\\n            ) {\\n                payable(msg.sender).transfer(\\n                    _maxSpendIncFees[i] - (totalSpentAmount[i] + feeAmount)\\n                );\\n            } else {\\n                IERC20(_inputTokenAddresses[i]).safeTransfer(\\n                    msg.sender,\\n                    _maxSpendIncFees[i] - (totalSpentAmount[i] + feeAmount)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _buyItemsManyTokens(\\n        BuyItemParams[] memory _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] memory _inputTokenAddresses,\\n        uint256[] memory _maxSpends\\n    )\\n        internal\\n        returns (uint256[] memory totalSpentAmounts, uint256 successCount)\\n    {\\n        totalSpentAmounts = new uint256[](_inputTokenAddresses.length);\\n        // buy all assets\\n        for (uint256 i = 0; i < _buyOrders.length; ) {\\n            uint256 j = _getTokenIndex(\\n                _inputTokenAddresses,\\n                _buyOrders[i].paymentToken\\n            );\\n            (\\n                uint256 spentAmount,\\n                bool spentSuccess,\\n                BuyError buyError\\n            ) = tryBuyItem(\\n                    _buyOrders[i],\\n                    _inputSettingsBitFlag,\\n                    _maxSpends[j] - totalSpentAmounts[j]\\n                );\\n\\n            if (spentSuccess) {\\n                totalSpentAmounts[j] += spentAmount;\\n                successCount++;\\n            } else {\\n                if (\\n                    buyError == BuyError.EXCEEDING_MAX_SPEND &&\\n                    SettingsBitFlag.checkSetting(\\n                        _inputSettingsBitFlag,\\n                        SettingsBitFlag.EXCEEDING_MAX_SPEND\\n                    )\\n                ) break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function sweepItemsSingleToken(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address _inputTokenAddress,\\n        uint256 _maxSpendIncFees,\\n        uint256 _minSpend,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    ) external payable {\\n        if (_inputTokenAddress == address(weth) && msg.value > 0) {\\n            if (_maxSpendIncFees != msg.value) revert InvalidMsgValue();\\n        } else {\\n            if (msg.value != 0) revert MsgValueShouldBeZero();\\n            // transfer payment tokens to this contract\\n            IERC20(_inputTokenAddress).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _maxSpendIncFees\\n            );\\n            IERC20(_inputTokenAddress).approve(\\n                address(troveMarketplace),\\n                _maxSpendIncFees\\n            );\\n        }\\n\\n        (\\n            uint256 totalSpentAmount,\\n            uint256 successCount,\\n\\n        ) = _sweepItemsSingleToken(\\n                _buyOrders,\\n                _inputSettingsBitFlag,\\n                _maxSpendIncFees,\\n                _minSpend,\\n                _maxSuccesses,\\n                _maxFailures\\n            );\\n\\n        // transfer back failed payment tokens to the buyer\\n        if (successCount == 0) revert AllReverted();\\n\\n        uint256 feeAmount = _calculateFee(totalSpentAmount);\\n        if (_inputTokenAddress == address(weth) && _buyOrders[0].usingEth) {\\n            payable(msg.sender).transfer(\\n                _maxSpendIncFees - (totalSpentAmount + feeAmount)\\n            );\\n        } else {\\n            IERC20(_inputTokenAddress).safeTransfer(\\n                msg.sender,\\n                _maxSpendIncFees - (totalSpentAmount + feeAmount)\\n            );\\n        }\\n    }\\n\\n    function _sweepItemsSingleToken(\\n        BuyItemParams[] memory _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        uint256 _maxSpendIncFees,\\n        uint256 _minSpend,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    )\\n        internal\\n        returns (\\n            uint256 totalSpentAmount,\\n            uint256 successCount,\\n            uint256 failCount\\n        )\\n    {\\n        // buy all assets\\n        for (uint256 i = 0; i < _buyOrders.length; ) {\\n            if (successCount >= _maxSuccesses || failCount >= _maxFailures)\\n                break;\\n\\n            if (totalSpentAmount >= _minSpend) break;\\n\\n            (\\n                uint256 spentAmount,\\n                bool spentSuccess,\\n                BuyError buyError\\n            ) = tryBuyItem(\\n                    _buyOrders[i],\\n                    _inputSettingsBitFlag,\\n                    _maxSpendIncFees - totalSpentAmount\\n                );\\n\\n            if (spentSuccess) {\\n                totalSpentAmount += spentAmount;\\n                successCount++;\\n            } else {\\n                if (\\n                    buyError == BuyError.EXCEEDING_MAX_SPEND &&\\n                    SettingsBitFlag.checkSetting(\\n                        _inputSettingsBitFlag,\\n                        SettingsBitFlag.EXCEEDING_MAX_SPEND\\n                    )\\n                ) break;\\n                failCount++;\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function sweepItemsManyTokens(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] calldata _inputTokenAddresses,\\n        uint256[] calldata _maxSpendIncFees,\\n        uint256[] calldata _minSpends,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    ) external payable {\\n        // transfer payment tokens to this contract\\n        for (uint256 i = 0; i < _maxSpendIncFees.length; ) {\\n            if (_inputTokenAddresses[i] == address(weth) && msg.value > 0) {\\n                if (_maxSpendIncFees[i] != msg.value) revert InvalidMsgValue();\\n            } else {\\n                // if (msg.value != 0) revert MsgValueShouldBeZero();\\n                // transfer payment tokens to this contract\\n                IERC20(_inputTokenAddresses[i]).safeTransferFrom(\\n                    msg.sender,\\n                    address(this),\\n                    _maxSpendIncFees[i]\\n                );\\n                IERC20(_inputTokenAddresses[i]).approve(\\n                    address(troveMarketplace),\\n                    _maxSpendIncFees[i]\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256[] memory _maxSpendIncFeesAmount = _maxSpendWithoutFees(\\n            _maxSpendIncFees\\n        );\\n\\n        (\\n            uint256[] memory totalSpentAmount,\\n            uint256 successCount,\\n\\n        ) = _sweepItemsManyTokens(\\n                _buyOrders,\\n                _inputSettingsBitFlag,\\n                _inputTokenAddresses,\\n                _maxSpendIncFeesAmount,\\n                _minSpends,\\n                _maxSuccesses,\\n                _maxFailures\\n            );\\n\\n        // transfer back failed payment tokens to the buyer\\n        if (successCount == 0) revert AllReverted();\\n\\n        for (uint256 i = 0; i < _maxSpendIncFees.length; ) {\\n            uint256 feeAmount = _calculateFee(totalSpentAmount[i]);\\n\\n            if (\\n                _inputTokenAddresses[i] == address(weth) &&\\n                _buyOrders[0].usingEth\\n            ) {\\n                payable(msg.sender).transfer(\\n                    _maxSpendIncFees[i] - (totalSpentAmount[i] + feeAmount)\\n                );\\n            } else {\\n                IERC20(_inputTokenAddresses[i]).safeTransfer(\\n                    msg.sender,\\n                    _maxSpendIncFees[i] - (totalSpentAmount[i] + feeAmount)\\n                );\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _sweepItemsManyTokens(\\n        BuyItemParams[] memory _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] memory _inputTokenAddresses,\\n        uint256[] memory _maxSpendIncFeesAmount,\\n        uint256[] memory _minSpends,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    )\\n        internal\\n        returns (\\n            uint256[] memory totalSpentAmounts,\\n            uint256 successCount,\\n            uint256 failCount\\n        )\\n    {\\n        totalSpentAmounts = new uint256[](_inputTokenAddresses.length);\\n\\n        for (uint256 i = 0; i < _buyOrders.length; ) {\\n            if (successCount >= _maxSuccesses || failCount >= _maxFailures)\\n                break;\\n\\n            uint256 j = _getTokenIndex(\\n                _inputTokenAddresses,\\n                _buyOrders[i].paymentToken\\n            );\\n\\n            if (totalSpentAmounts[j] >= _minSpends[j]) break;\\n\\n            (\\n                uint256 spentAmount,\\n                bool spentSuccess,\\n                BuyError buyError\\n            ) = tryBuyItem(\\n                    _buyOrders[i],\\n                    _inputSettingsBitFlag,\\n                    _maxSpendIncFeesAmount[j] - totalSpentAmounts[j]\\n                );\\n\\n            if (spentSuccess) {\\n                totalSpentAmounts[j] += spentAmount;\\n                successCount++;\\n            } else {\\n                if (\\n                    buyError == BuyError.EXCEEDING_MAX_SPEND &&\\n                    SettingsBitFlag.checkSetting(\\n                        _inputSettingsBitFlag,\\n                        SettingsBitFlag.EXCEEDING_MAX_SPEND\\n                    )\\n                ) break;\\n                failCount++;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _maxSpendWithoutFees(uint256[] memory _maxSpendIncFees)\\n        internal\\n        view\\n        returns (uint256[] memory maxSpendIncFeesAmount)\\n    {\\n        maxSpendIncFeesAmount = new uint256[](_maxSpendIncFees.length);\\n\\n        uint256 maxSpendLength = _maxSpendIncFees.length;\\n        for (uint256 i = 0; i < maxSpendLength; ) {\\n            maxSpendIncFeesAmount[i] = _calculateAmountWithoutFees(\\n                _maxSpendIncFees[i]\\n            );\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _getTokenIndex(\\n        address[] memory _inputTokenAddresses,\\n        address _buyOrderPaymentToken\\n    ) internal returns (uint256 j) {\\n        for (; j < _inputTokenAddresses.length; ) {\\n            if (_inputTokenAddresses[j] == _buyOrderPaymentToken) {\\n                return j;\\n            }\\n            unchecked {\\n                ++j;\\n            }\\n        }\\n        revert(\\\"bad\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/token/ANFTReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\nimport \\\"../token/ERC1155/AERC1155Receiver.sol\\\";\\r\\n\\r\\nimport \\\"../token/ERC721/AERC721Receiver.sol\\\";\\r\\n\\r\\nabstract contract ANFTReceiver is AERC721Receiver, AERC1155Receiver {}\\r\\n\"\r\n    },\r\n    \"src/contracts/sweep/libraries/SettingsBitFlag.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n * @dev Settings for a buy order.\\r\\n */\\r\\n\\r\\nlibrary SettingsBitFlag {\\r\\n    // default action is 0b00000000\\r\\n    uint16 internal constant NONE = 0x00;\\r\\n\\r\\n    // if marketplace fails to buy an item for some reason\\r\\n    // default: will skip the item.\\r\\n    // if 0x04 is set, will revert the entire buy transaction.\\r\\n    uint16 internal constant MARKETPLACE_BUY_ITEM_REVERTED = 0x0001;\\r\\n\\r\\n    // if the quantity of an item is less than the requested quantity (for ERC1155)\\r\\n    // default: will skip the item.\\r\\n    // if 0x02 is set, will buy as many items as possible (all listed items)\\r\\n    uint16 internal constant INSUFFICIENT_QUANTITY_ERC1155 = 0x0002;\\r\\n\\r\\n    // if total spend allowance is exceeded\\r\\n    // default: will skip the item and continue.\\r\\n    // if 0x08 is set, will skill the item and stop the transaction.\\r\\n    uint16 internal constant EXCEEDING_MAX_SPEND = 0x0004;\\r\\n\\r\\n    // refund in the input token\\r\\n    // default: refunds in the payment token\\r\\n    // if 0x10 is set, refunds in the input token\\r\\n    uint16 internal constant REFUND_IN_INPUT_TOKEN = 0x0008;\\r\\n\\r\\n    // turn on success event logging\\r\\n    // default: will not log success events.\\r\\n    // if 0x20 is set, will log success events.\\r\\n    uint16 internal constant EMIT_SUCCESS_EVENT_LOGS = 0x000C;\\r\\n\\r\\n    // turn on failure event logging\\r\\n    // default: will not log failure events.\\r\\n    // if 0x40 is set, will log failure events.\\r\\n    uint16 internal constant EMIT_FAILURE_EVENT_LOGS = 0x0010;\\r\\n\\r\\n    function checkSetting(uint16 _inputSettings, uint16 _settingBit)\\r\\n        internal\\r\\n        pure\\r\\n        returns (bool)\\r\\n    {\\r\\n        return (_inputSettings & _settingBit) == _settingBit;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/sweep/libraries/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Standard math utilities missing in the Solidity language.\\r\\n */\\r\\n\\r\\nlibrary Math {\\r\\n    /**\\r\\n     * @dev Returns the largest of two numbers.\\r\\n     */\\r\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a >= b ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the smallest of two numbers.\\r\\n     */\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/contracts/treasure/interfaces/ITroveMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/// @title  Treasure NFT marketplace\\n/// @notice This contract allows you to buy and sell NFTs from token contracts that are approved by the contract owner.\\n///         Please note that this contract is upgradeable. In the event of a compromised ProxyAdmin contract owner,\\n///         collectable tokens and payments may be at risk. To prevent this, the ProxyAdmin is owned by a multi-sig\\n///         governed by the TreasureDAO council.\\n/// @dev    This contract does not store any tokens at any time, it's only collects details \\\"the sale\\\" and approvals\\n///         from both parties and preforms non-custodial transaction by transfering NFT from owner to buying and payment\\n///         token from buying to NFT owner.\\ninterface ITroveMarketplace {\\n    struct ListingOrBid {\\n        /// @dev number of tokens for sale or requested (1 if ERC-721 token is active for sale) (for bids, quantity for ERC-721 can be greater than 1)\\n        uint64 quantity;\\n        /// @dev price per token sold, i.e. extended sale price equals this times quantity purchased. For bids, price offered per item.\\n        uint128 pricePerItem;\\n        /// @dev timestamp after which the listing/bid is invalid\\n        uint64 expirationTime;\\n        /// @dev the payment token for this listing/bid.\\n        address paymentTokenAddress;\\n    }\\n\\n    struct CollectionOwnerFee {\\n        /// @dev the fee, out of 10,000, that this collection owner will be given for each sale\\n        uint32 fee;\\n        /// @dev the recipient of the collection specific fee\\n        address recipient;\\n    }\\n\\n    enum TokenApprovalStatus {\\n        NOT_APPROVED,\\n        ERC_721_APPROVED,\\n        ERC_1155_APPROVED\\n    }\\n\\n    /// @notice TREASURE_MARKETPLACE_ADMIN_ROLE role hash\\n    function TREASURE_MARKETPLACE_ADMIN_ROLE() external pure returns (bytes32);\\n\\n    /// @notice the denominator for portion calculation, i.e. how many basis points are in 100%\\n    function BASIS_POINTS() external pure returns (uint256);\\n\\n    /// @notice the maximum fee which the owner may set (in units of basis points)\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    /// @notice the maximum fee which the collection owner may set\\n    function MAX_COLLECTION_FEE() external pure returns (uint256);\\n\\n    /// @notice the minimum price for which any item can be sold=\\n    function MIN_PRICE() external pure returns (uint256);\\n\\n    /// @notice the default token that is used for marketplace sales and fee payments. Can be overridden by collectionToTokenAddress.\\n    function paymentToken() external view returns (address);\\n\\n    /// @notice fee portion (in basis points) for each sale, (e.g. a value of 100 is 100/10000 = 1%). This is the fee if no collection owner fee is set.\\n    function fee() external view returns (uint256);\\n\\n    /// @notice address that receives fees\\n    function feeReceipient() external view returns (address);\\n\\n    /// @notice mapping for listings, maps: nftAddress => tokenId => offeror\\n    function listings(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _offeror\\n    ) external view returns (ListingOrBid memory);\\n\\n    /// @notice NFTs which the owner has approved to be sold on the marketplace, maps: nftAddress => status\\n    function tokenApprovals(address _nftAddress)\\n        external\\n        view\\n        returns (TokenApprovalStatus);\\n\\n    /// @notice fee portion (in basis points) for each sale. This is used if a separate fee has been set for the collection owner.\\n    function feeWithCollectionOwner() external view returns (uint256);\\n\\n    /// @notice Maps the collection address to the fees which the collection owner collects. Some collections may not have a seperate fee, such as those owned by the Treasure DAO.\\n    function collectionToCollectionOwnerFee(address _collectionAddress)\\n        external\\n        view\\n        returns (CollectionOwnerFee memory);\\n\\n    /// @notice Maps the collection address to the payment token that will be used for purchasing. If the address is the zero address, it will use the default paymentToken.\\n    function collectionToPaymentToken(address _collectionAddress)\\n        external\\n        view\\n        returns (address);\\n\\n    /// @notice The address for weth.\\n    function weth() external view returns (address);\\n\\n    /// @notice mapping for token bids (721/1155): nftAddress => tokneId => offeror\\n    function tokenBids(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        address _offeror\\n    ) external view returns (ListingOrBid memory);\\n\\n    /// @notice mapping for collection level bids (721 only): nftAddress => offeror\\n    function collectionBids(address _nftAddress, address _offeror)\\n        external\\n        view\\n        returns (ListingOrBid memory);\\n\\n    /// @notice Indicates if bid related functions are active.\\n    function areBidsActive() external view returns (bool);\\n\\n    /// @notice The fee portion was updated\\n    /// @param  fee new fee amount (in units of basis points)\\n    event UpdateFee(uint256 fee);\\n\\n    /// @notice The fee portion was updated for collections that have a collection owner.\\n    /// @param  fee new fee amount (in units of basis points)\\n    event UpdateFeeWithCollectionOwner(uint256 fee);\\n\\n    /// @notice A collection's fees have changed\\n    /// @param  _collection  The collection\\n    /// @param  _recipient   The recipient of the fees. If the address is 0, the collection fees for this collection have been removed.\\n    /// @param  _fee         The fee amount (in units of basis points)\\n    event UpdateCollectionOwnerFee(\\n        address _collection,\\n        address _recipient,\\n        uint256 _fee\\n    );\\n\\n    /// @notice The fee recipient was updated\\n    /// @param  feeRecipient the new recipient to get fees\\n    event UpdateFeeRecipient(address feeRecipient);\\n\\n    /// @notice The approval status for a token was updated\\n    /// @param  nft    which token contract was updated\\n    /// @param  status the new status\\n    /// @param  paymentToken the token that will be used for payments for this collection\\n    event TokenApprovalStatusUpdated(\\n        address nft,\\n        TokenApprovalStatus status,\\n        address paymentToken\\n    );\\n\\n    event TokenBidCreatedOrUpdated(\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    event CollectionBidCreatedOrUpdated(\\n        address bidder,\\n        address nftAddress,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    event TokenBidCancelled(\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId\\n    );\\n\\n    event CollectionBidCancelled(address bidder, address nftAddress);\\n\\n    event BidAccepted(\\n        address seller,\\n        address bidder,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        address paymentToken,\\n        BidType bidType\\n    );\\n\\n    /// @notice An item was listed for sale\\n    /// @param  seller         the offeror of the item\\n    /// @param  nftAddress     which token contract holds the offered token\\n    /// @param  tokenId        the identifier for the offered token\\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  expirationTime UNIX timestamp after when this listing expires\\n    /// @param  paymentToken   the token used to list this item\\n    event ItemListed(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    /// @notice An item listing was updated\\n    /// @param  seller         the offeror of the item\\n    /// @param  nftAddress     which token contract holds the offered token\\n    /// @param  tokenId        the identifier for the offered token\\n    /// @param  quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  expirationTime UNIX timestamp after when this listing expires\\n    /// @param  paymentToken   the token used to list this item\\n    event ItemUpdated(\\n        address seller,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        uint64 expirationTime,\\n        address paymentToken\\n    );\\n\\n    /// @notice An item is no longer listed for sale\\n    /// @param  seller     former offeror of the item\\n    /// @param  nftAddress which token contract holds the formerly offered token\\n    /// @param  tokenId    the identifier for the formerly offered token\\n    event ItemCanceled(\\n        address indexed seller,\\n        address indexed nftAddress,\\n        uint256 indexed tokenId\\n    );\\n\\n    /// @notice A listed item was sold\\n    /// @param  seller       the offeror of the item\\n    /// @param  buyer        the buyer of the item\\n    /// @param  nftAddress   which token contract holds the sold token\\n    /// @param  tokenId      the identifier for the sold token\\n    /// @param  quantity     how many of this token identifier where sold (or 1 for a ERC-721 token)\\n    /// @param  pricePerItem the price (in units of the paymentToken) for each token sold\\n    /// @param  paymentToken the payment token that was used to pay for this item\\n    event ItemSold(\\n        address seller,\\n        address buyer,\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint64 quantity,\\n        uint128 pricePerItem,\\n        address paymentToken\\n    );\\n\\n    /// @notice Perform initial contract setup\\n    /// @dev    The initializer modifier ensures this is only called once, the owner should confirm this was properly\\n    ///         performed before publishing this contract address.\\n    /// @param  _initialFee          fee to be paid on each sale, in basis points\\n    /// @param  _initialFeeRecipient wallet to collets fees\\n    /// @param  _initialPaymentToken address of the token that is used for settlement\\n    function initialize(\\n        uint256 _initialFee,\\n        address _initialFeeRecipient,\\n        address _initialPaymentToken\\n    ) external;\\n\\n    /// @notice Creates an item listing. You must authorize this marketplace with your item's token contract to list.\\n    /// @param  _nftAddress     which token contract holds the offered token\\n    /// @param  _tokenId        the identifier for the offered token\\n    /// @param  _quantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  _pricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  _expirationTime UNIX timestamp after when this listing expires\\n    function createListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken\\n    ) external;\\n\\n    /// @notice Updates an item listing\\n    /// @param  _nftAddress        which token contract holds the offered token\\n    /// @param  _tokenId           the identifier for the offered token\\n    /// @param  _newQuantity       how many of this token identifier are offered (or 1 for a ERC-721 token)\\n    /// @param  _newPricePerItem   the price (in units of the paymentToken) for each token offered\\n    /// @param  _newExpirationTime UNIX timestamp after when this listing expires\\n    function updateListing(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _newQuantity,\\n        uint128 _newPricePerItem,\\n        uint64 _newExpirationTime,\\n        address _paymentToken\\n    ) external;\\n\\n    /// @notice Remove an item listing\\n    /// @param  _nftAddress which token contract holds the offered token\\n    /// @param  _tokenId    the identifier for the offered token\\n    function cancelListing(address _nftAddress, uint256 _tokenId) external;\\n\\n    function cancelManyBids(CancelBidParams[] calldata _cancelBidParams)\\n        external;\\n\\n    /// @notice Creates a bid for a particular token.\\n    function createOrUpdateTokenBid(\\n        address _nftAddress,\\n        uint256 _tokenId,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken\\n    ) external;\\n\\n    function createOrUpdateCollectionBid(\\n        address _nftAddress,\\n        uint64 _quantity,\\n        uint128 _pricePerItem,\\n        uint64 _expirationTime,\\n        address _paymentToken\\n    ) external;\\n\\n    function acceptCollectionBid(AcceptBidParams calldata _acceptBidParams)\\n        external;\\n\\n    function acceptTokenBid(AcceptBidParams calldata _acceptBidParams) external;\\n\\n    /// @notice Buy multiple listed items. You must authorize this marketplace with your payment token to completed the buy or purchase with eth if it is a weth collection.\\n    function buyItems(BuyItemParams[] calldata _buyItemParams) external payable;\\n\\n    /// @notice Updates the fee amount which is collected during sales, for both collections with and without owner specific fees.\\n    /// @dev    This is callable only by the owner. Both fees may not exceed MAX_FEE\\n    /// @param  _newFee the updated fee amount is basis points\\n    function setFee(uint256 _newFee, uint256 _newFeeWithCollectionOwner)\\n        external;\\n\\n    /// @notice Updates the fee amount which is collected during sales fro a specific collection\\n    /// @dev    This is callable only by the owner\\n    /// @param  _collectionAddress The collection in question. This must be whitelisted.\\n    /// @param _collectionOwnerFee The fee and recipient for the collection. If the 0 address is passed as the recipient, collection specific fees will not be collected.\\n    function setCollectionOwnerFee(\\n        address _collectionAddress,\\n        CollectionOwnerFee calldata _collectionOwnerFee\\n    ) external;\\n\\n    /// @notice Updates the fee recipient which receives fees during sales\\n    /// @dev    This is callable only by the owner.\\n    /// @param  _newFeeRecipient the wallet to receive fees\\n    function setFeeRecipient(address _newFeeRecipient) external;\\n\\n    /// @notice Sets a token as an approved kind of NFT or as ineligible for trading\\n    /// @dev    This is callable only by the owner.\\n    /// @param  _nft    address of the NFT to be approved\\n    /// @param  _status the kind of NFT approved, or NOT_APPROVED to remove approval\\n    function setTokenApprovalStatus(\\n        address _nft,\\n        TokenApprovalStatus _status,\\n        address _paymentToken\\n    ) external;\\n\\n    function setWeth(address _wethAddress) external;\\n\\n    function toggleAreBidsActive() external;\\n\\n    /// @notice Pauses the marketplace, creatisgn and executing listings is paused\\n    /// @dev    This is callable only by the owner. Canceling listings is not paused.\\n    function pause() external;\\n\\n    /// @notice Unpauses the marketplace, all functionality is restored\\n    /// @dev    This is callable only by the owner.\\n    function unpause() external;\\n}\\n\\nstruct BuyItemParams {\\n    /// which token contract holds the offered token\\n    address nftAddress;\\n    /// the identifier for the token to be bought\\n    uint256 tokenId;\\n    /// current owner of the item(s) to be bought\\n    address owner;\\n    /// how many of this token identifier to be bought (or 1 for a ERC-721 token)\\n    uint64 quantity;\\n    /// the maximum price (in units of the paymentToken) for each token offered\\n    uint128 maxPricePerItem;\\n    /// the payment token to be used\\n    address paymentToken;\\n    /// indicates if the user is purchasing this item with eth.\\n    bool usingEth;\\n}\\n\\nstruct AcceptBidParams {\\n    // Which token contract holds the given tokens\\n    address nftAddress;\\n    // The token id being given\\n    uint256 tokenId;\\n    // The user who created the bid initially\\n    address bidder;\\n    // The quantity of items being supplied to the bidder\\n    uint64 quantity;\\n    // The price per item that the bidder is offering\\n    uint128 pricePerItem;\\n    /// the payment token to be used\\n    address paymentToken;\\n}\\n\\nstruct CancelBidParams {\\n    BidType bidType;\\n    address nftAddress;\\n    uint256 tokenId;\\n}\\n\\nenum BidType {\\n    TOKEN,\\n    COLLECTION\\n}\\n\"\r\n    },\r\n    \"src/contracts/sweep/structs/BuyOrder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n//           _____                    _____                   _______                   _____            _____                    _____                    _____                    _____\\n//          /\\\\    \\\\                  /\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\\\n//         /::\\\\    \\\\                /::\\\\____\\\\               /::::\\\\    \\\\               /::\\\\____\\\\        /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\\\n//        /::::\\\\    \\\\              /::::|   |              /::::::\\\\    \\\\             /:::/    /       /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\\\n//       /::::::\\\\    \\\\            /:::::|   |             /::::::::\\\\    \\\\           /:::/    /       /::::::\\\\    \\\\            /:::/   _/___            /::::::\\\\    \\\\            /::::::\\\\    \\\\\\n//      /:::/\\\\:::\\\\    \\\\          /::::::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/    /       /:::/\\\\:::\\\\    \\\\          /:::/   /\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\\\n//     /:::/__\\\\:::\\\\    \\\\        /:::/|::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/    /       /:::/__\\\\:::\\\\    \\\\        /:::/   /::\\\\____\\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\\\n//     \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/ |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    /        \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/   /:::/    /       /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\\\n//   ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/  |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    /       ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/   /:::/   _/___    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\\\n//  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/   |::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /       /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/___/:::/   /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\\\n// /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/       /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\|:::|   /:::/   /::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::|    |\\n// \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\::/    / ~~~~~/:::/    / \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /|:::|__/:::/   /:::/    /\\\\::/    \\\\:::\\\\  /:::/    /\\\\::/    \\\\:::\\\\  /:::|____|\\n//  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\/____/      /:::/    /   \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\/:::/   /:::/    /  \\\\/____/ \\\\:::\\\\/:::/    /  \\\\/_____/\\\\:::\\\\/:::/    /\\n//   \\\\:::\\\\   \\\\:::\\\\    \\\\                  /:::/    /     \\\\:::\\\\    /:::/    /     \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\::::::/   /:::/    /            \\\\::::::/    /            \\\\::::::/    /\\n//    \\\\:::\\\\   \\\\:::\\\\____\\\\                /:::/    /       \\\\:::\\\\__/:::/    /       \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/___/:::/    /              \\\\::::/    /              \\\\::::/    /\\n//     \\\\:::\\\\  /:::/    /               /:::/    /         \\\\::::::::/    /         \\\\:::\\\\    \\\\       \\\\:::\\\\  /:::/    /        \\\\:::\\\\__/:::/    /               /:::/    /                \\\\::/____/\\n//      \\\\:::\\\\/:::/    /               /:::/    /           \\\\::::::/    /           \\\\:::\\\\    \\\\       \\\\:::\\\\/:::/    /          \\\\::::::::/    /               /:::/    /                  ~~\\n//       \\\\::::::/    /               /:::/    /             \\\\::::/    /             \\\\:::\\\\    \\\\       \\\\::::::/    /            \\\\::::::/    /               /:::/    /\\n//        \\\\::::/    /               /:::/    /               \\\\::/____/               \\\\:::\\\\____\\\\       \\\\::::/    /              \\\\::::/    /               /:::/    /\\n//         \\\\::/    /                \\\\::/    /                 ~~                      \\\\::/    /        \\\\::/    /                \\\\::/____/                \\\\::/    /\\n//          \\\\/____/                  \\\\/____/                                           \\\\/____/          \\\\/____/                  ~~                       \\\\/____/\\n\\nstruct BuyOrder {\\n    address assetAddress;\\n    uint256 tokenId;\\n    address seller;\\n    uint256 quantity;\\n    uint256 maxPricePerItem;\\n}\\n\"\r\n    },\r\n    \"src/contracts/sweep/interfaces/ITroveSmolSweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n//           _____                    _____                   _______                   _____            _____                    _____                    _____                    _____\\n//          /\\\\    \\\\                  /\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\\\n//         /::\\\\    \\\\                /::\\\\____\\\\               /::::\\\\    \\\\               /::\\\\____\\\\        /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\\\n//        /::::\\\\    \\\\              /::::|   |              /::::::\\\\    \\\\             /:::/    /       /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\\\n//       /::::::\\\\    \\\\            /:::::|   |             /::::::::\\\\    \\\\           /:::/    /       /::::::\\\\    \\\\            /:::/   _/___            /::::::\\\\    \\\\            /::::::\\\\    \\\\\\n//      /:::/\\\\:::\\\\    \\\\          /::::::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/    /       /:::/\\\\:::\\\\    \\\\          /:::/   /\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\\\n//     /:::/__\\\\:::\\\\    \\\\        /:::/|::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/    /       /:::/__\\\\:::\\\\    \\\\        /:::/   /::\\\\____\\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\\\n//     \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/ |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    /        \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/   /:::/    /       /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\\\n//   ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/  |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    /       ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/   /:::/   _/___    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\\\n//  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/   |::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /       /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/___/:::/   /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\\\n// /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/       /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\|:::|   /:::/   /::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::|    |\\n// \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\::/    / ~~~~~/:::/    / \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /|:::|__/:::/   /:::/    /\\\\::/    \\\\:::\\\\  /:::/    /\\\\::/    \\\\:::\\\\  /:::|____|\\n//  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\/____/      /:::/    /   \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\/:::/   /:::/    /  \\\\/____/ \\\\:::\\\\/:::/    /  \\\\/_____/\\\\:::\\\\/:::/    /\\n//   \\\\:::\\\\   \\\\:::\\\\    \\\\                  /:::/    /     \\\\:::\\\\    /:::/    /     \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\::::::/   /:::/    /            \\\\::::::/    /            \\\\::::::/    /\\n//    \\\\:::\\\\   \\\\:::\\\\____\\\\                /:::/    /       \\\\:::\\\\__/:::/    /       \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/___/:::/    /              \\\\::::/    /              \\\\::::/    /\\n//     \\\\:::\\\\  /:::/    /               /:::/    /         \\\\::::::::/    /         \\\\:::\\\\    \\\\       \\\\:::\\\\  /:::/    /        \\\\:::\\\\__/:::/    /               /:::/    /                \\\\::/____/\\n//      \\\\:::\\\\/:::/    /               /:::/    /           \\\\::::::/    /           \\\\:::\\\\    \\\\       \\\\:::\\\\/:::/    /          \\\\::::::::/    /               /:::/    /                  ~~\\n//       \\\\::::::/    /               /:::/    /             \\\\::::/    /             \\\\:::\\\\    \\\\       \\\\::::::/    /            \\\\::::::/    /               /:::/    /\\n//        \\\\::::/    /               /:::/    /               \\\\::/____/               \\\\:::\\\\____\\\\       \\\\::::/    /              \\\\::::/    /               /:::/    /\\n//         \\\\::/    /                \\\\::/    /                 ~~                      \\\\::/    /        \\\\::/    /                \\\\::/____/                \\\\::/    /\\n//          \\\\/____/                  \\\\/____/                                           \\\\/____/          \\\\/____/                  ~~                       \\\\/____/\\n\\nimport \\\"../../treasure/interfaces/ITroveMarketplace.sol\\\";\\n\\ninterface ITroveSmolSweeper {\\n    event SuccessBuyItem(\\n        address indexed _nftAddress,\\n        uint256 _tokenId,\\n        address indexed _seller,\\n        address indexed _buyer,\\n        uint256 _quantity,\\n        uint256 _price\\n    );\\n\\n    event CaughtFailureBuyItem(\\n        address indexed _nftAddress,\\n        uint256 _tokenId,\\n        address indexed _seller,\\n        address indexed _buyer,\\n        uint256 _quantity,\\n        uint256 _price,\\n        bytes _errorReason\\n    );\\n\\n    function buyItemsSingleToken(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address _inputTokenAddress,\\n        uint256 _maxSpendIncFees\\n    ) external payable;\\n\\n    function buyItemsManyTokens(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] calldata _inputTokenAddresses,\\n        uint256[] calldata _maxSpendIncFees\\n    ) external payable;\\n\\n    function sweepItemsSingleToken(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address _inputTokenAddress,\\n        uint256 _maxSpendIncFees,\\n        uint256 _minSpend,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    ) external payable;\\n\\n    function sweepItemsManyTokens(\\n        BuyItemParams[] calldata _buyOrders,\\n        uint16 _inputSettingsBitFlag,\\n        address[] calldata _inputTokenAddresses,\\n        uint256[] calldata _maxSpendIncFees,\\n        uint256[] calldata _minSpends,\\n        uint32 _maxSuccesses,\\n        uint32 _maxFailures\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/contracts/sweep/base/ABaseSmolSweeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\n//           _____                    _____                   _______                   _____            _____                    _____                    _____                    _____\\n//          /\\\\    \\\\                  /\\\\    \\\\                 /::\\\\    \\\\                 /\\\\    \\\\          /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\                  /\\\\    \\\\\\n//         /::\\\\    \\\\                /::\\\\____\\\\               /::::\\\\    \\\\               /::\\\\____\\\\        /::\\\\    \\\\                /::\\\\____\\\\                /::\\\\    \\\\                /::\\\\    \\\\\\n//        /::::\\\\    \\\\              /::::|   |              /::::::\\\\    \\\\             /:::/    /       /::::\\\\    \\\\              /:::/    /               /::::\\\\    \\\\              /::::\\\\    \\\\\\n//       /::::::\\\\    \\\\            /:::::|   |             /::::::::\\\\    \\\\           /:::/    /       /::::::\\\\    \\\\            /:::/   _/___            /::::::\\\\    \\\\            /::::::\\\\    \\\\\\n//      /:::/\\\\:::\\\\    \\\\          /::::::|   |            /:::/~~\\\\:::\\\\    \\\\         /:::/    /       /:::/\\\\:::\\\\    \\\\          /:::/   /\\\\    \\\\          /:::/\\\\:::\\\\    \\\\          /:::/\\\\:::\\\\    \\\\\\n//     /:::/__\\\\:::\\\\    \\\\        /:::/|::|   |           /:::/    \\\\:::\\\\    \\\\       /:::/    /       /:::/__\\\\:::\\\\    \\\\        /:::/   /::\\\\____\\\\        /:::/__\\\\:::\\\\    \\\\        /:::/__\\\\:::\\\\    \\\\\\n//     \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/ |::|   |          /:::/    / \\\\:::\\\\    \\\\     /:::/    /        \\\\:::\\\\   \\\\:::\\\\    \\\\      /:::/   /:::/    /       /::::\\\\   \\\\:::\\\\    \\\\      /::::\\\\   \\\\:::\\\\    \\\\\\n//   ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/  |::|___|______   /:::/____/   \\\\:::\\\\____\\\\   /:::/    /       ___\\\\:::\\\\   \\\\:::\\\\    \\\\    /:::/   /:::/   _/___    /::::::\\\\   \\\\:::\\\\    \\\\    /::::::\\\\   \\\\:::\\\\    \\\\\\n//  /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/   |::::::::\\\\    \\\\ |:::|    |     |:::|    | /:::/    /       /\\\\   \\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/___/:::/   /\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\    \\\\  /:::/\\\\:::\\\\   \\\\:::\\\\____\\\\\\n// /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/    |:::::::::\\\\____\\\\|:::|____|     |:::|    |/:::/____/       /::\\\\   \\\\:::\\\\   \\\\:::\\\\____\\\\|:::|   /:::/   /::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::\\\\____\\\\/:::/  \\\\:::\\\\   \\\\:::|    |\\n// \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /\\\\::/    / ~~~~~/:::/    / \\\\:::\\\\    \\\\   /:::/    / \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\::/    /|:::|__/:::/   /:::/    /\\\\::/    \\\\:::\\\\  /:::/    /\\\\::/    \\\\:::\\\\  /:::|____|\\n//  \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\/____/      /:::/    /   \\\\:::\\\\    \\\\ /:::/    /   \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\   \\\\/____/  \\\\:::\\\\/:::/   /:::/    /  \\\\/____/ \\\\:::\\\\/:::/    /  \\\\/_____/\\\\:::\\\\/:::/    /\\n//   \\\\:::\\\\   \\\\:::\\\\    \\\\                  /:::/    /     \\\\:::\\\\    /:::/    /     \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\    \\\\       \\\\::::::/   /:::/    /            \\\\::::::/    /            \\\\::::::/    /\\n//    \\\\:::\\\\   \\\\:::\\\\____\\\\                /:::/    /       \\\\:::\\\\__/:::/    /       \\\\:::\\\\    \\\\       \\\\:::\\\\   \\\\:::\\\\____\\\\       \\\\::::/___/:::/    /              \\\\::::/    /              \\\\::::/    /\\n//     \\\\:::\\\\  /:::/    /               /:::/    /         \\\\::::::::/    /         \\\\:::\\\\    \\\\       \\\\:::\\\\  /:::/    /        \\\\:::\\\\__/:::/    /               /:::/    /                \\\\::/____/\\n//      \\\\:::\\\\/:::/    /               /:::/    /           \\\\::::::/    /           \\\\:::\\\\    \\\\       \\\\:::\\\\/:::/    /          \\\\::::::::/    /               /:::/    /                  ~~\\n//       \\\\::::::/    /               /:::/    /             \\\\::::/    /             \\\\:::\\\\    \\\\       \\\\::::::/    /            \\\\::::::/    /               /:::/    /\\n//        \\\\::::/    /               /:::/    /               \\\\::/____/               \\\\:::\\\\____\\\\       \\\\::::/    /              \\\\::::/    /               /:::/    /\\n//         \\\\::/    /                \\\\::/    /                 ~~                      \\\\::/    /        \\\\::/    /                \\\\::/____/                \\\\::/    /\\n//          \\\\/____/                  \\\\/____/                                           \\\\/____/          \\\\/____/                  ~~                       \\\\/____/\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport \\\"../../token/ANFTReceiver.sol\\\";\\n\\nerror InvalidNFTAddress();\\nerror FirstBuyReverted(bytes message);\\nerror AllReverted();\\n\\nabstract contract ABaseSmolSweeper is Ownable, ANFTReceiver, ERC165 {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant FEE_BASIS_POINTS = 1_000_000;\\n    // uint256 public constant MINIMUM_SWEEP_AMOUNT_FOR_FEE = 1_000_000;\\n    uint256 public sweepFee = 0;\\n\\n    function _calculateFee(uint256 _amount) internal view returns (uint256) {\\n        return (_amount * sweepFee) / FEE_BASIS_POINTS;\\n    }\\n\\n    function calculateFee(uint256 _amount) external view returns (uint256) {\\n        return _calculateFee(_amount);\\n    }\\n\\n    function _calculateAmountWithoutFees(uint256 _amountWithFee)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return ((_amountWithFee * FEE_BASIS_POINTS) /\\n            (FEE_BASIS_POINTS + sweepFee));\\n    }\\n\\n    function calculateAmountAmountWithoutFees(uint256 _amountWithFee)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _calculateAmountWithoutFees(_amountWithFee);\\n    }\\n\\n    function _setFee(uint256 _fee) internal {\\n        sweepFee = _fee;\\n    }\\n\\n    function setFee(uint256 _fee) external onlyOwner {\\n        _setFee(_fee);\\n    }\\n\\n    function _approveERC20TokenToContract(\\n        IERC20 _token,\\n        address _contract,\\n        uint256 _amount\\n    ) internal {\\n        _token.safeApprove(address(_contract), uint256(_amount));\\n    }\\n\\n    function approveERC20TokenToContract(\\n        IERC20 _token,\\n        address _contract,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _approveERC20TokenToContract(_token, _contract, _amount);\\n    }\\n\\n    // rescue functions\\n    // those have not been tested yet\\n    function transferETHTo(address payable _to, uint256 _amount)\\n        external\\n        onlyOwner\\n    {\\n        _to.transfer(_amount);\\n    }\\n\\n    function transferERC20TokenTo(\\n        IERC20 _token,\\n        address _address,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        _token.safeTransfer(address(_address), uint256(_amount));\\n    }\\n\\n    function transferERC721To(\\n        IERC721 _token,\\n        address _to,\\n        uint256 _tokenId\\n    ) external onlyOwner {\\n        _token.safeTransferFrom(address(this), _to, _tokenId);\\n    }\\n\\n    function transferERC1155To(\\n        IERC1155 _token,\\n        address _to,\\n        uint256[] calldata _tokenIds,\\n        uint256[] calldata _amounts,\\n        bytes calldata _data\\n    ) external onlyOwner {\\n        _token.safeBatchTransferFrom(\\n            address(this),\\n            _to,\\n            _tokenIds,\\n            _amounts,\\n            _data\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/sweep/errors/BuyError.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/**\\r\\n * @dev Errors\\r\\n */\\r\\n\\r\\nenum BuyError {\\r\\n    NONE,\\r\\n    BUY_ITEM_REVERTED,\\r\\n    INSUFFICIENT_QUANTITY_ERC1155,\\r\\n    EXCEEDING_MAX_SPEND\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/token/ERC1155/AERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\n\\nabstract contract AERC1155Receiver is IERC1155Receiver {\\n    /**\\n     * Always returns `IERC1155Receiver.onERC1155ReceivedFrom.selector`.\\n     */\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * Always returns `IERC1155Receiver.onERC1155BatchReceived.selector`.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] calldata,\\n        uint256[] calldata,\\n        bytes calldata\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/token/ERC721/AERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\nabstract contract AERC721Receiver is IERC721Receiver {\\n    /**\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@cheatcodes/=src/cheatcodes/\",\r\n      \"@contracts/=src/contracts/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@forge-std/=lib/forge-std/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@test/=src/tests/\",\r\n      \"@uniswap/=node_modules/@uniswap/\",\r\n      \"@utils/=src/utils/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eth-gas-reporter/=node_modules/eth-gas-reporter/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"hardhat/=node_modules/hardhat/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-lib/=lib/solidity-lib/contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"v2-core/=lib/v2-core/contracts/\",\r\n      \"v2-periphery/=lib/v2-periphery/contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_troveMarketplace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_defaultPaymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AllReverted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"FirstBuyReverted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNFTAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgValueShouldBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_errorReason\",\"type\":\"bytes\"}],\"name\":\"CaughtFailureBuyItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"SuccessBuyItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveERC20TokenToContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"maxPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingEth\",\"type\":\"bool\"}],\"internalType\":\"struct BuyItemParams[]\",\"name\":\"_buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"_inputSettingsBitFlag\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"_inputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxSpendIncFees\",\"type\":\"uint256[]\"}],\"name\":\"buyItemsManyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"maxPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingEth\",\"type\":\"bool\"}],\"internalType\":\"struct BuyItemParams[]\",\"name\":\"_buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"_inputSettingsBitFlag\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpendIncFees\",\"type\":\"uint256\"}],\"name\":\"buyItemsSingleToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountWithFee\",\"type\":\"uint256\"}],\"name\":\"calculateAmountAmountWithoutFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPaymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_defaultPaymentToken\",\"type\":\"address\"}],\"name\":\"setDefaultPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveMarketplace\",\"name\":\"_troveMarketplace\",\"type\":\"address\"}],\"name\":\"setMarketplaceContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"maxPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingEth\",\"type\":\"bool\"}],\"internalType\":\"struct BuyItemParams[]\",\"name\":\"_buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"_inputSettingsBitFlag\",\"type\":\"uint16\"},{\"internalType\":\"address[]\",\"name\":\"_inputTokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxSpendIncFees\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minSpends\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32\",\"name\":\"_maxSuccesses\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxFailures\",\"type\":\"uint32\"}],\"name\":\"sweepItemsManyTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"maxPricePerItem\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"usingEth\",\"type\":\"bool\"}],\"internalType\":\"struct BuyItemParams[]\",\"name\":\"_buyOrders\",\"type\":\"tuple[]\"},{\"internalType\":\"uint16\",\"name\":\"_inputSettingsBitFlag\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_inputTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSpendIncFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_maxSuccesses\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxFailures\",\"type\":\"uint32\"}],\"name\":\"sweepItemsSingleToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC1155\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferERC1155To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20TokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721To\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferETHTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"troveMarketplace\",\"outputs\":[{\"internalType\":\"contract ITroveMarketplace\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"TroveSmolSweeper","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000068d25992b1b04be8a70104de8cb598170ab9aad5000000000000000000000000b0c7a3ba49c7a6eaba6cd4a96c55a1391070ac9a000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]