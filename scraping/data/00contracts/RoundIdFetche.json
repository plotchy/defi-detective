[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/RoundIdFetcher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.14;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\n/// @title Chainlink RoundId Fetcher\\n/// @dev Used to get historical pricing data from Chainlink data feeds\\ncontract RoundIdFetcher {\\n\\n    constructor() {}\\n\\n    /// @notice Gets the phase that contains the target time\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _targetTime Target time to fetch the round id for\\n    /// @return The first roundId of the phase that contains the target time\\n    /// @return The timestamp of the phase that contains the target time\\n    /// @return The first roundId of the current phase\\n    function getPhaseForTimestamp(AggregatorV2V3Interface _feed, uint256 _targetTime) public view returns (uint80, uint256, uint80) {\\n        uint16 currentPhase = uint16(_feed.latestRound() >> 64);\\n        uint80 firstRoundOfCurrentPhase = (uint80(currentPhase) << 64) + 1;\\n        \\n        for (uint16 phase = currentPhase; phase >= 1; phase--) {\\n            uint80 firstRoundOfPhase = (uint80(phase) << 64) + 1;\\n            uint256 firstTimeOfPhase = _feed.getTimestamp(firstRoundOfPhase);\\n\\n            if (_targetTime > firstTimeOfPhase) {\\n                return (firstRoundOfPhase, firstTimeOfPhase, firstRoundOfCurrentPhase);\\n            }\\n        }\\n        return (0,0, firstRoundOfCurrentPhase);\\n    }\\n\\n    /// @notice Performs a binary search on the data feed to find the first round id after the target time\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _targetTime Target time to fetch the round id for\\n    /// @param _lhRound Lower bound roundId (typically the first roundId of the targeted phase)\\n    /// @param _lhTime Lower bound timestamp (typically the first timestamp of the targeted phase)\\n    /// @param _rhRound Upper bound roundId (typically the last roundId of the targeted phase)\\n    /// @return targetRound The first roundId after the target timestamp\\n    function _binarySearchForTimestamp(AggregatorV2V3Interface _feed, uint256 _targetTime, uint80 _lhRound, uint256 _lhTime, uint80 _rhRound) public view returns (uint80 targetRound) {\\n\\n        if (_lhTime > _targetTime) return 0; // targetTime not in range\\n\\n        uint80 guessRound = _rhRound;\\n        while (_rhRound - _lhRound > 1) {\\n            guessRound = uint80(int80(_lhRound) + int80(_rhRound - _lhRound)/2);\\n            uint256 guessTime = _feed.getTimestamp(uint256(guessRound));\\n            if (guessTime == 0 || guessTime > _targetTime) {\\n                _rhRound = guessRound;\\n            } else if (guessTime < _targetTime) {\\n                (_lhRound, _lhTime) = (guessRound, guessTime);\\n            }\\n        }\\n        return guessRound;\\n    }\\n\\n    /// @notice Gets the round id for a given timestamp\\n    /// @param _feed Address of the chainlink data feed\\n    /// @param _timeStamp Target time to fetch the round id for\\n    /// @return roundId The roundId for the given timestamp\\n    function getRoundId(AggregatorV2V3Interface _feed, uint256 _timeStamp) public view returns (uint80 roundId) {\\n\\n        (uint80 lhRound, uint256 lhTime, uint80 firstRoundOfCurrentPhase) = getPhaseForTimestamp(_feed, _timeStamp);\\n\\n        uint80 rhRound;\\n        if (lhRound == 0) {\\n            // Date is too far in the past, no data available\\n            return 0;\\n        } else if (lhRound == firstRoundOfCurrentPhase) {\\n            (rhRound,,,,) = _feed.latestRoundData();\\n        } else {\\n            // No good way to get last round of phase from Chainlink feed, so our binary search function will have to use trial & error.\\n            // Use 2**16 == 65536 as a upper bound on the number of rounds to search in a single Chainlink phase.\\n            \\n            rhRound = lhRound + 2**16; \\n        } \\n\\n        uint80 foundRoundId = _binarySearchForTimestamp(_feed, _timeStamp, lhRound, lhTime, rhRound);\\n        roundId = getRoundIdForTimestamp(_feed, _timeStamp, foundRoundId, lhRound);\\n        \\n        return roundId;\\n    }\\n\\n    function getRoundIdForTimestamp(AggregatorV2V3Interface _feed, uint256 _timeStamp, uint80 _roundId, uint80 _firstRoundOfPhase) internal view returns (uint80) {\\n        uint256 roundTimeStamp = _feed.getTimestamp(_roundId);\\n\\n        if (roundTimeStamp > _timeStamp && _roundId > _firstRoundOfPhase) {\\n            _roundId = getRoundIdForTimestamp(_feed, _timeStamp, _roundId - 1, _firstRoundOfPhase);\\n        } else if (roundTimeStamp > _timeStamp && _roundId == _firstRoundOfPhase) {\\n            _roundId = 0;\\n        }\\n            return _roundId;\\n    }\\n}\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetTime\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_lhRound\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"_lhTime\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"_rhRound\",\"type\":\"uint80\"}],\"name\":\"_binarySearchForTimestamp\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"targetRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetTime\",\"type\":\"uint256\"}],\"name\":\"getPhaseForTimestamp\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV2V3Interface\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"getRoundId\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]","ContractName":"RoundIdFetcher","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]