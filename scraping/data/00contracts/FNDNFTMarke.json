[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/FNDNFTMarket.sol\": {\r\n      \"content\": \"/*\\n  ･\\n   *　★\\n      ･ ｡\\n        　･　ﾟ☆ ｡\\n  　　　 *　★ ﾟ･｡ *  ｡\\n          　　* ☆ ｡･ﾟ*.｡\\n      　　　ﾟ *.｡☆｡★　･\\n​\\n                      `                     .-:::::-.`              `-::---...```\\n                     `-:`               .:+ssssoooo++//:.`       .-/+shhhhhhhhhhhhhyyyssooo:\\n                    .--::.            .+ossso+/////++/:://-`   .////+shhhhhhhhhhhhhhhhhhhhhy\\n                  `-----::.         `/+////+++///+++/:--:/+/-  -////+shhhhhhhhhhhhhhhhhhhhhy\\n                 `------:::-`      `//-.``.-/+ooosso+:-.-/oso- -////+shhhhhhhhhhhhhhhhhhhhhy\\n                .--------:::-`     :+:.`  .-/osyyyyyyso++syhyo.-////+shhhhhhhhhhhhhhhhhhhhhy\\n              `-----------:::-.    +o+:-.-:/oyhhhhhhdhhhhhdddy:-////+shhhhhhhhhhhhhhhhhhhhhy\\n             .------------::::--  `oys+/::/+shhhhhhhdddddddddy/-////+shhhhhhhhhhhhhhhhhhhhhy\\n            .--------------:::::-` +ys+////+yhhhhhhhddddddddhy:-////+yhhhhhhhhhhhhhhhhhhhhhy\\n          `----------------::::::-`.ss+/:::+oyhhhhhhhhhhhhhhho`-////+shhhhhhhhhhhhhhhhhhhhhy\\n         .------------------:::::::.-so//::/+osyyyhhhhhhhhhys` -////+shhhhhhhhhhhhhhhhhhhhhy\\n       `.-------------------::/:::::..+o+////+oosssyyyyyyys+`  .////+shhhhhhhhhhhhhhhhhhhhhy\\n       .--------------------::/:::.`   -+o++++++oooosssss/.     `-//+shhhhhhhhhhhhhhhhhhhhyo\\n     .-------   ``````.......--`        `-/+ooooosso+/-`          `./++++///:::--...``hhhhyo\\n                                              `````\\n   *　\\n      ･ ｡\\n　　　　･　　ﾟ☆ ｡\\n  　　　 *　★ ﾟ･｡ *  ｡\\n          　　* ☆ ｡･ﾟ*.｡\\n      　　　ﾟ *.｡☆｡★　･\\n    *　　ﾟ｡·*･｡ ﾟ*\\n  　　　☆ﾟ･｡°*. ﾟ\\n　 ･ ﾟ*｡･ﾟ★｡\\n　　･ *ﾟ｡　　 *\\n　･ﾟ*｡★･\\n ☆∴｡　*\\n･ ｡\\n*/\\n\\n// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2; // solhint-disable-line\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./mixins/FoundationTreasuryNode.sol\\\";\\nimport \\\"./mixins/roles/FoundationAdminRole.sol\\\";\\nimport \\\"./mixins/roles/FoundationOperatorRole.sol\\\";\\nimport \\\"./mixins/NFTMarketCore.sol\\\";\\nimport \\\"./mixins/SendValueWithFallbackWithdraw.sol\\\";\\nimport \\\"./mixins/NFTMarketCreators.sol\\\";\\nimport \\\"./mixins/NFTMarketFees.sol\\\";\\nimport \\\"./mixins/NFTMarketAuction.sol\\\";\\nimport \\\"./mixins/NFTMarketReserveAuction.sol\\\";\\nimport \\\"./mixins/AccountMigration.sol\\\";\\nimport \\\"./mixins/NFTMarketPrivateSale.sol\\\";\\n\\n/**\\n * @title A market for NFTs on Foundation.\\n * @dev This top level file holds no data directly to ease future upgrades.\\n */\\ncontract FNDNFTMarket is\\n  FoundationTreasuryNode,\\n  FoundationAdminRole,\\n  FoundationOperatorRole,\\n  AccountMigration,\\n  NFTMarketCore,\\n  ReentrancyGuardUpgradeable,\\n  NFTMarketCreators,\\n  SendValueWithFallbackWithdraw,\\n  NFTMarketFees,\\n  NFTMarketAuction,\\n  NFTMarketReserveAuction,\\n  NFTMarketPrivateSale\\n{\\n  /**\\n   * @notice Called once to configure the contract after the initial deployment.\\n   * @dev This farms the initialize call out to inherited contracts as needed.\\n   */\\n  function initialize(address payable treasury) public initializer {\\n    FoundationTreasuryNode._initializeFoundationTreasuryNode(treasury);\\n    NFTMarketAuction._initializeNFTMarketAuction();\\n    NFTMarketReserveAuction._initializeNFTMarketReserveAuction();\\n  }\\n\\n  /**\\n   * @notice Allows Foundation to update the market configuration.\\n   */\\n  function adminUpdateConfig(\\n    uint256 minPercentIncrementInBasisPoints,\\n    uint256 duration,\\n    uint256 primaryF8nFeeBasisPoints,\\n    uint256 secondaryF8nFeeBasisPoints,\\n    uint256 secondaryCreatorFeeBasisPoints\\n  ) public onlyFoundationAdmin {\\n    // It's okay to call _reinitialize multiple times, but it must be called at least once after upgrade\\n    _reinitialize();\\n    _updateReserveAuctionConfig(minPercentIncrementInBasisPoints, duration);\\n    _updateMarketFees(primaryF8nFeeBasisPoints, secondaryF8nFeeBasisPoints, secondaryCreatorFeeBasisPoints);\\n  }\\n\\n  /**\\n   * @dev Checks who the seller for an NFT is, this will check escrow or return the current owner if not in escrow.\\n   * This is a no-op function required to avoid compile errors.\\n   */\\n  function _getSellerFor(address nftContract, uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    override(NFTMarketCore, NFTMarketReserveAuction)\\n    returns (address payable)\\n  {\\n    return super._getSellerFor(nftContract, tokenId);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/FoundationTreasuryNode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @notice A mixin that stores a reference to the Foundation treasury contract.\\n */\\nabstract contract FoundationTreasuryNode is Initializable {\\n  using AddressUpgradeable for address payable;\\n\\n  address payable private treasury;\\n\\n  /**\\n   * @dev Called once after the initial deployment to set the Foundation treasury address.\\n   */\\n  function _initializeFoundationTreasuryNode(address payable _treasury) internal initializer {\\n    require(_treasury.isContract(), \\\"FoundationTreasuryNode: Address is not a contract\\\");\\n    treasury = _treasury;\\n  }\\n\\n  /**\\n   * @notice Returns the address of the Foundation treasury.\\n   */\\n  function getFoundationTreasury() public view returns (address payable) {\\n    return treasury;\\n  }\\n\\n  // `______gap` is added to each mixin to allow adding new data slots or additional mixins in an upgrade-safe way.\\n  uint256[2000] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/roles/FoundationAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../interfaces/IAdminRole.sol\\\";\\n\\nimport \\\"../FoundationTreasuryNode.sol\\\";\\n\\n/**\\n * @notice Allows a contract to leverage the admin role defined by the Foundation treasury.\\n */\\nabstract contract FoundationAdminRole is FoundationTreasuryNode {\\n  // This file uses 0 data slots (other than what's included via FoundationTreasuryNode)\\n\\n  modifier onlyFoundationAdmin() {\\n    require(_isFoundationAdmin(), \\\"FoundationAdminRole: caller does not have the Admin role\\\");\\n    _;\\n  }\\n\\n  function _isFoundationAdmin() internal view returns (bool) {\\n    return IAdminRole(getFoundationTreasury()).isAdmin(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/roles/FoundationOperatorRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../interfaces/IOperatorRole.sol\\\";\\n\\nimport \\\"../FoundationTreasuryNode.sol\\\";\\n\\n/**\\n * @notice Allows a contract to leverage the operator role defined by the Foundation treasury.\\n */\\nabstract contract FoundationOperatorRole is FoundationTreasuryNode {\\n  // This file uses 0 data slots (other than what's included via FoundationTreasuryNode)\\n\\n  function _isFoundationOperator() internal view returns (bool) {\\n    return IOperatorRole(getFoundationTreasury()).isOperator(msg.sender);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @notice A place for common modifiers and functions used by various NFTMarket mixins, if any.\\n * @dev This also leaves a gap which can be used to add a new mixin to the top of the inheritance tree.\\n */\\nabstract contract NFTMarketCore {\\n  /**\\n   * @dev If the auction did not have an escrowed seller to return, this falls back to return the current owner.\\n   * This allows functions to calculate the correct fees before the NFT has been listed in auction.\\n   */\\n  function _getSellerFor(address nftContract, uint256 tokenId) internal view virtual returns (address payable) {\\n    return payable(IERC721Upgradeable(nftContract).ownerOf(tokenId));\\n  }\\n\\n  // 50 slots were consumed by adding ReentrancyGuardUpgradeable\\n  uint256[950] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/SendValueWithFallbackWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @notice Attempt to send ETH and if the transfer fails or runs out of gas, store the balance\\n * for future withdrawal instead.\\n */\\nabstract contract SendValueWithFallbackWithdraw is ReentrancyGuardUpgradeable {\\n  using AddressUpgradeable for address payable;\\n  using SafeMathUpgradeable for uint256;\\n\\n  mapping(address => uint256) private pendingWithdrawals;\\n\\n  event WithdrawPending(address indexed user, uint256 amount);\\n  event Withdrawal(address indexed user, uint256 amount);\\n\\n  /**\\n   * @notice Returns how much funds are available for manual withdraw due to failed transfers.\\n   */\\n  function getPendingWithdrawal(address user) public view returns (uint256) {\\n    return pendingWithdrawals[user];\\n  }\\n\\n  /**\\n   * @notice Allows a user to manually withdraw funds which originally failed to transfer to themselves.\\n   */\\n  function withdraw() public {\\n    withdrawFor(msg.sender);\\n  }\\n\\n  /**\\n   * @notice Allows anyone to manually trigger a withdrawal of funds which originally failed to transfer for a user.\\n   */\\n  function withdrawFor(address payable user) public nonReentrant {\\n    uint256 amount = pendingWithdrawals[user];\\n    require(amount > 0, \\\"No funds are pending withdrawal\\\");\\n    pendingWithdrawals[user] = 0;\\n    user.sendValue(amount);\\n    emit Withdrawal(user, amount);\\n  }\\n\\n  /**\\n   * @dev Attempt to send a user ETH with a reasonably low gas limit of 20k,\\n   * which is enough to send to contracts as well.\\n   */\\n  function _sendValueWithFallbackWithdrawWithLowGasLimit(address payable user, uint256 amount) internal {\\n    _sendValueWithFallbackWithdraw(user, amount, 20000);\\n  }\\n\\n  /**\\n   * @dev Attempt to send a user or contract ETH with a moderate gas limit of 90k,\\n   * which is enough for a 5-way split.\\n   */\\n  function _sendValueWithFallbackWithdrawWithMediumGasLimit(address payable user, uint256 amount) internal {\\n    _sendValueWithFallbackWithdraw(user, amount, 210000);\\n  }\\n\\n  /**\\n   * @dev Attempt to send a user or contract ETH and if it fails store the amount owned for later withdrawal.\\n   */\\n  function _sendValueWithFallbackWithdraw(\\n    address payable user,\\n    uint256 amount,\\n    uint256 gasLimit\\n  ) private {\\n    if (amount == 0) {\\n      return;\\n    }\\n    // Cap the gas to prevent consuming all available gas to block a tx from completing successfully\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = user.call{ value: amount, gas: gasLimit }(\\\"\\\");\\n    if (!success) {\\n      // Record failed sends for a withdrawal later\\n      // Transfers could fail if sent to a multisig with non-trivial receiver logic\\n      // solhint-disable-next-line reentrancy\\n      pendingWithdrawals[user] = pendingWithdrawals[user].add(amount);\\n      emit WithdrawPending(user, amount);\\n    }\\n  }\\n\\n  uint256[499] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketCreators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IFNDNFT721.sol\\\";\\nimport \\\"../interfaces/ITokenCreatorPaymentAddress.sol\\\";\\nimport \\\"../interfaces/ITokenCreator.sol\\\";\\nimport \\\"../interfaces/IGetRoyalties.sol\\\";\\nimport \\\"../interfaces/IHasSecondarySaleFees.sol\\\";\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"./OZ/ERC165Checker.sol\\\";\\n\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @notice A mixin for associating creators to NFTs.\\n * @dev In the future this may store creators directly in order to support NFTs created on a different platform.\\n */\\nabstract contract NFTMarketCreators is\\n  Constants,\\n  ReentrancyGuardUpgradeable // Adding this unused mixin to help with linearization\\n{\\n  using ERC165Checker for address;\\n\\n  /**\\n   * @dev Returns the destination address for any payments to the creator,\\n   * or address(0) if the destination is unknown.\\n   * It also checks if the current seller is the creator for isPrimary checks.\\n   */\\n  // solhint-disable-next-line code-complexity\\n  function _getCreatorPaymentInfo(\\n    address nftContract,\\n    uint256 tokenId,\\n    address seller\\n  )\\n    internal\\n    view\\n    returns (\\n      address payable[] memory recipients,\\n      uint256[] memory splitPerRecipientInBasisPoints,\\n      bool isCreator\\n    )\\n  {\\n    // All NFTs implement 165 so we skip that check, individual interfaces should return false if 165 is not implemented\\n\\n    // 1st priority: getTokenCreatorPaymentAddress w/ 165\\n    if (nftContract.supportsERC165Interface(type(ITokenCreatorPaymentAddress).interfaceId)) {\\n      try\\n        ITokenCreatorPaymentAddress(nftContract).getTokenCreatorPaymentAddress{ gas: READ_ONLY_GAS_LIMIT }(tokenId)\\n      returns (address payable tokenCreatorPaymentAddress) {\\n        if (tokenCreatorPaymentAddress != address(0)) {\\n          recipients = new address payable[](1);\\n          recipients[0] = tokenCreatorPaymentAddress;\\n          if (tokenCreatorPaymentAddress == seller) {\\n            // splitPerRecipientInBasisPoints is not relevant when only 1 recipient is defined\\n            return (recipients, splitPerRecipientInBasisPoints, true);\\n          }\\n          // else persist recipients but look for other isCreator definitions\\n        }\\n      } catch // solhint-disable-next-line no-empty-blocks\\n      {\\n        // Fall through\\n      }\\n    }\\n\\n    // 2nd priority: tokenCreator w/ 165\\n    if (nftContract.supportsERC165Interface(type(ITokenCreator).interfaceId)) {\\n      try IFNDNFT721(nftContract).tokenCreator{ gas: READ_ONLY_GAS_LIMIT }(tokenId) returns (address payable _creator) {\\n        if (_creator != address(0)) {\\n          if (recipients.length == 0) {\\n            // Only pay the tokenCreator if there wasn't a tokenCreatorPaymentAddress defined\\n            recipients = new address payable[](1);\\n            recipients[0] = _creator;\\n          }\\n          // splitPerRecipientInBasisPoints is not relevant when only 1 recipient is defined\\n          return (recipients, splitPerRecipientInBasisPoints, _creator == seller);\\n        }\\n      } catch // solhint-disable-next-line no-empty-blocks\\n      {\\n        // Fall through\\n      }\\n    }\\n\\n    // 3rd priority: getRoyalties\\n    if (recipients.length == 0 && nftContract.supportsERC165Interface(type(IGetRoyalties).interfaceId)) {\\n      try IGetRoyalties(nftContract).getRoyalties{ gas: READ_ONLY_GAS_LIMIT }(tokenId) returns (\\n        address payable[] memory _recipients,\\n        uint256[] memory recipientBasisPoints\\n      ) {\\n        if (_recipients.length > 0 && _recipients.length == recipientBasisPoints.length) {\\n          bool hasRecipient = false;\\n          for (uint256 i = 0; i < _recipients.length; i++) {\\n            if (_recipients[i] != address(0)) {\\n              hasRecipient = true;\\n              if (_recipients[i] == seller) {\\n                isCreator = true;\\n              }\\n            }\\n          }\\n          if (hasRecipient) {\\n            return (_recipients, recipientBasisPoints, isCreator);\\n          }\\n        }\\n      } catch // solhint-disable-next-line no-empty-blocks\\n      {\\n        // Fall through\\n      }\\n    }\\n\\n    // 4th priority: getFee*\\n    if (recipients.length == 0 && nftContract.supportsERC165Interface(type(IHasSecondarySaleFees).interfaceId)) {\\n      try IHasSecondarySaleFees(nftContract).getFeeRecipients{ gas: READ_ONLY_GAS_LIMIT }(tokenId) returns (\\n        address payable[] memory _recipients\\n      ) {\\n        if (_recipients.length > 0) {\\n          try IHasSecondarySaleFees(nftContract).getFeeBps{ gas: READ_ONLY_GAS_LIMIT }(tokenId) returns (\\n            uint256[] memory recipientBasisPoints\\n          ) {\\n            if (_recipients.length == recipientBasisPoints.length) {\\n              bool hasRecipient = false;\\n              for (uint256 i = 0; i < _recipients.length; i++) {\\n                if (_recipients[i] != address(0)) {\\n                  hasRecipient = true;\\n                  if (_recipients[i] == seller) {\\n                    isCreator = true;\\n                  }\\n                }\\n              }\\n              if (hasRecipient) {\\n                return (_recipients, recipientBasisPoints, isCreator);\\n              }\\n            }\\n          } catch // solhint-disable-next-line no-empty-blocks\\n          {\\n            // Fall through\\n          }\\n        }\\n      } catch // solhint-disable-next-line no-empty-blocks\\n      {\\n        // Fall through\\n      }\\n    }\\n\\n    // 5th priority: owner\\n    try IOwnable(nftContract).owner{ gas: READ_ONLY_GAS_LIMIT }() returns (address owner) {\\n      if (owner != address(0)) {\\n        if (recipients.length == 0) {\\n          // Only pay the owner if there wasn't a tokenCreatorPaymentAddress defined\\n          recipients = new address payable[](1);\\n          recipients[0] = payable(owner);\\n        }\\n        // splitPerRecipientInBasisPoints is not relevant when only 1 recipient is defined\\n        return (recipients, splitPerRecipientInBasisPoints, owner == seller);\\n      }\\n    } catch // solhint-disable-next-line no-empty-blocks\\n    {\\n      // Fall through\\n    }\\n\\n    // 6th priority: tokenCreator w/o requiring 165\\n    try IFNDNFT721(nftContract).tokenCreator{ gas: READ_ONLY_GAS_LIMIT }(tokenId) returns (address payable _creator) {\\n      if (_creator != address(0)) {\\n        if (recipients.length == 0) {\\n          // Only pay the tokenCreator if there wasn't a tokenCreatorPaymentAddress defined\\n          recipients = new address payable[](1);\\n          recipients[0] = _creator;\\n        }\\n        // splitPerRecipientInBasisPoints is not relevant when only 1 recipient is defined\\n        return (recipients, splitPerRecipientInBasisPoints, _creator == seller);\\n      }\\n    } catch // solhint-disable-next-line no-empty-blocks\\n    {\\n      // Fall through\\n    }\\n\\n    // If no valid payment address or creator is found, return 0 recipients\\n  }\\n\\n  // 500 slots were added via the new SendValueWithFallbackWithdraw mixin\\n  uint256[500] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport \\\"./FoundationTreasuryNode.sol\\\";\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./NFTMarketCore.sol\\\";\\nimport \\\"./NFTMarketCreators.sol\\\";\\nimport \\\"./SendValueWithFallbackWithdraw.sol\\\";\\n\\n/**\\n * @notice A mixin to distribute funds when an NFT is sold.\\n */\\nabstract contract NFTMarketFees is\\n  Constants,\\n  Initializable,\\n  FoundationTreasuryNode,\\n  NFTMarketCore,\\n  NFTMarketCreators,\\n  SendValueWithFallbackWithdraw\\n{\\n  using SafeMathUpgradeable for uint256;\\n\\n  uint256 private _primaryFoundationFeeBasisPoints;\\n  uint256 private _secondaryFoundationFeeBasisPoints;\\n  uint256 private _secondaryCreatorFeeBasisPoints;\\n\\n  mapping(address => mapping(uint256 => bool)) private nftContractToTokenIdToFirstSaleCompleted;\\n\\n  event MarketFeesUpdated(\\n    uint256 primaryFoundationFeeBasisPoints,\\n    uint256 secondaryFoundationFeeBasisPoints,\\n    uint256 secondaryCreatorFeeBasisPoints\\n  );\\n\\n  /**\\n   * @notice Returns true if the given NFT has not been sold in this market previously and is being sold by the creator.\\n   */\\n  function getIsPrimary(address nftContract, uint256 tokenId) public view returns (bool isPrimary) {\\n    address payable seller = _getSellerFor(nftContract, tokenId);\\n    bool isCreator;\\n    (, , isCreator) = _getCreatorPaymentInfo(nftContract, tokenId, seller);\\n    isPrimary = isCreator && !nftContractToTokenIdToFirstSaleCompleted[nftContract][tokenId];\\n  }\\n\\n  /**\\n   * @notice Returns the current fee configuration in basis points.\\n   */\\n  function getFeeConfig()\\n    public\\n    view\\n    returns (\\n      uint256 primaryFoundationFeeBasisPoints,\\n      uint256 secondaryFoundationFeeBasisPoints,\\n      uint256 secondaryCreatorFeeBasisPoints\\n    )\\n  {\\n    return (_primaryFoundationFeeBasisPoints, _secondaryFoundationFeeBasisPoints, _secondaryCreatorFeeBasisPoints);\\n  }\\n\\n  /**\\n   * @notice Returns how funds will be distributed for an Auction sale at the given price point.\\n   * @dev This is required for backwards compatibility with subgraph.\\n   */\\n  function getFees(\\n    address nftContract,\\n    uint256 tokenId,\\n    uint256 price\\n  )\\n    public\\n    view\\n    returns (\\n      uint256 foundationFee,\\n      uint256 creatorRev,\\n      uint256 ownerRev\\n    )\\n  {\\n    address payable seller = _getSellerFor(nftContract, tokenId);\\n    (foundationFee, , , creatorRev, , ownerRev) = _getFees(nftContract, tokenId, seller, price);\\n  }\\n\\n  /**\\n   * @dev Calculates how funds should be distributed for the given sale details.\\n   */\\n  function _getFees(\\n    address nftContract,\\n    uint256 tokenId,\\n    address payable seller,\\n    uint256 price\\n  )\\n    private\\n    view\\n    returns (\\n      uint256 foundationFee,\\n      address payable[] memory creatorRecipients,\\n      uint256[] memory creatorShares,\\n      uint256 creatorRev,\\n      address payable ownerRevTo,\\n      uint256 ownerRev\\n    )\\n  {\\n    bool isCreator;\\n    (creatorRecipients, creatorShares, isCreator) = _getCreatorPaymentInfo(nftContract, tokenId, seller);\\n    bool isPrimary = isCreator && !nftContractToTokenIdToFirstSaleCompleted[nftContract][tokenId];\\n\\n    // The SafeMath usage below should only be applicable if a huge (unrealistic) price is used\\n    // or fees are misconfigured.\\n\\n    // Calculate the Foundation fee\\n    foundationFee =\\n      price.mul(isPrimary ? _primaryFoundationFeeBasisPoints : _secondaryFoundationFeeBasisPoints) /\\n      BASIS_POINTS;\\n\\n    // Calculate the Creator revenue.\\n    if (isPrimary) {\\n      creatorRev = price.sub(foundationFee);\\n      // The owner is the creator so ownerRev is not broken out here.\\n    } else {\\n      if (creatorRecipients.length > 0) {\\n        if (isCreator) {\\n          // Non-primary sales by the creator should go to the payment address.\\n          creatorRev = price.sub(foundationFee);\\n        } else {\\n          creatorRev = price.mul(_secondaryCreatorFeeBasisPoints) / BASIS_POINTS;\\n          // If a secondary sale, calculate the owner revenue.\\n          ownerRevTo = seller;\\n          ownerRev = price.sub(foundationFee).sub(creatorRev);\\n        }\\n      } else {\\n        // If a secondary sale, calculate the owner revenue.\\n        ownerRevTo = seller;\\n        ownerRev = price.sub(foundationFee);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Distributes funds to foundation, creator, and NFT owner after a sale.\\n   * This call will respect the creator's payment address if defined.\\n   */\\n  // solhint-disable-next-line code-complexity\\n  function _distributeFunds(\\n    address nftContract,\\n    uint256 tokenId,\\n    address payable seller,\\n    uint256 price\\n  )\\n    internal\\n    returns (\\n      uint256 foundationFee,\\n      uint256 creatorFee,\\n      uint256 ownerRev\\n    )\\n  {\\n    address payable[] memory creatorRecipients;\\n    uint256[] memory creatorShares;\\n\\n    address payable ownerRevTo;\\n    (foundationFee, creatorRecipients, creatorShares, creatorFee, ownerRevTo, ownerRev) = _getFees(\\n      nftContract,\\n      tokenId,\\n      seller,\\n      price\\n    );\\n\\n    // Anytime fees are distributed that indicates the first sale is complete,\\n    // which will not change state during a secondary sale.\\n    // This must come after the `_getFees` call above as this state is considered in the function.\\n    nftContractToTokenIdToFirstSaleCompleted[nftContract][tokenId] = true;\\n\\n    _sendValueWithFallbackWithdrawWithLowGasLimit(getFoundationTreasury(), foundationFee);\\n\\n    if (creatorFee > 0) {\\n      if (creatorRecipients.length > 1) {\\n        uint256 maxCreatorIndex = creatorRecipients.length - 1;\\n        if (maxCreatorIndex > MAX_CREATOR_INDEX) {\\n          maxCreatorIndex = MAX_CREATOR_INDEX;\\n        }\\n\\n        // Determine the total shares defined so it can be leveraged to distribute below\\n        uint256 totalShares;\\n        for (uint256 i = 0; i <= maxCreatorIndex; i++) {\\n          if (creatorShares[i] > BASIS_POINTS) {\\n            // If the numbers are >100% we ignore the fee recipients and pay just the first instead\\n            maxCreatorIndex = 0;\\n            break;\\n          }\\n          totalShares = totalShares.add(creatorShares[i]);\\n        }\\n        if (totalShares == 0) {\\n          maxCreatorIndex = 0;\\n        }\\n\\n        // Send payouts to each additional recipient if more than 1 was defined\\n        uint256 totalDistributed;\\n        for (uint256 i = 1; i <= maxCreatorIndex; i++) {\\n          uint256 share = (creatorFee.mul(creatorShares[i])) / totalShares;\\n          totalDistributed = totalDistributed.add(share);\\n          _sendValueWithFallbackWithdrawWithMediumGasLimit(creatorRecipients[i], share);\\n        }\\n\\n        // Send the remainder to the 1st creator, rounding in their favor\\n        _sendValueWithFallbackWithdrawWithMediumGasLimit(creatorRecipients[0], creatorFee.sub(totalDistributed));\\n      } else {\\n        _sendValueWithFallbackWithdrawWithMediumGasLimit(creatorRecipients[0], creatorFee);\\n      }\\n    }\\n    _sendValueWithFallbackWithdrawWithMediumGasLimit(ownerRevTo, ownerRev);\\n  }\\n\\n  /**\\n   * @notice Allows Foundation to change the market fees.\\n   */\\n  function _updateMarketFees(\\n    uint256 primaryFoundationFeeBasisPoints,\\n    uint256 secondaryFoundationFeeBasisPoints,\\n    uint256 secondaryCreatorFeeBasisPoints\\n  ) internal {\\n    require(primaryFoundationFeeBasisPoints < BASIS_POINTS, \\\"NFTMarketFees: Fees >= 100%\\\");\\n    require(\\n      secondaryFoundationFeeBasisPoints.add(secondaryCreatorFeeBasisPoints) < BASIS_POINTS,\\n      \\\"NFTMarketFees: Fees >= 100%\\\"\\n    );\\n    _primaryFoundationFeeBasisPoints = primaryFoundationFeeBasisPoints;\\n    _secondaryFoundationFeeBasisPoints = secondaryFoundationFeeBasisPoints;\\n    _secondaryCreatorFeeBasisPoints = secondaryCreatorFeeBasisPoints;\\n\\n    emit MarketFeesUpdated(\\n      primaryFoundationFeeBasisPoints,\\n      secondaryFoundationFeeBasisPoints,\\n      secondaryCreatorFeeBasisPoints\\n    );\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice An abstraction layer for auctions.\\n * @dev This contract can be expanded with reusable calls and data as more auction types are added.\\n */\\nabstract contract NFTMarketAuction {\\n  /**\\n   * @dev A global id for auctions of any type.\\n   */\\n  uint256 private nextAuctionId;\\n\\n  function _initializeNFTMarketAuction() internal {\\n    nextAuctionId = 1;\\n  }\\n\\n  function _getNextAndIncrementAuctionId() internal returns (uint256) {\\n    return nextAuctionId++;\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketReserveAuction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\npragma abicoder v2; // solhint-disable-line\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./Constants.sol\\\";\\nimport \\\"./NFTMarketCore.sol\\\";\\nimport \\\"./NFTMarketFees.sol\\\";\\nimport \\\"./SendValueWithFallbackWithdraw.sol\\\";\\nimport \\\"./NFTMarketAuction.sol\\\";\\nimport \\\"./roles/FoundationAdminRole.sol\\\";\\nimport \\\"./AccountMigration.sol\\\";\\n\\n/**\\n * @notice Manages a reserve price auction for NFTs.\\n */\\nabstract contract NFTMarketReserveAuction is\\n  Constants,\\n  FoundationAdminRole,\\n  AccountMigration,\\n  NFTMarketCore,\\n  ReentrancyGuardUpgradeable,\\n  SendValueWithFallbackWithdraw,\\n  NFTMarketFees,\\n  NFTMarketAuction\\n{\\n  using SafeMathUpgradeable for uint256;\\n\\n  struct ReserveAuction {\\n    address nftContract;\\n    uint256 tokenId;\\n    address payable seller;\\n    uint256 duration;\\n    uint256 extensionDuration;\\n    uint256 endTime;\\n    address payable bidder;\\n    uint256 amount;\\n  }\\n\\n  mapping(address => mapping(uint256 => uint256)) private nftContractToTokenIdToAuctionId;\\n  mapping(uint256 => ReserveAuction) private auctionIdToAuction;\\n\\n  uint256 private _minPercentIncrementInBasisPoints;\\n\\n  // This variable was used in an older version of the contract, left here as a gap to ensure upgrade compatibility\\n  uint256 private ______gap_was_maxBidIncrementRequirement;\\n\\n  uint256 private _duration;\\n\\n  // These variables were used in an older version of the contract, left here as gaps to ensure upgrade compatibility\\n  uint256 private ______gap_was_extensionDuration;\\n  uint256 private ______gap_was_goLiveDate;\\n\\n  // Cap the max duration so that overflows will not occur\\n  uint256 private constant MAX_MAX_DURATION = 1000 days;\\n\\n  uint256 private constant EXTENSION_DURATION = 15 minutes;\\n\\n  event ReserveAuctionConfigUpdated(\\n    uint256 minPercentIncrementInBasisPoints,\\n    uint256 maxBidIncrementRequirement,\\n    uint256 duration,\\n    uint256 extensionDuration,\\n    uint256 goLiveDate\\n  );\\n\\n  event ReserveAuctionCreated(\\n    address indexed seller,\\n    address indexed nftContract,\\n    uint256 indexed tokenId,\\n    uint256 duration,\\n    uint256 extensionDuration,\\n    uint256 reservePrice,\\n    uint256 auctionId\\n  );\\n  event ReserveAuctionUpdated(uint256 indexed auctionId, uint256 reservePrice);\\n  event ReserveAuctionCanceled(uint256 indexed auctionId);\\n  event ReserveAuctionBidPlaced(uint256 indexed auctionId, address indexed bidder, uint256 amount, uint256 endTime);\\n  event ReserveAuctionFinalized(\\n    uint256 indexed auctionId,\\n    address indexed seller,\\n    address indexed bidder,\\n    uint256 f8nFee,\\n    uint256 creatorFee,\\n    uint256 ownerRev\\n  );\\n  event ReserveAuctionCanceledByAdmin(uint256 indexed auctionId, string reason);\\n  event ReserveAuctionSellerMigrated(\\n    uint256 indexed auctionId,\\n    address indexed originalSellerAddress,\\n    address indexed newSellerAddress\\n  );\\n\\n  modifier onlyValidAuctionConfig(uint256 reservePrice) {\\n    require(reservePrice > 0, \\\"NFTMarketReserveAuction: Reserve price must be at least 1 wei\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Returns auction details for a given auctionId.\\n   */\\n  function getReserveAuction(uint256 auctionId) public view returns (ReserveAuction memory) {\\n    return auctionIdToAuction[auctionId];\\n  }\\n\\n  /**\\n   * @notice Returns the auctionId for a given NFT, or 0 if no auction is found.\\n   * @dev If an auction is canceled, it will not be returned. However the auction may be over and pending finalization.\\n   */\\n  function getReserveAuctionIdFor(address nftContract, uint256 tokenId) public view returns (uint256) {\\n    return nftContractToTokenIdToAuctionId[nftContract][tokenId];\\n  }\\n\\n  /**\\n   * @dev Returns the seller that put a given NFT into escrow,\\n   * or bubbles the call up to check the current owner if the NFT is not currently in escrow.\\n   */\\n  function _getSellerFor(address nftContract, uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    override\\n    returns (address payable seller)\\n  {\\n    seller = auctionIdToAuction[nftContractToTokenIdToAuctionId[nftContract][tokenId]].seller;\\n    if (seller == address(0)) {\\n      return super._getSellerFor(nftContract, tokenId);\\n    }\\n  }\\n\\n  /**\\n   * @notice Returns the current configuration for reserve auctions.\\n   */\\n  function getReserveAuctionConfig() public view returns (uint256 minPercentIncrementInBasisPoints, uint256 duration) {\\n    minPercentIncrementInBasisPoints = _minPercentIncrementInBasisPoints;\\n    duration = _duration;\\n  }\\n\\n  function _initializeNFTMarketReserveAuction() internal {\\n    _duration = 24 hours; // A sensible default value\\n  }\\n\\n  function _updateReserveAuctionConfig(uint256 minPercentIncrementInBasisPoints, uint256 duration) internal {\\n    require(minPercentIncrementInBasisPoints <= BASIS_POINTS, \\\"NFTMarketReserveAuction: Min increment must be <= 100%\\\");\\n    // Cap the max duration so that overflows will not occur\\n    require(duration <= MAX_MAX_DURATION, \\\"NFTMarketReserveAuction: Duration must be <= 1000 days\\\");\\n    require(duration >= EXTENSION_DURATION, \\\"NFTMarketReserveAuction: Duration must be >= EXTENSION_DURATION\\\");\\n    _minPercentIncrementInBasisPoints = minPercentIncrementInBasisPoints;\\n    _duration = duration;\\n\\n    // We continue to emit unused configuration variables to simplify the subgraph integration.\\n    emit ReserveAuctionConfigUpdated(minPercentIncrementInBasisPoints, 0, duration, EXTENSION_DURATION, 0);\\n  }\\n\\n  /**\\n   * @notice Creates an auction for the given NFT.\\n   * The NFT is held in escrow until the auction is finalized or canceled.\\n   */\\n  function createReserveAuction(\\n    address nftContract,\\n    uint256 tokenId,\\n    uint256 reservePrice\\n  ) public onlyValidAuctionConfig(reservePrice) nonReentrant {\\n    // If an auction is already in progress then the NFT would be in escrow and the modifier would have failed\\n    uint256 auctionId = _getNextAndIncrementAuctionId();\\n    nftContractToTokenIdToAuctionId[nftContract][tokenId] = auctionId;\\n    auctionIdToAuction[auctionId] = ReserveAuction(\\n      nftContract,\\n      tokenId,\\n      msg.sender,\\n      _duration,\\n      EXTENSION_DURATION,\\n      0, // endTime is only known once the reserve price is met\\n      address(0), // bidder is only known once a bid has been placed\\n      reservePrice\\n    );\\n\\n    IERC721Upgradeable(nftContract).transferFrom(msg.sender, address(this), tokenId);\\n\\n    emit ReserveAuctionCreated(\\n      msg.sender,\\n      nftContract,\\n      tokenId,\\n      _duration,\\n      EXTENSION_DURATION,\\n      reservePrice,\\n      auctionId\\n    );\\n  }\\n\\n  /**\\n   * @notice If an auction has been created but has not yet received bids, the configuration\\n   * such as the reservePrice may be changed by the seller.\\n   */\\n  function updateReserveAuction(uint256 auctionId, uint256 reservePrice) public onlyValidAuctionConfig(reservePrice) {\\n    ReserveAuction storage auction = auctionIdToAuction[auctionId];\\n    require(auction.seller == msg.sender, \\\"NFTMarketReserveAuction: Not your auction\\\");\\n    require(auction.endTime == 0, \\\"NFTMarketReserveAuction: Auction in progress\\\");\\n\\n    auction.amount = reservePrice;\\n\\n    emit ReserveAuctionUpdated(auctionId, reservePrice);\\n  }\\n\\n  /**\\n   * @notice If an auction has been created but has not yet received bids, it may be canceled by the seller.\\n   * The NFT is returned to the seller from escrow.\\n   */\\n  function cancelReserveAuction(uint256 auctionId) public nonReentrant {\\n    ReserveAuction memory auction = auctionIdToAuction[auctionId];\\n    require(auction.seller == msg.sender, \\\"NFTMarketReserveAuction: Not your auction\\\");\\n    require(auction.endTime == 0, \\\"NFTMarketReserveAuction: Auction in progress\\\");\\n\\n    delete nftContractToTokenIdToAuctionId[auction.nftContract][auction.tokenId];\\n    delete auctionIdToAuction[auctionId];\\n\\n    IERC721Upgradeable(auction.nftContract).transferFrom(address(this), auction.seller, auction.tokenId);\\n\\n    emit ReserveAuctionCanceled(auctionId);\\n  }\\n\\n  /**\\n   * @notice A bidder may place a bid which is at least the value defined by `getMinBidAmount`.\\n   * If this is the first bid on the auction, the countdown will begin.\\n   * If there is already an outstanding bid, the previous bidder will be refunded at this time\\n   * and if the bid is placed in the final moments of the auction, the countdown may be extended.\\n   */\\n  function placeBid(uint256 auctionId) public payable nonReentrant {\\n    ReserveAuction storage auction = auctionIdToAuction[auctionId];\\n    require(auction.amount != 0, \\\"NFTMarketReserveAuction: Auction not found\\\");\\n\\n    if (auction.endTime == 0) {\\n      // If this is the first bid, ensure it's >= the reserve price\\n      require(auction.amount <= msg.value, \\\"NFTMarketReserveAuction: Bid must be at least the reserve price\\\");\\n    } else {\\n      // If this bid outbids another, confirm that the bid is at least x% greater than the last\\n      require(auction.endTime >= block.timestamp, \\\"NFTMarketReserveAuction: Auction is over\\\");\\n      require(auction.bidder != msg.sender, \\\"NFTMarketReserveAuction: You already have an outstanding bid\\\");\\n      uint256 minAmount = _getMinBidAmountForReserveAuction(auction.amount);\\n      require(msg.value >= minAmount, \\\"NFTMarketReserveAuction: Bid amount too low\\\");\\n    }\\n\\n    if (auction.endTime == 0) {\\n      auction.amount = msg.value;\\n      auction.bidder = msg.sender;\\n      // On the first bid, the endTime is now + duration\\n      auction.endTime = block.timestamp + auction.duration;\\n    } else {\\n      // Cache and update bidder state before a possible reentrancy (via the value transfer)\\n      uint256 originalAmount = auction.amount;\\n      address payable originalBidder = auction.bidder;\\n      auction.amount = msg.value;\\n      auction.bidder = msg.sender;\\n\\n      // When a bid outbids another, check to see if a time extension should apply.\\n      if (auction.endTime - block.timestamp < auction.extensionDuration) {\\n        auction.endTime = block.timestamp + auction.extensionDuration;\\n      }\\n\\n      // Refund the previous bidder\\n      _sendValueWithFallbackWithdrawWithLowGasLimit(originalBidder, originalAmount);\\n    }\\n\\n    emit ReserveAuctionBidPlaced(auctionId, msg.sender, msg.value, auction.endTime);\\n  }\\n\\n  /**\\n   * @notice Once the countdown has expired for an auction, anyone can settle the auction.\\n   * This will send the NFT to the highest bidder and distribute funds.\\n   */\\n  function finalizeReserveAuction(uint256 auctionId) public nonReentrant {\\n    ReserveAuction memory auction = auctionIdToAuction[auctionId];\\n    require(auction.endTime > 0, \\\"NFTMarketReserveAuction: Auction was already settled\\\");\\n    require(auction.endTime < block.timestamp, \\\"NFTMarketReserveAuction: Auction still in progress\\\");\\n\\n    delete nftContractToTokenIdToAuctionId[auction.nftContract][auction.tokenId];\\n    delete auctionIdToAuction[auctionId];\\n\\n    IERC721Upgradeable(auction.nftContract).transferFrom(address(this), auction.bidder, auction.tokenId);\\n\\n    (uint256 f8nFee, uint256 creatorFee, uint256 ownerRev) = _distributeFunds(\\n      auction.nftContract,\\n      auction.tokenId,\\n      auction.seller,\\n      auction.amount\\n    );\\n\\n    emit ReserveAuctionFinalized(auctionId, auction.seller, auction.bidder, f8nFee, creatorFee, ownerRev);\\n  }\\n\\n  /**\\n   * @notice Returns the minimum amount a bidder must spend to participate in an auction.\\n   */\\n  function getMinBidAmount(uint256 auctionId) public view returns (uint256) {\\n    ReserveAuction storage auction = auctionIdToAuction[auctionId];\\n    if (auction.endTime == 0) {\\n      return auction.amount;\\n    }\\n    return _getMinBidAmountForReserveAuction(auction.amount);\\n  }\\n\\n  /**\\n   * @dev Determines the minimum bid amount when outbidding another user.\\n   */\\n  function _getMinBidAmountForReserveAuction(uint256 currentBidAmount) private view returns (uint256) {\\n    uint256 minIncrement = currentBidAmount.mul(_minPercentIncrementInBasisPoints) / BASIS_POINTS;\\n    if (minIncrement == 0) {\\n      // The next bid must be at least 1 wei greater than the current.\\n      return currentBidAmount.add(1);\\n    }\\n    return minIncrement.add(currentBidAmount);\\n  }\\n\\n  /**\\n   * @notice Allows Foundation to cancel an auction, refunding the bidder and returning the NFT to the seller.\\n   * This should only be used for extreme cases such as DMCA takedown requests. The reason should always be provided.\\n   */\\n  function adminCancelReserveAuction(uint256 auctionId, string memory reason) public onlyFoundationAdmin {\\n    require(bytes(reason).length > 0, \\\"NFTMarketReserveAuction: Include a reason for this cancellation\\\");\\n    ReserveAuction memory auction = auctionIdToAuction[auctionId];\\n    require(auction.amount > 0, \\\"NFTMarketReserveAuction: Auction not found\\\");\\n\\n    delete nftContractToTokenIdToAuctionId[auction.nftContract][auction.tokenId];\\n    delete auctionIdToAuction[auctionId];\\n\\n    IERC721Upgradeable(auction.nftContract).transferFrom(address(this), auction.seller, auction.tokenId);\\n    if (auction.bidder != address(0)) {\\n      _sendValueWithFallbackWithdrawWithMediumGasLimit(auction.bidder, auction.amount);\\n    }\\n\\n    emit ReserveAuctionCanceledByAdmin(auctionId, reason);\\n  }\\n\\n  /**\\n   * @notice Allows an NFT owner and Foundation to work together in order to update the seller\\n   * for auctions they have listed to a new account.\\n   * @param signature Message `I authorize Foundation to migrate my account to ${newAccount.address.toLowerCase()}`\\n   * signed by the original account.\\n   * @dev This will gracefully skip any auctions that have already been finalized.\\n   */\\n  function adminAccountMigration(\\n    uint256[] calldata listedAuctionIds,\\n    address originalAddress,\\n    address payable newAddress,\\n    bytes calldata signature\\n  ) public onlyAuthorizedAccountMigration(originalAddress, newAddress, signature) {\\n    for (uint256 i = 0; i < listedAuctionIds.length; i++) {\\n      uint256 auctionId = listedAuctionIds[i];\\n      ReserveAuction storage auction = auctionIdToAuction[auctionId];\\n      // The seller would be 0 if it was finalized before this call\\n      if (auction.seller != address(0)) {\\n        require(auction.seller == originalAddress, \\\"NFTMarketReserveAuction: Auction not created by that address\\\");\\n        auction.seller = newAddress;\\n        emit ReserveAuctionSellerMigrated(auctionId, originalAddress, newAddress);\\n      }\\n    }\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/AccountMigration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"./roles/FoundationOperatorRole.sol\\\";\\nimport \\\"../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @notice Checks for a valid signature authorizing the migration of an account to a new address.\\n * @dev This is shared by both the FNDNFT721 and FNDNFTMarket, and the same signature authorizes both.\\n */\\nabstract contract AccountMigration is FoundationOperatorRole {\\n  // From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/cryptography\\n  function _isValidSignatureNow(\\n    address signer,\\n    bytes32 hash,\\n    bytes memory signature\\n  ) private view returns (bool) {\\n    if (Address.isContract(signer)) {\\n      try IERC1271(signer).isValidSignature(hash, signature) returns (bytes4 magicValue) {\\n        return magicValue == IERC1271(signer).isValidSignature.selector;\\n      } catch {\\n        return false;\\n      }\\n    } else {\\n      return ECDSA.recover(hash, signature) == signer;\\n    }\\n  }\\n\\n  // From https://ethereum.stackexchange.com/questions/8346/convert-address-to-string\\n  function _toAsciiString(address x) private pure returns (string memory) {\\n    bytes memory s = new bytes(42);\\n    s[0] = \\\"0\\\";\\n    s[1] = \\\"x\\\";\\n    for (uint256 i = 0; i < 20; i++) {\\n      bytes1 b = bytes1(uint8(uint256(uint160(x)) / (2**(8 * (19 - i)))));\\n      bytes1 hi = bytes1(uint8(b) / 16);\\n      bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));\\n      s[2 * i + 2] = _char(hi);\\n      s[2 * i + 3] = _char(lo);\\n    }\\n    return string(s);\\n  }\\n\\n  function _char(bytes1 b) private pure returns (bytes1 c) {\\n    if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);\\n    else return bytes1(uint8(b) + 0x57);\\n  }\\n\\n  // From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/cryptography/ECDSA.sol\\n  // Modified to accept messages (instead of the message hash)\\n  function _toEthSignedMessage(bytes memory message) private pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(message.length), message));\\n  }\\n\\n  /**\\n   * @dev Confirms the msg.sender is a Foundation operator and that the signature provided is valid.\\n   * @param signature Message `I authorize Foundation to migrate my account to ${newAccount.address.toLowerCase()}`\\n   * signed by the original account.\\n   */\\n  modifier onlyAuthorizedAccountMigration(\\n    address originalAddress,\\n    address newAddress,\\n    bytes memory signature\\n  ) {\\n    require(_isFoundationOperator(), \\\"AccountMigration: Caller is not an operator\\\");\\n    require(originalAddress != newAddress, \\\"AccountMigration: Cannot migrate to the same account\\\");\\n    bytes32 hash = _toEthSignedMessage(\\n      abi.encodePacked(\\\"I authorize Foundation to migrate my account to \\\", _toAsciiString(newAddress))\\n    );\\n    require(\\n      _isValidSignatureNow(originalAddress, hash, signature),\\n      \\\"AccountMigration: Signature must be from the original account\\\"\\n    );\\n    _;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/NFTMarketPrivateSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport \\\"./NFTMarketFees.sol\\\";\\n\\n/**\\n * @notice Adds support for a private sale of an NFT directly between two parties.\\n */\\nabstract contract NFTMarketPrivateSale is NFTMarketFees {\\n  /**\\n   * @dev This name is used in the EIP-712 domain.\\n   * If multiple classes use EIP-712 signatures in the future this can move to the shared constants file.\\n   */\\n  string private constant NAME = \\\"FNDNFTMarket\\\";\\n  /**\\n   * @dev This is a hash of the method signature used in the EIP-712 signature for private sales.\\n   */\\n  bytes32 private constant BUY_FROM_PRIVATE_SALE_TYPEHASH =\\n    keccak256(\\\"BuyFromPrivateSale(address nftContract,uint256 tokenId,address buyer,uint256 price,uint256 deadline)\\\");\\n\\n  /**\\n   * @dev This is the domain used in EIP-712 signatures.\\n   * It is not a constant so that the chainId can be determined dynamically.\\n   * If multiple classes use EIP-712 signatures in the future this can move to a shared file.\\n   */\\n  bytes32 private DOMAIN_SEPARATOR;\\n\\n  event PrivateSaleFinalized(\\n    address indexed nftContract,\\n    uint256 indexed tokenId,\\n    address indexed seller,\\n    address buyer,\\n    uint256 f8nFee,\\n    uint256 creatorFee,\\n    uint256 ownerRev,\\n    uint256 deadline\\n  );\\n\\n  /**\\n   * @dev This function must be called at least once before signatures will work as expected.\\n   * It's okay to call this function many times. Subsequent calls will have no impact.\\n   */\\n  function _reinitialize() internal {\\n    uint256 chainId;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n    DOMAIN_SEPARATOR = keccak256(\\n      abi.encode(\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n        keccak256(bytes(NAME)),\\n        keccak256(bytes(\\\"1\\\")),\\n        chainId,\\n        address(this)\\n      )\\n    );\\n  }\\n\\n  /**\\n   * @notice Allow two parties to execute a private sale.\\n   * @dev The seller signs a message approving the sale, and then the buyer calls this function\\n   * with the msg.value equal to the agreed upon price.\\n   * The sale is executed in this single on-chain call including the transfer of funds and the NFT.\\n   */\\n  function buyFromPrivateSale(\\n    IERC721Upgradeable nftContract,\\n    uint256 tokenId,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public payable {\\n    // The signed message from the seller is only valid for a limited time.\\n    require(deadline >= block.timestamp, \\\"NFTMarketPrivateSale: EXPIRED\\\");\\n    // The seller must have the NFT in their wallet when this function is called.\\n    address payable seller = payable(nftContract.ownerOf(tokenId));\\n\\n    // Scoping this block to avoid a stack too deep error\\n    {\\n      bytes32 digest = keccak256(\\n        abi.encodePacked(\\n          \\\"\\\\x19\\\\x01\\\",\\n          DOMAIN_SEPARATOR,\\n          keccak256(abi.encode(BUY_FROM_PRIVATE_SALE_TYPEHASH, nftContract, tokenId, msg.sender, msg.value, deadline))\\n        )\\n      );\\n      // Revert if the signature is invalid, the terms are not as expected, or if the seller transferred the NFT.\\n      require(ecrecover(digest, v, r, s) == seller, \\\"NFTMarketPrivateSale: INVALID_SIGNATURE\\\");\\n    }\\n\\n    // This will revert if the seller has not given the market contract approval.\\n    nftContract.transferFrom(seller, msg.sender, tokenId);\\n    // Pay the seller, creator, and Foundation as appropriate.\\n    (uint256 f8nFee, uint256 creatorFee, uint256 ownerRev) = _distributeFunds(\\n      address(nftContract),\\n      tokenId,\\n      seller,\\n      msg.value\\n    );\\n\\n    emit PrivateSaleFinalized(\\n      address(nftContract),\\n      tokenId,\\n      seller,\\n      msg.sender,\\n      f8nFee,\\n      creatorFee,\\n      ownerRev,\\n      deadline\\n    );\\n  }\\n\\n  uint256[1000] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAdminRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Interface for AdminRole which wraps the default admin role from\\n * OpenZeppelin's AccessControl for easy integration.\\n */\\ninterface IAdminRole {\\n  function isAdmin(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOperatorRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice Interface for OperatorRole which wraps a role from\\n * OpenZeppelin's AccessControl for easy integration.\\n */\\ninterface IOperatorRole {\\n  function isOperator(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFNDNFT721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n// solhint-disable\\n\\npragma solidity ^0.7.0;\\n\\ninterface IFNDNFT721 {\\n  function tokenCreator(uint256 tokenId) external view returns (address payable);\\n\\n  function getTokenCreatorPaymentAddress(uint256 tokenId) external view returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenCreatorPaymentAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\ninterface ITokenCreatorPaymentAddress {\\n  function getTokenCreatorPaymentAddress(uint256 tokenId)\\n    external\\n    view\\n    returns (address payable tokenCreatorPaymentAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\ninterface ITokenCreator {\\n  function tokenCreator(uint256 tokenId) external view returns (address payable);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGetRoyalties.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\ninterface IGetRoyalties {\\n  function getRoyalties(uint256 tokenId)\\n    external\\n    view\\n    returns (address payable[] memory recipients, uint256[] memory feesInBasisPoints);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IHasSecondarySaleFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @notice An interface for communicating fees to 3rd party marketplaces.\\n * @dev Originally implemented in mainnet contract 0x44d6e8933f8271abcf253c72f9ed7e0e4c0323b3\\n */\\ninterface IHasSecondarySaleFees {\\n  function getFeeRecipients(uint256 id) external view returns (address payable[] memory);\\n\\n  function getFeeBps(uint256 id) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\ninterface IOwnable {\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/OZ/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/utils/introspection/ERC165.sol\\n * Modified to support Solidity 0.7 and allow checking multiple interfaces w/o checking general 165 support.\\n */\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n  // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n  bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n  /**\\n   * @dev Returns true if `account` supports the {IERC165} interface,\\n   */\\n  function supportsERC165(address account) internal view returns (bool) {\\n    // Any contract that implements ERC165 must explicitly indicate support of\\n    // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n    return\\n      supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n      !supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n  }\\n\\n  /**\\n   * @dev Returns true if `account` supports the interface defined by\\n   * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n   *\\n   * See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n    // query support of both ERC165 as per the spec and support of _interfaceId\\n    return supportsERC165(account) && supportsERC165Interface(account, interfaceId);\\n  }\\n\\n  /**\\n   * @dev Returns a boolean array where each value corresponds to the\\n   * interfaces passed in and whether they're supported or not. This allows\\n   * you to batch check interfaces for a contract where your expectation\\n   * is that some interfaces may not be supported.\\n   *\\n   * See {IERC165-supportsInterface}.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function getSupportedInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool[] memory) {\\n    // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n    bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n    // query support of ERC165 itself\\n    if (supportsERC165(account)) {\\n      // query support of each interface in interfaceIds\\n      for (uint256 i = 0; i < interfaceIds.length; i++) {\\n        interfaceIdsSupported[i] = supportsERC165Interface(account, interfaceIds[i]);\\n      }\\n    }\\n\\n    return interfaceIdsSupported;\\n  }\\n\\n  /**\\n   * @dev Returns true if `account` supports all the interfaces defined in\\n   * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n   *\\n   * Batch-querying can lead to gas savings by skipping repeated checks for\\n   * {IERC165} support.\\n   *\\n   * See {IERC165-supportsInterface}.\\n   */\\n  function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n    // query support of ERC165 itself\\n    if (!supportsERC165(account)) {\\n      return false;\\n    }\\n\\n    // query support of each interface in _interfaceIds\\n    for (uint256 i = 0; i < interfaceIds.length; i++) {\\n      if (!supportsERC165Interface(account, interfaceIds[i])) {\\n        return false;\\n      }\\n    }\\n\\n    // all interfaces supported\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Query if a contract implements an interface, does not check ERC165 support\\n   * @param account The address of the contract to query for support of an interface\\n   * @param interfaceId The interface identifier, as specified in ERC-165\\n   * @return true if the contract at account indicates support of the interface with\\n   * identifier interfaceId, false otherwise\\n   * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n   * the behavior of this method is undefined. This precondition can be checked\\n   * with {supportsERC165}.\\n   * Interface identification is specified in ERC-165.\\n   */\\n  function supportsERC165Interface(address account, bytes4 interfaceId) internal view returns (bool) {\\n    bytes memory encodedParams = abi.encodeWithSelector(IERC165(account).supportsInterface.selector, interfaceId);\\n    (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\\n    if (result.length < 32) return false;\\n    return success && abi.decode(result, (bool));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT OR Apache-2.0\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Constant values shared across mixins.\\n */\\nabstract contract Constants {\\n  uint256 internal constant BASIS_POINTS = 10000;\\n\\n  uint256 internal constant READ_ONLY_GAS_LIMIT = 40000;\\n\\n  /**\\n   * @dev Support up to 5 royalty recipients. A cap is required to ensure gas costs are not too high\\n   * when an auction is finalized.\\n   */\\n  uint256 internal constant MAX_CREATOR_INDEX = 4;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/mixins/OZ/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.2.0/contracts/utils/introspection/IERC165.sol\\n * Modified to support Solidity 0.7\\n */\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n  /**\\n   * @dev Returns true if this contract implements the interface defined by\\n   * `interfaceId`. See the corresponding\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n   * to learn more about how these ids are created.\\n   *\\n   * This function call must use less than 30 000 gas.\\n   */\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/interfaces/IERC1271.sol\\n */\\ninterface IERC1271 {\\n  /**\\n   * @dev Should return whether the signature provided is valid for the provided data\\n   * @param hash      Hash of the data to be signed\\n   * @param signature Signature byte array associated with _data\\n   */\\n  function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1337\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"primaryFoundationFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondaryFoundationFeeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondaryCreatorFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"MarketFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"f8nFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRev\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"PrivateSaleFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionBidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"ReserveAuctionCanceledByAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minPercentIncrementInBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxBidIncrementRequirement\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"goLiveDate\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extensionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"f8nFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ownerRev\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"originalSellerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSellerAddress\",\"type\":\"address\"}],\"name\":\"ReserveAuctionSellerMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"ReserveAuctionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawPending\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"listedAuctionIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"originalAddress\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"adminAccountMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"adminCancelReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minPercentIncrementInBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"primaryF8nFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryF8nFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryCreatorFeeBasisPoints\",\"type\":\"uint256\"}],\"name\":\"adminUpdateConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721Upgradeable\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyFromPrivateSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"createReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"finalizeReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"primaryFoundationFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryFoundationFeeBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondaryCreatorFeeBasisPoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"getFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"foundationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creatorRev\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownerRev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFoundationTreasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIsPrimary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPrimary\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getMinBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getReserveAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extensionDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct NFTMarketReserveAuction.ReserveAuction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveAuctionConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPercentIncrementInBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getReserveAuctionIdFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"updateReserveAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"FNDNFTMarket","CompilerVersion":"v0.7.6+commit.7338295f","OptimizationUsed":"1","Runs":"1337","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]