[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/KeyStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    KeyStorage.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\nimport \\\"./Decryption.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\nimport \\\"./SchainsInternal.sol\\\";\\nimport \\\"./thirdparty/ECDH.sol\\\";\\nimport \\\"./utils/Precompiled.sol\\\";\\nimport \\\"./utils/FieldOperations.sol\\\";\\n\\ncontract KeyStorage is Permissions {\\n    using Fp2Operations for Fp2Operations.Fp2Point;\\n    using G2Operations for G2Operations.G2Point;\\n\\n    struct BroadcastedData {\\n        KeyShare[] secretKeyContribution;\\n        G2Operations.G2Point[] verificationVector;\\n    }\\n\\n    struct KeyShare {\\n        bytes32[2] publicKey;\\n        bytes32 share;\\n    }\\n\\n    // Unused variable!!\\n    mapping(bytes32 => mapping(uint => BroadcastedData)) private _data;\\n    // \\n    \\n    mapping(bytes32 => G2Operations.G2Point) private _publicKeysInProgress;\\n    mapping(bytes32 => G2Operations.G2Point) private _schainsPublicKeys;\\n\\n    // Unused variable\\n    mapping(bytes32 => G2Operations.G2Point[]) private _schainsNodesPublicKeys;\\n    //\\n\\n    mapping(bytes32 => G2Operations.G2Point[]) private _previousSchainsPublicKeys;\\n\\n    function deleteKey(bytes32 schainId) external allow(\\\"SkaleDKG\\\") {\\n        _previousSchainsPublicKeys[schainId].push(_schainsPublicKeys[schainId]);\\n        delete _schainsPublicKeys[schainId];\\n        delete _data[schainId][0];\\n        delete _schainsNodesPublicKeys[schainId];\\n    }\\n\\n    function initPublicKeyInProgress(bytes32 schainId) external allow(\\\"SkaleDKG\\\") {\\n        _publicKeysInProgress[schainId] = G2Operations.getG2Zero();\\n    }\\n\\n    function adding(bytes32 schainId, G2Operations.G2Point memory value) external allow(\\\"SkaleDKG\\\") {\\n        require(value.isG2(), \\\"Incorrect g2 point\\\");\\n        _publicKeysInProgress[schainId] = value.addG2(_publicKeysInProgress[schainId]);\\n    }\\n\\n    function finalizePublicKey(bytes32 schainId) external allow(\\\"SkaleDKG\\\") {\\n        if (!_isSchainsPublicKeyZero(schainId)) {\\n            _previousSchainsPublicKeys[schainId].push(_schainsPublicKeys[schainId]);\\n        }\\n        _schainsPublicKeys[schainId] = _publicKeysInProgress[schainId];\\n        delete _publicKeysInProgress[schainId];\\n    }\\n\\n    function getCommonPublicKey(bytes32 schainId) external view returns (G2Operations.G2Point memory) {\\n        return _schainsPublicKeys[schainId];\\n    }\\n\\n    function getPreviousPublicKey(bytes32 schainId) external view returns (G2Operations.G2Point memory) {\\n        uint length = _previousSchainsPublicKeys[schainId].length;\\n        if (length == 0) {\\n            return G2Operations.getG2Zero();\\n        }\\n        return _previousSchainsPublicKeys[schainId][length - 1];\\n    }\\n\\n    function getAllPreviousPublicKeys(bytes32 schainId) external view returns (G2Operations.G2Point[] memory) {\\n        return _previousSchainsPublicKeys[schainId];\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n    }\\n\\n    function _isSchainsPublicKeyZero(bytes32 schainId) private view returns (bool) {\\n        return _schainsPublicKeys[schainId].x.a == 0 &&\\n            _schainsPublicKeys[schainId].x.b == 0 &&\\n            _schainsPublicKeys[schainId].y.a == 0 &&\\n            _schainsPublicKeys[schainId].y.b == 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/Decryption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Decryption.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @title Decryption\\n * @dev This contract performs encryption and decryption functions.\\n * Decrypt is used by SkaleDKG contract to decrypt secret key contribution to\\n * validate complaints during the DKG procedure.\\n */\\ncontract Decryption {\\n\\n    /**\\n     * @dev Returns an encrypted text given a secret and a key.\\n     */\\n    function encrypt(uint256 secretNumber, bytes32 key) external pure returns (bytes32 ciphertext) {\\n        return bytes32(secretNumber) ^ key;\\n    }\\n\\n    /**\\n     * @dev Returns a secret given an encrypted text and a key.\\n     */\\n    function decrypt(bytes32 ciphertext, bytes32 key) external pure returns (uint256 secretNumber) {\\n        return uint256(ciphertext ^ key);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Permissions.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./ContractManager.sol\\\";\\n\\n\\n/**\\n * @title Permissions\\n * @dev Contract is connected module for Upgradeable approach, knows ContractManager\\n */\\ncontract Permissions is AccessControlUpgradeSafe {\\n    using SafeMath for uint;\\n    using Address for address;\\n    \\n    ContractManager public contractManager;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_isOwner(), \\\"Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is an Admin.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be an admin.\\n     */\\n    modifier onlyAdmin() {\\n        require(_isAdmin(msg.sender), \\\"Caller is not an admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner or `contractName`.\\n     */\\n    modifier allow(string memory contractName) {\\n        require(\\n            contractManager.getContract(contractName) == msg.sender || _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1` or `contractName2` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, or `contractName2`.\\n     */\\n    modifier allowTwo(string memory contractName1, string memory contractName2) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when caller is the Owner \\n     * or `contractName1`, `contractName2`, or `contractName3` contract.\\n     * \\n     * Requirements:\\n     * \\n     * - The caller must be the owner, `contractName1`, `contractName2`, or \\n     * `contractName3`.\\n     */\\n    modifier allowThree(string memory contractName1, string memory contractName2, string memory contractName3) {\\n        require(\\n            contractManager.getContract(contractName1) == msg.sender ||\\n            contractManager.getContract(contractName2) == msg.sender ||\\n            contractManager.getContract(contractName3) == msg.sender ||\\n            _isOwner(),\\n            \\\"Message sender is invalid\\\");\\n        _;\\n    }\\n\\n    function initialize(address contractManagerAddress) public virtual initializer {\\n        AccessControlUpgradeSafe.__AccessControl_init();\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setContractManager(contractManagerAddress);\\n    }\\n\\n    function _isOwner() internal view returns (bool) {\\n        return hasRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    function _isAdmin(address account) internal view returns (bool) {\\n        address skaleManagerAddress = contractManager.contracts(keccak256(abi.encodePacked(\\\"SkaleManager\\\")));\\n        if (skaleManagerAddress != address(0)) {\\n            AccessControlUpgradeSafe skaleManager = AccessControlUpgradeSafe(skaleManagerAddress);\\n            return skaleManager.hasRole(keccak256(\\\"ADMIN_ROLE\\\"), account) || _isOwner();\\n        } else {\\n            return _isOwner();\\n        }\\n    }\\n\\n    function _setContractManager(address contractManagerAddress) private {\\n        require(contractManagerAddress != address(0), \\\"ContractManager address is not set\\\");\\n        require(contractManagerAddress.isContract(), \\\"Address is not contract\\\");\\n        contractManager = ContractManager(contractManagerAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SchainsInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SchainsInternal.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/ISkaleDKG.sol\\\";\\nimport \\\"./utils/Random.sol\\\";\\n\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./Nodes.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\\\";\\n\\n/**\\n * @title SchainsInternal\\n * @dev Contract contains all functionality logic to internally manage Schains.\\n */\\ncontract SchainsInternal is Permissions {\\n\\n    using Random for Random.RandomGenerator;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Schain {\\n        string name;\\n        address owner;\\n        uint indexInOwnerList;\\n        uint8 partOfNode;\\n        uint lifetime;\\n        uint startDate;\\n        uint startBlock;\\n        uint deposit;\\n        uint64 index;\\n    }\\n\\n    struct SchainType {\\n        uint8 partOfNode;\\n        uint numberOfNodes;\\n    }\\n\\n\\n    // mapping which contain all schains\\n    mapping (bytes32 => Schain) public schains;\\n\\n    mapping (bytes32 => bool) public isSchainActive;\\n\\n    mapping (bytes32 => uint[]) public schainsGroups;\\n\\n    mapping (bytes32 => mapping (uint => bool)) private _exceptionsForGroups;\\n    // mapping shows schains by owner's address\\n    mapping (address => bytes32[]) public schainIndexes;\\n    // mapping shows schains which Node composed in\\n    mapping (uint => bytes32[]) public schainsForNodes;\\n\\n    mapping (uint => uint[]) public holesForNodes;\\n\\n    mapping (bytes32 => uint[]) public holesForSchains;\\n\\n    // array which contain all schains\\n    bytes32[] public schainsAtSystem;\\n\\n    uint64 public numberOfSchains;\\n    // total resources that schains occupied\\n    uint public sumOfSchainsResources;\\n\\n    mapping (bytes32 => bool) public usedSchainNames;\\n\\n    mapping (uint => SchainType) public schainTypes;\\n    uint public numberOfSchainTypes;\\n\\n    //   schain hash =>   node index  => index of place\\n    // index of place is a number from 1 to max number of slots on node(128)\\n    mapping (bytes32 => mapping (uint => uint)) public placeOfSchainOnNode;\\n\\n    mapping (uint => bytes32[]) private _nodeToLockedSchains;\\n\\n    mapping (bytes32 => uint[]) private _schainToExceptionNodes;\\n\\n    EnumerableSet.UintSet private _keysOfSchainTypes;\\n\\n    /**\\n     * @dev Allows Schain contract to initialize an schain.\\n     */\\n    function initializeSchain(\\n        string calldata name,\\n        address from,\\n        uint lifetime,\\n        uint deposit) external allow(\\\"Schains\\\")\\n    {\\n        bytes32 schainId = keccak256(abi.encodePacked(name));\\n        schains[schainId].name = name;\\n        schains[schainId].owner = from;\\n        schains[schainId].startDate = block.timestamp;\\n        schains[schainId].startBlock = block.number;\\n        schains[schainId].lifetime = lifetime;\\n        schains[schainId].deposit = deposit;\\n        schains[schainId].index = numberOfSchains;\\n        isSchainActive[schainId] = true;\\n        numberOfSchains++;\\n        schainsAtSystem.push(schainId);\\n        usedSchainNames[schainId] = true;\\n    }\\n\\n    /**\\n     * @dev Allows Schain contract to create a node group for an schain.\\n     */\\n    function createGroupForSchain(\\n        bytes32 schainId,\\n        uint numberOfNodes,\\n        uint8 partOfNode\\n    )\\n        external\\n        allow(\\\"Schains\\\")\\n        returns (uint[] memory)\\n    {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        schains[schainId].partOfNode = partOfNode;\\n        if (partOfNode > 0) {\\n            sumOfSchainsResources = sumOfSchainsResources.add(\\n                numberOfNodes.mul(constantsHolder.TOTAL_SPACE_ON_NODE()).div(partOfNode)\\n            );\\n        }\\n        return _generateGroup(schainId, numberOfNodes);\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to set index in owner list.\\n     */\\n    function setSchainIndex(bytes32 schainId, address from) external allow(\\\"Schains\\\") {\\n        schains[schainId].indexInOwnerList = schainIndexes[from].length;\\n        schainIndexes[from].push(schainId);\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to change the Schain lifetime through\\n     * an additional SKL token deposit.\\n     */\\n    function changeLifetime(bytes32 schainId, uint lifetime, uint deposit) external allow(\\\"Schains\\\") {\\n        schains[schainId].deposit = schains[schainId].deposit.add(deposit);\\n        schains[schainId].lifetime = schains[schainId].lifetime.add(lifetime);\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove an schain from the network.\\n     * Generally schains are not removed from the system; instead they are\\n     * simply allowed to expire.\\n     */\\n    function removeSchain(bytes32 schainId, address from) external allow(\\\"Schains\\\") {\\n        isSchainActive[schainId] = false;\\n        uint length = schainIndexes[from].length;\\n        uint index = schains[schainId].indexInOwnerList;\\n        if (index != length.sub(1)) {\\n            bytes32 lastSchainId = schainIndexes[from][length.sub(1)];\\n            schains[lastSchainId].indexInOwnerList = index;\\n            schainIndexes[from][index] = lastSchainId;\\n        }\\n        schainIndexes[from].pop();\\n\\n        // TODO:\\n        // optimize\\n        for (uint i = 0; i + 1 < schainsAtSystem.length; i++) {\\n            if (schainsAtSystem[i] == schainId) {\\n                schainsAtSystem[i] = schainsAtSystem[schainsAtSystem.length.sub(1)];\\n                break;\\n            }\\n        }\\n        schainsAtSystem.pop();\\n\\n        delete schains[schainId];\\n        numberOfSchains--;\\n    }\\n\\n    /**\\n     * @dev Allows Schains and SkaleDKG contracts to remove a node from an\\n     * schain for node rotation or DKG failure.\\n     */\\n    function removeNodeFromSchain(\\n        uint nodeIndex,\\n        bytes32 schainHash\\n    )\\n        external\\n        allowThree(\\\"NodeRotation\\\", \\\"SkaleDKG\\\", \\\"Schains\\\")\\n    {\\n        uint indexOfNode = _findNode(schainHash, nodeIndex);\\n        uint indexOfLastNode = schainsGroups[schainHash].length.sub(1);\\n\\n        if (indexOfNode == indexOfLastNode) {\\n            schainsGroups[schainHash].pop();\\n        } else {\\n            delete schainsGroups[schainHash][indexOfNode];\\n            if (holesForSchains[schainHash].length > 0 && holesForSchains[schainHash][0] > indexOfNode) {\\n                uint hole = holesForSchains[schainHash][0];\\n                holesForSchains[schainHash][0] = indexOfNode;\\n                holesForSchains[schainHash].push(hole);\\n            } else {\\n                holesForSchains[schainHash].push(indexOfNode);\\n            }\\n        }\\n\\n        uint schainIndexOnNode = findSchainAtSchainsForNode(nodeIndex, schainHash);\\n        removeSchainForNode(nodeIndex, schainIndexOnNode);\\n        delete placeOfSchainOnNode[schainHash][nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to delete a group of schains\\n     */\\n    function deleteGroup(bytes32 schainId) external allow(\\\"Schains\\\") {\\n        // delete channel\\n        ISkaleDKG skaleDKG = ISkaleDKG(contractManager.getContract(\\\"SkaleDKG\\\"));\\n        delete schainsGroups[schainId];\\n        skaleDKG.deleteChannel(schainId);\\n    }\\n\\n    /**\\n     * @dev Allows Schain and NodeRotation contracts to set a Node like\\n     * exception for a given schain and nodeIndex.\\n     */\\n    function setException(bytes32 schainId, uint nodeIndex) external allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\") {\\n        _setException(schainId, nodeIndex);\\n    }\\n\\n    /**\\n     * @dev Allows Schains and NodeRotation contracts to add node to an schain\\n     * group.\\n     */\\n    function setNodeInGroup(bytes32 schainId, uint nodeIndex) external allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\") {\\n        if (holesForSchains[schainId].length == 0) {\\n            schainsGroups[schainId].push(nodeIndex);\\n        } else {\\n            schainsGroups[schainId][holesForSchains[schainId][0]] = nodeIndex;\\n            uint min = uint(-1);\\n            uint index = 0;\\n            for (uint i = 1; i < holesForSchains[schainId].length; i++) {\\n                if (min > holesForSchains[schainId][i]) {\\n                    min = holesForSchains[schainId][i];\\n                    index = i;\\n                }\\n            }\\n            if (min == uint(-1)) {\\n                delete holesForSchains[schainId];\\n            } else {\\n                holesForSchains[schainId][0] = min;\\n                holesForSchains[schainId][index] =\\n                    holesForSchains[schainId][holesForSchains[schainId].length - 1];\\n                holesForSchains[schainId].pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove holes for schains\\n     */\\n    function removeHolesForSchain(bytes32 schainHash) external allow(\\\"Schains\\\") {\\n        delete holesForSchains[schainHash];\\n    }\\n\\n    /**\\n     * @dev Allows Admin to add schain type\\n     */\\n    function addSchainType(uint8 partOfNode, uint numberOfNodes) external onlyAdmin {\\n        require(_keysOfSchainTypes.add(numberOfSchainTypes + 1), \\\"Schain type is already added\\\");\\n        schainTypes[numberOfSchainTypes + 1].partOfNode = partOfNode;\\n        schainTypes[numberOfSchainTypes + 1].numberOfNodes = numberOfNodes;\\n        numberOfSchainTypes++;\\n    }\\n\\n    /**\\n     * @dev Allows Admin to remove schain type\\n     */\\n    function removeSchainType(uint typeOfSchain) external onlyAdmin {\\n        require(_keysOfSchainTypes.remove(typeOfSchain), \\\"Schain type is already removed\\\");\\n        delete schainTypes[typeOfSchain].partOfNode;\\n        delete schainTypes[typeOfSchain].numberOfNodes;\\n    }\\n\\n    /**\\n     * @dev Allows Admin to set number of schain types\\n     */\\n    function setNumberOfSchainTypes(uint newNumberOfSchainTypes) external onlyAdmin {\\n        numberOfSchainTypes = newNumberOfSchainTypes;\\n    }\\n\\n    /**\\n     * @dev Allows Admin to move schain to placeOfSchainOnNode map\\n     */\\n    function moveToPlaceOfSchainOnNode(bytes32 schainHash) external onlyAdmin {\\n        for (uint i = 0; i < schainsGroups[schainHash].length; i++) {\\n            uint nodeIndex = schainsGroups[schainHash][i];\\n            for (uint j = 0; j < schainsForNodes[nodeIndex].length; j++) {\\n                if (schainsForNodes[nodeIndex][j] == schainHash) {\\n                    placeOfSchainOnNode[schainHash][nodeIndex] = j + 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    function removeNodeFromAllExceptionSchains(uint nodeIndex) external allow(\\\"SkaleManager\\\") {\\n        uint len = _nodeToLockedSchains[nodeIndex].length;\\n        if (len > 0) {\\n            for (uint i = len; i > 0; i--) {\\n                removeNodeFromExceptions(_nodeToLockedSchains[nodeIndex][i - 1], nodeIndex);\\n            }\\n        }\\n    }\\n\\n    function makeSchainNodesInvisible(bytes32 schainId) external allowTwo(\\\"NodeRotation\\\", \\\"SkaleDKG\\\") {\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < _schainToExceptionNodes[schainId].length; i++) {\\n            nodes.makeNodeInvisible(_schainToExceptionNodes[schainId][i]);\\n        }\\n    }\\n\\n    function makeSchainNodesVisible(bytes32 schainId) external allowTwo(\\\"NodeRotation\\\", \\\"SkaleDKG\\\") {\\n        _makeSchainNodesVisible(schainId);\\n    }\\n\\n    /**\\n     * @dev Returns all Schains in the network.\\n     */\\n    function getSchains() external view returns (bytes32[] memory) {\\n        return schainsAtSystem;\\n    }\\n\\n    /**\\n     * @dev Returns all occupied resources on one node for an Schain.\\n     */\\n    function getSchainsPartOfNode(bytes32 schainId) external view returns (uint8) {\\n        return schains[schainId].partOfNode;\\n    }\\n\\n    /**\\n     * @dev Returns number of schains by schain owner.\\n     */\\n    function getSchainListSize(address from) external view returns (uint) {\\n        return schainIndexes[from].length;\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names by schain owner.\\n     */\\n    function getSchainIdsByAddress(address from) external view returns (bytes32[] memory) {\\n        return schainIndexes[from];\\n    }\\n\\n    /**\\n     * @dev Returns hashes of schain names running on a node.\\n     */\\n    function getSchainIdsForNode(uint nodeIndex) external view returns (bytes32[] memory) {\\n        return schainsForNodes[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the owner of an schain.\\n     */\\n    function getSchainOwner(bytes32 schainId) external view returns (address) {\\n        return schains[schainId].owner;\\n    }\\n\\n    /**\\n     * @dev Checks whether schain name is available.\\n     * TODO Need to delete - copy of web3.utils.soliditySha3\\n     */\\n    function isSchainNameAvailable(string calldata name) external view returns (bool) {\\n        bytes32 schainId = keccak256(abi.encodePacked(name));\\n        return schains[schainId].owner == address(0) &&\\n            !usedSchainNames[schainId] &&\\n            keccak256(abi.encodePacked(name)) != keccak256(abi.encodePacked(\\\"Mainnet\\\"));\\n    }\\n\\n    /**\\n     * @dev Checks whether schain lifetime has expired.\\n     */\\n    function isTimeExpired(bytes32 schainId) external view returns (bool) {\\n        return uint(schains[schainId].startDate).add(schains[schainId].lifetime) < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Checks whether address is owner of schain.\\n     */\\n    function isOwnerAddress(address from, bytes32 schainId) external view returns (bool) {\\n        return schains[schainId].owner == from;\\n    }\\n\\n    /**\\n     * @dev Checks whether schain exists.\\n     */\\n    function isSchainExist(bytes32 schainId) external view returns (bool) {\\n        return keccak256(abi.encodePacked(schains[schainId].name)) != keccak256(abi.encodePacked(\\\"\\\"));\\n    }\\n\\n    /**\\n     * @dev Returns schain name.\\n     */\\n    function getSchainName(bytes32 schainId) external view returns (string memory) {\\n        return schains[schainId].name;\\n    }\\n\\n    /**\\n     * @dev Returns last active schain of a node.\\n     */\\n    function getActiveSchain(uint nodeIndex) external view returns (bytes32) {\\n        for (uint i = schainsForNodes[nodeIndex].length; i > 0; i--) {\\n            if (schainsForNodes[nodeIndex][i - 1] != bytes32(0)) {\\n                return schainsForNodes[nodeIndex][i - 1];\\n            }\\n        }\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Returns active schains of a node.\\n     */\\n    function getActiveSchains(uint nodeIndex) external view returns (bytes32[] memory activeSchains) {\\n        uint activeAmount = 0;\\n        for (uint i = 0; i < schainsForNodes[nodeIndex].length; i++) {\\n            if (schainsForNodes[nodeIndex][i] != bytes32(0)) {\\n                activeAmount++;\\n            }\\n        }\\n\\n        uint cursor = 0;\\n        activeSchains = new bytes32[](activeAmount);\\n        for (uint i = schainsForNodes[nodeIndex].length; i > 0; i--) {\\n            if (schainsForNodes[nodeIndex][i - 1] != bytes32(0)) {\\n                activeSchains[cursor++] = schainsForNodes[nodeIndex][i - 1];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns number of nodes in an schain group.\\n     */\\n    function getNumberOfNodesInGroup(bytes32 schainId) external view returns (uint) {\\n        return schainsGroups[schainId].length;\\n    }\\n\\n    /**\\n     * @dev Returns nodes in an schain group.\\n     */\\n    function getNodesInGroup(bytes32 schainId) external view returns (uint[] memory) {\\n        return schainsGroups[schainId];\\n    }\\n\\n    /**\\n     * @dev Checks whether sender is a node address from a given schain group.\\n     */\\n    function isNodeAddressesInGroup(bytes32 schainId, address sender) external view returns (bool) {\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < schainsGroups[schainId].length; i++) {\\n            if (nodes.getNodeAddress(schainsGroups[schainId][i]) == sender) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns node index in schain group.\\n     */\\n    function getNodeIndexInGroup(bytes32 schainId, uint nodeId) external view returns (uint) {\\n        for (uint index = 0; index < schainsGroups[schainId].length; index++) {\\n            if (schainsGroups[schainId][index] == nodeId) {\\n                return index;\\n            }\\n        }\\n        return schainsGroups[schainId].length;\\n    }\\n\\n    /**\\n     * @dev Checks whether there are any nodes with free resources for given\\n     * schain.\\n     */\\n    function isAnyFreeNode(bytes32 schainId) external view returns (bool) {\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        uint8 space = schains[schainId].partOfNode;\\n        return nodes.countNodesWithFreeSpace(space) > 0;\\n    }\\n\\n    /**\\n     * @dev Returns whether any exceptions exist for node in a schain group.\\n     */\\n    function checkException(bytes32 schainId, uint nodeIndex) external view returns (bool) {\\n        return _exceptionsForGroups[schainId][nodeIndex];\\n    }\\n\\n    function checkHoleForSchain(bytes32 schainHash, uint indexOfNode) external view returns (bool) {\\n        for (uint i = 0; i < holesForSchains[schainHash].length; i++) {\\n            if (holesForSchains[schainHash][i] == indexOfNode) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns number of Schains on a node.\\n     */\\n    function getLengthOfSchainsForNode(uint nodeIndex) external view returns (uint) {\\n        return schainsForNodes[nodeIndex].length;\\n    }\\n\\n    function getSchainType(uint typeOfSchain) external view returns(uint8, uint) {\\n        require(_keysOfSchainTypes.contains(typeOfSchain), \\\"Invalid type of schain\\\");\\n        return (schainTypes[typeOfSchain].partOfNode, schainTypes[typeOfSchain].numberOfNodes);\\n    }\\n\\n    function initialize(address newContractsAddress) public override initializer {\\n        Permissions.initialize(newContractsAddress);\\n\\n        numberOfSchains = 0;\\n        sumOfSchainsResources = 0;\\n        numberOfSchainTypes = 0;\\n    }\\n\\n    /**\\n     * @dev Allows Schains and NodeRotation contracts to add schain to node.\\n     */\\n    function addSchainForNode(uint nodeIndex, bytes32 schainId) public allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\") {\\n        if (holesForNodes[nodeIndex].length == 0) {\\n            schainsForNodes[nodeIndex].push(schainId);\\n            placeOfSchainOnNode[schainId][nodeIndex] = schainsForNodes[nodeIndex].length;\\n        } else {\\n            uint lastHoleOfNode = holesForNodes[nodeIndex][holesForNodes[nodeIndex].length - 1];\\n            schainsForNodes[nodeIndex][lastHoleOfNode] = schainId;\\n            placeOfSchainOnNode[schainId][nodeIndex] = lastHoleOfNode + 1;\\n            holesForNodes[nodeIndex].pop();\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains, NodeRotation, and SkaleDKG contracts to remove an \\n     * schain from a node.\\n     */\\n    function removeSchainForNode(uint nodeIndex, uint schainIndex)\\n        public\\n        allowThree(\\\"NodeRotation\\\", \\\"SkaleDKG\\\", \\\"Schains\\\")\\n    {\\n        uint length = schainsForNodes[nodeIndex].length;\\n        if (schainIndex == length.sub(1)) {\\n            schainsForNodes[nodeIndex].pop();\\n        } else {\\n            delete schainsForNodes[nodeIndex][schainIndex];\\n            if (holesForNodes[nodeIndex].length > 0 && holesForNodes[nodeIndex][0] > schainIndex) {\\n                uint hole = holesForNodes[nodeIndex][0];\\n                holesForNodes[nodeIndex][0] = schainIndex;\\n                holesForNodes[nodeIndex].push(hole);\\n            } else {\\n                holesForNodes[nodeIndex].push(schainIndex);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to remove node from exceptions\\n     */\\n    function removeNodeFromExceptions(bytes32 schainHash, uint nodeIndex)\\n        public\\n        allowThree(\\\"Schains\\\", \\\"NodeRotation\\\", \\\"SkaleManager\\\")\\n    {\\n        _exceptionsForGroups[schainHash][nodeIndex] = false;\\n        uint len = _nodeToLockedSchains[nodeIndex].length;\\n        bool removed = false;\\n        if (len > 0 && _nodeToLockedSchains[nodeIndex][len - 1] == schainHash) {\\n            _nodeToLockedSchains[nodeIndex].pop();\\n            removed = true;\\n        } else {\\n            for (uint i = len; i > 0 && !removed; i--) {\\n                if (_nodeToLockedSchains[nodeIndex][i - 1] == schainHash) {\\n                    _nodeToLockedSchains[nodeIndex][i - 1] = _nodeToLockedSchains[nodeIndex][len - 1];\\n                    _nodeToLockedSchains[nodeIndex].pop();\\n                    removed = true;\\n                }\\n            }\\n        }\\n        len = _schainToExceptionNodes[schainHash].length;\\n        removed = false;\\n        if (len > 0 && _schainToExceptionNodes[schainHash][len - 1] == nodeIndex) {\\n            _schainToExceptionNodes[schainHash].pop();\\n            removed = true;\\n        } else {\\n            for (uint i = len; i > 0 && !removed; i--) {\\n                if (_schainToExceptionNodes[schainHash][i - 1] == nodeIndex) {\\n                    _schainToExceptionNodes[schainHash][i - 1] = _schainToExceptionNodes[schainHash][len - 1];\\n                    _schainToExceptionNodes[schainHash].pop();\\n                    removed = true;\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns index of Schain in list of schains for a given node.\\n     */\\n    function findSchainAtSchainsForNode(uint nodeIndex, bytes32 schainId) public view returns (uint) {\\n        if (placeOfSchainOnNode[schainId][nodeIndex] == 0)\\n            return schainsForNodes[nodeIndex].length;\\n        return placeOfSchainOnNode[schainId][nodeIndex] - 1;\\n    }\\n\\n    function _getNodeToLockedSchains() internal view returns (mapping(uint => bytes32[]) storage) {\\n        return _nodeToLockedSchains;\\n    }\\n\\n    function _getSchainToExceptionNodes() internal view returns (mapping(bytes32 => uint[]) storage) {\\n        return _schainToExceptionNodes;\\n    }\\n\\n    /**\\n     * @dev Generates schain group using a pseudo-random generator.\\n     */\\n    function _generateGroup(bytes32 schainId, uint numberOfNodes) private returns (uint[] memory nodesInGroup) {\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        uint8 space = schains[schainId].partOfNode;\\n        nodesInGroup = new uint[](numberOfNodes);\\n\\n        require(nodes.countNodesWithFreeSpace(space) >= nodesInGroup.length, \\\"Not enough nodes to create Schain\\\");\\n        Random.RandomGenerator memory randomGenerator = Random.createFromEntropy(\\n            abi.encodePacked(uint(blockhash(block.number.sub(1))), schainId)\\n        );\\n        for (uint i = 0; i < numberOfNodes; i++) {\\n            uint node = nodes.getRandomNodeWithFreeSpace(space, randomGenerator);\\n            nodesInGroup[i] = node;\\n            _setException(schainId, node);\\n            addSchainForNode(node, schainId);\\n            nodes.makeNodeInvisible(node);\\n            require(nodes.removeSpaceFromNode(node, space), \\\"Could not remove space from Node\\\");\\n        }\\n        // set generated group\\n        schainsGroups[schainId] = nodesInGroup;\\n        _makeSchainNodesVisible(schainId);\\n    }\\n\\n    function _setException(bytes32 schainId, uint nodeIndex) private {\\n        _exceptionsForGroups[schainId][nodeIndex] = true;\\n        _nodeToLockedSchains[nodeIndex].push(schainId);\\n        _schainToExceptionNodes[schainId].push(nodeIndex);\\n    }\\n\\n    function _makeSchainNodesVisible(bytes32 schainId) private {\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        for (uint i = 0; i < _schainToExceptionNodes[schainId].length; i++) {\\n            nodes.makeNodeVisible(_schainToExceptionNodes[schainId][i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns local index of node in schain group.\\n     */\\n    function _findNode(bytes32 schainId, uint nodeIndex) private view returns (uint) {\\n        uint[] memory nodesInGroup = schainsGroups[schainId];\\n        uint index;\\n        for (index = 0; index < nodesInGroup.length; index++) {\\n            if (nodesInGroup[index] == nodeIndex) {\\n                return index;\\n            }\\n        }\\n        return index;\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/ECDH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n/*\\n    Modifications Copyright (C) 2018 SKALE Labs\\n    ec.sol by @jbaylina under GPL-3.0 License\\n*/\\n/** @file ECDH.sol\\n * @author Jordi Baylina (@jbaylina)\\n * @date 2016\\n */\\n\\npragma solidity 0.6.10;\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n\\n/**\\n * @title ECDH\\n * @dev This contract performs Elliptic-curve Diffie-Hellman key exchange to\\n * support the DKG process.\\n */\\ncontract ECDH {\\n    using SafeMath for uint256;\\n\\n    uint256 constant private _GX = 0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798;\\n    uint256 constant private _GY = 0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8;\\n    uint256 constant private _N  = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n    uint256 constant private _A  = 0;\\n\\n    function publicKey(uint256 privKey) external pure returns (uint256 qx, uint256 qy) {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n        (x, y, z) = ecMul(\\n            privKey,\\n            _GX,\\n            _GY,\\n            1\\n        );\\n        z = inverse(z);\\n        qx = mulmod(x, z, _N);\\n        qy = mulmod(y, z, _N);\\n    }\\n\\n    function deriveKey(\\n        uint256 privKey,\\n        uint256 pubX,\\n        uint256 pubY\\n    )\\n        external\\n        pure\\n        returns (uint256 qx, uint256 qy)\\n    {\\n        uint256 x;\\n        uint256 y;\\n        uint256 z;\\n        (x, y, z) = ecMul(\\n            privKey,\\n            pubX,\\n            pubY,\\n            1\\n        );\\n        z = inverse(z);\\n        qx = mulmod(x, z, _N);\\n        qy = mulmod(y, z, _N);\\n    }\\n\\n    function jAdd(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 z3)\\n    {\\n        (x3, z3) = (addmod(mulmod(z2, x1, _N), mulmod(x2, z1, _N), _N), mulmod(z1, z2, _N));\\n    }\\n\\n    function jSub(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 z3)\\n    {\\n        (x3, z3) = (addmod(mulmod(z2, x1, _N), mulmod(_N.sub(x2), z1, _N), _N), mulmod(z1, z2, _N));\\n    }\\n\\n    function jMul(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 z3)\\n    {\\n        (x3, z3) = (mulmod(x1, x2, _N), mulmod(z1, z2, _N));\\n    }\\n\\n    function jDiv(\\n        uint256 x1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 z2\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 z3)\\n    {\\n        (x3, z3) = (mulmod(x1, z2, _N), mulmod(z1, x2, _N));\\n    }\\n\\n    function inverse(uint256 a) public pure returns (uint256 invA) {\\n        require(a > 0 && a < _N, \\\"Input is incorrect\\\");\\n        uint256 t = 0;\\n        uint256 newT = 1;\\n        uint256 r = _N;\\n        uint256 newR = a;\\n        uint256 q;\\n        while (newR != 0) {\\n            q = r.div(newR);\\n            (t, newT) = (newT, addmod(t, (_N.sub(mulmod(q, newT, _N))), _N));\\n            (r, newR) = (newR, r % newR);\\n        }\\n        return t;\\n    }\\n\\n    function ecAdd(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1,\\n        uint256 x2,\\n        uint256 y2,\\n        uint256 z2\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3)\\n    {\\n        uint256 ln;\\n        uint256 lz;\\n        uint256 da;\\n        uint256 db;\\n        // we use (0 0 1) as zero point, z always equal 1\\n        if ((x1 == 0) && (y1 == 0)) {\\n            return (x2, y2, z2);\\n        }\\n\\n        // we use (0 0 1) as zero point, z always equal 1\\n        if ((x2 == 0) && (y2 == 0)) {\\n            return (x1, y1, z1);\\n        }\\n\\n        if ((x1 == x2) && (y1 == y2)) {\\n            (ln, lz) = jMul(x1, z1, x1, z1);\\n            (ln, lz) = jMul(ln,lz,3,1);\\n            (ln, lz) = jAdd(ln,lz,_A,1);\\n            (da, db) = jMul(y1,z1,2,1);\\n        } else {\\n            (ln, lz) = jSub(y2,z2,y1,z1);\\n            (da, db) = jSub(x2,z2,x1,z1);\\n        }\\n        (ln, lz) = jDiv(ln,lz,da,db);\\n\\n        (x3, da) = jMul(ln,lz,ln,lz);\\n        (x3, da) = jSub(x3,da,x1,z1);\\n        (x3, da) = jSub(x3,da,x2,z2);\\n\\n        (y3, db) = jSub(x1,z1,x3,da);\\n        (y3, db) = jMul(y3,db,ln,lz);\\n        (y3, db) = jSub(y3,db,y1,z1);\\n\\n        if (da != db) {\\n            x3 = mulmod(x3, db, _N);\\n            y3 = mulmod(y3, da, _N);\\n            z3 = mulmod(da, db, _N);\\n        } else {\\n            z3 = da;\\n        }\\n    }\\n\\n    function ecDouble(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3)\\n    {\\n        (x3, y3, z3) = ecAdd(\\n            x1,\\n            y1,\\n            z1,\\n            x1,\\n            y1,\\n            z1\\n        );\\n    }\\n\\n    function ecMul(\\n        uint256 d,\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    )\\n        public\\n        pure\\n        returns (uint256 x3, uint256 y3, uint256 z3)\\n    {\\n        uint256 remaining = d;\\n        uint256 px = x1;\\n        uint256 py = y1;\\n        uint256 pz = z1;\\n        uint256 acx = 0;\\n        uint256 acy = 0;\\n        uint256 acz = 1;\\n\\n        if (d == 0) {\\n            return (0, 0, 1);\\n        }\\n\\n        while (remaining != 0) {\\n            if ((remaining & 1) != 0) {\\n                (acx, acy, acz) = ecAdd(\\n                    acx,\\n                    acy,\\n                    acz,\\n                    px,\\n                    py,\\n                    pz\\n                );\\n            }\\n            remaining = remaining.div(2);\\n            (px, py, pz) = ecDouble(px, py, pz);\\n        }\\n\\n        (x3, y3, z3) = (acx, acy, acz);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/Precompiled.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Precompiled.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n\\nlibrary Precompiled {\\n\\n    function bigModExp(uint base, uint power, uint modulus) internal view returns (uint) {\\n        uint[6] memory inputToBigModExp;\\n        inputToBigModExp[0] = 32;\\n        inputToBigModExp[1] = 32;\\n        inputToBigModExp[2] = 32;\\n        inputToBigModExp[3] = base;\\n        inputToBigModExp[4] = power;\\n        inputToBigModExp[5] = modulus;\\n        uint[1] memory out;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 5, inputToBigModExp, mul(6, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"BigModExp failed\\\");\\n        return out[0];\\n    }\\n\\n    function bn256ScalarMul(uint x, uint y, uint k) internal view returns (uint , uint ) {\\n        uint[3] memory inputToMul;\\n        uint[2] memory output;\\n        inputToMul[0] = x;\\n        inputToMul[1] = y;\\n        inputToMul[2] = k;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 7, inputToMul, 0x60, output, 0x40)\\n        }\\n        require(success, \\\"Multiplication failed\\\");\\n        return (output[0], output[1]);\\n    }\\n\\n    function bn256Pairing(\\n        uint x1,\\n        uint y1,\\n        uint a1,\\n        uint b1,\\n        uint c1,\\n        uint d1,\\n        uint x2,\\n        uint y2,\\n        uint a2,\\n        uint b2,\\n        uint c2,\\n        uint d2)\\n        internal view returns (bool)\\n    {\\n        bool success;\\n        uint[12] memory inputToPairing;\\n        inputToPairing[0] = x1;\\n        inputToPairing[1] = y1;\\n        inputToPairing[2] = a1;\\n        inputToPairing[3] = b1;\\n        inputToPairing[4] = c1;\\n        inputToPairing[5] = d1;\\n        inputToPairing[6] = x2;\\n        inputToPairing[7] = y2;\\n        inputToPairing[8] = a2;\\n        inputToPairing[9] = b2;\\n        inputToPairing[10] = c2;\\n        inputToPairing[11] = d2;\\n        uint[1] memory out;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(not(0), 8, inputToPairing, mul(12, 0x20), out, 0x20)\\n        }\\n        require(success, \\\"Pairing check failed\\\");\\n        return out[0] != 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/FieldOperations.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    FieldOperations.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./Precompiled.sol\\\";\\n\\n\\nlibrary Fp2Operations {\\n    using SafeMath for uint;\\n\\n    struct Fp2Point {\\n        uint a;\\n        uint b;\\n    }\\n\\n    uint constant public P = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    function addFp2(Fp2Point memory value1, Fp2Point memory value2) internal pure returns (Fp2Point memory) {\\n        return Fp2Point({ a: addmod(value1.a, value2.a, P), b: addmod(value1.b, value2.b, P) });\\n    }\\n\\n    function scalarMulFp2(Fp2Point memory value, uint scalar) internal pure returns (Fp2Point memory) {\\n        return Fp2Point({ a: mulmod(scalar, value.a, P), b: mulmod(scalar, value.b, P) });\\n    }\\n\\n    function minusFp2(Fp2Point memory diminished, Fp2Point memory subtracted) internal pure\\n        returns (Fp2Point memory difference)\\n    {\\n        uint p = P;\\n        if (diminished.a >= subtracted.a) {\\n            difference.a = addmod(diminished.a, p - subtracted.a, p);\\n        } else {\\n            difference.a = (p - addmod(subtracted.a, p - diminished.a, p)).mod(p);\\n        }\\n        if (diminished.b >= subtracted.b) {\\n            difference.b = addmod(diminished.b, p - subtracted.b, p);\\n        } else {\\n            difference.b = (p - addmod(subtracted.b, p - diminished.b, p)).mod(p);\\n        }\\n    }\\n\\n    function mulFp2(\\n        Fp2Point memory value1,\\n        Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (Fp2Point memory result)\\n    {\\n        uint p = P;\\n        Fp2Point memory point = Fp2Point({\\n            a: mulmod(value1.a, value2.a, p),\\n            b: mulmod(value1.b, value2.b, p)});\\n        result.a = addmod(\\n            point.a,\\n            mulmod(p - 1, point.b, p),\\n            p);\\n        result.b = addmod(\\n            mulmod(\\n                addmod(value1.a, value1.b, p),\\n                addmod(value2.a, value2.b, p),\\n                p),\\n            p - addmod(point.a, point.b, p),\\n            p);\\n    }\\n\\n    function squaredFp2(Fp2Point memory value) internal pure returns (Fp2Point memory) {\\n        uint p = P;\\n        uint ab = mulmod(value.a, value.b, p);\\n        uint mult = mulmod(addmod(value.a, value.b, p), addmod(value.a, mulmod(p - 1, value.b, p), p), p);\\n        return Fp2Point({ a: mult, b: addmod(ab, ab, p) });\\n    }\\n\\n    function inverseFp2(Fp2Point memory value) internal view returns (Fp2Point memory result) {\\n        uint p = P;\\n        uint t0 = mulmod(value.a, value.a, p);\\n        uint t1 = mulmod(value.b, value.b, p);\\n        uint t2 = mulmod(p - 1, t1, p);\\n        if (t0 >= t2) {\\n            t2 = addmod(t0, p - t2, p);\\n        } else {\\n            t2 = (p - addmod(t2, p - t0, p)).mod(p);\\n        }\\n        uint t3 = Precompiled.bigModExp(t2, p - 2, p);\\n        result.a = mulmod(value.a, t3, p);\\n        result.b = (p - mulmod(value.b, t3, p)).mod(p);\\n    }\\n\\n    function isEqual(\\n        Fp2Point memory value1,\\n        Fp2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.a == value2.a && value1.b == value2.b;\\n    }\\n}\\n\\nlibrary G1Operations {\\n    using SafeMath for uint;\\n    using Fp2Operations for Fp2Operations.Fp2Point;\\n\\n    function getG1Generator() internal pure returns (Fp2Operations.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return Fp2Operations.Fp2Point({\\n            a: 1,\\n            b: 2\\n        });\\n    }\\n\\n    function isG1Point(uint x, uint y) internal pure returns (bool) {\\n        uint p = Fp2Operations.P;\\n        return mulmod(y, y, p) == \\n            addmod(mulmod(mulmod(x, x, p), x, p), 3, p);\\n    }\\n\\n    function isG1(Fp2Operations.Fp2Point memory point) internal pure returns (bool) {\\n        return isG1Point(point.a, point.b);\\n    }\\n\\n    function checkRange(Fp2Operations.Fp2Point memory point) internal pure returns (bool) {\\n        return point.a < Fp2Operations.P && point.b < Fp2Operations.P;\\n    }\\n\\n    function negate(uint y) internal pure returns (uint) {\\n        return Fp2Operations.P.sub(y).mod(Fp2Operations.P);\\n    }\\n\\n}\\n\\n\\nlibrary G2Operations {\\n    using SafeMath for uint;\\n    using Fp2Operations for Fp2Operations.Fp2Point;\\n\\n    struct G2Point {\\n        Fp2Operations.Fp2Point x;\\n        Fp2Operations.Fp2Point y;\\n    }\\n\\n    function getTWISTB() internal pure returns (Fp2Operations.Fp2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return Fp2Operations.Fp2Point({\\n            a: 19485874751759354771024239261021720505790618469301721065564631296452457478373,\\n            b: 266929791119991161246907387137283842545076965332900288569378510910307636690\\n        });\\n    }\\n\\n    function getG2Generator() internal pure returns (G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return G2Point({\\n            x: Fp2Operations.Fp2Point({\\n                a: 10857046999023057135944570762232829481370756359578518086990519993285655852781,\\n                b: 11559732032986387107991004021392285783925812861821192530917403151452391805634\\n            }),\\n            y: Fp2Operations.Fp2Point({\\n                a: 8495653923123431417604973247489272438418190587263600148770280649306958101930,\\n                b: 4082367875863433681332203403145435568316851327593401208105741076214120093531\\n            })\\n        });\\n    }\\n\\n    function getG2Zero() internal pure returns (G2Point memory) {\\n        // Current solidity version does not support Constants of non-value type\\n        // so we implemented this function\\n        return G2Point({\\n            x: Fp2Operations.Fp2Point({\\n                a: 0,\\n                b: 0\\n            }),\\n            y: Fp2Operations.Fp2Point({\\n                a: 1,\\n                b: 0\\n            })\\n        });\\n    }\\n\\n    function isG2Point(Fp2Operations.Fp2Point memory x, Fp2Operations.Fp2Point memory y) internal pure returns (bool) {\\n        if (isG2ZeroPoint(x, y)) {\\n            return true;\\n        }\\n        Fp2Operations.Fp2Point memory squaredY = y.squaredFp2();\\n        Fp2Operations.Fp2Point memory res = squaredY.minusFp2(\\n                x.squaredFp2().mulFp2(x)\\n            ).minusFp2(getTWISTB());\\n        return res.a == 0 && res.b == 0;\\n    }\\n\\n    function isG2(G2Point memory value) internal pure returns (bool) {\\n        return isG2Point(value.x, value.y);\\n    }\\n\\n    function isG2ZeroPoint(\\n        Fp2Operations.Fp2Point memory x,\\n        Fp2Operations.Fp2Point memory y\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return x.a == 0 && x.b == 0 && y.a == 1 && y.b == 0;\\n    }\\n\\n    function isG2Zero(G2Point memory value) internal pure returns (bool) {\\n        return value.x.a == 0 && value.x.b == 0 && value.y.a == 1 && value.y.b == 0;\\n        // return isG2ZeroPoint(value.x, value.y);\\n    }\\n\\n    function addG2(\\n        G2Point memory value1,\\n        G2Point memory value2\\n    )\\n        internal\\n        view\\n        returns (G2Point memory sum)\\n    {\\n        if (isG2Zero(value1)) {\\n            return value2;\\n        }\\n        if (isG2Zero(value2)) {\\n            return value1;\\n        }\\n        if (isEqual(value1, value2)) {\\n            return doubleG2(value1);\\n        }\\n\\n        Fp2Operations.Fp2Point memory s = value2.y.minusFp2(value1.y).mulFp2(value2.x.minusFp2(value1.x).inverseFp2());\\n        sum.x = s.squaredFp2().minusFp2(value1.x.addFp2(value2.x));\\n        sum.y = value1.y.addFp2(s.mulFp2(sum.x.minusFp2(value1.x)));\\n        uint p = Fp2Operations.P;\\n        sum.y.a = (p - sum.y.a).mod(p);\\n        sum.y.b = (p - sum.y.b).mod(p);\\n    }\\n\\n    function isEqual(\\n        G2Point memory value1,\\n        G2Point memory value2\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return value1.x.isEqual(value2.x) && value1.y.isEqual(value2.y);\\n    }\\n\\n    function doubleG2(G2Point memory value)\\n        internal\\n        view\\n        returns (G2Point memory result)\\n    {\\n        if (isG2Zero(value)) {\\n            return value;\\n        } else {\\n            Fp2Operations.Fp2Point memory s =\\n                value.x.squaredFp2().scalarMulFp2(3).mulFp2(value.y.scalarMulFp2(2).inverseFp2());\\n            result.x = s.squaredFp2().minusFp2(value.x.addFp2(value.x));\\n            result.y = value.y.addFp2(s.mulFp2(result.x.minusFp2(value.x)));\\n            uint p = Fp2Operations.P;\\n            result.y.a = (p - result.y.a).mod(p);\\n            result.y.b = (p - result.y.b).mod(p);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, _msgSender()));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n */\\nabstract contract AccessControlUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/ContractManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ContractManager.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./utils/StringUtils.sol\\\";\\n\\n\\n/**\\n * @title ContractManager\\n * @dev Contract contains the actual current mapping from contract IDs\\n * (in the form of human-readable strings) to addresses.\\n */\\ncontract ContractManager is OwnableUpgradeSafe {\\n    using StringUtils for string;\\n    using Address for address;\\n\\n    string public constant BOUNTY = \\\"Bounty\\\";\\n    string public constant CONSTANTS_HOLDER = \\\"ConstantsHolder\\\";\\n    string public constant DELEGATION_PERIOD_MANAGER = \\\"DelegationPeriodManager\\\";\\n    string public constant PUNISHER = \\\"Punisher\\\";\\n    string public constant SKALE_TOKEN = \\\"SkaleToken\\\";\\n    string public constant TIME_HELPERS = \\\"TimeHelpers\\\";\\n    string public constant TOKEN_STATE = \\\"TokenState\\\";\\n    string public constant VALIDATOR_SERVICE = \\\"ValidatorService\\\";\\n\\n    // mapping of actual smart contracts addresses\\n    mapping (bytes32 => address) public contracts;\\n\\n    /**\\n     * @dev Emitted when contract is upgraded.\\n     */\\n    event ContractUpgraded(string contractsName, address contractsAddress);\\n\\n    function initialize() external initializer {\\n        OwnableUpgradeSafe.__Ownable_init();\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to add contract to mapping of contract addresses.\\n     * \\n     * Emits a {ContractUpgraded} event.\\n     * \\n     * Requirements:\\n     * \\n     * - New address is non-zero.\\n     * - Contract is not already added.\\n     * - Contract address contains code.\\n     */\\n    function setContractsAddress(string calldata contractsName, address newContractsAddress) external onlyOwner {\\n        // check newContractsAddress is not equal to zero\\n        require(newContractsAddress != address(0), \\\"New address is equal zero\\\");\\n        // create hash of contractsName\\n        bytes32 contractId = keccak256(abi.encodePacked(contractsName));\\n        // check newContractsAddress is not equal the previous contract's address\\n        require(contracts[contractId] != newContractsAddress, \\\"Contract is already added\\\");\\n        require(newContractsAddress.isContract(), \\\"Given contract address does not contain code\\\");\\n        // add newContractsAddress to mapping of actual contract addresses\\n        contracts[contractId] = newContractsAddress;\\n        emit ContractUpgraded(contractsName, newContractsAddress);\\n    }\\n\\n    /**\\n     * @dev Returns contract address.\\n     * \\n     * Requirements:\\n     * \\n     * - Contract must exist.\\n     */\\n    function getDelegationPeriodManager() external view returns (address) {\\n        return getContract(DELEGATION_PERIOD_MANAGER);\\n    }\\n\\n    function getBounty() external view returns (address) {\\n        return getContract(BOUNTY);\\n    }\\n\\n    function getValidatorService() external view returns (address) {\\n        return getContract(VALIDATOR_SERVICE);\\n    }\\n\\n    function getTimeHelpers() external view returns (address) {\\n        return getContract(TIME_HELPERS);\\n    }\\n\\n    function getConstantsHolder() external view returns (address) {\\n        return getContract(CONSTANTS_HOLDER);\\n    }\\n\\n    function getSkaleToken() external view returns (address) {\\n        return getContract(SKALE_TOKEN);\\n    }\\n\\n    function getTokenState() external view returns (address) {\\n        return getContract(TOKEN_STATE);\\n    }\\n\\n    function getPunisher() external view returns (address) {\\n        return getContract(PUNISHER);\\n    }\\n\\n    function getContract(string memory name) public view returns (address contractAddress) {\\n        contractAddress = contracts[keccak256(abi.encodePacked(name))];\\n        if (contractAddress == address(0)) {\\n            revert(name.strConcat(\\\" contract has not been found\\\"));\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/EnumerableSet.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only sets of type `address` (`AddressSet`) and `uint256`\\n * (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\nimport \\\"../Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract ContextUpgradeSafe is Initializable {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n\\n\\n    }\\n\\n\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\": {\r\n      \"content\": \"pragma solidity >=0.4.24 <0.7.0;\\n\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(initializing || isConstructor() || !initialized, \\\"Contract instance has already been initialized\\\");\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    address self = address(this);\\n    uint256 cs;\\n    assembly { cs := extcodesize(self) }\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private ______gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\nimport \\\"../Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n\\n\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n\\n    }\\n\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/utils/StringUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    StringUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary StringUtils {\\n    using SafeMath for uint;\\n\\n    function strConcat(string memory a, string memory b) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(a);\\n        bytes memory _bb = bytes(b);\\n\\n        string memory ab = new string(_ba.length.add(_bb.length));\\n        bytes memory strBytes = bytes(ab);\\n        uint k = 0;\\n        uint i = 0;\\n        for (i = 0; i < _ba.length; i++) {\\n            strBytes[k++] = _ba[i];\\n        }\\n        for (i = 0; i < _bb.length; i++) {\\n            strBytes[k++] = _bb[i];\\n        }\\n        return string(strBytes);\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISkaleDKG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ISkaleDKG.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface to {SkaleDKG}.\\n */\\ninterface ISkaleDKG {\\n\\n    /**\\n     * @dev See {SkaleDKG-openChannel}.\\n     */\\n    function openChannel(bytes32 schainId) external;\\n\\n    /**\\n     * @dev See {SkaleDKG-deleteChannel}.\\n     */\\n    function deleteChannel(bytes32 schainId) external;\\n\\n    /**\\n     * @dev See {SkaleDKG-isLastDKGSuccessful}.\\n     */\\n    function isLastDKGSuccessful(bytes32 groupIndex) external view returns (bool);\\n    \\n    /**\\n     * @dev See {SkaleDKG-isChannelOpened}.\\n     */\\n    function isChannelOpened(bytes32 schainId) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/utils/Random.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SegmentTree.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Random\\n * @dev The library for generating of pseudo random numbers\\n */\\nlibrary Random {\\n    using SafeMath for uint;\\n\\n    struct RandomGenerator {\\n        uint seed;\\n    }\\n\\n    /**\\n     * @dev Create an instance of RandomGenerator\\n     */\\n    function create(uint seed) internal pure returns (RandomGenerator memory) {\\n        return RandomGenerator({seed: seed});\\n    }\\n\\n    function createFromEntropy(bytes memory entropy) internal pure returns (RandomGenerator memory) {\\n        return create(uint(keccak256(entropy)));\\n    }\\n\\n    /**\\n     * @dev Generates random value\\n     */\\n    function random(RandomGenerator memory self) internal pure returns (uint) {\\n        self.seed = uint(sha256(abi.encodePacked(self.seed)));\\n        return self.seed;\\n    }\\n\\n    /**\\n     * @dev Generates random value in range [0, max)\\n     */\\n    function random(RandomGenerator memory self, uint max) internal pure returns (uint) {\\n        assert(max > 0);\\n        uint maxRand = uint(-1).sub(uint(-1).mod(max));\\n        if (uint(-1).sub(maxRand) == max.sub(1)) {\\n            return random(self).mod(max);\\n        } else {\\n            uint rand = random(self);\\n            while (rand >= maxRand) {\\n                rand = random(self);\\n            }\\n            return rand.mod(max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Generates random value in range [min, max)\\n     */\\n    function random(RandomGenerator memory self, uint min, uint max) internal pure returns (uint) {\\n        assert(min < max);\\n        return min.add(random(self, max.sub(min)));\\n    }\\n}\"\r\n    },\r\n    \"contracts/ConstantsHolder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ConstantsHolder.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title ConstantsHolder\\n * @dev Contract contains constants and common variables for the SKALE Network.\\n */\\ncontract ConstantsHolder is Permissions {\\n\\n    // initial price for creating Node (100 SKL)\\n    uint public constant NODE_DEPOSIT = 100 * 1e18;\\n\\n    uint8 public constant TOTAL_SPACE_ON_NODE = 128;\\n\\n    // part of Node for Small Skale-chain (1/128 of Node)\\n    uint8 public constant SMALL_DIVISOR = 128;\\n\\n    // part of Node for Medium Skale-chain (1/32 of Node)\\n    uint8 public constant MEDIUM_DIVISOR = 32;\\n\\n    // part of Node for Large Skale-chain (full Node)\\n    uint8 public constant LARGE_DIVISOR = 1;\\n\\n    // part of Node for Medium Test Skale-chain (1/4 of Node)\\n    uint8 public constant MEDIUM_TEST_DIVISOR = 4;\\n\\n    // typically number of Nodes for Skale-chain (16 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_SCHAIN = 16;\\n\\n    // number of Nodes for Test Skale-chain (2 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_TEST_SCHAIN = 2;\\n\\n    // number of Nodes for Test Skale-chain (4 Nodes)\\n    uint public constant NUMBER_OF_NODES_FOR_MEDIUM_TEST_SCHAIN = 4;    \\n\\n    // number of seconds in one year\\n    uint32 public constant SECONDS_TO_YEAR = 31622400;\\n\\n    // initial number of monitors\\n    uint public constant NUMBER_OF_MONITORS = 24;\\n\\n    uint public constant OPTIMAL_LOAD_PERCENTAGE = 80;\\n\\n    uint public constant ADJUSTMENT_SPEED = 1000;\\n\\n    uint public constant COOLDOWN_TIME = 60;\\n\\n    uint public constant MIN_PRICE = 10**6;\\n\\n    uint public constant MSR_REDUCING_COEFFICIENT = 2;\\n\\n    uint public constant DOWNTIME_THRESHOLD_PART = 30;\\n\\n    uint public constant BOUNTY_LOCKUP_MONTHS = 2;\\n\\n    uint public constant ALRIGHT_DELTA = 54640;\\n    uint public constant BROADCAST_DELTA = 122660;\\n    uint public constant COMPLAINT_BAD_DATA_DELTA = 40720;\\n    uint public constant PRE_RESPONSE_DELTA = 67780;\\n    uint public constant COMPLAINT_DELTA = 67100;\\n    uint public constant RESPONSE_DELTA = 215000;\\n\\n    // MSR - Minimum staking requirement\\n    uint public msr;\\n\\n    // Reward period - 30 days (each 30 days Node would be granted for bounty)\\n    uint32 public rewardPeriod;\\n\\n    // Allowable latency - 150000 ms by default\\n    uint32 public allowableLatency;\\n\\n    /**\\n     * Delta period - 1 hour (1 hour before Reward period became Monitors need\\n     * to send Verdicts and 1 hour after Reward period became Node need to come\\n     * and get Bounty)\\n     */\\n    uint32 public deltaPeriod;\\n\\n    /**\\n     * Check time - 2 minutes (every 2 minutes monitors should check metrics\\n     * from checked nodes)\\n     */\\n    uint public checkTime;\\n\\n    //Need to add minimal allowed parameters for verdicts\\n\\n    uint public launchTimestamp;\\n\\n    uint public rotationDelay;\\n\\n    uint public proofOfUseLockUpPeriodDays;\\n\\n    uint public proofOfUseDelegationPercentage;\\n\\n    uint public limitValidatorsPerDelegator;\\n\\n    uint256 public firstDelegationsMonth; // deprecated\\n\\n    // date when schains will be allowed for creation\\n    uint public schainCreationTimeStamp;\\n\\n    uint public minimalSchainLifetime;\\n\\n    uint public complaintTimelimit;\\n\\n    /**\\n     * @dev Allows the Owner to set new reward and delta periods\\n     * This function is only for tests.\\n     */\\n    function setPeriods(uint32 newRewardPeriod, uint32 newDeltaPeriod) external onlyOwner {\\n        require(\\n            newRewardPeriod >= newDeltaPeriod && newRewardPeriod - newDeltaPeriod >= checkTime,\\n            \\\"Incorrect Periods\\\"\\n        );\\n        rewardPeriod = newRewardPeriod;\\n        deltaPeriod = newDeltaPeriod;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the new check time.\\n     * This function is only for tests.\\n     */\\n    function setCheckTime(uint newCheckTime) external onlyOwner {\\n        require(rewardPeriod - deltaPeriod >= checkTime, \\\"Incorrect check time\\\");\\n        checkTime = newCheckTime;\\n    }    \\n\\n    /**\\n     * @dev Allows the Owner to set the allowable latency in milliseconds.\\n     * This function is only for testing purposes.\\n     */\\n    function setLatency(uint32 newAllowableLatency) external onlyOwner {\\n        allowableLatency = newAllowableLatency;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the minimum stake requirement.\\n     */\\n    function setMSR(uint newMSR) external onlyOwner {\\n        msr = newMSR;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the launch timestamp.\\n     */\\n    function setLaunchTimestamp(uint timestamp) external onlyOwner {\\n        require(now < launchTimestamp, \\\"Cannot set network launch timestamp because network is already launched\\\");\\n        launchTimestamp = timestamp;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the node rotation delay.\\n     */\\n    function setRotationDelay(uint newDelay) external onlyOwner {\\n        rotationDelay = newDelay;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use lockup period.\\n     */\\n    function setProofOfUseLockUpPeriod(uint periodDays) external onlyOwner {\\n        proofOfUseLockUpPeriodDays = periodDays;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the proof-of-use delegation percentage\\n     * requirement.\\n     */\\n    function setProofOfUseDelegationPercentage(uint percentage) external onlyOwner {\\n        require(percentage <= 100, \\\"Percentage value is incorrect\\\");\\n        proofOfUseDelegationPercentage = percentage;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to set the maximum number of validators that a\\n     * single delegator can delegate to.\\n     */\\n    function setLimitValidatorsPerDelegator(uint newLimit) external onlyOwner {\\n        limitValidatorsPerDelegator = newLimit;\\n    }\\n\\n    function setSchainCreationTimeStamp(uint timestamp) external onlyOwner {\\n        schainCreationTimeStamp = timestamp;\\n    }\\n\\n    function setMinimalSchainLifetime(uint lifetime) external onlyOwner {\\n        minimalSchainLifetime = lifetime;\\n    }\\n\\n    function setComplaintTimelimit(uint timelimit) external onlyOwner {\\n        complaintTimelimit = timelimit;\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        msr = 0;\\n        rewardPeriod = 2592000;\\n        allowableLatency = 150000;\\n        deltaPeriod = 3600;\\n        checkTime = 300;\\n        launchTimestamp = uint(-1);\\n        rotationDelay = 12 hours;\\n        proofOfUseLockUpPeriodDays = 90;\\n        proofOfUseDelegationPercentage = 50;\\n        limitValidatorsPerDelegator = 20;\\n        firstDelegationsMonth = 0;\\n        complaintTimelimit = 1800;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Nodes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Nodes.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Artem Payvin\\n    @author Dmytro Stebaiev\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\\\";\\n\\nimport \\\"./delegation/DelegationController.sol\\\";\\nimport \\\"./delegation/ValidatorService.sol\\\";\\nimport \\\"./utils/Random.sol\\\";\\nimport \\\"./utils/SegmentTree.sol\\\";\\n\\nimport \\\"./BountyV2.sol\\\";\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n\\n/**\\n * @title Nodes\\n * @dev This contract contains all logic to manage SKALE Network nodes states,\\n * space availability, stake requirement checks, and exit functions.\\n * \\n * Nodes may be in one of several states:\\n * \\n * - Active:            Node is registered and is in network operation.\\n * - Leaving:           Node has begun exiting from the network.\\n * - Left:              Node has left the network.\\n * - In_Maintenance:    Node is temporarily offline or undergoing infrastructure\\n * maintenance\\n * \\n * Note: Online nodes contain both Active and Leaving states.\\n */\\ncontract Nodes is Permissions {\\n    \\n    using Random for Random.RandomGenerator;\\n    using SafeCast for uint;\\n    using SegmentTree for SegmentTree.Tree;\\n\\n    // All Nodes states\\n    enum NodeStatus {Active, Leaving, Left, In_Maintenance}\\n\\n    struct Node {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIP;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint startBlock;\\n        uint lastRewardDate;\\n        uint finishTime;\\n        NodeStatus status;\\n        uint validatorId;\\n    }\\n\\n    // struct to note which Nodes and which number of Nodes owned by user\\n    struct CreatedNodes {\\n        mapping (uint => bool) isNodeExist;\\n        uint numberOfNodes;\\n    }\\n\\n    struct SpaceManaging {\\n        uint8 freeSpace;\\n        uint indexInSpaceMap;\\n    }\\n\\n    // TODO: move outside the contract\\n    struct NodeCreationParams {\\n        string name;\\n        bytes4 ip;\\n        bytes4 publicIp;\\n        uint16 port;\\n        bytes32[2] publicKey;\\n        uint16 nonce;\\n        string domainName;\\n    }\\n\\n    // array which contain all Nodes\\n    Node[] public nodes;\\n\\n    SpaceManaging[] public spaceOfNodes;\\n\\n    // mapping for checking which Nodes and which number of Nodes owned by user\\n    mapping (address => CreatedNodes) public nodeIndexes;\\n    // mapping for checking is IP address busy\\n    mapping (bytes4 => bool) public nodesIPCheck;\\n    // mapping for checking is Name busy\\n    mapping (bytes32 => bool) public nodesNameCheck;\\n    // mapping for indication from Name to Index\\n    mapping (bytes32 => uint) public nodesNameToIndex;\\n    // mapping for indication from space to Nodes\\n    mapping (uint8 => uint[]) public spaceToNodes;\\n\\n    mapping (uint => uint[]) public validatorToNodeIndexes;\\n\\n    uint public numberOfActiveNodes;\\n    uint public numberOfLeavingNodes;\\n    uint public numberOfLeftNodes;\\n\\n    mapping (uint => string) public domainNames;\\n\\n    mapping (uint => bool) private _invisible;\\n\\n    SegmentTree.Tree private _nodesAmountBySpace;\\n\\n    /**\\n     * @dev Emitted when a node is created.\\n     */\\n    event NodeCreated(\\n        uint nodeIndex,\\n        address owner,\\n        string name,\\n        bytes4 ip,\\n        bytes4 publicIP,\\n        uint16 port,\\n        uint16 nonce,\\n        string domainName,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    /**\\n     * @dev Emitted when a node completes a network exit.\\n     */\\n    event ExitCompleted(\\n        uint nodeIndex,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    /**\\n     * @dev Emitted when a node begins to exit from the network.\\n     */\\n    event ExitInitialized(\\n        uint nodeIndex,\\n        uint startLeavingPeriod,\\n        uint time,\\n        uint gasSpend\\n    );\\n\\n    modifier checkNodeExists(uint nodeIndex) {\\n        _checkNodeIndex(nodeIndex);\\n        _;\\n    }\\n\\n    modifier onlyNodeOrAdmin(uint nodeIndex) {\\n        _checkNodeOrAdmin(nodeIndex, msg.sender);\\n        _;\\n    }\\n\\n    function initializeSegmentTreeAndInvisibleNodes() external onlyOwner {\\n        for (uint i = 0; i < nodes.length; i++) {\\n            if (nodes[i].status != NodeStatus.Active && nodes[i].status != NodeStatus.Left) {\\n                _invisible[i] = true;\\n                _removeNodeFromSpaceToNodes(i, spaceOfNodes[i].freeSpace);\\n            }\\n        }\\n        uint8 totalSpace = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\")).TOTAL_SPACE_ON_NODE();\\n        _nodesAmountBySpace.create(totalSpace);\\n        for (uint8 i = 1; i <= totalSpace; i++) {\\n            if (spaceToNodes[i].length > 0)\\n                _nodesAmountBySpace.addToPlace(i, spaceToNodes[i].length);\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Schains and SchainsInternal contracts to occupy available\\n     * space on a node.\\n     * \\n     * Returns whether operation is successful.\\n     */\\n    function removeSpaceFromNode(uint nodeIndex, uint8 space)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allowTwo(\\\"NodeRotation\\\", \\\"SchainsInternal\\\")\\n        returns (bool)\\n    {\\n        if (spaceOfNodes[nodeIndex].freeSpace < space) {\\n            return false;\\n        }\\n        if (space > 0) {\\n            _moveNodeToNewSpaceMap(\\n                nodeIndex,\\n                uint(spaceOfNodes[nodeIndex].freeSpace).sub(space).toUint8()\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows Schains contract to occupy free space on a node.\\n     * \\n     * Returns whether operation is successful.\\n     */\\n    function addSpaceToNode(uint nodeIndex, uint8 space)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allowTwo(\\\"Schains\\\", \\\"NodeRotation\\\")\\n    {\\n        if (space > 0) {\\n            _moveNodeToNewSpaceMap(\\n                nodeIndex,\\n                uint(spaceOfNodes[nodeIndex].freeSpace).add(space).toUint8()\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager to change a node's last reward date.\\n     */\\n    function changeNodeLastRewardDate(uint nodeIndex)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"SkaleManager\\\")\\n    {\\n        nodes[nodeIndex].lastRewardDate = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager to change a node's finish time.\\n     */\\n    function changeNodeFinishTime(uint nodeIndex, uint time)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"SkaleManager\\\")\\n    {\\n        nodes[nodeIndex].finishTime = time;\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to create new node and add it to the\\n     * Nodes contract.\\n     * \\n     * Emits a {NodeCreated} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Node IP must be non-zero.\\n     * - Node IP must be available.\\n     * - Node name must not already be registered.\\n     * - Node port must be greater than zero.\\n     */\\n    function createNode(address from, NodeCreationParams calldata params)\\n        external\\n        allow(\\\"SkaleManager\\\")\\n    {\\n        // checks that Node has correct data\\n        require(params.ip != 0x0 && !nodesIPCheck[params.ip], \\\"IP address is zero or is not available\\\");\\n        require(!nodesNameCheck[keccak256(abi.encodePacked(params.name))], \\\"Name is already registered\\\");\\n        require(params.port > 0, \\\"Port is zero\\\");\\n        require(from == _publicKeyToAddress(params.publicKey), \\\"Public Key is incorrect\\\");\\n        uint validatorId = ValidatorService(\\n            contractManager.getContract(\\\"ValidatorService\\\")).getValidatorIdByNodeAddress(from);\\n        uint8 totalSpace = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\")).TOTAL_SPACE_ON_NODE();\\n        nodes.push(Node({\\n            name: params.name,\\n            ip: params.ip,\\n            publicIP: params.publicIp,\\n            port: params.port,\\n            publicKey: params.publicKey,\\n            startBlock: block.number,\\n            lastRewardDate: block.timestamp,\\n            finishTime: 0,\\n            status: NodeStatus.Active,\\n            validatorId: validatorId\\n        }));\\n        uint nodeIndex = nodes.length.sub(1);\\n        validatorToNodeIndexes[validatorId].push(nodeIndex);\\n        bytes32 nodeId = keccak256(abi.encodePacked(params.name));\\n        nodesIPCheck[params.ip] = true;\\n        nodesNameCheck[nodeId] = true;\\n        nodesNameToIndex[nodeId] = nodeIndex;\\n        nodeIndexes[from].isNodeExist[nodeIndex] = true;\\n        nodeIndexes[from].numberOfNodes++;\\n        domainNames[nodeIndex] = params.domainName;\\n        spaceOfNodes.push(SpaceManaging({\\n            freeSpace: totalSpace,\\n            indexInSpaceMap: spaceToNodes[totalSpace].length\\n        }));\\n        _setNodeActive(nodeIndex);\\n        emit NodeCreated(\\n            nodeIndex,\\n            from,\\n            params.name,\\n            params.ip,\\n            params.publicIp,\\n            params.port,\\n            params.nonce,\\n            params.domainName,\\n            block.timestamp,\\n            gasleft());\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to initiate a node exit procedure.\\n     * \\n     * Returns whether the operation is successful.\\n     * \\n     * Emits an {ExitInitialized} event.\\n     */\\n    function initExit(uint nodeIndex)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"SkaleManager\\\")\\n        returns (bool)\\n    {\\n        require(isNodeActive(nodeIndex), \\\"Node should be Active\\\");\\n    \\n        _setNodeLeaving(nodeIndex);\\n\\n        emit ExitInitialized(\\n            nodeIndex,\\n            block.timestamp,\\n            block.timestamp,\\n            gasleft());\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to complete a node exit procedure.\\n     * \\n     * Returns whether the operation is successful.\\n     * \\n     * Emits an {ExitCompleted} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Node must have already initialized a node exit procedure.\\n     */\\n    function completeExit(uint nodeIndex)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"SkaleManager\\\")\\n        returns (bool)\\n    {\\n        require(isNodeLeaving(nodeIndex), \\\"Node is not Leaving\\\");\\n\\n        _setNodeLeft(nodeIndex);\\n\\n        emit ExitCompleted(\\n            nodeIndex,\\n            block.timestamp,\\n            gasleft());\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to delete a validator's node.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator ID must exist.\\n     */\\n    function deleteNodeForValidator(uint validatorId, uint nodeIndex)\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"SkaleManager\\\")\\n    {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n        require(validatorService.validatorExists(validatorId), \\\"Validator ID does not exist\\\");\\n        uint[] memory validatorNodes = validatorToNodeIndexes[validatorId];\\n        uint position = _findNode(validatorNodes, nodeIndex);\\n        if (position < validatorNodes.length) {\\n            validatorToNodeIndexes[validatorId][position] =\\n                validatorToNodeIndexes[validatorId][validatorNodes.length.sub(1)];\\n        }\\n        validatorToNodeIndexes[validatorId].pop();\\n        address nodeOwner = _publicKeyToAddress(nodes[nodeIndex].publicKey);\\n        if (validatorService.getValidatorIdByNodeAddress(nodeOwner) == validatorId) {\\n            if (nodeIndexes[nodeOwner].numberOfNodes == 1 && !validatorService.validatorAddressExists(nodeOwner)) {\\n                validatorService.removeNodeAddress(validatorId, nodeOwner);\\n            }\\n            nodeIndexes[nodeOwner].isNodeExist[nodeIndex] = false;\\n            nodeIndexes[nodeOwner].numberOfNodes--;\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to check whether a validator has\\n     * sufficient stake to create another node.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must be included on trusted list if trusted list is enabled.\\n     * - Validator must have sufficient stake to operate an additional node.\\n     */\\n    function checkPossibilityCreatingNode(address nodeAddress) external allow(\\\"SkaleManager\\\") {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n        uint validatorId = validatorService.getValidatorIdByNodeAddress(nodeAddress);\\n        require(validatorService.isAuthorizedValidator(validatorId), \\\"Validator is not authorized to create a node\\\");\\n        require(\\n            _checkValidatorPositionToMaintainNode(validatorId, validatorToNodeIndexes[validatorId].length),\\n            \\\"Validator must meet the Minimum Staking Requirement\\\");\\n    }\\n\\n    /**\\n     * @dev Allows SkaleManager contract to check whether a validator has\\n     * sufficient stake to maintain a node.\\n     * \\n     * Returns whether validator can maintain node with current stake.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator ID and nodeIndex must both exist.\\n     */\\n    function checkPossibilityToMaintainNode(\\n        uint validatorId,\\n        uint nodeIndex\\n    )\\n        external\\n        checkNodeExists(nodeIndex)\\n        allow(\\\"Bounty\\\")\\n        returns (bool)\\n    {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n        require(validatorService.validatorExists(validatorId), \\\"Validator ID does not exist\\\");\\n        uint[] memory validatorNodes = validatorToNodeIndexes[validatorId];\\n        uint position = _findNode(validatorNodes, nodeIndex);\\n        require(position < validatorNodes.length, \\\"Node does not exist for this Validator\\\");\\n        return _checkValidatorPositionToMaintainNode(validatorId, position);\\n    }\\n\\n    /**\\n     * @dev Allows Node to set In_Maintenance status.\\n     * \\n     * Requirements:\\n     * \\n     * - Node must already be Active.\\n     * - `msg.sender` must be owner of Node, validator, or SkaleManager.\\n     */\\n    function setNodeInMaintenance(uint nodeIndex) external onlyNodeOrAdmin(nodeIndex) {\\n        require(nodes[nodeIndex].status == NodeStatus.Active, \\\"Node is not Active\\\");\\n        _setNodeInMaintenance(nodeIndex);\\n    }\\n\\n    /**\\n     * @dev Allows Node to remove In_Maintenance status.\\n     * \\n     * Requirements:\\n     * \\n     * - Node must already be In Maintenance.\\n     * - `msg.sender` must be owner of Node, validator, or SkaleManager.\\n     */\\n    function removeNodeFromInMaintenance(uint nodeIndex) external onlyNodeOrAdmin(nodeIndex) {\\n        require(nodes[nodeIndex].status == NodeStatus.In_Maintenance, \\\"Node is not In Maintenance\\\");\\n        _setNodeActive(nodeIndex);\\n    }\\n\\n    function setDomainName(uint nodeIndex, string memory domainName)\\n        external\\n        onlyNodeOrAdmin(nodeIndex)\\n    {\\n        domainNames[nodeIndex] = domainName;\\n    }\\n    \\n    function makeNodeVisible(uint nodeIndex) external allow(\\\"SchainsInternal\\\") {\\n        _makeNodeVisible(nodeIndex);\\n    }\\n\\n    function makeNodeInvisible(uint nodeIndex) external allow(\\\"SchainsInternal\\\") {\\n        _makeNodeInvisible(nodeIndex);\\n    }\\n\\n    function getRandomNodeWithFreeSpace(\\n        uint8 freeSpace,\\n        Random.RandomGenerator memory randomGenerator\\n    )\\n        external\\n        view\\n        returns (uint)\\n    {\\n        uint8 place = _nodesAmountBySpace.getRandomNonZeroElementFromPlaceToLast(\\n            freeSpace == 0 ? 1 : freeSpace,\\n            randomGenerator\\n        ).toUint8();\\n        require(place > 0, \\\"Node not found\\\");\\n        return spaceToNodes[place][randomGenerator.random(spaceToNodes[place].length)]; \\n    }\\n\\n    /**\\n     * @dev Checks whether it is time for a node's reward.\\n     */\\n    function isTimeForReward(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return BountyV2(contractManager.getBounty()).getNextRewardTimestamp(nodeIndex) <= now;\\n    }\\n\\n    /**\\n     * @dev Returns IP address of a given node.\\n     * \\n     * Requirements:\\n     * \\n     * - Node must exist.\\n     */\\n    function getNodeIP(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bytes4)\\n    {\\n        require(nodeIndex < nodes.length, \\\"Node does not exist\\\");\\n        return nodes[nodeIndex].ip;\\n    }\\n\\n    /**\\n     * @dev Returns domain name of a given node.\\n     * \\n     * Requirements:\\n     * \\n     * - Node must exist.\\n     */\\n    function getNodeDomainName(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (string memory)\\n    {\\n        return domainNames[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Returns the port of a given node.\\n     *\\n     * Requirements:\\n     *\\n     * - Node must exist.\\n     */\\n    function getNodePort(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (uint16)\\n    {\\n        return nodes[nodeIndex].port;\\n    }\\n\\n    /**\\n     * @dev Returns the public key of a given node.\\n     */\\n    function getNodePublicKey(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bytes32[2] memory)\\n    {\\n        return nodes[nodeIndex].publicKey;\\n    }\\n\\n    /**\\n     * @dev Returns an address of a given node.\\n     */\\n    function getNodeAddress(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (address)\\n    {\\n        return _publicKeyToAddress(nodes[nodeIndex].publicKey);\\n    }\\n\\n\\n    /**\\n     * @dev Returns the finish exit time of a given node.\\n     */\\n    function getNodeFinishTime(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (uint)\\n    {\\n        return nodes[nodeIndex].finishTime;\\n    }\\n\\n    /**\\n     * @dev Checks whether a node has left the network.\\n     */\\n    function isNodeLeft(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return nodes[nodeIndex].status == NodeStatus.Left;\\n    }\\n\\n    function isNodeInMaintenance(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return nodes[nodeIndex].status == NodeStatus.In_Maintenance;\\n    }\\n\\n    /**\\n     * @dev Returns a given node's last reward date.\\n     */\\n    function getNodeLastRewardDate(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (uint)\\n    {\\n        return nodes[nodeIndex].lastRewardDate;\\n    }\\n\\n    /**\\n     * @dev Returns a given node's next reward date.\\n     */\\n    function getNodeNextRewardDate(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (uint)\\n    {\\n        return BountyV2(contractManager.getBounty()).getNextRewardTimestamp(nodeIndex);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of registered nodes.\\n     */\\n    function getNumberOfNodes() external view returns (uint) {\\n        return nodes.length;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of online nodes.\\n     * \\n     * Note: Online nodes are equal to the number of active plus leaving nodes.\\n     */\\n    function getNumberOnlineNodes() external view returns (uint) {\\n        return numberOfActiveNodes.add(numberOfLeavingNodes);\\n    }\\n\\n    /**\\n     * @dev Return active node IDs.\\n     */\\n    function getActiveNodeIds() external view returns (uint[] memory activeNodeIds) {\\n        activeNodeIds = new uint[](numberOfActiveNodes);\\n        uint indexOfActiveNodeIds = 0;\\n        for (uint indexOfNodes = 0; indexOfNodes < nodes.length; indexOfNodes++) {\\n            if (isNodeActive(indexOfNodes)) {\\n                activeNodeIds[indexOfActiveNodeIds] = indexOfNodes;\\n                indexOfActiveNodeIds++;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Return a given node's current status.\\n     */\\n    function getNodeStatus(uint nodeIndex)\\n        external\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (NodeStatus)\\n    {\\n        return nodes[nodeIndex].status;\\n    }\\n\\n    /**\\n     * @dev Return a validator's linked nodes.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator ID must exist.\\n     */\\n    function getValidatorNodeIndexes(uint validatorId) external view returns (uint[] memory) {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n        require(validatorService.validatorExists(validatorId), \\\"Validator ID does not exist\\\");\\n        return validatorToNodeIndexes[validatorId];\\n    }\\n\\n    /**\\n     * @dev Returns number of nodes with available space.\\n     */\\n    function countNodesWithFreeSpace(uint8 freeSpace) external view returns (uint count) {\\n        if (freeSpace == 0) {\\n            return _nodesAmountBySpace.sumFromPlaceToLast(1);\\n        }\\n        return _nodesAmountBySpace.sumFromPlaceToLast(freeSpace);\\n    }\\n\\n    /**\\n     * @dev constructor in Permissions approach.\\n     */\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n\\n        numberOfActiveNodes = 0;\\n        numberOfLeavingNodes = 0;\\n        numberOfLeftNodes = 0;\\n        _nodesAmountBySpace.create(128);\\n    }\\n\\n    /**\\n     * @dev Returns the Validator ID for a given node.\\n     */\\n    function getValidatorId(uint nodeIndex)\\n        public\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (uint)\\n    {\\n        return nodes[nodeIndex].validatorId;\\n    }\\n\\n    /**\\n     * @dev Checks whether a node exists for a given address.\\n     */\\n    function isNodeExist(address from, uint nodeIndex)\\n        public\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return nodeIndexes[from].isNodeExist[nodeIndex];\\n    }\\n\\n    /**\\n     * @dev Checks whether a node's status is Active.\\n     */\\n    function isNodeActive(uint nodeIndex)\\n        public\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return nodes[nodeIndex].status == NodeStatus.Active;\\n    }\\n\\n    /**\\n     * @dev Checks whether a node's status is Leaving.\\n     */\\n    function isNodeLeaving(uint nodeIndex)\\n        public\\n        view\\n        checkNodeExists(nodeIndex)\\n        returns (bool)\\n    {\\n        return nodes[nodeIndex].status == NodeStatus.Leaving;\\n    }\\n\\n    function _removeNodeFromSpaceToNodes(uint nodeIndex, uint8 space) internal {\\n        uint indexInArray = spaceOfNodes[nodeIndex].indexInSpaceMap;\\n        uint len = spaceToNodes[space].length.sub(1);\\n        if (indexInArray < len) {\\n            uint shiftedIndex = spaceToNodes[space][len];\\n            spaceToNodes[space][indexInArray] = shiftedIndex;\\n            spaceOfNodes[shiftedIndex].indexInSpaceMap = indexInArray;\\n        }\\n        spaceToNodes[space].pop();\\n        delete spaceOfNodes[nodeIndex].indexInSpaceMap;\\n    }\\n\\n    function _getNodesAmountBySpace() internal view returns (SegmentTree.Tree storage) {\\n        return _nodesAmountBySpace;\\n    }\\n\\n    /**\\n     * @dev Returns the index of a given node within the validator's node index.\\n     */\\n    function _findNode(uint[] memory validatorNodeIndexes, uint nodeIndex) private pure returns (uint) {\\n        uint i;\\n        for (i = 0; i < validatorNodeIndexes.length; i++) {\\n            if (validatorNodeIndexes[i] == nodeIndex) {\\n                return i;\\n            }\\n        }\\n        return validatorNodeIndexes.length;\\n    }\\n\\n    /**\\n     * @dev Moves a node to a new space mapping.\\n     */\\n    function _moveNodeToNewSpaceMap(uint nodeIndex, uint8 newSpace) private {\\n        if (!_invisible[nodeIndex]) {\\n            uint8 space = spaceOfNodes[nodeIndex].freeSpace;\\n            _removeNodeFromTree(space);\\n            _addNodeToTree(newSpace);\\n            _removeNodeFromSpaceToNodes(nodeIndex, space);\\n            _addNodeToSpaceToNodes(nodeIndex, newSpace);\\n        }\\n        spaceOfNodes[nodeIndex].freeSpace = newSpace;\\n    }\\n\\n    /**\\n     * @dev Changes a node's status to Active.\\n     */\\n    function _setNodeActive(uint nodeIndex) private {\\n        nodes[nodeIndex].status = NodeStatus.Active;\\n        numberOfActiveNodes = numberOfActiveNodes.add(1);\\n        if (_invisible[nodeIndex]) {\\n            _makeNodeVisible(nodeIndex);\\n        } else {\\n            uint8 space = spaceOfNodes[nodeIndex].freeSpace;\\n            _addNodeToSpaceToNodes(nodeIndex, space);\\n            _addNodeToTree(space);\\n        }\\n    }\\n\\n    /**\\n     * @dev Changes a node's status to In_Maintenance.\\n     */\\n    function _setNodeInMaintenance(uint nodeIndex) private {\\n        nodes[nodeIndex].status = NodeStatus.In_Maintenance;\\n        numberOfActiveNodes = numberOfActiveNodes.sub(1);\\n        _makeNodeInvisible(nodeIndex);\\n    }\\n\\n    /**\\n     * @dev Changes a node's status to Left.\\n     */\\n    function _setNodeLeft(uint nodeIndex) private {\\n        nodesIPCheck[nodes[nodeIndex].ip] = false;\\n        nodesNameCheck[keccak256(abi.encodePacked(nodes[nodeIndex].name))] = false;\\n        delete nodesNameToIndex[keccak256(abi.encodePacked(nodes[nodeIndex].name))];\\n        if (nodes[nodeIndex].status == NodeStatus.Active) {\\n            numberOfActiveNodes--;\\n        } else {\\n            numberOfLeavingNodes--;\\n        }\\n        nodes[nodeIndex].status = NodeStatus.Left;\\n        numberOfLeftNodes++;\\n        delete spaceOfNodes[nodeIndex].freeSpace;\\n    }\\n\\n    /**\\n     * @dev Changes a node's status to Leaving.\\n     */\\n    function _setNodeLeaving(uint nodeIndex) private {\\n        nodes[nodeIndex].status = NodeStatus.Leaving;\\n        numberOfActiveNodes--;\\n        numberOfLeavingNodes++;\\n        _makeNodeInvisible(nodeIndex);\\n    }\\n\\n    function _makeNodeInvisible(uint nodeIndex) private {\\n        if (!_invisible[nodeIndex]) {\\n            uint8 space = spaceOfNodes[nodeIndex].freeSpace;\\n            _removeNodeFromSpaceToNodes(nodeIndex, space);\\n            _removeNodeFromTree(space);\\n            _invisible[nodeIndex] = true;\\n        }\\n    }\\n\\n    function _makeNodeVisible(uint nodeIndex) private {\\n        if (_invisible[nodeIndex]) {\\n            uint8 space = spaceOfNodes[nodeIndex].freeSpace;\\n            _addNodeToSpaceToNodes(nodeIndex, space);\\n            _addNodeToTree(space);\\n            delete _invisible[nodeIndex];\\n        }\\n    }\\n\\n    function _addNodeToSpaceToNodes(uint nodeIndex, uint8 space) private {\\n        spaceToNodes[space].push(nodeIndex);\\n        spaceOfNodes[nodeIndex].indexInSpaceMap = spaceToNodes[space].length.sub(1);\\n    }\\n\\n    function _addNodeToTree(uint8 space) private {\\n        if (space > 0) {\\n            _nodesAmountBySpace.addToPlace(space, 1);\\n        }\\n    }\\n\\n    function _removeNodeFromTree(uint8 space) private {\\n        if (space > 0) {\\n            _nodesAmountBySpace.removeFromPlace(space, 1);\\n        }\\n    }\\n\\n    function _checkValidatorPositionToMaintainNode(uint validatorId, uint position) private returns (bool) {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        uint delegationsTotal = delegationController.getAndUpdateDelegatedToValidatorNow(validatorId);\\n        uint msr = ConstantsHolder(contractManager.getConstantsHolder()).msr();\\n        return position.add(1).mul(msr) <= delegationsTotal;\\n    }\\n\\n    function _checkNodeIndex(uint nodeIndex) private view {\\n        require(nodeIndex < nodes.length, \\\"Node with such index does not exist\\\");\\n    }\\n\\n    function _checkNodeOrAdmin(uint nodeIndex, address sender) private view {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n\\n        require(\\n            isNodeExist(sender, nodeIndex) ||\\n            _isAdmin(sender) ||\\n            getValidatorId(nodeIndex) == validatorService.getValidatorId(sender),\\n            \\\"Sender is not permitted to call this function\\\"\\n        );\\n    }\\n\\n    function _publicKeyToAddress(bytes32[2] memory pubKey) private pure returns (address) {\\n        bytes32 hash = keccak256(abi.encodePacked(pubKey[0], pubKey[1]));\\n        bytes20 addr;\\n        for (uint8 i = 12; i < 32; i++) {\\n            addr |= bytes20(hash[i] & 0xFF) >> ((i - 12) * 8);\\n        }\\n        return address(addr);\\n    }\\n\\n    function _min(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation/DelegationController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DelegationController.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\\\";\\n\\nimport \\\"../BountyV2.sol\\\";\\nimport \\\"../Nodes.sol\\\";\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../utils/FractionUtils.sol\\\";\\nimport \\\"../utils/MathUtils.sol\\\";\\n\\nimport \\\"./DelegationPeriodManager.sol\\\";\\nimport \\\"./PartialDifferences.sol\\\";\\nimport \\\"./Punisher.sol\\\";\\nimport \\\"./TokenState.sol\\\";\\nimport \\\"./ValidatorService.sol\\\";\\n\\n/**\\n * @title Delegation Controller\\n * @dev This contract performs all delegation functions including delegation\\n * requests, and undelegation, etc.\\n * \\n * Delegators and validators may both perform delegations. Validators who perform\\n * delegations to themselves are effectively self-delegating or self-bonding.\\n * \\n * IMPORTANT: Undelegation may be requested at any time, but undelegation is only\\n * performed at the completion of the current delegation period.\\n * \\n * Delegated tokens may be in one of several states:\\n * \\n * - PROPOSED: token holder proposes tokens to delegate to a validator.\\n * - ACCEPTED: token delegations are accepted by a validator and are locked-by-delegation.\\n * - CANCELED: token holder cancels delegation proposal. Only allowed before the proposal is accepted by the validator.\\n * - REJECTED: token proposal expires at the UTC start of the next month.\\n * - DELEGATED: accepted delegations are delegated at the UTC start of the month.\\n * - UNDELEGATION_REQUESTED: token holder requests delegations to undelegate from the validator.\\n * - COMPLETED: undelegation request is completed at the end of the delegation period.\\n */\\ncontract DelegationController is Permissions, ILocker {\\n    using MathUtils for uint;\\n    using PartialDifferences for PartialDifferences.Sequence;\\n    using PartialDifferences for PartialDifferences.Value;\\n    using FractionUtils for FractionUtils.Fraction;\\n    \\n    uint public constant UNDELEGATION_PROHIBITION_WINDOW_SECONDS = 3 * 24 * 60 * 60;\\n\\n    enum State {\\n        PROPOSED,\\n        ACCEPTED,\\n        CANCELED,\\n        REJECTED,\\n        DELEGATED,\\n        UNDELEGATION_REQUESTED,\\n        COMPLETED\\n    }\\n\\n    struct Delegation {\\n        address holder; // address of token owner\\n        uint validatorId;\\n        uint amount;\\n        uint delegationPeriod;\\n        uint created; // time of delegation creation\\n        uint started; // month when a delegation becomes active\\n        uint finished; // first month after a delegation ends\\n        string info;\\n    }\\n\\n    struct SlashingLogEvent {\\n        FractionUtils.Fraction reducingCoefficient;\\n        uint nextMonth;\\n    }\\n\\n    struct SlashingLog {\\n        //      month => slashing event\\n        mapping (uint => SlashingLogEvent) slashes;\\n        uint firstMonth;\\n        uint lastMonth;\\n    }\\n\\n    struct DelegationExtras {\\n        uint lastSlashingMonthBeforeDelegation;\\n    }\\n\\n    struct SlashingEvent {\\n        FractionUtils.Fraction reducingCoefficient;\\n        uint validatorId;\\n        uint month;\\n    }\\n\\n    struct SlashingSignal {\\n        address holder;\\n        uint penalty;\\n    }\\n\\n    struct LockedInPending {\\n        uint amount;\\n        uint month;\\n    }\\n\\n    struct FirstDelegationMonth {\\n        // month\\n        uint value;\\n        //validatorId => month\\n        mapping (uint => uint) byValidator;\\n    }\\n\\n    struct ValidatorsStatistics {\\n        // number of validators\\n        uint number;\\n        //validatorId => bool - is Delegated or not\\n        mapping (uint => uint) delegated;\\n    }\\n\\n    /**\\n     * @dev Emitted when a delegation is proposed to a validator.\\n     */\\n    event DelegationProposed(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is accepted by a validator.\\n     */\\n    event DelegationAccepted(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is cancelled by the delegator.\\n     */\\n    event DelegationRequestCanceledByUser(\\n        uint delegationId\\n    );\\n\\n    /**\\n     * @dev Emitted when a delegation is requested to undelegate.\\n     */\\n    event UndelegationRequested(\\n        uint delegationId\\n    );\\n\\n    /// @dev delegations will never be deleted to index in this array may be used like delegation id\\n    Delegation[] public delegations;\\n\\n    // validatorId => delegationId[]\\n    mapping (uint => uint[]) public delegationsByValidator;\\n\\n    //        holder => delegationId[]\\n    mapping (address => uint[]) public delegationsByHolder;\\n\\n    // delegationId => extras\\n    mapping(uint => DelegationExtras) private _delegationExtras;\\n\\n    // validatorId => sequence\\n    mapping (uint => PartialDifferences.Value) private _delegatedToValidator;\\n    // validatorId => sequence\\n    mapping (uint => PartialDifferences.Sequence) private _effectiveDelegatedToValidator;\\n\\n    // validatorId => slashing log\\n    mapping (uint => SlashingLog) private _slashesOfValidator;\\n\\n    //        holder => sequence\\n    mapping (address => PartialDifferences.Value) private _delegatedByHolder;\\n    //        holder =>   validatorId => sequence\\n    mapping (address => mapping (uint => PartialDifferences.Value)) private _delegatedByHolderToValidator;\\n    //        holder =>   validatorId => sequence\\n    mapping (address => mapping (uint => PartialDifferences.Sequence)) private _effectiveDelegatedByHolderToValidator;\\n\\n    SlashingEvent[] private _slashes;\\n    //        holder => index in _slashes;\\n    mapping (address => uint) private _firstUnprocessedSlashByHolder;\\n\\n    //        holder =>   validatorId => month\\n    mapping (address => FirstDelegationMonth) private _firstDelegationMonth;\\n\\n    //        holder => locked in pending\\n    mapping (address => LockedInPending) private _lockedInPendingDelegations;\\n\\n    mapping (address => ValidatorsStatistics) private _numberOfValidatorsPerDelegator;\\n\\n    /**\\n     * @dev Modifier to make a function callable only if delegation exists.\\n     */\\n    modifier checkDelegationExists(uint delegationId) {\\n        require(delegationId < delegations.length, \\\"Delegation does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Update and return a validator's delegations.\\n     */\\n    function getAndUpdateDelegatedToValidatorNow(uint validatorId) external returns (uint) {\\n        return _getAndUpdateDelegatedToValidator(validatorId, _getCurrentMonth());\\n    }\\n\\n    /**\\n     * @dev Update and return the amount delegated.\\n     */\\n    function getAndUpdateDelegatedAmount(address holder) external returns (uint) {\\n        return _getAndUpdateDelegatedByHolder(holder);\\n    }\\n\\n    /**\\n     * @dev Update and return the effective amount delegated (minus slash) for\\n     * the given month.\\n     */\\n    function getAndUpdateEffectiveDelegatedByHolderToValidator(address holder, uint validatorId, uint month) external\\n        allow(\\\"Distributor\\\") returns (uint effectiveDelegated)\\n    {\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(holder);\\n        effectiveDelegated = _effectiveDelegatedByHolderToValidator[holder][validatorId]\\n            .getAndUpdateValueInSequence(month);\\n        _sendSlashingSignals(slashingSignals);\\n    }\\n\\n    /**\\n     * @dev Allows a token holder to create a delegation proposal of an `amount`\\n     * and `delegationPeriod` to a `validatorId`. Delegation must be accepted\\n     * by the validator before the UTC start of the month, otherwise the\\n     * delegation will be rejected.\\n     * \\n     * The token holder may add additional information in each proposal.\\n     * \\n     * Emits a {DelegationProposed} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Holder must have sufficient delegatable tokens.\\n     * - Delegation must be above the validator's minimum delegation amount.\\n     * - Delegation period must be allowed.\\n     * - Validator must be authorized if trusted list is enabled.\\n     * - Validator must be accepting new delegation requests.\\n     */\\n    function delegate(\\n        uint validatorId,\\n        uint amount,\\n        uint delegationPeriod,\\n        string calldata info\\n    )\\n        external\\n    {\\n        require(\\n            _getDelegationPeriodManager().isDelegationPeriodAllowed(delegationPeriod),\\n            \\\"This delegation period is not allowed\\\");\\n        _getValidatorService().checkValidatorCanReceiveDelegation(validatorId, amount);        \\n        _checkIfDelegationIsAllowed(msg.sender, validatorId);\\n\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(msg.sender);\\n\\n        uint delegationId = _addDelegation(\\n            msg.sender,\\n            validatorId,\\n            amount,\\n            delegationPeriod,\\n            info);\\n\\n        // check that there is enough money\\n        uint holderBalance = IERC777(contractManager.getSkaleToken()).balanceOf(msg.sender);\\n        uint forbiddenForDelegation = TokenState(contractManager.getTokenState())\\n            .getAndUpdateForbiddenForDelegationAmount(msg.sender);\\n        require(holderBalance >= forbiddenForDelegation, \\\"Token holder does not have enough tokens to delegate\\\");\\n\\n        emit DelegationProposed(delegationId);\\n\\n        _sendSlashingSignals(slashingSignals);\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateLockedAmount}.\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateForbiddenForDelegationAmount}.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev Allows token holder to cancel a delegation proposal.\\n     * \\n     * Emits a {DelegationRequestCanceledByUser} event.\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be the token holder of the delegation proposal.\\n     * - Delegation state must be PROPOSED.\\n     */\\n    function cancelPendingDelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        require(msg.sender == delegations[delegationId].holder, \\\"Only token holders can cancel delegation request\\\");\\n        require(getState(delegationId) == State.PROPOSED, \\\"Token holders are only able to cancel PROPOSED delegations\\\");\\n\\n        delegations[delegationId].finished = _getCurrentMonth();\\n        _subtractFromLockedInPendingDelegations(delegations[delegationId].holder, delegations[delegationId].amount);\\n\\n        emit DelegationRequestCanceledByUser(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows a validator to accept a proposed delegation.\\n     * Successful acceptance of delegations transition the tokens from a\\n     * PROPOSED state to ACCEPTED, and tokens are locked for the remainder of the\\n     * delegation period.\\n     * \\n     * Emits a {DelegationAccepted} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must be recipient of proposal.\\n     * - Delegation state must be PROPOSED.\\n     */\\n    function acceptPendingDelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        require(\\n            _getValidatorService().checkValidatorAddressToId(msg.sender, delegations[delegationId].validatorId),\\n            \\\"No permissions to accept request\\\");\\n        _accept(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows delegator to undelegate a specific delegation.\\n     * \\n     * Emits UndelegationRequested event.\\n     * \\n     * Requirements:\\n     * \\n     * - `msg.sender` must be the delegator.\\n     * - Delegation state must be DELEGATED.\\n     */\\n    function requestUndelegation(uint delegationId) external checkDelegationExists(delegationId) {\\n        require(getState(delegationId) == State.DELEGATED, \\\"Cannot request undelegation\\\");\\n        ValidatorService validatorService = _getValidatorService();\\n        require(\\n            delegations[delegationId].holder == msg.sender ||\\n            (validatorService.validatorAddressExists(msg.sender) &&\\n            delegations[delegationId].validatorId == validatorService.getValidatorId(msg.sender)),\\n            \\\"Permission denied to request undelegation\\\");\\n        _removeValidatorFromValidatorsPerDelegators(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId);\\n        processAllSlashes(msg.sender);\\n        delegations[delegationId].finished = _calculateDelegationEndMonth(delegationId);\\n\\n        require(\\n            now.add(UNDELEGATION_PROHIBITION_WINDOW_SECONDS)\\n                < _getTimeHelpers().monthToTimestamp(delegations[delegationId].finished),\\n            \\\"Undelegation requests must be sent 3 days before the end of delegation period\\\"\\n        );\\n\\n        _subtractFromAllStatistics(delegationId);\\n        \\n        emit UndelegationRequested(delegationId);\\n    }\\n\\n    /**\\n     * @dev Allows Punisher contract to slash an `amount` of stake from\\n     * a validator. This slashes an amount of delegations of the validator,\\n     * which reduces the amount that the validator has staked. This consequence\\n     * may force the SKALE Manager to reduce the number of nodes a validator is\\n     * operating so the validator can meet the Minimum Staking Requirement.\\n     * \\n     * Emits a {SlashingEvent}.\\n     * \\n     * See {Punisher}.\\n     */\\n    function confiscate(uint validatorId, uint amount) external allow(\\\"Punisher\\\") {\\n        uint currentMonth = _getCurrentMonth();\\n        FractionUtils.Fraction memory coefficient =\\n            _delegatedToValidator[validatorId].reduceValue(amount, currentMonth);\\n\\n        uint initialEffectiveDelegated =\\n            _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(currentMonth);\\n        uint[] memory initialSubtractions = new uint[](0);\\n        if (currentMonth < _effectiveDelegatedToValidator[validatorId].lastChangedMonth) {\\n            initialSubtractions = new uint[](\\n                _effectiveDelegatedToValidator[validatorId].lastChangedMonth.sub(currentMonth)\\n            );\\n            for (uint i = 0; i < initialSubtractions.length; ++i) {\\n                initialSubtractions[i] = _effectiveDelegatedToValidator[validatorId]\\n                    .subtractDiff[currentMonth.add(i).add(1)];\\n            }\\n        }\\n\\n        _effectiveDelegatedToValidator[validatorId].reduceSequence(coefficient, currentMonth);\\n        _putToSlashingLog(_slashesOfValidator[validatorId], coefficient, currentMonth);\\n        _slashes.push(SlashingEvent({reducingCoefficient: coefficient, validatorId: validatorId, month: currentMonth}));\\n\\n        BountyV2 bounty = _getBounty();\\n        bounty.handleDelegationRemoving(\\n            initialEffectiveDelegated.sub(\\n                _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(currentMonth)\\n            ),\\n            currentMonth\\n        );\\n        for (uint i = 0; i < initialSubtractions.length; ++i) {\\n            bounty.handleDelegationAdd(\\n                initialSubtractions[i].sub(\\n                    _effectiveDelegatedToValidator[validatorId].subtractDiff[currentMonth.add(i).add(1)]\\n                ),\\n                currentMonth.add(i).add(1)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Allows Distributor contract to return and update the effective \\n     * amount delegated (minus slash) to a validator for a given month.\\n     */\\n    function getAndUpdateEffectiveDelegatedToValidator(uint validatorId, uint month)\\n        external allowTwo(\\\"Bounty\\\", \\\"Distributor\\\") returns (uint)\\n    {\\n        return _effectiveDelegatedToValidator[validatorId].getAndUpdateValueInSequence(month);\\n    }\\n\\n    /**\\n     * @dev Return and update the amount delegated to a validator for the\\n     * current month.\\n     */\\n    function getAndUpdateDelegatedByHolderToValidatorNow(address holder, uint validatorId) external returns (uint) {\\n        return _getAndUpdateDelegatedByHolderToValidator(holder, validatorId, _getCurrentMonth());\\n    }\\n\\n    function getEffectiveDelegatedValuesByValidator(uint validatorId) external view returns (uint[] memory) {\\n        return _effectiveDelegatedToValidator[validatorId].getValuesInSequence();\\n    }\\n\\n    function getEffectiveDelegatedToValidator(uint validatorId, uint month) external view returns (uint) {\\n        return _effectiveDelegatedToValidator[validatorId].getValueInSequence(month);\\n    }\\n\\n    function getDelegatedToValidator(uint validatorId, uint month) external view returns (uint) {\\n        return _delegatedToValidator[validatorId].getValue(month);\\n    }\\n\\n    /**\\n     * @dev Return Delegation struct.\\n     */\\n    function getDelegation(uint delegationId)\\n        external view checkDelegationExists(delegationId) returns (Delegation memory)\\n    {\\n        return delegations[delegationId];\\n    }\\n\\n    /**\\n     * @dev Returns the first delegation month.\\n     */\\n    function getFirstDelegationMonth(address holder, uint validatorId) external view returns(uint) {\\n        return _firstDelegationMonth[holder].byValidator[validatorId];\\n    }\\n\\n    /**\\n     * @dev Returns a validator's total number of delegations.\\n     */\\n    function getDelegationsByValidatorLength(uint validatorId) external view returns (uint) {\\n        return delegationsByValidator[validatorId].length;\\n    }\\n\\n    /**\\n     * @dev Returns a holder's total number of delegations.\\n     */\\n    function getDelegationsByHolderLength(address holder) external view returns (uint) {\\n        return delegationsByHolder[holder].length;\\n    }\\n\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n    }\\n\\n    /**\\n     * @dev Process slashes up to the given limit.\\n     */\\n    function processSlashes(address holder, uint limit) public {\\n        _sendSlashingSignals(_processSlashesWithoutSignals(holder, limit));\\n    }\\n\\n    /**\\n     * @dev Process all slashes.\\n     */\\n    function processAllSlashes(address holder) public {\\n        processSlashes(holder, 0);\\n    }\\n\\n    /**\\n     * @dev Returns the token state of a given delegation.\\n     */\\n    function getState(uint delegationId) public view checkDelegationExists(delegationId) returns (State state) {\\n        if (delegations[delegationId].started == 0) {\\n            if (delegations[delegationId].finished == 0) {\\n                if (_getCurrentMonth() == _getTimeHelpers().timestampToMonth(delegations[delegationId].created)) {\\n                    return State.PROPOSED;\\n                } else {\\n                    return State.REJECTED;\\n                }\\n            } else {\\n                return State.CANCELED;\\n            }\\n        } else {\\n            if (_getCurrentMonth() < delegations[delegationId].started) {\\n                return State.ACCEPTED;\\n            } else {\\n                if (delegations[delegationId].finished == 0) {\\n                    return State.DELEGATED;\\n                } else {\\n                    if (_getCurrentMonth() < delegations[delegationId].finished) {\\n                        return State.UNDELEGATION_REQUESTED;\\n                    } else {\\n                        return State.COMPLETED;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens in PENDING delegation state.\\n     */\\n    function getLockedInPendingDelegations(address holder) public view returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        if (_lockedInPendingDelegations[holder].month < currentMonth) {\\n            return 0;\\n        } else {\\n            return _lockedInPendingDelegations[holder].amount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether there are any unprocessed slashes.\\n     */\\n    function hasUnprocessedSlashes(address holder) public view returns (bool) {\\n        return _everDelegated(holder) && _firstUnprocessedSlashByHolder[holder] < _slashes.length;\\n    }    \\n\\n    // private\\n\\n    /**\\n     * @dev Allows Nodes contract to get and update the amount delegated\\n     * to validator for a given month.\\n     */\\n    function _getAndUpdateDelegatedToValidator(uint validatorId, uint month)\\n        private returns (uint)\\n    {\\n        return _delegatedToValidator[validatorId].getAndUpdateValue(month);\\n    }\\n\\n    /**\\n     * @dev Adds a new delegation proposal.\\n     */\\n    function _addDelegation(\\n        address holder,\\n        uint validatorId,\\n        uint amount,\\n        uint delegationPeriod,\\n        string memory info\\n    )\\n        private\\n        returns (uint delegationId)\\n    {\\n        delegationId = delegations.length;\\n        delegations.push(Delegation(\\n            holder,\\n            validatorId,\\n            amount,\\n            delegationPeriod,\\n            now,\\n            0,\\n            0,\\n            info\\n        ));\\n        delegationsByValidator[validatorId].push(delegationId);\\n        delegationsByHolder[holder].push(delegationId);\\n        _addToLockedInPendingDelegations(delegations[delegationId].holder, delegations[delegationId].amount);\\n    }\\n\\n    /**\\n     * @dev Returns the month when a delegation ends.\\n     */\\n    function _calculateDelegationEndMonth(uint delegationId) private view returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        uint started = delegations[delegationId].started;\\n\\n        if (currentMonth < started) {\\n            return started.add(delegations[delegationId].delegationPeriod);\\n        } else {\\n            uint completedPeriods = currentMonth.sub(started).div(delegations[delegationId].delegationPeriod);\\n            return started.add(completedPeriods.add(1).mul(delegations[delegationId].delegationPeriod));\\n        }\\n    }\\n\\n    function _addToDelegatedToValidator(uint validatorId, uint amount, uint month) private {\\n        _delegatedToValidator[validatorId].addToValue(amount, month);\\n    }\\n\\n    function _addToEffectiveDelegatedToValidator(uint validatorId, uint effectiveAmount, uint month) private {\\n        _effectiveDelegatedToValidator[validatorId].addToSequence(effectiveAmount, month);\\n    }\\n\\n    function _addToDelegatedByHolder(address holder, uint amount, uint month) private {\\n        _delegatedByHolder[holder].addToValue(amount, month);\\n    }\\n\\n    function _addToDelegatedByHolderToValidator(\\n        address holder, uint validatorId, uint amount, uint month) private\\n    {\\n        _delegatedByHolderToValidator[holder][validatorId].addToValue(amount, month);\\n    }\\n\\n    function _addValidatorToValidatorsPerDelegators(address holder, uint validatorId) private {\\n        if (_numberOfValidatorsPerDelegator[holder].delegated[validatorId] == 0) {\\n            _numberOfValidatorsPerDelegator[holder].number = _numberOfValidatorsPerDelegator[holder].number.add(1);\\n        }\\n        _numberOfValidatorsPerDelegator[holder].\\n            delegated[validatorId] = _numberOfValidatorsPerDelegator[holder].delegated[validatorId].add(1);\\n    }\\n\\n    function _removeFromDelegatedByHolder(address holder, uint amount, uint month) private {\\n        _delegatedByHolder[holder].subtractFromValue(amount, month);\\n    }\\n\\n    function _removeFromDelegatedByHolderToValidator(\\n        address holder, uint validatorId, uint amount, uint month) private\\n    {\\n        _delegatedByHolderToValidator[holder][validatorId].subtractFromValue(amount, month);\\n    }\\n\\n    function _removeValidatorFromValidatorsPerDelegators(address holder, uint validatorId) private {\\n        if (_numberOfValidatorsPerDelegator[holder].delegated[validatorId] == 1) {\\n            _numberOfValidatorsPerDelegator[holder].number = _numberOfValidatorsPerDelegator[holder].number.sub(1);\\n        }\\n        _numberOfValidatorsPerDelegator[holder].\\n            delegated[validatorId] = _numberOfValidatorsPerDelegator[holder].delegated[validatorId].sub(1);\\n    }\\n\\n    function _addToEffectiveDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint effectiveAmount,\\n        uint month)\\n        private\\n    {\\n        _effectiveDelegatedByHolderToValidator[holder][validatorId].addToSequence(effectiveAmount, month);\\n    }\\n\\n    function _removeFromEffectiveDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint effectiveAmount,\\n        uint month)\\n        private\\n    {\\n        _effectiveDelegatedByHolderToValidator[holder][validatorId].subtractFromSequence(effectiveAmount, month);\\n    }\\n\\n    function _getAndUpdateDelegatedByHolder(address holder) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        processAllSlashes(holder);\\n        return _delegatedByHolder[holder].getAndUpdateValue(currentMonth);\\n    }\\n\\n    function _getAndUpdateDelegatedByHolderToValidator(\\n        address holder,\\n        uint validatorId,\\n        uint month)\\n        private returns (uint)\\n    {\\n        return _delegatedByHolderToValidator[holder][validatorId].getAndUpdateValue(month);\\n    }\\n\\n    function _addToLockedInPendingDelegations(address holder, uint amount) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        if (_lockedInPendingDelegations[holder].month < currentMonth) {\\n            _lockedInPendingDelegations[holder].amount = amount;\\n            _lockedInPendingDelegations[holder].month = currentMonth;\\n        } else {\\n            assert(_lockedInPendingDelegations[holder].month == currentMonth);\\n            _lockedInPendingDelegations[holder].amount = _lockedInPendingDelegations[holder].amount.add(amount);\\n        }\\n    }\\n\\n    function _subtractFromLockedInPendingDelegations(address holder, uint amount) private returns (uint) {\\n        uint currentMonth = _getCurrentMonth();\\n        assert(_lockedInPendingDelegations[holder].month == currentMonth);\\n        _lockedInPendingDelegations[holder].amount = _lockedInPendingDelegations[holder].amount.sub(amount);\\n    }\\n\\n    function _getCurrentMonth() private view returns (uint) {\\n        return _getTimeHelpers().getCurrentMonth();\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateLockedAmount}.\\n     */\\n    function _getAndUpdateLockedAmount(address wallet) private returns (uint) {\\n        return _getAndUpdateDelegatedByHolder(wallet).add(getLockedInPendingDelegations(wallet));\\n    }\\n\\n    function _updateFirstDelegationMonth(address holder, uint validatorId, uint month) private {\\n        if (_firstDelegationMonth[holder].value == 0) {\\n            _firstDelegationMonth[holder].value = month;\\n            _firstUnprocessedSlashByHolder[holder] = _slashes.length;\\n        }\\n        if (_firstDelegationMonth[holder].byValidator[validatorId] == 0) {\\n            _firstDelegationMonth[holder].byValidator[validatorId] = month;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks whether the holder has performed a delegation.\\n     */\\n    function _everDelegated(address holder) private view returns (bool) {\\n        return _firstDelegationMonth[holder].value > 0;\\n    }\\n\\n    function _removeFromDelegatedToValidator(uint validatorId, uint amount, uint month) private {\\n        _delegatedToValidator[validatorId].subtractFromValue(amount, month);\\n    }\\n\\n    function _removeFromEffectiveDelegatedToValidator(uint validatorId, uint effectiveAmount, uint month) private {\\n        _effectiveDelegatedToValidator[validatorId].subtractFromSequence(effectiveAmount, month);\\n    }\\n\\n    /**\\n     * @dev Returns the delegated amount after a slashing event.\\n     */\\n    function _calculateDelegationAmountAfterSlashing(uint delegationId) private view returns (uint) {\\n        uint startMonth = _delegationExtras[delegationId].lastSlashingMonthBeforeDelegation;\\n        uint validatorId = delegations[delegationId].validatorId;\\n        uint amount = delegations[delegationId].amount;\\n        if (startMonth == 0) {\\n            startMonth = _slashesOfValidator[validatorId].firstMonth;\\n            if (startMonth == 0) {\\n                return amount;\\n            }\\n        }\\n        for (uint i = startMonth;\\n            i > 0 && i < delegations[delegationId].finished;\\n            i = _slashesOfValidator[validatorId].slashes[i].nextMonth) {\\n            if (i >= delegations[delegationId].started) {\\n                amount = amount\\n                    .mul(_slashesOfValidator[validatorId].slashes[i].reducingCoefficient.numerator)\\n                    .div(_slashesOfValidator[validatorId].slashes[i].reducingCoefficient.denominator);\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    function _putToSlashingLog(\\n        SlashingLog storage log,\\n        FractionUtils.Fraction memory coefficient,\\n        uint month)\\n        private\\n    {\\n        if (log.firstMonth == 0) {\\n            log.firstMonth = month;\\n            log.lastMonth = month;\\n            log.slashes[month].reducingCoefficient = coefficient;\\n            log.slashes[month].nextMonth = 0;\\n        } else {\\n            require(log.lastMonth <= month, \\\"Cannot put slashing event in the past\\\");\\n            if (log.lastMonth == month) {\\n                log.slashes[month].reducingCoefficient =\\n                    log.slashes[month].reducingCoefficient.multiplyFraction(coefficient);\\n            } else {\\n                log.slashes[month].reducingCoefficient = coefficient;\\n                log.slashes[month].nextMonth = 0;\\n                log.slashes[log.lastMonth].nextMonth = month;\\n                log.lastMonth = month;\\n            }\\n        }\\n    }\\n\\n    function _processSlashesWithoutSignals(address holder, uint limit)\\n        private returns (SlashingSignal[] memory slashingSignals)\\n    {\\n        if (hasUnprocessedSlashes(holder)) {\\n            uint index = _firstUnprocessedSlashByHolder[holder];\\n            uint end = _slashes.length;\\n            if (limit > 0 && index.add(limit) < end) {\\n                end = index.add(limit);\\n            }\\n            slashingSignals = new SlashingSignal[](end.sub(index));\\n            uint begin = index;\\n            for (; index < end; ++index) {\\n                uint validatorId = _slashes[index].validatorId;\\n                uint month = _slashes[index].month;\\n                uint oldValue = _getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month);\\n                if (oldValue.muchGreater(0)) {\\n                    _delegatedByHolderToValidator[holder][validatorId].reduceValueByCoefficientAndUpdateSum(\\n                        _delegatedByHolder[holder],\\n                        _slashes[index].reducingCoefficient,\\n                        month);\\n                    _effectiveDelegatedByHolderToValidator[holder][validatorId].reduceSequence(\\n                        _slashes[index].reducingCoefficient,\\n                        month);\\n                    slashingSignals[index.sub(begin)].holder = holder;\\n                    slashingSignals[index.sub(begin)].penalty\\n                        = oldValue.boundedSub(_getAndUpdateDelegatedByHolderToValidator(holder, validatorId, month));\\n                }\\n            }\\n            _firstUnprocessedSlashByHolder[holder] = end;\\n        }\\n    }\\n\\n    function _processAllSlashesWithoutSignals(address holder)\\n        private returns (SlashingSignal[] memory slashingSignals)\\n    {\\n        return _processSlashesWithoutSignals(holder, 0);\\n    }\\n\\n    function _sendSlashingSignals(SlashingSignal[] memory slashingSignals) private {\\n        Punisher punisher = Punisher(contractManager.getPunisher());\\n        address previousHolder = address(0);\\n        uint accumulatedPenalty = 0;\\n        for (uint i = 0; i < slashingSignals.length; ++i) {\\n            if (slashingSignals[i].holder != previousHolder) {\\n                if (accumulatedPenalty > 0) {\\n                    punisher.handleSlash(previousHolder, accumulatedPenalty);\\n                }\\n                previousHolder = slashingSignals[i].holder;\\n                accumulatedPenalty = slashingSignals[i].penalty;\\n            } else {\\n                accumulatedPenalty = accumulatedPenalty.add(slashingSignals[i].penalty);\\n            }\\n        }\\n        if (accumulatedPenalty > 0) {\\n            punisher.handleSlash(previousHolder, accumulatedPenalty);\\n        }\\n    }\\n\\n    function _addToAllStatistics(uint delegationId) private {\\n        uint currentMonth = _getCurrentMonth();\\n        delegations[delegationId].started = currentMonth.add(1);\\n        if (_slashesOfValidator[delegations[delegationId].validatorId].lastMonth > 0) {\\n            _delegationExtras[delegationId].lastSlashingMonthBeforeDelegation =\\n                _slashesOfValidator[delegations[delegationId].validatorId].lastMonth;\\n        }\\n\\n        _addToDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _addToDelegatedByHolder(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _addToDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            delegations[delegationId].amount,\\n            currentMonth.add(1));\\n        _updateFirstDelegationMonth(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            currentMonth.add(1));\\n        uint effectiveAmount = delegations[delegationId].amount.mul(\\n            _getDelegationPeriodManager().stakeMultipliers(delegations[delegationId].delegationPeriod));\\n        _addToEffectiveDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            currentMonth.add(1));\\n        _addToEffectiveDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            currentMonth.add(1));\\n        _addValidatorToValidatorsPerDelegators(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId\\n        );\\n    }\\n\\n    function _subtractFromAllStatistics(uint delegationId) private {\\n        uint amountAfterSlashing = _calculateDelegationAmountAfterSlashing(delegationId);\\n        _removeFromDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        _removeFromDelegatedByHolder(\\n            delegations[delegationId].holder,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        _removeFromDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            amountAfterSlashing,\\n            delegations[delegationId].finished);\\n        uint effectiveAmount = amountAfterSlashing.mul(\\n                _getDelegationPeriodManager().stakeMultipliers(delegations[delegationId].delegationPeriod));\\n        _removeFromEffectiveDelegatedToValidator(\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            delegations[delegationId].finished);\\n        _removeFromEffectiveDelegatedByHolderToValidator(\\n            delegations[delegationId].holder,\\n            delegations[delegationId].validatorId,\\n            effectiveAmount,\\n            delegations[delegationId].finished);\\n        _getBounty().handleDelegationRemoving(\\n            effectiveAmount,\\n            delegations[delegationId].finished);\\n    }\\n\\n    /**\\n     * @dev Checks whether delegation to a validator is allowed.\\n     * \\n     * Requirements:\\n     * \\n     * - Delegator must not have reached the validator limit.\\n     * - Delegation must be made in or after the first delegation month.\\n     */\\n    function _checkIfDelegationIsAllowed(address holder, uint validatorId) private view returns (bool) {\\n        require(\\n            _numberOfValidatorsPerDelegator[holder].delegated[validatorId] > 0 ||\\n                (\\n                    _numberOfValidatorsPerDelegator[holder].delegated[validatorId] == 0 &&\\n                    _numberOfValidatorsPerDelegator[holder].number < _getConstantsHolder().limitValidatorsPerDelegator()\\n                ),\\n            \\\"Limit of validators is reached\\\"\\n        );\\n    }\\n\\n    function _getDelegationPeriodManager() private view returns (DelegationPeriodManager) {\\n        return DelegationPeriodManager(contractManager.getDelegationPeriodManager());\\n    }\\n\\n    function _getBounty() private view returns (BountyV2) {\\n        return BountyV2(contractManager.getBounty());\\n    }\\n\\n    function _getValidatorService() private view returns (ValidatorService) {\\n        return ValidatorService(contractManager.getValidatorService());\\n    }\\n\\n    function _getTimeHelpers() private view returns (TimeHelpers) {\\n        return TimeHelpers(contractManager.getTimeHelpers());\\n    }\\n\\n    function _getConstantsHolder() private view returns (ConstantsHolder) {\\n        return ConstantsHolder(contractManager.getConstantsHolder());\\n    }\\n\\n    function _accept(uint delegationId) private {\\n        _checkIfDelegationIsAllowed(delegations[delegationId].holder, delegations[delegationId].validatorId);\\n        \\n        State currentState = getState(delegationId);\\n        if (currentState != State.PROPOSED) {\\n            if (currentState == State.ACCEPTED ||\\n                currentState == State.DELEGATED ||\\n                currentState == State.UNDELEGATION_REQUESTED ||\\n                currentState == State.COMPLETED)\\n            {\\n                revert(\\\"The delegation has been already accepted\\\");\\n            } else if (currentState == State.CANCELED) {\\n                revert(\\\"The delegation has been cancelled by token holder\\\");\\n            } else if (currentState == State.REJECTED) {\\n                revert(\\\"The delegation request is outdated\\\");\\n            }\\n        }\\n        require(currentState == State.PROPOSED, \\\"Cannot set delegation state to accepted\\\");\\n\\n        SlashingSignal[] memory slashingSignals = _processAllSlashesWithoutSignals(delegations[delegationId].holder);\\n\\n        _addToAllStatistics(delegationId);\\n        \\n        uint amount = delegations[delegationId].amount;\\n\\n        uint effectiveAmount = amount.mul(\\n            _getDelegationPeriodManager().stakeMultipliers(delegations[delegationId].delegationPeriod)\\n        );\\n        _getBounty().handleDelegationAdd(\\n            effectiveAmount,\\n            delegations[delegationId].started\\n        );\\n\\n        _sendSlashingSignals(slashingSignals);\\n        emit DelegationAccepted(delegationId);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation/ValidatorService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ValidatorService.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Artem Payvin\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../ConstantsHolder.sol\\\";\\n\\nimport \\\"./DelegationController.sol\\\";\\nimport \\\"./TimeHelpers.sol\\\";\\n\\n/**\\n * @title ValidatorService\\n * @dev This contract handles all validator operations including registration,\\n * node management, validator-specific delegation parameters, and more.\\n * \\n * TIP: For more information see our main instructions\\n * https://forum.skale.network/t/skale-mainnet-launch-faq/182[SKALE MainNet Launch FAQ].\\n * \\n * Validators register an address, and use this address to accept delegations and\\n * register nodes.\\n */\\ncontract ValidatorService is Permissions {\\n\\n    using ECDSA for bytes32;\\n\\n    struct Validator {\\n        string name;\\n        address validatorAddress;\\n        address requestedAddress;\\n        string description;\\n        uint feeRate;\\n        uint registrationTime;\\n        uint minimumDelegationAmount;\\n        bool acceptNewRequests;\\n    }\\n\\n    /**\\n     * @dev Emitted when a validator registers.\\n     */\\n    event ValidatorRegistered(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator address changes.\\n     */\\n    event ValidatorAddressChanged(\\n        uint validatorId,\\n        address newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator is enabled.\\n     */\\n    event ValidatorWasEnabled(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a validator is disabled.\\n     */\\n    event ValidatorWasDisabled(\\n        uint validatorId\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is linked to a validator.\\n     */\\n    event NodeAddressWasAdded(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a node address is unlinked from a validator.\\n     */\\n    event NodeAddressWasRemoved(\\n        uint validatorId,\\n        address nodeAddress\\n    );\\n\\n    mapping (uint => Validator) public validators;\\n    mapping (uint => bool) private _trustedValidators;\\n    uint[] public trustedValidatorsList;\\n    //       address => validatorId\\n    mapping (address => uint) private _validatorAddressToId;\\n    //       address => validatorId\\n    mapping (address => uint) private _nodeAddressToValidatorId;\\n    // validatorId => nodeAddress[]\\n    mapping (uint => address[]) private _nodeAddresses;\\n    uint public numberOfValidators;\\n    bool public useWhitelist;\\n\\n    modifier checkValidatorExists(uint validatorId) {\\n        require(validatorExists(validatorId), \\\"Validator with such ID does not exist\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a new validator ID that includes a validator name, description,\\n     * commission or fee rate, and a minimum delegation amount accepted by the validator.\\n     * \\n     * Emits a {ValidatorRegistered} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Sender must not already have registered a validator ID.\\n     * - Fee rate must be between 0 - 1000‰. Note: in per mille.\\n     */\\n    function registerValidator(\\n        string calldata name,\\n        string calldata description,\\n        uint feeRate,\\n        uint minimumDelegationAmount\\n    )\\n        external\\n        returns (uint validatorId)\\n    {\\n        require(!validatorAddressExists(msg.sender), \\\"Validator with such address already exists\\\");\\n        require(feeRate <= 1000, \\\"Fee rate of validator should be lower than 100%\\\");\\n        validatorId = ++numberOfValidators;\\n        validators[validatorId] = Validator(\\n            name,\\n            msg.sender,\\n            address(0),\\n            description,\\n            feeRate,\\n            now,\\n            minimumDelegationAmount,\\n            true\\n        );\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorRegistered(validatorId);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to enable a validator by adding their ID to the\\n     * trusted list.\\n     * \\n     * Emits a {ValidatorWasEnabled} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must not already be enabled.\\n     */\\n    function enableValidator(uint validatorId) external checkValidatorExists(validatorId) onlyAdmin {\\n        require(!_trustedValidators[validatorId], \\\"Validator is already enabled\\\");\\n        _trustedValidators[validatorId] = true;\\n        trustedValidatorsList.push(validatorId);\\n        emit ValidatorWasEnabled(validatorId);\\n    }\\n\\n    /**\\n     * @dev Allows Admin to disable a validator by removing their ID from\\n     * the trusted list.\\n     * \\n     * Emits a {ValidatorWasDisabled} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must not already be disabled.\\n     */\\n    function disableValidator(uint validatorId) external checkValidatorExists(validatorId) onlyAdmin {\\n        require(_trustedValidators[validatorId], \\\"Validator is already disabled\\\");\\n        _trustedValidators[validatorId] = false;\\n        uint position = _find(trustedValidatorsList, validatorId);\\n        if (position < trustedValidatorsList.length) {\\n            trustedValidatorsList[position] =\\n                trustedValidatorsList[trustedValidatorsList.length.sub(1)];\\n        }\\n        trustedValidatorsList.pop();\\n        emit ValidatorWasDisabled(validatorId);\\n    }\\n\\n    /**\\n     * @dev Owner can disable the trusted validator list. Once turned off, the\\n     * trusted list cannot be re-enabled.\\n     */\\n    function disableWhitelist() external onlyOwner {\\n        useWhitelist = false;\\n    }\\n\\n    /**\\n     * @dev Allows `msg.sender` to request a new address.\\n     * \\n     * Requirements:\\n     *\\n     * - `msg.sender` must already be a validator.\\n     * - New address must not be null.\\n     * - New address must not be already registered as a validator.\\n     */\\n    function requestForNewAddress(address newValidatorAddress) external {\\n        require(newValidatorAddress != address(0), \\\"New address cannot be null\\\");\\n        require(_validatorAddressToId[newValidatorAddress] == 0, \\\"Address already registered\\\");\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].requestedAddress = newValidatorAddress;\\n    }\\n\\n    /**\\n     * @dev Allows msg.sender to confirm an address change.\\n     * \\n     * Emits a {ValidatorAddressChanged} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Must be owner of new address.\\n     */\\n    function confirmNewAddress(uint validatorId)\\n        external\\n        checkValidatorExists(validatorId)\\n    {\\n        require(\\n            getValidator(validatorId).requestedAddress == msg.sender,\\n            \\\"The validator address cannot be changed because it is not the actual owner\\\"\\n        );\\n        delete validators[validatorId].requestedAddress;\\n        _setValidatorAddress(validatorId, msg.sender);\\n\\n        emit ValidatorAddressChanged(validatorId, validators[validatorId].validatorAddress);\\n    }\\n\\n    /**\\n     * @dev Links a node address to validator ID. Validator must present\\n     * the node signature of the validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Signature must be valid.\\n     * - Address must not be assigned to a validator.\\n     */\\n    function linkNodeAddress(address nodeAddress, bytes calldata sig) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(\\n            keccak256(abi.encodePacked(validatorId)).toEthSignedMessageHash().recover(sig) == nodeAddress,\\n            \\\"Signature is not pass\\\"\\n        );\\n        require(_validatorAddressToId[nodeAddress] == 0, \\\"Node address is a validator\\\");\\n\\n        _addNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasAdded(validatorId, nodeAddress);\\n    }\\n\\n    /**\\n     * @dev Unlinks a node address from a validator.\\n     * \\n     * Emits a {NodeAddressWasRemoved} event.\\n     */\\n    function unlinkNodeAddress(address nodeAddress) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        this.removeNodeAddress(validatorId, nodeAddress);\\n        emit NodeAddressWasRemoved(validatorId, nodeAddress);\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a minimum delegation amount.\\n     */\\n    function setValidatorMDA(uint minimumDelegationAmount) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].minimumDelegationAmount = minimumDelegationAmount;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator name.\\n     */\\n    function setValidatorName(string calldata newName) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].name = newName;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to set a new validator description.\\n     */\\n    function setValidatorDescription(string calldata newDescription) external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n\\n        validators[validatorId].description = newDescription;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to start accepting new delegation requests.\\n     * \\n     * Requirements:\\n     * \\n     * - Must not have already enabled accepting new requests.\\n     */\\n    function startAcceptingNewRequests() external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(!isAcceptingNewRequests(validatorId), \\\"Accepting request is already enabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = true;\\n    }\\n\\n    /**\\n     * @dev Allows a validator to stop accepting new delegation requests.\\n     * \\n     * Requirements:\\n     * \\n     * - Must not have already stopped accepting new requests.\\n     */\\n    function stopAcceptingNewRequests() external {\\n        // check Validator Exist inside getValidatorId\\n        uint validatorId = getValidatorId(msg.sender);\\n        require(isAcceptingNewRequests(validatorId), \\\"Accepting request is already disabled\\\");\\n\\n        validators[validatorId].acceptNewRequests = false;\\n    }\\n\\n    function removeNodeAddress(uint validatorId, address nodeAddress) external allowTwo(\\\"ValidatorService\\\", \\\"Nodes\\\") {\\n        require(_nodeAddressToValidatorId[nodeAddress] == validatorId,\\n            \\\"Validator does not have permissions to unlink node\\\");\\n        delete _nodeAddressToValidatorId[nodeAddress];\\n        for (uint i = 0; i < _nodeAddresses[validatorId].length; ++i) {\\n            if (_nodeAddresses[validatorId][i] == nodeAddress) {\\n                if (i + 1 < _nodeAddresses[validatorId].length) {\\n                    _nodeAddresses[validatorId][i] =\\n                        _nodeAddresses[validatorId][_nodeAddresses[validatorId].length.sub(1)];\\n                }\\n                delete _nodeAddresses[validatorId][_nodeAddresses[validatorId].length.sub(1)];\\n                _nodeAddresses[validatorId].pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the amount of validator bond (self-delegation).\\n     */\\n    function getAndUpdateBondAmount(uint validatorId)\\n        external\\n        returns (uint)\\n    {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        return delegationController.getAndUpdateDelegatedByHolderToValidatorNow(\\n            getValidator(validatorId).validatorAddress,\\n            validatorId\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns node addresses linked to the msg.sender.\\n     */\\n    function getMyNodesAddresses() external view returns (address[] memory) {\\n        return getNodeAddresses(getValidatorId(msg.sender));\\n    }\\n\\n    /**\\n     * @dev Returns the list of trusted validators.\\n     */\\n    function getTrustedValidators() external view returns (uint[] memory) {\\n        return trustedValidatorsList;\\n    }\\n\\n    /**\\n     * @dev Checks whether the validator ID is linked to the validator address.\\n     */\\n    function checkValidatorAddressToId(address validatorAddress, uint validatorId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return getValidatorId(validatorAddress) == validatorId ? true : false;\\n    }\\n\\n    /**\\n     * @dev Returns the validator ID linked to a node address.\\n     * \\n     * Requirements:\\n     * \\n     * - Node address must be linked to a validator.\\n     */\\n    function getValidatorIdByNodeAddress(address nodeAddress) external view returns (uint validatorId) {\\n        validatorId = _nodeAddressToValidatorId[nodeAddress];\\n        require(validatorId != 0, \\\"Node address is not assigned to a validator\\\");\\n    }\\n\\n    function checkValidatorCanReceiveDelegation(uint validatorId, uint amount) external view {\\n        require(isAuthorizedValidator(validatorId), \\\"Validator is not authorized to accept delegation request\\\");\\n        require(isAcceptingNewRequests(validatorId), \\\"The validator is not currently accepting new requests\\\");\\n        require(\\n            validators[validatorId].minimumDelegationAmount <= amount,\\n            \\\"Amount does not meet the validator's minimum delegation amount\\\"\\n        );\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        useWhitelist = true;\\n    }\\n\\n    /**\\n     * @dev Returns a validator's node addresses.\\n     */\\n    function getNodeAddresses(uint validatorId) public view returns (address[] memory) {\\n        return _nodeAddresses[validatorId];\\n    }\\n\\n    /**\\n     * @dev Checks whether validator ID exists.\\n     */\\n    function validatorExists(uint validatorId) public view returns (bool) {\\n        return validatorId <= numberOfValidators && validatorId != 0;\\n    }\\n\\n    /**\\n     * @dev Checks whether validator address exists.\\n     */\\n    function validatorAddressExists(address validatorAddress) public view returns (bool) {\\n        return _validatorAddressToId[validatorAddress] != 0;\\n    }\\n\\n    /**\\n     * @dev Checks whether validator address exists.\\n     */\\n    function checkIfValidatorAddressExists(address validatorAddress) public view {\\n        require(validatorAddressExists(validatorAddress), \\\"Validator address does not exist\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the Validator struct.\\n     */\\n    function getValidator(uint validatorId) public view checkValidatorExists(validatorId) returns (Validator memory) {\\n        return validators[validatorId];\\n    }\\n\\n    /**\\n     * @dev Returns the validator ID for the given validator address.\\n     */\\n    function getValidatorId(address validatorAddress) public view returns (uint) {\\n        checkIfValidatorAddressExists(validatorAddress);\\n        return _validatorAddressToId[validatorAddress];\\n    }\\n\\n    /**\\n     * @dev Checks whether the validator is currently accepting new delegation requests.\\n     */\\n    function isAcceptingNewRequests(uint validatorId) public view checkValidatorExists(validatorId) returns (bool) {\\n        return validators[validatorId].acceptNewRequests;\\n    }\\n\\n    function isAuthorizedValidator(uint validatorId) public view checkValidatorExists(validatorId) returns (bool) {\\n        return _trustedValidators[validatorId] || !useWhitelist;\\n    }\\n\\n    // private\\n\\n    /**\\n     * @dev Links a validator address to a validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Address is not already in use by another validator.\\n     */\\n    function _setValidatorAddress(uint validatorId, address validatorAddress) private {\\n        if (_validatorAddressToId[validatorAddress] == validatorId) {\\n            return;\\n        }\\n        require(_validatorAddressToId[validatorAddress] == 0, \\\"Address is in use by another validator\\\");\\n        address oldAddress = validators[validatorId].validatorAddress;\\n        delete _validatorAddressToId[oldAddress];\\n        _nodeAddressToValidatorId[validatorAddress] = validatorId;\\n        validators[validatorId].validatorAddress = validatorAddress;\\n        _validatorAddressToId[validatorAddress] = validatorId;\\n    }\\n\\n    /**\\n     * @dev Links a node address to a validator ID.\\n     * \\n     * Requirements:\\n     * \\n     * - Node address must not be already linked to a validator.\\n     */\\n    function _addNodeAddress(uint validatorId, address nodeAddress) private {\\n        if (_nodeAddressToValidatorId[nodeAddress] == validatorId) {\\n            return;\\n        }\\n        require(_nodeAddressToValidatorId[nodeAddress] == 0, \\\"Validator cannot override node address\\\");\\n        _nodeAddressToValidatorId[nodeAddress] = validatorId;\\n        _nodeAddresses[validatorId].push(nodeAddress);\\n    }\\n\\n    function _find(uint[] memory array, uint index) private pure returns (uint) {\\n        uint i;\\n        for (i = 0; i < array.length; i++) {\\n            if (array[i] == index) {\\n                return i;\\n            }\\n        }\\n        return array.length;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/SegmentTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    SegmentTree.sol - SKALE Manager\\n    Copyright (C) 2021-Present SKALE Labs\\n    @author Artem Payvin\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./Random.sol\\\";\\n\\n/**\\n * @title SegmentTree\\n * @dev This library implements segment tree data structure\\n * \\n * Segment tree allows effectively calculate sum of elements in sub arrays\\n * by storing some amount of additional data.\\n * \\n * IMPORTANT: Provided implementation assumes that arrays is indexed from 1 to n.\\n * Size of initial array always must be power of 2\\n * \\n * Example:\\n *\\n * Array:\\n * +---+---+---+---+---+---+---+---+\\n * | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\\n * +---+---+---+---+---+---+---+---+\\n *\\n * Segment tree structure:\\n * +-------------------------------+\\n * |               36              |\\n * +---------------+---------------+\\n * |       10      |       26      |\\n * +-------+-------+-------+-------+\\n * |   3   |   7   |   11  |   15  |\\n * +---+---+---+---+---+---+---+---+\\n * | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\\n * +---+---+---+---+---+---+---+---+\\n *\\n * How the segment tree is stored in an array:\\n * +----+----+----+---+---+----+----+---+---+---+---+---+---+---+---+\\n * | 36 | 10 | 26 | 3 | 7 | 11 | 15 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\\n * +----+----+----+---+---+----+----+---+---+---+---+---+---+---+---+\\n */\\nlibrary SegmentTree {\\n    using Random for Random.RandomGenerator;\\n    using SafeMath for uint;    \\n\\n    struct Tree {\\n        uint[] tree;\\n    }\\n\\n    /**\\n     * @dev Allocates storage for segment tree of `size` elements\\n     * \\n     * Requirements:\\n     * \\n     * - `size` must be greater than 0\\n     * - `size` must be power of 2\\n     */\\n    function create(Tree storage segmentTree, uint size) external {\\n        require(size > 0, \\\"Size can't be 0\\\");\\n        require(size & size.sub(1) == 0, \\\"Size is not power of 2\\\");\\n        segmentTree.tree = new uint[](size.mul(2).sub(1));\\n    }\\n\\n    /**\\n     * @dev Adds `delta` to element of segment tree at `place`\\n     * \\n     * Requirements:\\n     * \\n     * - `place` must be in range [1, size]\\n     */\\n    function addToPlace(Tree storage self, uint place, uint delta) external {\\n        require(_correctPlace(self, place), \\\"Incorrect place\\\");\\n        uint leftBound = 1;\\n        uint rightBound = getSize(self);\\n        uint step = 1;\\n        self.tree[0] = self.tree[0].add(delta);\\n        while(leftBound < rightBound) {\\n            uint middle = leftBound.add(rightBound).div(2);\\n            if (place > middle) {\\n                leftBound = middle.add(1);\\n                step = step.add(step).add(1);\\n            } else {\\n                rightBound = middle;\\n                step = step.add(step);\\n            }\\n            self.tree[step.sub(1)] = self.tree[step.sub(1)].add(delta);\\n        }\\n    }\\n\\n    /**\\n     * @dev Subtracts `delta` from element of segment tree at `place`\\n     * \\n     * Requirements:\\n     * \\n     * - `place` must be in range [1, size]\\n     * - initial value of target element must be not less than `delta`\\n     */\\n    function removeFromPlace(Tree storage self, uint place, uint delta) external {\\n        require(_correctPlace(self, place), \\\"Incorrect place\\\");\\n        uint leftBound = 1;\\n        uint rightBound = getSize(self);\\n        uint step = 1;\\n        self.tree[0] = self.tree[0].sub(delta);\\n        while(leftBound < rightBound) {\\n            uint middle = leftBound.add(rightBound).div(2);\\n            if (place > middle) {\\n                leftBound = middle.add(1);\\n                step = step.add(step).add(1);\\n            } else {\\n                rightBound = middle;\\n                step = step.add(step);\\n            }\\n            self.tree[step.sub(1)] = self.tree[step.sub(1)].sub(delta);\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds `delta` to element of segment tree at `toPlace`\\n     * and subtracts `delta` from element at `fromPlace`\\n     * \\n     * Requirements:\\n     * \\n     * - `fromPlace` must be in range [1, size]\\n     * - `toPlace` must be in range [1, size]\\n     * - initial value of element at `fromPlace` must be not less than `delta`\\n     */\\n    function moveFromPlaceToPlace(\\n        Tree storage self,\\n        uint fromPlace,\\n        uint toPlace,\\n        uint delta\\n    )\\n        external\\n    {\\n        require(_correctPlace(self, fromPlace) && _correctPlace(self, toPlace), \\\"Incorrect place\\\");\\n        uint leftBound = 1;\\n        uint rightBound = getSize(self);\\n        uint step = 1;\\n        uint middle = leftBound.add(rightBound).div(2);\\n        uint fromPlaceMove = fromPlace > toPlace ? toPlace : fromPlace;\\n        uint toPlaceMove = fromPlace > toPlace ? fromPlace : toPlace;\\n        while (toPlaceMove <= middle || middle < fromPlaceMove) {\\n            if (middle < fromPlaceMove) {\\n                leftBound = middle.add(1);\\n                step = step.add(step).add(1);\\n            } else {\\n                rightBound = middle;\\n                step = step.add(step);\\n            }\\n            middle = leftBound.add(rightBound).div(2);\\n        }\\n\\n        uint leftBoundMove = leftBound;\\n        uint rightBoundMove = rightBound;\\n        uint stepMove = step;\\n        while(leftBoundMove < rightBoundMove && leftBound < rightBound) {\\n            uint middleMove = leftBoundMove.add(rightBoundMove).div(2);\\n            if (fromPlace > middleMove) {\\n                leftBoundMove = middleMove.add(1);\\n                stepMove = stepMove.add(stepMove).add(1);\\n            } else {\\n                rightBoundMove = middleMove;\\n                stepMove = stepMove.add(stepMove);\\n            }\\n            self.tree[stepMove.sub(1)] = self.tree[stepMove.sub(1)].sub(delta);\\n            middle = leftBound.add(rightBound).div(2);\\n            if (toPlace > middle) {\\n                leftBound = middle.add(1);\\n                step = step.add(step).add(1);\\n            } else {\\n                rightBound = middle;\\n                step = step.add(step);\\n            }\\n            self.tree[step.sub(1)] = self.tree[step.sub(1)].add(delta);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns random position in range [`place`, size]\\n     * with probability proportional to value stored at this position.\\n     * If all element in range are 0 returns 0\\n     * \\n     * Requirements:\\n     * \\n     * - `place` must be in range [1, size]\\n     */\\n    function getRandomNonZeroElementFromPlaceToLast(\\n        Tree storage self,\\n        uint place,\\n        Random.RandomGenerator memory randomGenerator\\n    )\\n        external\\n        view\\n        returns (uint)\\n    {\\n        require(_correctPlace(self, place), \\\"Incorrect place\\\");\\n\\n        uint vertex = 1;\\n        uint leftBound = 0;\\n        uint rightBound = getSize(self);\\n        uint currentFrom = place.sub(1);\\n        uint currentSum = sumFromPlaceToLast(self, place);\\n        if (currentSum == 0) {\\n            return 0;\\n        }\\n        while(leftBound.add(1) < rightBound) {\\n            if (_middle(leftBound, rightBound) <= currentFrom) {\\n                vertex = _right(vertex);\\n                leftBound = _middle(leftBound, rightBound);\\n            } else {\\n                uint rightSum = self.tree[_right(vertex).sub(1)];\\n                uint leftSum = currentSum.sub(rightSum);\\n                if (Random.random(randomGenerator, currentSum) < leftSum) {\\n                    // go left\\n                    vertex = _left(vertex);\\n                    rightBound = _middle(leftBound, rightBound);\\n                    currentSum = leftSum;\\n                } else {\\n                    // go right\\n                    vertex = _right(vertex);\\n                    leftBound = _middle(leftBound, rightBound);\\n                    currentFrom = leftBound;\\n                    currentSum = rightSum;\\n                }\\n            }\\n        }\\n        return leftBound.add(1);\\n    }\\n\\n    /**\\n     * @dev Returns sum of elements in range [`place`, size]\\n     * \\n     * Requirements:\\n     * \\n     * - `place` must be in range [1, size]\\n     */\\n    function sumFromPlaceToLast(Tree storage self, uint place) public view returns (uint sum) {\\n        require(_correctPlace(self, place), \\\"Incorrect place\\\");\\n        if (place == 1) {\\n            return self.tree[0];\\n        }\\n        uint leftBound = 1;\\n        uint rightBound = getSize(self);\\n        uint step = 1;\\n        while(leftBound < rightBound) {\\n            uint middle = leftBound.add(rightBound).div(2);\\n            if (place > middle) {\\n                leftBound = middle.add(1);\\n                step = step.add(step).add(1);\\n            } else {\\n                rightBound = middle;\\n                step = step.add(step);\\n                sum = sum.add(self.tree[step]);\\n            }\\n        }\\n        sum = sum.add(self.tree[step.sub(1)]);\\n    }\\n\\n    /**\\n     * @dev Returns amount of elements in segment tree\\n     */\\n    function getSize(Tree storage segmentTree) internal view returns (uint) {\\n        if (segmentTree.tree.length > 0) {\\n            return segmentTree.tree.length.div(2).add(1);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if `place` is valid position in segment tree\\n     */\\n    function _correctPlace(Tree storage self, uint place) private view returns (bool) {\\n        return place >= 1 && place <= getSize(self);\\n    }\\n\\n    /**\\n     * @dev Calculates index of left child of the vertex\\n     */\\n    function _left(uint vertex) private pure returns (uint) {\\n        return vertex.mul(2);\\n    }\\n\\n    /**\\n     * @dev Calculates index of right child of the vertex\\n     */\\n    function _right(uint vertex) private pure returns (uint) {\\n        return vertex.mul(2).add(1);\\n    }\\n\\n    /**\\n     * @dev Calculates arithmetical mean of 2 numbers\\n     */\\n    function _middle(uint left, uint right) private pure returns (uint) {\\n        return left.add(right).div(2);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BountyV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Bounty.sol - SKALE Manager\\n    Copyright (C) 2020-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"./delegation/DelegationController.sol\\\";\\nimport \\\"./delegation/PartialDifferences.sol\\\";\\nimport \\\"./delegation/TimeHelpers.sol\\\";\\nimport \\\"./delegation/ValidatorService.sol\\\";\\n\\nimport \\\"./ConstantsHolder.sol\\\";\\nimport \\\"./Nodes.sol\\\";\\nimport \\\"./Permissions.sol\\\";\\n\\n\\ncontract BountyV2 is Permissions {\\n    using PartialDifferences for PartialDifferences.Value;\\n    using PartialDifferences for PartialDifferences.Sequence;\\n\\n    struct BountyHistory {\\n        uint month;\\n        uint bountyPaid;\\n    }\\n    \\n    uint public constant YEAR1_BOUNTY = 3850e5 * 1e18;\\n    uint public constant YEAR2_BOUNTY = 3465e5 * 1e18;\\n    uint public constant YEAR3_BOUNTY = 3080e5 * 1e18;\\n    uint public constant YEAR4_BOUNTY = 2695e5 * 1e18;\\n    uint public constant YEAR5_BOUNTY = 2310e5 * 1e18;\\n    uint public constant YEAR6_BOUNTY = 1925e5 * 1e18;\\n    uint public constant EPOCHS_PER_YEAR = 12;\\n    uint public constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint public constant BOUNTY_WINDOW_SECONDS = 3 * SECONDS_PER_DAY;\\n    \\n    uint private _nextEpoch;\\n    uint private _epochPool;\\n    uint private _bountyWasPaidInCurrentEpoch;\\n    bool public bountyReduction;\\n    uint public nodeCreationWindowSeconds;\\n\\n    PartialDifferences.Value private _effectiveDelegatedSum;\\n    // validatorId   amount of nodes\\n    mapping (uint => uint) public nodesByValidator; // deprecated\\n\\n    // validatorId => BountyHistory\\n    mapping (uint => BountyHistory) private _bountyHistory;\\n\\n    function calculateBounty(uint nodeIndex)\\n        external\\n        allow(\\\"SkaleManager\\\")\\n        returns (uint)\\n    {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        \\n        require(\\n            _getNextRewardTimestamp(nodeIndex, nodes, timeHelpers) <= now,\\n            \\\"Transaction is sent too early\\\"\\n        );\\n\\n        uint validatorId = nodes.getValidatorId(nodeIndex);\\n        if (nodesByValidator[validatorId] > 0) {\\n            delete nodesByValidator[validatorId];\\n        }\\n\\n        uint currentMonth = timeHelpers.getCurrentMonth();\\n        _refillEpochPool(currentMonth, timeHelpers, constantsHolder);\\n        _prepareBountyHistory(validatorId, currentMonth);\\n\\n        uint bounty = _calculateMaximumBountyAmount(\\n            _epochPool,\\n            _effectiveDelegatedSum.getAndUpdateValue(currentMonth),\\n            _bountyWasPaidInCurrentEpoch,\\n            nodeIndex,\\n            _bountyHistory[validatorId].bountyPaid,\\n            delegationController.getAndUpdateEffectiveDelegatedToValidator(validatorId, currentMonth),\\n            delegationController.getAndUpdateDelegatedToValidatorNow(validatorId),\\n            constantsHolder,\\n            nodes\\n        );\\n        _bountyHistory[validatorId].bountyPaid = _bountyHistory[validatorId].bountyPaid.add(bounty);\\n\\n        bounty = _reduceBounty(\\n            bounty,\\n            nodeIndex,\\n            nodes,\\n            constantsHolder\\n        );\\n        \\n        _epochPool = _epochPool.sub(bounty);\\n        _bountyWasPaidInCurrentEpoch = _bountyWasPaidInCurrentEpoch.add(bounty);\\n\\n        return bounty;\\n    }\\n\\n    function enableBountyReduction() external onlyOwner {\\n        bountyReduction = true;\\n    }\\n\\n    function disableBountyReduction() external onlyOwner {\\n        bountyReduction = false;\\n    }\\n\\n    function setNodeCreationWindowSeconds(uint window) external allow(\\\"Nodes\\\") {\\n        nodeCreationWindowSeconds = window;\\n    }\\n\\n    function handleDelegationAdd(\\n        uint amount,\\n        uint month\\n    )\\n        external\\n        allow(\\\"DelegationController\\\")\\n    {\\n        _effectiveDelegatedSum.addToValue(amount, month);\\n    }\\n\\n    function handleDelegationRemoving(\\n        uint amount,\\n        uint month\\n    )\\n        external\\n        allow(\\\"DelegationController\\\")\\n    {\\n        _effectiveDelegatedSum.subtractFromValue(amount, month);\\n    }\\n\\n    function populate() external onlyOwner {\\n        ValidatorService validatorService = ValidatorService(contractManager.getValidatorService());\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n        TimeHelpers timeHelpers = TimeHelpers(contractManager.getTimeHelpers());\\n\\n        uint currentMonth = timeHelpers.getCurrentMonth();\\n\\n        // clean existing data\\n        for (\\n            uint i = _effectiveDelegatedSum.firstUnprocessedMonth;\\n            i < _effectiveDelegatedSum.lastChangedMonth.add(1);\\n            ++i\\n        )\\n        {\\n            delete _effectiveDelegatedSum.addDiff[i];\\n            delete _effectiveDelegatedSum.subtractDiff[i];\\n        }\\n        delete _effectiveDelegatedSum.value;\\n        delete _effectiveDelegatedSum.lastChangedMonth;\\n        _effectiveDelegatedSum.firstUnprocessedMonth = currentMonth;\\n        \\n        uint[] memory validators = validatorService.getTrustedValidators();\\n        for (uint i = 0; i < validators.length; ++i) {\\n            uint validatorId = validators[i];\\n            uint currentEffectiveDelegated =\\n                delegationController.getAndUpdateEffectiveDelegatedToValidator(validatorId, currentMonth);\\n            uint[] memory effectiveDelegated = delegationController.getEffectiveDelegatedValuesByValidator(validatorId);\\n            if (effectiveDelegated.length > 0) {\\n                assert(currentEffectiveDelegated == effectiveDelegated[0]);\\n            }\\n            uint added = 0;\\n            for (uint j = 0; j < effectiveDelegated.length; ++j) {\\n                if (effectiveDelegated[j] != added) {\\n                    if (effectiveDelegated[j] > added) {\\n                        _effectiveDelegatedSum.addToValue(effectiveDelegated[j].sub(added), currentMonth + j);\\n                    } else {\\n                        _effectiveDelegatedSum.subtractFromValue(added.sub(effectiveDelegated[j]), currentMonth + j);\\n                    }\\n                    added = effectiveDelegated[j];\\n                }\\n            }\\n            delete effectiveDelegated;\\n        }\\n    }\\n\\n    function estimateBounty(uint nodeIndex) external view returns (uint) {\\n        ConstantsHolder constantsHolder = ConstantsHolder(contractManager.getContract(\\\"ConstantsHolder\\\"));\\n        Nodes nodes = Nodes(contractManager.getContract(\\\"Nodes\\\"));\\n        TimeHelpers timeHelpers = TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"));\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\")\\n        );\\n\\n        uint currentMonth = timeHelpers.getCurrentMonth();\\n        uint validatorId = nodes.getValidatorId(nodeIndex);\\n\\n        uint stagePoolSize;\\n        (stagePoolSize, ) = _getEpochPool(currentMonth, timeHelpers, constantsHolder);\\n\\n        return _calculateMaximumBountyAmount(\\n            stagePoolSize,\\n            _effectiveDelegatedSum.getValue(currentMonth),\\n            _nextEpoch == currentMonth.add(1) ? _bountyWasPaidInCurrentEpoch : 0,\\n            nodeIndex,\\n            _getBountyPaid(validatorId, currentMonth),\\n            delegationController.getEffectiveDelegatedToValidator(validatorId, currentMonth),\\n            delegationController.getDelegatedToValidator(validatorId, currentMonth),\\n            constantsHolder,\\n            nodes\\n        );\\n    }\\n\\n    function getNextRewardTimestamp(uint nodeIndex) external view returns (uint) {\\n        return _getNextRewardTimestamp(\\n            nodeIndex,\\n            Nodes(contractManager.getContract(\\\"Nodes\\\")),\\n            TimeHelpers(contractManager.getContract(\\\"TimeHelpers\\\"))\\n        );\\n    }\\n\\n    function getEffectiveDelegatedSum() external view returns (uint[] memory) {\\n        return _effectiveDelegatedSum.getValues();\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        _nextEpoch = 0;\\n        _epochPool = 0;\\n        _bountyWasPaidInCurrentEpoch = 0;\\n        bountyReduction = false;\\n        nodeCreationWindowSeconds = 3 * SECONDS_PER_DAY;\\n    }\\n\\n    // private\\n\\n    function _calculateMaximumBountyAmount(\\n        uint epochPoolSize,\\n        uint effectiveDelegatedSum,\\n        uint bountyWasPaidInCurrentEpoch,\\n        uint nodeIndex,\\n        uint bountyPaidToTheValidator,\\n        uint effectiveDelegated,\\n        uint delegated,\\n        ConstantsHolder constantsHolder,\\n        Nodes nodes\\n    )\\n        private\\n        view\\n        returns (uint)\\n    {\\n        if (nodes.isNodeLeft(nodeIndex)) {\\n            return 0;\\n        }\\n\\n        if (now < constantsHolder.launchTimestamp()) {\\n            // network is not launched\\n            // bounty is turned off\\n            return 0;\\n        }\\n        \\n        if (effectiveDelegatedSum == 0) {\\n            // no delegations in the system\\n            return 0;\\n        }\\n\\n        if (constantsHolder.msr() == 0) {\\n            return 0;\\n        }\\n\\n        uint bounty = _calculateBountyShare(\\n            epochPoolSize.add(bountyWasPaidInCurrentEpoch),\\n            effectiveDelegated,\\n            effectiveDelegatedSum,\\n            delegated.div(constantsHolder.msr()),\\n            bountyPaidToTheValidator\\n        );\\n\\n        return bounty;\\n    }\\n\\n    function _calculateBountyShare(\\n        uint monthBounty,\\n        uint effectiveDelegated,\\n        uint effectiveDelegatedSum,\\n        uint maxNodesAmount,\\n        uint paidToValidator\\n    )\\n        private\\n        pure\\n        returns (uint)\\n    {\\n        if (maxNodesAmount > 0) {\\n            uint totalBountyShare = monthBounty\\n                .mul(effectiveDelegated)\\n                .div(effectiveDelegatedSum);\\n            return _min(\\n                totalBountyShare.div(maxNodesAmount),\\n                totalBountyShare.sub(paidToValidator)\\n            );\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _getFirstEpoch(TimeHelpers timeHelpers, ConstantsHolder constantsHolder) private view returns (uint) {\\n        return timeHelpers.timestampToMonth(constantsHolder.launchTimestamp());\\n    }\\n\\n    function _getEpochPool(\\n        uint currentMonth,\\n        TimeHelpers timeHelpers,\\n        ConstantsHolder constantsHolder\\n    )\\n        private\\n        view\\n        returns (uint epochPool, uint nextEpoch)\\n    {\\n        epochPool = _epochPool;\\n        for (nextEpoch = _nextEpoch; nextEpoch <= currentMonth; ++nextEpoch) {\\n            epochPool = epochPool.add(_getEpochReward(nextEpoch, timeHelpers, constantsHolder));\\n        }\\n    }\\n\\n    function _refillEpochPool(uint currentMonth, TimeHelpers timeHelpers, ConstantsHolder constantsHolder) private {\\n        uint epochPool;\\n        uint nextEpoch;\\n        (epochPool, nextEpoch) = _getEpochPool(currentMonth, timeHelpers, constantsHolder);\\n        if (_nextEpoch < nextEpoch) {\\n            (_epochPool, _nextEpoch) = (epochPool, nextEpoch);\\n            _bountyWasPaidInCurrentEpoch = 0;\\n        }\\n    }\\n\\n    function _getEpochReward(\\n        uint epoch,\\n        TimeHelpers timeHelpers,\\n        ConstantsHolder constantsHolder\\n    )\\n        private\\n        view\\n        returns (uint)\\n    {\\n        uint firstEpoch = _getFirstEpoch(timeHelpers, constantsHolder);\\n        if (epoch < firstEpoch) {\\n            return 0;\\n        }\\n        uint epochIndex = epoch.sub(firstEpoch);\\n        uint year = epochIndex.div(EPOCHS_PER_YEAR);\\n        if (year >= 6) {\\n            uint power = year.sub(6).div(3).add(1);\\n            if (power < 256) {\\n                return YEAR6_BOUNTY.div(2 ** power).div(EPOCHS_PER_YEAR);\\n            } else {\\n                return 0;\\n            }\\n        } else {\\n            uint[6] memory customBounties = [\\n                YEAR1_BOUNTY,\\n                YEAR2_BOUNTY,\\n                YEAR3_BOUNTY,\\n                YEAR4_BOUNTY,\\n                YEAR5_BOUNTY,\\n                YEAR6_BOUNTY\\n            ];\\n            return customBounties[year].div(EPOCHS_PER_YEAR);\\n        }\\n    }\\n\\n    function _reduceBounty(\\n        uint bounty,\\n        uint nodeIndex,\\n        Nodes nodes,\\n        ConstantsHolder constants\\n    )\\n        private\\n        returns (uint reducedBounty)\\n    {\\n        if (!bountyReduction) {\\n            return bounty;\\n        }\\n\\n        reducedBounty = bounty;\\n\\n        if (!nodes.checkPossibilityToMaintainNode(nodes.getValidatorId(nodeIndex), nodeIndex)) {\\n            reducedBounty = reducedBounty.div(constants.MSR_REDUCING_COEFFICIENT());\\n        }\\n    }\\n\\n    function _prepareBountyHistory(uint validatorId, uint currentMonth) private {\\n        if (_bountyHistory[validatorId].month < currentMonth) {\\n            _bountyHistory[validatorId].month = currentMonth;\\n            delete _bountyHistory[validatorId].bountyPaid;\\n        }\\n    }\\n\\n    function _getBountyPaid(uint validatorId, uint month) private view returns (uint) {\\n        require(_bountyHistory[validatorId].month <= month, \\\"Can't get bounty paid\\\");\\n        if (_bountyHistory[validatorId].month == month) {\\n            return _bountyHistory[validatorId].bountyPaid;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function _getNextRewardTimestamp(uint nodeIndex, Nodes nodes, TimeHelpers timeHelpers) private view returns (uint) {\\n        uint lastRewardTimestamp = nodes.getNodeLastRewardDate(nodeIndex);\\n        uint lastRewardMonth = timeHelpers.timestampToMonth(lastRewardTimestamp);\\n        uint lastRewardMonthStart = timeHelpers.monthToTimestamp(lastRewardMonth);\\n        uint timePassedAfterMonthStart = lastRewardTimestamp.sub(lastRewardMonthStart);\\n        uint currentMonth = timeHelpers.getCurrentMonth();\\n        assert(lastRewardMonth <= currentMonth);\\n\\n        if (lastRewardMonth == currentMonth) {\\n            uint nextMonthStart = timeHelpers.monthToTimestamp(currentMonth.add(1));\\n            uint nextMonthFinish = timeHelpers.monthToTimestamp(lastRewardMonth.add(2));\\n            if (lastRewardTimestamp < lastRewardMonthStart.add(nodeCreationWindowSeconds)) {\\n                return nextMonthStart.sub(BOUNTY_WINDOW_SECONDS);\\n            } else {\\n                return _min(nextMonthStart.add(timePassedAfterMonthStart), nextMonthFinish.sub(BOUNTY_WINDOW_SECONDS));\\n            }\\n        } else if (lastRewardMonth.add(1) == currentMonth) {\\n            uint currentMonthStart = timeHelpers.monthToTimestamp(currentMonth);\\n            uint currentMonthFinish = timeHelpers.monthToTimestamp(currentMonth.add(1));\\n            return _min(\\n                currentMonthStart.add(_max(timePassedAfterMonthStart, nodeCreationWindowSeconds)),\\n                currentMonthFinish.sub(BOUNTY_WINDOW_SECONDS)\\n            );\\n        } else {\\n            uint currentMonthStart = timeHelpers.monthToTimestamp(currentMonth);\\n            return currentMonthStart.add(nodeCreationWindowSeconds);\\n        }\\n    }\\n\\n    function _min(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function _max(uint a, uint b) private pure returns (uint) {\\n        if (a < b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC777/IERC777.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/FractionUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    FractionUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\n\\nlibrary FractionUtils {\\n    using SafeMath for uint;\\n\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n\\n    function createFraction(uint numerator, uint denominator) internal pure returns (Fraction memory) {\\n        require(denominator > 0, \\\"Division by zero\\\");\\n        Fraction memory fraction = Fraction({numerator: numerator, denominator: denominator});\\n        reduceFraction(fraction);\\n        return fraction;\\n    }\\n\\n    function createFraction(uint value) internal pure returns (Fraction memory) {\\n        return createFraction(value, 1);\\n    }\\n\\n    function reduceFraction(Fraction memory fraction) internal pure {\\n        uint _gcd = gcd(fraction.numerator, fraction.denominator);\\n        fraction.numerator = fraction.numerator.div(_gcd);\\n        fraction.denominator = fraction.denominator.div(_gcd);\\n    }\\n    \\n    // numerator - is limited by 7*10^27, we could multiply it numerator * numerator - it would less than 2^256-1\\n    function multiplyFraction(Fraction memory a, Fraction memory b) internal pure returns (Fraction memory) {\\n        return createFraction(a.numerator.mul(b.numerator), a.denominator.mul(b.denominator));\\n    }\\n\\n    function gcd(uint a, uint b) internal pure returns (uint) {\\n        uint _a = a;\\n        uint _b = b;\\n        if (_b > _a) {\\n            (_a, _b) = swap(_a, _b);\\n        }\\n        while (_b > 0) {\\n            _a = _a.mod(_b);\\n            (_a, _b) = swap (_a, _b);\\n        }\\n        return _a;\\n    }\\n\\n    function swap(uint a, uint b) internal pure returns (uint, uint) {\\n        return (b, a);\\n    }\\n}\"\r\n    },\r\n    \"contracts/utils/MathUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    MathUtils.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n\\nlibrary MathUtils {\\n\\n    uint constant private _EPS = 1e6;\\n\\n    event UnderflowError(\\n        uint a,\\n        uint b\\n    );    \\n\\n    function boundedSub(uint256 a, uint256 b) internal returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            emit UnderflowError(a, b);\\n            return 0;\\n        }\\n    }\\n\\n    function boundedSubWithoutEvent(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a >= b) {\\n            return a - b;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function muchGreater(uint256 a, uint256 b) internal pure returns (bool) {\\n        assert(uint(-1) - _EPS > b);\\n        return a > b + _EPS;\\n    }\\n\\n    function approximatelyEqual(uint256 a, uint256 b) internal pure returns (bool) {\\n        if (a > b) {\\n            return a - b < _EPS;\\n        } else {\\n            return b - a < _EPS;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation/DelegationPeriodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    DelegationPeriodManager.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n    @author Vadim Yavorsky\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../Permissions.sol\\\";\\n\\n/**\\n * @title Delegation Period Manager\\n * @dev This contract handles all delegation offerings. Delegations are held for\\n * a specified period (months), and different durations can have different\\n * returns or `stakeMultiplier`. Currently, only delegation periods can be added.\\n */\\ncontract DelegationPeriodManager is Permissions {\\n\\n    mapping (uint => uint) public stakeMultipliers;\\n\\n    /**\\n     * @dev Emitted when a new delegation period is specified.\\n     */\\n    event DelegationPeriodWasSet(\\n        uint length,\\n        uint stakeMultiplier\\n    );\\n\\n    /**\\n     * @dev Allows the Owner to create a new available delegation period and\\n     * stake multiplier in the network.\\n     * \\n     * Emits a {DelegationPeriodWasSet} event.\\n     */\\n    function setDelegationPeriod(uint monthsCount, uint stakeMultiplier) external onlyOwner {\\n        require(stakeMultipliers[monthsCount] == 0, \\\"Delegation perios is already set\\\");\\n        stakeMultipliers[monthsCount] = stakeMultiplier;\\n\\n        emit DelegationPeriodWasSet(monthsCount, stakeMultiplier);\\n    }\\n\\n    /**\\n     * @dev Checks whether given delegation period is allowed.\\n     */\\n    function isDelegationPeriodAllowed(uint monthsCount) external view returns (bool) {\\n        return stakeMultipliers[monthsCount] != 0;\\n    }\\n\\n    /**\\n     * @dev Initial delegation period and multiplier settings.\\n     */\\n    function initialize(address contractsAddress) public override initializer {\\n        Permissions.initialize(contractsAddress);\\n        stakeMultipliers[2] = 100;  // 2 months at 100\\n        // stakeMultipliers[6] = 150;  // 6 months at 150\\n        // stakeMultipliers[12] = 200; // 12 months at 200\\n    }\\n}\"\r\n    },\r\n    \"contracts/delegation/PartialDifferences.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    PartialDifferences.sol - SKALE Manager\\n    Copyright (C) 2018-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../utils/MathUtils.sol\\\";\\nimport \\\"../utils/FractionUtils.sol\\\";\\n\\n/**\\n * @title Partial Differences Library\\n * @dev This library contains functions to manage Partial Differences data\\n * structure. Partial Differences is an array of value differences over time.\\n * \\n * For example: assuming an array [3, 6, 3, 1, 2], partial differences can\\n * represent this array as [_, 3, -3, -2, 1].\\n * \\n * This data structure allows adding values on an open interval with O(1)\\n * complexity.\\n * \\n * For example: add +5 to [3, 6, 3, 1, 2] starting from the second element (3),\\n * instead of performing [3, 6, 3+5, 1+5, 2+5] partial differences allows\\n * performing [_, 3, -3+5, -2, 1]. The original array can be restored by\\n * adding values from partial differences.\\n */\\nlibrary PartialDifferences {\\n    using SafeMath for uint;\\n    using MathUtils for uint;\\n\\n    struct Sequence {\\n             // month => diff\\n        mapping (uint => uint) addDiff;\\n             // month => diff\\n        mapping (uint => uint) subtractDiff;\\n             // month => value\\n        mapping (uint => uint) value;\\n\\n        uint firstUnprocessedMonth;\\n        uint lastChangedMonth;\\n    }\\n\\n    struct Value {\\n             // month => diff\\n        mapping (uint => uint) addDiff;\\n             // month => diff\\n        mapping (uint => uint) subtractDiff;\\n\\n        uint value;\\n        uint firstUnprocessedMonth;\\n        uint lastChangedMonth;\\n    }\\n\\n    // functions for sequence\\n\\n    function addToSequence(Sequence storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth <= month, \\\"Cannot add to the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n        }\\n        sequence.addDiff[month] = sequence.addDiff[month].add(diff);\\n        if (sequence.lastChangedMonth != month) {\\n            sequence.lastChangedMonth = month;\\n        }\\n    }\\n\\n    function subtractFromSequence(Sequence storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth <= month, \\\"Cannot subtract from the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n        }\\n        sequence.subtractDiff[month] = sequence.subtractDiff[month].add(diff);\\n        if (sequence.lastChangedMonth != month) {\\n            sequence.lastChangedMonth = month;\\n        }\\n    }\\n\\n    function getAndUpdateValueInSequence(Sequence storage sequence, uint month) internal returns (uint) {\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth <= month) {\\n            for (uint i = sequence.firstUnprocessedMonth; i <= month; ++i) {\\n                uint nextValue = sequence.value[i.sub(1)].add(sequence.addDiff[i]).boundedSub(sequence.subtractDiff[i]);\\n                if (sequence.value[i] != nextValue) {\\n                    sequence.value[i] = nextValue;\\n                }\\n                if (sequence.addDiff[i] > 0) {\\n                    delete sequence.addDiff[i];\\n                }\\n                if (sequence.subtractDiff[i] > 0) {\\n                    delete sequence.subtractDiff[i];\\n                }\\n            }\\n            sequence.firstUnprocessedMonth = month.add(1);\\n        }\\n\\n        return sequence.value[month];\\n    }\\n\\n    function getValueInSequence(Sequence storage sequence, uint month) internal view returns (uint) {\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth <= month) {\\n            uint value = sequence.value[sequence.firstUnprocessedMonth.sub(1)];\\n            for (uint i = sequence.firstUnprocessedMonth; i <= month; ++i) {\\n                value = value.add(sequence.addDiff[i]).sub(sequence.subtractDiff[i]);\\n            }\\n            return value;\\n        } else {\\n            return sequence.value[month];\\n        }\\n    }\\n\\n    function getValuesInSequence(Sequence storage sequence) internal view returns (uint[] memory values) {\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return values;\\n        }\\n        uint begin = sequence.firstUnprocessedMonth.sub(1);\\n        uint end = sequence.lastChangedMonth.add(1);\\n        if (end <= begin) {\\n            end = begin.add(1);\\n        }\\n        values = new uint[](end.sub(begin));\\n        values[0] = sequence.value[sequence.firstUnprocessedMonth.sub(1)];\\n        for (uint i = 0; i.add(1) < values.length; ++i) {\\n            uint month = sequence.firstUnprocessedMonth.add(i);\\n            values[i.add(1)] = values[i].add(sequence.addDiff[month]).sub(sequence.subtractDiff[month]);\\n        }\\n    }\\n\\n    function reduceSequence(\\n        Sequence storage sequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month) internal\\n    {\\n        require(month.add(1) >= sequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        require(\\n            reducingCoefficient.numerator <= reducingCoefficient.denominator,\\n            \\\"Increasing of values is not implemented\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return;\\n        }\\n        uint value = getAndUpdateValueInSequence(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return;\\n        }\\n\\n        sequence.value[month] = sequence.value[month]\\n            .mul(reducingCoefficient.numerator)\\n            .div(reducingCoefficient.denominator);\\n\\n        for (uint i = month.add(1); i <= sequence.lastChangedMonth; ++i) {\\n            sequence.subtractDiff[i] = sequence.subtractDiff[i]\\n                .mul(reducingCoefficient.numerator)\\n                .div(reducingCoefficient.denominator);\\n        }\\n    }\\n\\n    // functions for value\\n\\n    function addToValue(Value storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth <= month, \\\"Cannot add to the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n            sequence.lastChangedMonth = month;\\n        }\\n        if (month > sequence.lastChangedMonth) {\\n            sequence.lastChangedMonth = month;\\n        }\\n\\n        if (month >= sequence.firstUnprocessedMonth) {\\n            sequence.addDiff[month] = sequence.addDiff[month].add(diff);\\n        } else {\\n            sequence.value = sequence.value.add(diff);\\n        }\\n    }\\n\\n    function subtractFromValue(Value storage sequence, uint diff, uint month) internal {\\n        require(sequence.firstUnprocessedMonth <= month.add(1), \\\"Cannot subtract from the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            sequence.firstUnprocessedMonth = month;\\n            sequence.lastChangedMonth = month;\\n        }\\n        if (month > sequence.lastChangedMonth) {\\n            sequence.lastChangedMonth = month;\\n        }\\n\\n        if (month >= sequence.firstUnprocessedMonth) {\\n            sequence.subtractDiff[month] = sequence.subtractDiff[month].add(diff);\\n        } else {\\n            sequence.value = sequence.value.boundedSub(diff);\\n        }\\n    }\\n\\n    function getAndUpdateValue(Value storage sequence, uint month) internal returns (uint) {\\n        require(\\n            month.add(1) >= sequence.firstUnprocessedMonth,\\n            \\\"Cannot calculate value in the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth <= month) {\\n            uint value = sequence.value;\\n            for (uint i = sequence.firstUnprocessedMonth; i <= month; ++i) {\\n                value = value.add(sequence.addDiff[i]).boundedSub(sequence.subtractDiff[i]);\\n                if (sequence.addDiff[i] > 0) {\\n                    delete sequence.addDiff[i];\\n                }\\n                if (sequence.subtractDiff[i] > 0) {\\n                    delete sequence.subtractDiff[i];\\n                }\\n            }\\n            if (sequence.value != value) {\\n                sequence.value = value;\\n            }\\n            sequence.firstUnprocessedMonth = month.add(1);\\n        }\\n\\n        return sequence.value;\\n    }\\n\\n    function getValue(Value storage sequence, uint month) internal view returns (uint) {\\n        require(\\n            month.add(1) >= sequence.firstUnprocessedMonth,\\n            \\\"Cannot calculate value in the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return 0;\\n        }\\n\\n        if (sequence.firstUnprocessedMonth <= month) {\\n            uint value = sequence.value;\\n            for (uint i = sequence.firstUnprocessedMonth; i <= month; ++i) {\\n                value = value.add(sequence.addDiff[i]).sub(sequence.subtractDiff[i]);\\n            }\\n            return value;\\n        } else {\\n            return sequence.value;\\n        }\\n    }\\n\\n    function getValues(Value storage sequence) internal view returns (uint[] memory values) {\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return values;\\n        }\\n        uint begin = sequence.firstUnprocessedMonth.sub(1);\\n        uint end = sequence.lastChangedMonth.add(1);\\n        if (end <= begin) {\\n            end = begin.add(1);\\n        }\\n        values = new uint[](end.sub(begin));\\n        values[0] = sequence.value;\\n        for (uint i = 0; i.add(1) < values.length; ++i) {\\n            uint month = sequence.firstUnprocessedMonth.add(i);\\n            values[i.add(1)] = values[i].add(sequence.addDiff[month]).sub(sequence.subtractDiff[month]);\\n        }\\n    }\\n\\n    function reduceValue(\\n        Value storage sequence,\\n        uint amount,\\n        uint month)\\n        internal returns (FractionUtils.Fraction memory)\\n    {\\n        require(month.add(1) >= sequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return FractionUtils.createFraction(0);\\n        }\\n        uint value = getAndUpdateValue(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return FractionUtils.createFraction(0);\\n        }\\n\\n        uint _amount = amount;\\n        if (value < amount) {\\n            _amount = value;\\n        }\\n\\n        FractionUtils.Fraction memory reducingCoefficient =\\n            FractionUtils.createFraction(value.boundedSub(_amount), value);\\n        reduceValueByCoefficient(sequence, reducingCoefficient, month);\\n        return reducingCoefficient;\\n    }\\n\\n    function reduceValueByCoefficient(\\n        Value storage sequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month)\\n        internal\\n    {\\n        reduceValueByCoefficientAndUpdateSumIfNeeded(\\n            sequence,\\n            sequence,\\n            reducingCoefficient,\\n            month,\\n            false);\\n    }\\n\\n    function reduceValueByCoefficientAndUpdateSum(\\n        Value storage sequence,\\n        Value storage sumSequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month) internal\\n    {\\n        reduceValueByCoefficientAndUpdateSumIfNeeded(\\n            sequence,\\n            sumSequence,\\n            reducingCoefficient,\\n            month,\\n            true);\\n    }\\n\\n    function reduceValueByCoefficientAndUpdateSumIfNeeded(\\n        Value storage sequence,\\n        Value storage sumSequence,\\n        FractionUtils.Fraction memory reducingCoefficient,\\n        uint month,\\n        bool hasSumSequence) internal\\n    {\\n        require(month.add(1) >= sequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        if (hasSumSequence) {\\n            require(month.add(1) >= sumSequence.firstUnprocessedMonth, \\\"Cannot reduce value in the past\\\");\\n        }\\n        require(\\n            reducingCoefficient.numerator <= reducingCoefficient.denominator,\\n            \\\"Increasing of values is not implemented\\\");\\n        if (sequence.firstUnprocessedMonth == 0) {\\n            return;\\n        }\\n        uint value = getAndUpdateValue(sequence, month);\\n        if (value.approximatelyEqual(0)) {\\n            return;\\n        }\\n\\n        uint newValue = sequence.value.mul(reducingCoefficient.numerator).div(reducingCoefficient.denominator);\\n        if (hasSumSequence) {\\n            subtractFromValue(sumSequence, sequence.value.boundedSub(newValue), month);\\n        }\\n        sequence.value = newValue;\\n\\n        for (uint i = month.add(1); i <= sequence.lastChangedMonth; ++i) {\\n            uint newDiff = sequence.subtractDiff[i]\\n                .mul(reducingCoefficient.numerator)\\n                .div(reducingCoefficient.denominator);\\n            if (hasSumSequence) {\\n                sumSequence.subtractDiff[i] = sumSequence.subtractDiff[i]\\n                    .boundedSub(sequence.subtractDiff[i].boundedSub(newDiff));\\n            }\\n            sequence.subtractDiff[i] = newDiff;\\n        }\\n    }\\n\\n    function clear(Value storage sequence) internal {\\n        for (uint i = sequence.firstUnprocessedMonth; i <= sequence.lastChangedMonth; ++i) {\\n            if (sequence.addDiff[i] > 0) {\\n                delete sequence.addDiff[i];\\n            }\\n            if (sequence.subtractDiff[i] > 0) {\\n                delete sequence.subtractDiff[i];\\n            }\\n        }\\n        if (sequence.value > 0) {\\n            delete sequence.value;\\n        }\\n        if (sequence.firstUnprocessedMonth > 0) {\\n            delete sequence.firstUnprocessedMonth;\\n        }\\n        if (sequence.lastChangedMonth > 0) {\\n            delete sequence.lastChangedMonth;\\n        }\\n    }\\n}\"\r\n    },\r\n    \"contracts/delegation/Punisher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    Punisher.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"../Permissions.sol\\\";\\nimport \\\"../interfaces/delegation/ILocker.sol\\\";\\n\\nimport \\\"./ValidatorService.sol\\\";\\nimport \\\"./DelegationController.sol\\\";\\n\\n/**\\n * @title Punisher\\n * @dev This contract handles all slashing and forgiving operations.\\n */\\ncontract Punisher is Permissions, ILocker {\\n\\n    //        holder => tokens\\n    mapping (address => uint) private _locked;\\n\\n    /**\\n     * @dev Emitted upon slashing condition.\\n     */\\n    event Slash(\\n        uint validatorId,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Emitted upon forgive condition.\\n     */\\n    event Forgive(\\n        address wallet,\\n        uint amount\\n    );\\n\\n    /**\\n     * @dev Allows SkaleDKG contract to execute slashing on a validator and\\n     * validator's delegations by an `amount` of tokens.\\n     * \\n     * Emits a {Slash} event.\\n     * \\n     * Requirements:\\n     * \\n     * - Validator must exist.\\n     */\\n    function slash(uint validatorId, uint amount) external allow(\\\"SkaleDKG\\\") {\\n        ValidatorService validatorService = ValidatorService(contractManager.getContract(\\\"ValidatorService\\\"));\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        require(validatorService.validatorExists(validatorId), \\\"Validator does not exist\\\");\\n\\n        delegationController.confiscate(validatorId, amount);\\n\\n        emit Slash(validatorId, amount);\\n    }\\n\\n    /**\\n     * @dev Allows the Admin to forgive a slashing condition.\\n     * \\n     * Emits a {Forgive} event.\\n     * \\n     * Requirements:\\n     * \\n     * - All slashes must have been processed.\\n     */\\n    function forgive(address holder, uint amount) external onlyAdmin {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        require(!delegationController.hasUnprocessedSlashes(holder), \\\"Not all slashes were calculated\\\");\\n\\n        if (amount > _locked[holder]) {\\n            delete _locked[holder];\\n        } else {\\n            _locked[holder] = _locked[holder].sub(amount);\\n        }\\n\\n        emit Forgive(holder, amount);\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateLockedAmount}.\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateForbiddenForDelegationAmount}.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external override returns (uint) {\\n        return _getAndUpdateLockedAmount(wallet);\\n    }\\n\\n    /**\\n     * @dev Allows DelegationController contract to execute slashing of\\n     * delegations.\\n     */\\n    function handleSlash(address holder, uint amount) external allow(\\\"DelegationController\\\") {\\n        _locked[holder] = _locked[holder].add(amount);\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n    }\\n\\n    // private\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateLockedAmount}.\\n     */\\n    function _getAndUpdateLockedAmount(address wallet) private returns (uint) {\\n        DelegationController delegationController = DelegationController(\\n            contractManager.getContract(\\\"DelegationController\\\"));\\n\\n        delegationController.processAllSlashes(wallet);\\n        return _locked[wallet];\\n    }\\n\\n}\"\r\n    },\r\n    \"contracts/delegation/TokenState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TokenState.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/delegation/ILocker.sol\\\";\\nimport \\\"../Permissions.sol\\\";\\n\\nimport \\\"./DelegationController.sol\\\";\\nimport \\\"./TimeHelpers.sol\\\";\\n\\n\\n/**\\n * @title Token State\\n * @dev This contract manages lockers to control token transferability.\\n * \\n * The SKALE Network has three types of locked tokens:\\n * \\n * - Tokens that are transferrable but are currently locked into delegation with\\n * a validator.\\n * \\n * - Tokens that are not transferable from one address to another, but may be\\n * delegated to a validator `getAndUpdateLockedAmount`. This lock enforces\\n * Proof-of-Use requirements.\\n * \\n * - Tokens that are neither transferable nor delegatable\\n * `getAndUpdateForbiddenForDelegationAmount`. This lock enforces slashing.\\n */\\ncontract TokenState is Permissions, ILocker {\\n\\n    string[] private _lockers;\\n\\n    DelegationController private _delegationController;\\n\\n    /**\\n     * @dev Emitted when a contract is added to the locker.\\n     */\\n    event LockerWasAdded(\\n        string locker\\n    );\\n\\n    /**\\n     * @dev Emitted when a contract is removed from the locker.\\n     */\\n    event LockerWasRemoved(\\n        string locker\\n    );\\n\\n    /**\\n     *  @dev See {ILocker-getAndUpdateLockedAmount}.\\n     */\\n    function getAndUpdateLockedAmount(address holder) external override returns (uint) {\\n        if (address(_delegationController) == address(0)) {\\n            _delegationController =\\n                DelegationController(contractManager.getContract(\\\"DelegationController\\\"));\\n        }\\n        uint locked = 0;\\n        if (_delegationController.getDelegationsByHolderLength(holder) > 0) {\\n            // the holder ever delegated\\n            for (uint i = 0; i < _lockers.length; ++i) {\\n                ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n                locked = locked.add(locker.getAndUpdateLockedAmount(holder));\\n            }\\n        }\\n        return locked;\\n    }\\n\\n    /**\\n     * @dev See {ILocker-getAndUpdateForbiddenForDelegationAmount}.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address holder) external override returns (uint amount) {\\n        uint forbidden = 0;\\n        for (uint i = 0; i < _lockers.length; ++i) {\\n            ILocker locker = ILocker(contractManager.getContract(_lockers[i]));\\n            forbidden = forbidden.add(locker.getAndUpdateForbiddenForDelegationAmount(holder));\\n        }\\n        return forbidden;\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to remove a contract from the locker.\\n     * \\n     * Emits a {LockerWasRemoved} event.\\n     */\\n    function removeLocker(string calldata locker) external onlyOwner {\\n        uint index;\\n        bytes32 hash = keccak256(abi.encodePacked(locker));\\n        for (index = 0; index < _lockers.length; ++index) {\\n            if (keccak256(abi.encodePacked(_lockers[index])) == hash) {\\n                break;\\n            }\\n        }\\n        if (index < _lockers.length) {\\n            if (index < _lockers.length.sub(1)) {\\n                _lockers[index] = _lockers[_lockers.length.sub(1)];\\n            }\\n            delete _lockers[_lockers.length.sub(1)];\\n            _lockers.pop();\\n            emit LockerWasRemoved(locker);\\n        }\\n    }\\n\\n    function initialize(address contractManagerAddress) public override initializer {\\n        Permissions.initialize(contractManagerAddress);\\n        addLocker(\\\"DelegationController\\\");\\n        addLocker(\\\"Punisher\\\");\\n    }\\n\\n    /**\\n     * @dev Allows the Owner to add a contract to the Locker.\\n     * \\n     * Emits a {LockerWasAdded} event.\\n     */\\n    function addLocker(string memory locker) public onlyOwner {\\n        _lockers.push(locker);\\n        emit LockerWasAdded(locker);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/delegation/TimeHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    TimeHelpers.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\nimport \\\"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../thirdparty/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\n/**\\n * @title TimeHelpers\\n * @dev The contract performs time operations.\\n * \\n * These functions are used to calculate monthly and Proof of Use epochs.\\n */\\ncontract TimeHelpers {\\n    using SafeMath for uint;\\n\\n    uint constant private _ZERO_YEAR = 2020;\\n\\n    function calculateProofOfUseLockEndTime(uint month, uint lockUpPeriodDays) external view returns (uint timestamp) {\\n        timestamp = BokkyPooBahsDateTimeLibrary.addDays(monthToTimestamp(month), lockUpPeriodDays);\\n    }\\n\\n    function addDays(uint fromTimestamp, uint n) external pure returns (uint) {\\n        return BokkyPooBahsDateTimeLibrary.addDays(fromTimestamp, n);\\n    }\\n\\n    function addMonths(uint fromTimestamp, uint n) external pure returns (uint) {\\n        return BokkyPooBahsDateTimeLibrary.addMonths(fromTimestamp, n);\\n    }\\n\\n    function addYears(uint fromTimestamp, uint n) external pure returns (uint) {\\n        return BokkyPooBahsDateTimeLibrary.addYears(fromTimestamp, n);\\n    }\\n\\n    function getCurrentMonth() external view virtual returns (uint) {\\n        return timestampToMonth(now);\\n    }\\n\\n    function timestampToDay(uint timestamp) external view returns (uint) {\\n        uint wholeDays = timestamp / BokkyPooBahsDateTimeLibrary.SECONDS_PER_DAY;\\n        uint zeroDay = BokkyPooBahsDateTimeLibrary.timestampFromDate(_ZERO_YEAR, 1, 1) /\\n            BokkyPooBahsDateTimeLibrary.SECONDS_PER_DAY;\\n        require(wholeDays >= zeroDay, \\\"Timestamp is too far in the past\\\");\\n        return wholeDays - zeroDay;\\n    }\\n\\n    function timestampToYear(uint timestamp) external view virtual returns (uint) {\\n        uint year;\\n        (year, , ) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n        require(year >= _ZERO_YEAR, \\\"Timestamp is too far in the past\\\");\\n        return year - _ZERO_YEAR;\\n    }\\n\\n    function timestampToMonth(uint timestamp) public view virtual returns (uint) {\\n        uint year;\\n        uint month;\\n        (year, month, ) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n        require(year >= _ZERO_YEAR, \\\"Timestamp is too far in the past\\\");\\n        month = month.sub(1).add(year.sub(_ZERO_YEAR).mul(12));\\n        require(month > 0, \\\"Timestamp is too far in the past\\\");\\n        return month;\\n    }\\n\\n    function monthToTimestamp(uint month) public view virtual returns (uint timestamp) {\\n        uint year = _ZERO_YEAR;\\n        uint _month = month;\\n        year = year.add(_month.div(12));\\n        _month = _month.mod(12);\\n        _month = _month.add(1);\\n        return BokkyPooBahsDateTimeLibrary.timestampFromDate(year, _month, 1);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/delegation/ILocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\n/*\\n    ILocker.sol - SKALE Manager\\n    Copyright (C) 2019-Present SKALE Labs\\n    @author Dmytro Stebaiev\\n\\n    SKALE Manager is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU Affero General Public License as published\\n    by the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    SKALE Manager is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU Affero General Public License for more details.\\n\\n    You should have received a copy of the GNU Affero General Public License\\n    along with SKALE Manager.  If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity 0.6.10;\\n\\n/**\\n * @dev Interface of the Locker functions.\\n */\\ninterface ILocker {\\n    /**\\n     * @dev Returns and updates the total amount of locked tokens of a given \\n     * `holder`.\\n     */\\n    function getAndUpdateLockedAmount(address wallet) external returns (uint);\\n\\n    /**\\n     * @dev Returns and updates the total non-transferrable and un-delegatable\\n     * amount of a given `holder`.\\n     */\\n    function getAndUpdateForbiddenForDelegationAmount(address wallet) external returns (uint);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/BokkyPooBahsDateTimeLibrary.sol\": {\r\n      \"content\": \"pragma solidity ^0.6.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        uint year;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        uint year;\\n        uint month;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        uint year;\\n        uint month;\\n        uint day;\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint fromYear;\\n        uint fromMonth;\\n        uint fromDay;\\n        uint toYear;\\n        uint toMonth;\\n        uint toDay;\\n        (fromYear, fromMonth, fromDay) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (toYear, toMonth, toDay) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Operations.G2Point\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"adding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractManager\",\"outputs\":[{\"internalType\":\"contract ContractManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"deleteKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"finalizePublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"getAllPreviousPublicKeys\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Operations.G2Point[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"getCommonPublicKey\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Operations.G2Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"getPreviousPublicKey\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"x\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"internalType\":\"struct Fp2Operations.Fp2Point\",\"name\":\"y\",\"type\":\"tuple\"}],\"internalType\":\"struct G2Operations.G2Point\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"schainId\",\"type\":\"bytes32\"}],\"name\":\"initPublicKeyInProgress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractsAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"KeyStorage","CompilerVersion":"v0.6.10+commit.00c0fcaf","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]