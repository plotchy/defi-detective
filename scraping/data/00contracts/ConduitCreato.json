[{"SourceCode":"// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.14;\r\n\r\n/**\r\n * @title ConduitCreatorInterface\r\n * @author 0age\r\n * @notice ConduitCreatorInterface contains function endpoints and an error\r\n *         declaration for the ConduitCreator contract.\r\n */\r\ninterface ConduitCreatorInterface {\r\n    // Declare custom error for an invalid conduit creator.\r\n    error InvalidConduitCreator();\r\n\r\n    /**\r\n     * @notice Deploy a new conduit on a given conduit controller using a\r\n     *         supplied conduit key and assigning an initial owner for the\r\n     *         deployed conduit. Only callable by the conduit creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduitKey        The conduit key used to deploy the\r\n     *                          conduit.\r\n     * @param initialOwner      The initial owner to set for the new\r\n     *                          conduit.\r\n     *\r\n     * @return conduit The address of the newly deployed conduit.\r\n     */\r\n    function createConduit(\r\n        ConduitControllerInterface conduitController,\r\n        bytes32 conduitKey,\r\n        address initialOwner\r\n    ) external returns (address conduit);\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Only callable by the conduit\r\n     *         creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduit           The conduit for which to initiate ownership\r\n     *                          transfer.\r\n     */\r\n    function transferOwnership(\r\n        ConduitControllerInterface conduitController,\r\n        address conduit,\r\n        address newPotentialOwner\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only callable by the conduit creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduit           The conduit for which to cancel ownership\r\n     *                          transfer.\r\n     */\r\n    function cancelOwnershipTransfer(\r\n        ConduitControllerInterface conduitController,\r\n        address conduit\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title ConduitControllerInterface\r\n * @author 0age\r\n * @notice ConduitControllerInterface contains relevant external function\r\n *         interfaces for a conduit controller contract.\r\n */\r\ninterface ConduitControllerInterface {\r\n    /**\r\n     * @notice Deploy a new conduit using a supplied conduit key and assign an\r\n     *         initial owner for the deployed conduit.\r\n     *\r\n     * @param conduitKey   The conduit key used to deploy the conduit.\r\n     * @param initialOwner The initial owner to set for the new conduit.\r\n     *\r\n     * @return conduit The address of the newly deployed conduit.\r\n     */\r\n    function createConduit(bytes32 conduitKey, address initialOwner)\r\n        external\r\n        returns (address conduit);\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Once set, the new potential owner\r\n     *         may call `acceptOwnership` to claim ownership of the conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to initiate ownership transfer.\r\n     */\r\n    function transferOwnership(address conduit, address newPotentialOwner)\r\n        external;\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only the owner of the conduit in question may call this function.\r\n     *\r\n     * @param conduit The conduit for which to cancel ownership transfer.\r\n     */\r\n    function cancelOwnershipTransfer(address conduit) external;\r\n}\r\n\r\n/**\r\n * @title ConduitCreator\r\n * @author 0age\r\n * @notice ConduitCreator allows a specific account to create new conduits on\r\n           arbitrary conduit controllers.\r\n */\r\ncontract ConduitCreator is ConduitCreatorInterface {\r\n    // Set the conduit creator as an immutable argument.\r\n    address internal immutable _CONDUIT_CREATOR;\r\n\r\n    /**\r\n     * @notice Modifier to ensure that only the conduit creator can call a given\r\n     *         function.\r\n     */\r\n    modifier onlyCreator() {\r\n        // Ensure that the caller is the conduit creator.\r\n        if (msg.sender != _CONDUIT_CREATOR) {\r\n            revert InvalidConduitCreator();\r\n        }\r\n\r\n        // Proceed with function execution.\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract by setting the conduit creator.\r\n     */\r\n    constructor(address conduitCreator) {\r\n        // Set the conduit creator as an immutable argument.\r\n        _CONDUIT_CREATOR = conduitCreator;\r\n    }\r\n\r\n    /**\r\n     * @notice Deploy a new conduit on a given conduit controller using a\r\n     *         supplied conduit key and assigning an initial owner for the\r\n     *         deployed conduit. Only callable by the conduit creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduitKey        The conduit key used to deploy the\r\n     *                          conduit.\r\n     * @param initialOwner      The initial owner to set for the new\r\n     *                          conduit.\r\n     *\r\n     * @return conduit The address of the newly deployed conduit.\r\n     */\r\n    function createConduit(\r\n        ConduitControllerInterface conduitController,\r\n        bytes32 conduitKey,\r\n        address initialOwner\r\n    ) external override onlyCreator returns (address conduit) {\r\n        // Call the conduit controller to create the conduit.\r\n        conduit = conduitController.createConduit(conduitKey, initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate conduit ownership transfer by assigning a new potential\r\n     *         owner for the given conduit. Only callable by the conduit\r\n     *         creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduit           The conduit for which to initiate ownership\r\n     *                          transfer.\r\n     */\r\n    function transferOwnership(\r\n        ConduitControllerInterface conduitController,\r\n        address conduit,\r\n        address newPotentialOwner\r\n    ) external override onlyCreator {\r\n        // Call the conduit controller to transfer conduit ownership.\r\n        conduitController.transferOwnership(conduit, newPotentialOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Clear the currently set potential owner, if any, from a conduit.\r\n     *         Only callable by the conduit creator.\r\n     *\r\n     * @param conduitController The conduit controller used to deploy the\r\n     *                          conduit.\r\n     * @param conduit           The conduit for which to cancel ownership\r\n     *                          transfer.\r\n     */\r\n    function cancelOwnershipTransfer(\r\n        ConduitControllerInterface conduitController,\r\n        address conduit\r\n    ) external override onlyCreator {\r\n        // Call the conduit controller to cancel ownership transfer.\r\n        conduitController.cancelOwnershipTransfer(conduit);\r\n    }\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"conduitCreator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidConduitCreator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract ConduitControllerInterface\",\"name\":\"conduitController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"name\":\"cancelOwnershipTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ConduitControllerInterface\",\"name\":\"conduitController\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"createConduit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ConduitControllerInterface\",\"name\":\"conduitController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"conduit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPotentialOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"ConduitCreator","CompilerVersion":"v0.8.14+commit.80d49f37","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000939C8d89EBC11fA45e576215E2353673AD0bA18A","EVMVersion":"Default","Library":"","LicenseType":"MIT","Proxy":"0","Implementation":"","SwarmSource":"ipfs://cf5c5c029d4895631072969b0034e7ce0588d405885351c9962b96db8173a511"}]