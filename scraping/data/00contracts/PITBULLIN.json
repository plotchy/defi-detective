[{"SourceCode":"//https://t.me/pitbullinuportal\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.10;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}  \r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract PITBULLINU is Context, IERC20, Ownable {\r\n    mapping (address => uint) private _owned;\r\n    mapping (address => mapping (address => uint)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isBot;\r\n    uint private constant _totalSupply = 1e8 * 10**9;\r\n\r\n    string public constant name = unicode\"Pitbull Inu\";\r\n    string public constant symbol = unicode\"PIT\";\r\n    uint8 public constant decimals = 9;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n\r\n    address payable public _MarketingWallet;\r\n    address public uniswapV2Pair;\r\n    uint public _bFee = 10;\r\n    uint public _sFee = 10;\r\n    uint private _feeRate = 15;\r\n    uint public _maxBuyTokens;\r\n    uint public _maxWallet;\r\n\r\n    uint public _launchedAt;\r\n    bool private _tradingOpen;\r\n    bool private _inSwap = false;\r\n    bool private _removedTxnLimit = false;\r\n    bool public _useImpactFeeSetter = false;\r\n\r\n    struct User {\r\n        uint buy;\r\n        bool exists;\r\n    }\r\n\r\n    event FeeMultiplierUpdated(uint _multiplier);\r\n    event ImpactFeeSetterUpdated(bool _usefeesetter);\r\n    event FeeRateUpdated(uint _rate);\r\n    event FeesUpdated(uint _buy, uint _sell);\r\n    event MarketingWalletUpdated(address _taxwallet);\r\n    \r\n    modifier lockTheSwap {\r\n        _inSwap = true;\r\n        _;\r\n        _inSwap = false;\r\n    }\r\n    constructor (address payable MarketingWallet) {\r\n        _MarketingWallet = MarketingWallet;\r\n        _owned[address(this)] = _totalSupply;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[MarketingWallet] = true;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint) {\r\n        return _owned[account];\r\n    }\r\n    function transfer(address recipient, uint amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    \r\n    function totalSupply() public pure override returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\r\n       \r\n        _transfer(sender, recipient, amount);\r\n        uint allowedAmount = _allowances[sender][_msgSender()] - amount;\r\n        _approve(sender, _msgSender(), allowedAmount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint amount) private {\r\n        require(!_isBot[from] && !_isBot[to]);\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        bool isBuy = false;\r\n        if(from != owner() && to != owner()) {\r\n            if(from == uniswapV2Pair && to != address(uniswapV2Router) && !_isExcludedFromFee[to]) {\r\n                require(_tradingOpen, \"Trading not yet enabled.\");\r\n                if((_launchedAt + (1 minutes)) > block.timestamp && _removedTxnLimit ) {\r\n                    require(amount  <= _maxBuyTokens); \r\n                    require((amount + balanceOf(address(to))) <= _maxWallet); \r\n                }\r\n                isBuy = true;\r\n            }\r\n            if(!_inSwap && _tradingOpen && from != uniswapV2Pair) {\r\n                uint contractTokenBalance = balanceOf(address(this));\r\n                if(contractTokenBalance > 0) {\r\n                    if(_useImpactFeeSetter) {\r\n                        if(contractTokenBalance > (balanceOf(uniswapV2Pair) * _feeRate) / 100) {\r\n                            contractTokenBalance = (balanceOf(uniswapV2Pair) * _feeRate) / 100;\r\n                        }\r\n                    }\r\n                    swapTokensForEth(contractTokenBalance);\r\n                }\r\n                uint contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                isBuy = false;\r\n            }\r\n        }\r\n        bool takeFee = true;\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from,to,amount,takeFee,isBuy);\r\n    }\r\n\r\n    function swapTokensForEth(uint tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n        \r\n    function sendETHToFee(uint amount) private {\r\n        _MarketingWallet.transfer(amount);\r\n    }\r\n    \r\n    function _tokenTransfer(address sender, address recipient, uint amount, bool takefee, bool buy) private {\r\n        (uint fee) = _getFee(takefee, buy);\r\n        _transferStandard(sender, recipient, amount, fee);\r\n    }\r\n\r\n    function _getFee(bool takefee, bool buy) private view returns (uint) {\r\n        uint fee = 0;\r\n        if(takefee) {\r\n            if(buy) {\r\n                fee = _bFee;\r\n            } else {\r\n                fee = _sFee;\r\n            }\r\n        }\r\n        return fee;\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint amount, uint fee) private {\r\n        (uint transferAmount, uint team) = _getValues(amount, fee);\r\n        _owned[sender] = _owned[sender] - amount;\r\n        _owned[recipient] = _owned[recipient] + transferAmount; \r\n        _takeTeam(team);\r\n        emit Transfer(sender, recipient, transferAmount);\r\n    }\r\n\r\n    function _getValues(uint amount, uint teamFee) private pure returns (uint, uint) {\r\n        uint team = (amount * teamFee) / 100;\r\n        uint transferAmount = amount - team;\r\n        return (transferAmount, team);\r\n    }\r\n\r\n    function _takeTeam(uint team) private {\r\n        _owned[address(this)] = _owned[address(this)] + team;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function createPair() external onlyOwner() {\r\n        require(!_tradingOpen, \"Trading is already open\");\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n    }\r\n\r\n    function addLiq() external onlyOwner() {\r\n        require(!_tradingOpen, \"Trading is already open\");\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!_tradingOpen, \"Trading is already open\");\r\n        _tradingOpen = true;\r\n        _launchedAt = block.timestamp;\r\n        _maxBuyTokens = 2000000 * 10**9; \r\n        _maxWallet = 2000000 * 10**9; \r\n        _removedTxnLimit = true;\r\n    }\r\n\r\n    function manualswap() external {\r\n        uint contractBalance = balanceOf(address(this));\r\n        swapTokensForEth(contractBalance);\r\n    }\r\n    \r\n    function manualsend() external {\r\n        uint contractETHBalance = address(this).balance;\r\n        sendETHToFee(contractETHBalance);\r\n    }\r\n\r\n    function setEnableLimitedTxn(bool enable) external onlyOwner() {\r\n        _removedTxnLimit = enable;\r\n    }\r\n\r\n    function setMaxAmount(uint maxBuyTokens, uint maxWallet) external onlyOwner(){\r\n        if( _maxBuyTokens>= 600000 ){\r\n        _maxBuyTokens = maxBuyTokens;\r\n        _maxWallet = maxWallet;\r\n        }\r\n    }\r\n\r\n\r\n    function setFees(uint bFee, uint sFee) external onlyOwner() {\r\n        _bFee = bFee;\r\n        _sFee = sFee;\r\n        emit FeesUpdated(_bFee, _sFee);\r\n    }\r\n\r\n    function toggleImpactFee(bool onoff) external onlyOwner() {\r\n        _useImpactFeeSetter = onoff;\r\n        emit ImpactFeeSetterUpdated(_useImpactFeeSetter);\r\n    }\r\n\r\n    function updateMarketingWallet(address newAddress) external onlyOwner(){\r\n        _MarketingWallet = payable(newAddress);\r\n        emit MarketingWalletUpdated(_MarketingWallet);\r\n    }\r\n\r\n    function thisBalance() public view returns (uint) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function amountInPool() public view returns (uint) {\r\n        return balanceOf(uniswapV2Pair);\r\n    }\r\n\r\n     function setBots(address[] memory bots_) external onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            if (bots_[i] != uniswapV2Pair && bots_[i] != address(uniswapV2Router)) {\r\n                _isBot[bots_[i]] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    function delBots(address[] memory bots_) external onlyOwner() {\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            _isBot[bots_[i]] = false;\r\n        }\r\n    }\r\n\r\n    function isBot(address ad) public view returns (bool) {\r\n        return _isBot[ad];\r\n    }\r\n\r\n    \r\n\r\n}","ABI":"[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"MarketingWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_multiplier\",\"type\":\"uint256\"}],\"name\":\"FeeMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_buy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_usefeesetter\",\"type\":\"bool\"}],\"name\":\"ImpactFeeSetterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_taxwallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_MarketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_bFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxBuyTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_useImpactFeeSetter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualsend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualswap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"setBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setEnableLimitedTxn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxBuyTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thisBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"onoff\",\"type\":\"bool\"}],\"name\":\"toggleImpactFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"PITBULLINU","CompilerVersion":"v0.8.12+commit.f00d7308","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000008eb94960ff405f4209675b8d749279eae320a153","EVMVersion":"Default","Library":"","LicenseType":"None","Proxy":"0","Implementation":"","SwarmSource":"ipfs://7a2e392ececa6b231fc5ae29cbc7b23ce9489f3e37ab5a17f82656e96c996ba3"}]