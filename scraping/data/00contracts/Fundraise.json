[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see `ERC20Detailed`.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when `approve` or `transferFrom` are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * > Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an `Approval` event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a `Transfer` event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to `approve`. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Fundraiser.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\ncontract Fundable {\r\n    \r\n    function() external payable {\r\n        require(msg.data.length == 0); // only allow plain transfers\r\n    }\r\n    \r\n    function tokenBalance(address token) public view returns (uint) {\r\n        if (token == address(0x0)) {\r\n            return address(this).balance;\r\n        } else {\r\n            return IERC20(token).balanceOf(address(this));\r\n        }\r\n    }\r\n   \r\n    function send(address payable to, address token, uint amount) internal {\r\n        if (token == address(0x0)) {\r\n            to.transfer(amount);\r\n        } else {\r\n            IERC20(token).transfer(to, amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Fundraiser is Fundable {\r\n    address payable public recipient;\r\n    uint public expiration;\r\n    Grant public grant;\r\n    mapping (address => uint) disbursed;\r\n\r\n    constructor(address payable _recipient, address payable _sponsor, uint _expiration) public {\r\n        require(_expiration > now);\r\n        require(_expiration < now + 365 days);\r\n        recipient = _recipient;\r\n        expiration = _expiration;\r\n        grant = new Grant(this, _sponsor);\r\n    }\r\n\r\n    function hasExpired() public view returns (bool) {\r\n        return now >= expiration;\r\n    }\r\n    \r\n    function raised(address token) external view returns (uint) {\r\n        return tokenBalance(token) + disbursed[token] + grant.tokenBalance(token) - grant.refundable(token);\r\n    }\r\n\r\n    function disburse(address token) external {\r\n        grant.tally(token);\r\n        uint amount = tokenBalance(token);\r\n        disbursed[token] += amount;\r\n        send(recipient, token, amount);\r\n    }\r\n\r\n}\r\n\r\ncontract Grant is Fundable {\r\n    struct Tally {\r\n        uint sponsored;\r\n        uint matched;\r\n    }\r\n\r\n    Fundraiser public fundraiser;\r\n    address payable public sponsor; \r\n    mapping (address => Tally) tallied;\r\n    \r\n    constructor(Fundraiser _fundraiser, address payable _sponsor) public {\r\n        fundraiser = _fundraiser;\r\n        sponsor = _sponsor;\r\n    }\r\n    \r\n    function refund(address token) external {\r\n        tally(token);\r\n        send(sponsor, token, tokenBalance(token));\r\n    }\r\n\r\n    function refundable(address token) external view returns (uint) {\r\n        uint balance = tokenBalance(token);\r\n        Tally storage t = tallied[token];\r\n        return isTallied(t) ? balance : balance - matchable(token);\r\n    }\r\n    \r\n    function sponsored(address token) external view returns (uint) {\r\n        Tally storage t = tallied[token];\r\n        return isTallied(t) ? t.sponsored : tokenBalance(token);\r\n    }\r\n\r\n    function matched(address token) external view returns (uint) {\r\n        Tally storage t = tallied[token];\r\n        return isTallied(t) ? t.matched : matchable(token);\r\n    }\r\n    \r\n    function tally(address token) public {\r\n        require(fundraiser.hasExpired());\r\n        Tally storage t = tallied[token];\r\n        if (!isTallied(t)) {\r\n            t.sponsored = tokenBalance(token);\r\n            t.matched = matchable(token);\r\n            send(address(fundraiser), token, t.matched);\r\n        }\r\n    }\r\n    \r\n    // only valid before tally\r\n    function matchable(address token) private view returns (uint) {\r\n        uint donations = fundraiser.tokenBalance(token);\r\n        uint granted = tokenBalance(token);\r\n        return donations > granted ? granted : donations;\r\n    }\r\n\r\n    function isTallied(Tally storage t) private view returns (bool) {\r\n        return t.sponsored != 0;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/FundraiserFactory.sol\r\n\r\npragma solidity ^0.5.1;\r\n\r\n\r\ncontract FundraiserFactory {\r\n\r\n\tevent NewFundraiser(\r\n\t\taddress indexed deployer,\r\n\t\taddress indexed recipient,\r\n\t\taddress indexed sponsor,\r\n\t\tFundraiser fundraiser,\r\n\t\tGrant grant,\r\n\t\tuint expiration);\r\n    \r\n    function newFundraiser(address payable _recipient, address payable _sponsor, uint _expiration) public returns (Fundraiser fundraiser, Grant grant) {\r\n        fundraiser = new Fundraiser(_recipient, _sponsor, _expiration);\r\n        grant = fundraiser.grant();\r\n        emit NewFundraiser(msg.sender, _recipient, _sponsor, fundraiser, grant, _expiration);\r\n    }\r\n\r\n}","ABI":"[{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"raised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"disburse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"grant\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"expiration\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasExpired\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_sponsor\",\"type\":\"address\"},{\"name\":\"_expiration\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}]","ContractName":"Fundraiser","CompilerVersion":"v0.5.8+commit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c7464dbca260a8faf033460622b23467df5aea4200000000000000000000000040e29dcef9fc806a25b248df8c84102b720efa17000000000000000000000000000000000000000000000000000000005d28d8b0","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":"bzzr://ae42fe913a9d8594b447ef32f57d0c3e3e14cc7663b80c102793cb3fe763e5e4"}]